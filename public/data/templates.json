[
  {
    "id": "1",
    "slug": "two-sum",
    "template": "class Solution:\n    def twoSum(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.twoSum())"
  },
  {
    "id": "2",
    "slug": "add-two-numbers",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "3",
    "slug": "longest-substring-without-repeating-characters",
    "template": "class Solution:\n    def length_of_longest_substring(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.length_of_longest_substring())"
  },
  {
    "id": "4",
    "slug": "median-of-two-sorted-arrays",
    "template": "class Solution:\n    def findMedianSortedArrays(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMedianSortedArrays())"
  },
  {
    "id": "5",
    "slug": "longest-palindromic-substring",
    "template": "class Solution:\n    def longest_palindromic_substring(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_palindromic_substring())"
  },
  {
    "id": "6",
    "slug": "zigzag-conversion",
    "template": "class Solution:\n    def convert(s: str, numRows: int) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.convert())"
  },
  {
    "id": "8",
    "slug": "string-to-integer-atoi",
    "template": "class Solution:\n    def myAtoi(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.myAtoi())"
  },
  {
    "id": "10",
    "slug": "regular-expression-matching",
    "template": "class Solution:\n    def is_match(s: str, p: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_match())"
  },
  {
    "id": "11",
    "slug": "container-with-most-water",
    "template": "class Solution:\n    def max_area(height):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_area())"
  },
  {
    "id": "12",
    "slug": "integer-to-roman",
    "template": "class Solution:\n    def int_to_roman(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.int_to_roman())"
  },
  {
    "id": "13",
    "slug": "roman-to-integer",
    "template": "class Solution:\n    def roman_to_int(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.roman_to_int())"
  },
  {
    "id": "14",
    "slug": "longest-common-prefix",
    "template": "class Solution:\n    def longest_common_prefix(strs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_common_prefix())"
  },
  {
    "id": "15",
    "slug": "3sum",
    "template": "class Solution:\n    def threeSum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.threeSum())"
  },
  {
    "id": "16",
    "slug": "3sum-closest",
    "template": "class Solution:\n    def threeSumClosest(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.threeSumClosest())"
  },
  {
    "id": "17",
    "slug": "letter-combinations-of-a-phone-number",
    "template": "class Solution:\n    def letter_combinations(digits: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.letter_combinations())"
  },
  {
    "id": "18",
    "slug": "4sum",
    "template": "class Solution:\n    def fourSum(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fourSum())"
  },
  {
    "id": "19",
    "slug": "remove-nth-node-from-end-of-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "21",
    "slug": "merge-two-sorted-lists",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "22",
    "slug": "generate-parentheses",
    "template": "class Solution:\n    def generate_parenthesis(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.generate_parenthesis())"
  },
  {
    "id": "23",
    "slug": "merge-k-sorted-lists",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "25",
    "slug": "reverse-nodes-in-k-group",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "26",
    "slug": "remove-duplicates-from-sorted-array",
    "template": "class Solution:\n    def removeDuplicates(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeDuplicates())"
  },
  {
    "id": "27",
    "slug": "remove-element",
    "template": "class Solution:\n    def removeElement(nums, val):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeElement())"
  },
  {
    "id": "29",
    "slug": "divide-two-integers",
    "template": "class Solution:\n    def divide(dividend: int, divisor: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.divide())"
  },
  {
    "id": "30",
    "slug": "substring-with-concatenation-of-all-words",
    "template": "class Solution:\n    def findSubstring(s, words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findSubstring())"
  },
  {
    "id": "31",
    "slug": "next-permutation",
    "template": "class Solution:\n    def nextPermutation(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nextPermutation())"
  },
  {
    "id": "32",
    "slug": "longest-valid-parentheses",
    "template": "class Solution:\n    def longest_valid_parentheses(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_valid_parentheses())"
  },
  {
    "id": "33",
    "slug": "search-in-rotated-sorted-array",
    "template": "class Solution:\n    def search(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.search())"
  },
  {
    "id": "34",
    "slug": "find-first-and-last-position-of-element-in-sorted-array",
    "template": "class Solution:\n    def searchRange(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.searchRange())"
  },
  {
    "id": "35",
    "slug": "search-insert-position",
    "template": "class Solution:\n    def searchInsert(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.searchInsert())"
  },
  {
    "id": "36",
    "slug": "valid-sudoku",
    "template": "class Solution:\n    def isValidSudoku(board):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isValidSudoku())"
  },
  {
    "id": "37",
    "slug": "sudoku-solver",
    "template": "class Solution:\n    def isValid(board, row, col, c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isValid())"
  },
  {
    "id": "38",
    "slug": "count-and-say",
    "template": "class Solution:\n    def count_and_say(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_and_say())"
  },
  {
    "id": "39",
    "slug": "combination-sum",
    "template": "class Solution:\n    def combinationSum(candidates, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.combinationSum())"
  },
  {
    "id": "40",
    "slug": "combination-sum-ii",
    "template": "class Solution:\n    def combinationSum2(candidates, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.combinationSum2())"
  },
  {
    "id": "41",
    "slug": "first-missing-positive",
    "template": "class Solution:\n    def firstMissingPositive(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.firstMissingPositive())"
  },
  {
    "id": "42",
    "slug": "trapping-rain-water",
    "template": "class Solution:\n    def trap(height):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.trap())"
  },
  {
    "id": "43",
    "slug": "multiply-strings",
    "template": "class Solution:\n    def multiply(num1, num2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.multiply())"
  },
  {
    "id": "44",
    "slug": "wildcard-matching",
    "template": "class Solution:\n    def is_match(s: str, p: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_match())"
  },
  {
    "id": "45",
    "slug": "jump-game-ii",
    "template": "class Solution:\n    def jump(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.jump())"
  },
  {
    "id": "46",
    "slug": "permutations",
    "template": "class Solution:\n    def permute(nums: List[int]) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.permute())"
  },
  {
    "id": "47",
    "slug": "permutations-ii",
    "template": "class Solution:\n    def permuteUnique(nums: List[int]) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.permuteUnique())"
  },
  {
    "id": "48",
    "slug": "rotate-image",
    "template": "class Solution:\n    def rotate(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rotate())"
  },
  {
    "id": "49",
    "slug": "group-anagrams",
    "template": "class Solution:\n    def group_anagrams(strs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.group_anagrams())"
  },
  {
    "id": "51",
    "slug": "n-queens",
    "template": "class Solution:\n    def solveNQueens(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.solveNQueens())"
  },
  {
    "id": "52",
    "slug": "n-queens-ii",
    "template": "class Solution:\n    def is_safe(cols, row):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_safe())"
  },
  {
    "id": "53",
    "slug": "maximum-subarray",
    "template": "class Solution:\n    def maxSubArray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSubArray())"
  },
  {
    "id": "54",
    "slug": "spiral-matrix",
    "template": "class Solution:\n    def spiralOrder(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.spiralOrder())"
  },
  {
    "id": "55",
    "slug": "jump-game",
    "template": "class Solution:\n    def canJump(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canJump())"
  },
  {
    "id": "56",
    "slug": "merge-intervals",
    "template": "class Solution:\n    def merge(intervals):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.merge())"
  },
  {
    "id": "57",
    "slug": "insert-interval",
    "template": "class Solution:\n    def insert(intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.insert())"
  },
  {
    "id": "59",
    "slug": "spiral-matrix-ii",
    "template": "class Solution:\n    def generateMatrix(n: int) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.generateMatrix())"
  },
  {
    "id": "60",
    "slug": "permutation-sequence",
    "template": "class Solution:\n    def getPermutation(n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getPermutation())"
  },
  {
    "id": "61",
    "slug": "rotate-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "62",
    "slug": "unique-paths",
    "template": "class Solution:\n    def uniquePaths(m, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.uniquePaths())"
  },
  {
    "id": "63",
    "slug": "unique-paths-ii",
    "template": "class Solution:\n    def uniquePathsWithObstacles(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.uniquePathsWithObstacles())"
  },
  {
    "id": "64",
    "slug": "minimum-path-sum",
    "template": "class Solution:\n    def minPathSum(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minPathSum())"
  },
  {
    "id": "66",
    "slug": "plus-one",
    "template": "class Solution:\n    def plusOne(digits: List[int]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.plusOne())"
  },
  {
    "id": "68",
    "slug": "text-justification",
    "template": "class Solution:\n    def fullJustify(words, maxWidth):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fullJustify())"
  },
  {
    "id": "69",
    "slug": "sqrtx",
    "template": "class Solution:\n    def mySqrt(x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mySqrt())"
  },
  {
    "id": "70",
    "slug": "climbing-stairs",
    "template": "class Solution:\n    def climbStairs(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.climbStairs())"
  },
  {
    "id": "72",
    "slug": "edit-distance",
    "template": "class Solution:\n    def minDistance(word1: str, word2: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDistance())"
  },
  {
    "id": "73",
    "slug": "set-matrix-zeroes",
    "template": "class Solution:\n    def setZeroes(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.setZeroes())"
  },
  {
    "id": "74",
    "slug": "search-a-2d-matrix",
    "template": "class Solution:\n    def searchMatrix(matrix, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.searchMatrix())"
  },
  {
    "id": "76",
    "slug": "minimum-window-substring",
    "template": "class Solution:\n    def min_window(s, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_window())"
  },
  {
    "id": "77",
    "slug": "combinations",
    "template": "class Solution:\n    def combine(n: int, k: int) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.combine())"
  },
  {
    "id": "78",
    "slug": "subsets",
    "template": "class Solution:\n    def subsets(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.subsets())"
  },
  {
    "id": "79",
    "slug": "word-search",
    "template": "class Solution:\n    def exist(board, word):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.exist())"
  },
  {
    "id": "80",
    "slug": "remove-duplicates-from-sorted-array-ii",
    "template": "class Solution:\n    def remove_duplicates(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.remove_duplicates())"
  },
  {
    "id": "81",
    "slug": "search-in-rotated-sorted-array-ii",
    "template": "class Solution:\n    def search(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.search())"
  },
  {
    "id": "82",
    "slug": "remove-duplicates-from-sorted-list-ii",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "83",
    "slug": "remove-duplicates-from-sorted-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "84",
    "slug": "largest-rectangle-in-histogram",
    "template": "class Solution:\n    def largestRectangleArea(heights):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestRectangleArea())"
  },
  {
    "id": "85",
    "slug": "maximal-rectangle",
    "template": "class Solution:\n    def maximalRectangle(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximalRectangle())"
  },
  {
    "id": "86",
    "slug": "partition-list",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "87",
    "slug": "scramble-string",
    "template": "class Solution:\n    def isScramble(s1: str, s2: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isScramble())"
  },
  {
    "id": "88",
    "slug": "merge-sorted-array",
    "template": "class Solution:\n    def merge(nums1, m, nums2, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.merge())"
  },
  {
    "id": "89",
    "slug": "gray-code",
    "template": "class Solution:\n    def grayCode(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.grayCode())"
  },
  {
    "id": "90",
    "slug": "subsets-ii",
    "template": "class Solution:\n    def subsetsWithDup(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.subsetsWithDup())"
  },
  {
    "id": "91",
    "slug": "decode-ways",
    "template": "class Solution:\n    def numDecodings(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numDecodings())"
  },
  {
    "id": "92",
    "slug": "reverse-linked-list-ii",
    "template": "class Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverseBetween())"
  },
  {
    "id": "93",
    "slug": "restore-ip-addresses",
    "template": "class Solution:\n    def restore_ip_addresses(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.restore_ip_addresses())"
  },
  {
    "id": "94",
    "slug": "binary-tree-inorder-traversal",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "95",
    "slug": "unique-binary-search-trees-ii",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "96",
    "slug": "unique-binary-search-trees",
    "template": "class Solution:\n    def numTrees(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numTrees())"
  },
  {
    "id": "97",
    "slug": "interleaving-string",
    "template": "class Solution:\n    def isInterleave(s1, s2, s3):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isInterleave())"
  },
  {
    "id": "98",
    "slug": "validate-binary-search-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "99",
    "slug": "recover-binary-search-tree",
    "template": "class Solution:\n    def inorder(node, nodes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.inorder())"
  },
  {
    "id": "100",
    "slug": "same-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "101",
    "slug": "symmetric-tree",
    "template": "class Solution:\n    def isSymmetric(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isSymmetric())"
  },
  {
    "id": "102",
    "slug": "binary-tree-level-order-traversal",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "103",
    "slug": "binary-tree-zigzag-level-order-traversal",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "104",
    "slug": "maximum-depth-of-binary-tree",
    "template": "class Solution:\n    def maxDepth(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxDepth())"
  },
  {
    "id": "105",
    "slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "106",
    "slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "107",
    "slug": "binary-tree-level-order-traversal-ii",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "108",
    "slug": "convert-sorted-array-to-binary-search-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "109",
    "slug": "convert-sorted-list-to-binary-search-tree",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "110",
    "slug": "balanced-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "111",
    "slug": "minimum-depth-of-binary-tree",
    "template": "class Solution:\n    def minDepth(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDepth())"
  },
  {
    "id": "112",
    "slug": "path-sum",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "113",
    "slug": "path-sum-ii",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "114",
    "slug": "flatten-binary-tree-to-linked-list",
    "template": "class Solution:\n    def flatten(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.flatten())"
  },
  {
    "id": "115",
    "slug": "distinct-subsequences",
    "template": "class Solution:\n    def numDistinct(s: str, t: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numDistinct())"
  },
  {
    "id": "117",
    "slug": "populating-next-right-pointers-in-each-node-ii",
    "template": "class Solution:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "118",
    "slug": "pascals-triangle",
    "template": "class Solution:\n    def generate(numRows):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.generate())"
  },
  {
    "id": "119",
    "slug": "pascals-triangle-ii",
    "template": "class Solution:\n    def get_row(rowIndex):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_row())"
  },
  {
    "id": "120",
    "slug": "triangle",
    "template": "class Solution:\n    def minimumTotal(triangle):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumTotal())"
  },
  {
    "id": "121",
    "slug": "best-time-to-buy-and-sell-stock",
    "template": "class Solution:\n    def maxProfit(prices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProfit())"
  },
  {
    "id": "122",
    "slug": "best-time-to-buy-and-sell-stock-ii",
    "template": "class Solution:\n    def max_profit(prices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_profit())"
  },
  {
    "id": "123",
    "slug": "best-time-to-buy-and-sell-stock-iii",
    "template": "class Solution:\n    def maxProfit(prices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProfit())"
  },
  {
    "id": "124",
    "slug": "binary-tree-maximum-path-sum",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "126",
    "slug": "word-ladder-ii",
    "template": "class Solution:\n    def findLadders(beginWord, endWord, wordList):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLadders())"
  },
  {
    "id": "127",
    "slug": "word-ladder",
    "template": "class Solution:\n    def ladderLength(beginWord, endWord, wordList):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.ladderLength())"
  },
  {
    "id": "128",
    "slug": "longest-consecutive-sequence",
    "template": "class Solution:\n    def longest_consecutive(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_consecutive())"
  },
  {
    "id": "129",
    "slug": "sum-root-to-leaf-numbers",
    "template": "class Solution:\n    def sumNumbers(root, cur=0):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumNumbers())"
  },
  {
    "id": "130",
    "slug": "surrounded-regions",
    "template": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.solve())"
  },
  {
    "id": "131",
    "slug": "palindrome-partitioning",
    "template": "class Solution:\n    def isPalindrome(s, start, end):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isPalindrome())"
  },
  {
    "id": "132",
    "slug": "palindrome-partitioning-ii",
    "template": "class Solution:\n    def minCut(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCut())"
  },
  {
    "id": "133",
    "slug": "clone-graph",
    "template": "class Solution:\n    def __init__(self, val=0, neighbors=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "134",
    "slug": "gas-station",
    "template": "class Solution:\n    def can_complete_circuit(gas, cost):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_complete_circuit())"
  },
  {
    "id": "135",
    "slug": "candy",
    "template": "class Solution:\n    def min_candies(ratings):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_candies())"
  },
  {
    "id": "136",
    "slug": "single-number",
    "template": "class Solution:\n    def singleNumber(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.singleNumber())"
  },
  {
    "id": "137",
    "slug": "single-number-ii",
    "template": "class Solution:\n    def singleNumber(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.singleNumber())"
  },
  {
    "id": "138",
    "slug": "copy-list-with-random-pointer",
    "template": "class Solution:\n    def __init__(self, val, next=None, random=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "139",
    "slug": "word-break",
    "template": "class Solution:\n    def word_break(s, word_dict):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.word_break())"
  },
  {
    "id": "140",
    "slug": "word-break-ii",
    "template": "class Solution:\n    def word_break(s, word_dict):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.word_break())"
  },
  {
    "id": "141",
    "slug": "linked-list-cycle",
    "template": "class Solution:\n    def hasCycle(head):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.hasCycle())"
  },
  {
    "id": "142",
    "slug": "linked-list-cycle-ii",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "143",
    "slug": "reorder-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "144",
    "slug": "binary-tree-preorder-traversal",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "145",
    "slug": "binary-tree-postorder-traversal",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "146",
    "slug": "lru-cache",
    "template": "class Solution:\n    def __init__(self, capacity: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "147",
    "slug": "insertion-sort-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "148",
    "slug": "sort-list",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "149",
    "slug": "max-points-on-a-line",
    "template": "class Solution:\n    def maxPoints(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxPoints())"
  },
  {
    "id": "150",
    "slug": "evaluate-reverse-polish-notation",
    "template": "class Solution:\n    def evalRPN(tokens):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.evalRPN())"
  },
  {
    "id": "151",
    "slug": "reverse-words-in-a-string",
    "template": "class Solution:\n    def reverseWords(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverseWords())"
  },
  {
    "id": "152",
    "slug": "maximum-product-subarray",
    "template": "class Solution:\n    def maxProduct(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProduct())"
  },
  {
    "id": "153",
    "slug": "find-minimum-in-rotated-sorted-array",
    "template": "class Solution:\n    def find_min(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_min())"
  },
  {
    "id": "154",
    "slug": "find-minimum-in-rotated-sorted-array-ii",
    "template": "class Solution:\n    def findMin(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMin())"
  },
  {
    "id": "155",
    "slug": "min-stack",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "156",
    "slug": "binary-tree-upside-down",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "157",
    "slug": "read-n-characters-given-read4",
    "template": "class Solution:\n    def read4(buf4: List[str]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.read4())"
  },
  {
    "id": "158",
    "slug": "read-n-characters-given-read4-ii-call-multiple-times",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "159",
    "slug": "longest-substring-with-at-most-two-distinct-characters",
    "template": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lengthOfLongestSubstringTwoDistinct())"
  },
  {
    "id": "160",
    "slug": "intersection-of-two-linked-lists",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "161",
    "slug": "one-edit-distance",
    "template": "class Solution:\n    def isOneEditDistance(s: str, t: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isOneEditDistance())"
  },
  {
    "id": "162",
    "slug": "find-peak-element",
    "template": "class Solution:\n    def findPeakElement(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findPeakElement())"
  },
  {
    "id": "163",
    "slug": "missing-ranges",
    "template": "class Solution:\n    def find_missing_ranges(nums: List[int], lower: int, upper: int) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_missing_ranges())"
  },
  {
    "id": "164",
    "slug": "maximum-gap",
    "template": "class Solution:\n    def maximumGap(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumGap())"
  },
  {
    "id": "165",
    "slug": "compare-version-numbers",
    "template": "class Solution:\n    def compare_version(version1, version2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.compare_version())"
  },
  {
    "id": "166",
    "slug": "fraction-to-recurring-decimal",
    "template": "class Solution:\n    def fraction_to_decimal(numerator, denominator):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fraction_to_decimal())"
  },
  {
    "id": "167",
    "slug": "two-sum-ii-input-array-is-sorted",
    "template": "class Solution:\n    def twoSum(numbers, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.twoSum())"
  },
  {
    "id": "169",
    "slug": "majority-element",
    "template": "class Solution:\n    def majority_element(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.majority_element())"
  },
  {
    "id": "170",
    "slug": "two-sum-iii-data-structure-design",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "173",
    "slug": "binary-search-tree-iterator",
    "template": "class Solution:\n    def __init__(self, root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "174",
    "slug": "dungeon-game",
    "template": "class Solution:\n    def calculateMinimumHP(dungeon):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.calculateMinimumHP())"
  },
  {
    "id": "179",
    "slug": "largest-number",
    "template": "class Solution:\n    def largestNumber(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestNumber())"
  },
  {
    "id": "186",
    "slug": "reverse-words-in-a-string-ii",
    "template": "class Solution:\n    def reverseWords(s: list) -> None:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverseWords())"
  },
  {
    "id": "187",
    "slug": "repeated-dna-sequences",
    "template": "class Solution:\n    def findRepeatedDnaSequences(s: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findRepeatedDnaSequences())"
  },
  {
    "id": "188",
    "slug": "best-time-to-buy-and-sell-stock-iv",
    "template": "class Solution:\n    def maxProfit(k, prices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProfit())"
  },
  {
    "id": "189",
    "slug": "rotate-array",
    "template": "class Solution:\n    def rotate(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rotate())"
  },
  {
    "id": "190",
    "slug": "reverse-bits",
    "template": "class Solution:\n    def reverse_bits(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverse_bits())"
  },
  {
    "id": "191",
    "slug": "number-of-1-bits",
    "template": "class Solution:\n    def hamming_weight(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.hamming_weight())"
  },
  {
    "id": "194",
    "slug": "title-slug",
    "template": "class Solution:\n    def transpose(content):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.transpose())"
  },
  {
    "id": "198",
    "slug": "house-robber",
    "template": "class Solution:\n    def rob(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rob())"
  },
  {
    "id": "199",
    "slug": "binary-tree-right-side-view",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "200",
    "slug": "number-of-islands",
    "template": "class Solution:\n    def dfs(grid, i, j):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "202",
    "slug": "happy-number",
    "template": "class Solution:\n    def get_next(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_next())"
  },
  {
    "id": "203",
    "slug": "remove-linked-list-elements",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "204",
    "slug": "count-primes",
    "template": "class Solution:\n    def countPrimes(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countPrimes())"
  },
  {
    "id": "205",
    "slug": "isomorphic-strings",
    "template": "class Solution:\n    def is_isomorphic(s: str, t: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_isomorphic())"
  },
  {
    "id": "206",
    "slug": "reverse-linked-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "207",
    "slug": "course-schedule",
    "template": "class Solution:\n    def canFinish(numCourses, prerequisites):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canFinish())"
  },
  {
    "id": "208",
    "slug": "implement-trie-prefix-tree",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "209",
    "slug": "minimum-size-subarray-sum",
    "template": "class Solution:\n    def minSubArrayLen(target: int, nums: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSubArrayLen())"
  },
  {
    "id": "210",
    "slug": "course-schedule-ii",
    "template": "class Solution:\n    def findOrder(numCourses, prerequisites):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findOrder())"
  },
  {
    "id": "211",
    "slug": "design-add-and-search-words-data-structure",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "212",
    "slug": "word-search-ii",
    "template": "class Solution:\n    def findWords(board, words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findWords())"
  },
  {
    "id": "213",
    "slug": "house-robber-ii",
    "template": "class Solution:\n    def rob(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rob())"
  },
  {
    "id": "214",
    "slug": "shortest-palindrome",
    "template": "class Solution:\n    def shortest_palindrome(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_palindrome())"
  },
  {
    "id": "216",
    "slug": "combination-sum-iii",
    "template": "class Solution:\n    def combinationSum3(k, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.combinationSum3())"
  },
  {
    "id": "217",
    "slug": "contains-duplicate",
    "template": "class Solution:\n    def containsDuplicate(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.containsDuplicate())"
  },
  {
    "id": "218",
    "slug": "the-skyline-problem",
    "template": "class Solution:\n    def getSkyline(buildings):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getSkyline())"
  },
  {
    "id": "219",
    "slug": "contains-duplicate-ii",
    "template": "class Solution:\n    def containsNearbyDuplicate(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.containsNearbyDuplicate())"
  },
  {
    "id": "220",
    "slug": "contains-duplicate-iii",
    "template": "class Solution:\n    def containsNearbyAlmostDuplicate(nums, k, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.containsNearbyAlmostDuplicate())"
  },
  {
    "id": "221",
    "slug": "maximal-square",
    "template": "class Solution:\n    def maximalSquare(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximalSquare())"
  },
  {
    "id": "222",
    "slug": "count-complete-tree-nodes",
    "template": "class Solution:\n    def __init__(self, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "223",
    "slug": "rectangle-area",
    "template": "class Solution:\n    def total_area(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.total_area())"
  },
  {
    "id": "224",
    "slug": "basic-calculator",
    "template": "class Solution:\n    def calculate(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.calculate())"
  },
  {
    "id": "225",
    "slug": "implement-stack-using-queues",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "226",
    "slug": "invert-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "227",
    "slug": "basic-calculator-ii",
    "template": "class Solution:\n    def calculate(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.calculate())"
  },
  {
    "id": "228",
    "slug": "summary-ranges",
    "template": "class Solution:\n    def find_ranges(nums: List[int]) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_ranges())"
  },
  {
    "id": "229",
    "slug": "majority-element-ii",
    "template": "class Solution:\n    def majorityElement(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.majorityElement())"
  },
  {
    "id": "230",
    "slug": "kth-smallest-element-in-a-bst",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "231",
    "slug": "power-of-two",
    "template": "class Solution:\n    def is_power_of_two(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_power_of_two())"
  },
  {
    "id": "232",
    "slug": "implement-queue-using-stacks",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "233",
    "slug": "number-of-digit-one",
    "template": "class Solution:\n    def countDigitOne(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countDigitOne())"
  },
  {
    "id": "234",
    "slug": "palindrome-linked-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "235",
    "slug": "lowest-common-ancestor-of-a-binary-search-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "236",
    "slug": "lowest-common-ancestor-of-a-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "237",
    "slug": "delete-node-in-a-linked-list",
    "template": "class Solution:\n    def deleteNode(node):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.deleteNode())"
  },
  {
    "id": "238",
    "slug": "product-of-array-except-self",
    "template": "class Solution:\n    def productExceptSelf(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.productExceptSelf())"
  },
  {
    "id": "239",
    "slug": "sliding-window-maximum",
    "template": "class Solution:\n    def maxSlidingWindow(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSlidingWindow())"
  },
  {
    "id": "240",
    "slug": "search-a-2d-matrix-ii",
    "template": "class Solution:\n    def searchMatrix(matrix, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.searchMatrix())"
  },
  {
    "id": "241",
    "slug": "different-ways-to-add-parentheses",
    "template": "class Solution:\n    def diffWaysToCompute(input: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.diffWaysToCompute())"
  },
  {
    "id": "242",
    "slug": "valid-anagram",
    "template": "class Solution:\n    def is_anagram(s, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_anagram())"
  },
  {
    "id": "243",
    "slug": "shortest-word-distance",
    "template": "class Solution:\n    def shortestDistance(wordsDict, word1, word2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestDistance())"
  },
  {
    "id": "244",
    "slug": "shortest-word-distance-ii",
    "template": "class Solution:\n    def __init__(self, wordsDict):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "245",
    "slug": "shortest-word-distance-iii",
    "template": "class Solution:\n    def shortest_distance(words_dict, word1, word2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_distance())"
  },
  {
    "id": "247",
    "slug": "strobogrammatic-number-ii",
    "template": "class Solution:\n    def findStrobogrammatic(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findStrobogrammatic())"
  },
  {
    "id": "248",
    "slug": "strobogrammatic-number-iii",
    "template": "class Solution:\n    def strobogrammaticInRange(low, high):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.strobogrammaticInRange())"
  },
  {
    "id": "249",
    "slug": "group-shifted-strings",
    "template": "class Solution:\n    def groupStrings(strings):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.groupStrings())"
  },
  {
    "id": "250",
    "slug": "count-univalue-subtrees",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "251",
    "slug": "flatten-2d-vector",
    "template": "class Solution:\n    def __init__(self, vec):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "252",
    "slug": "meeting-rooms",
    "template": "class Solution:\n    def can_attend_meetings(intervals):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_attend_meetings())"
  },
  {
    "id": "253",
    "slug": "meeting-rooms-ii",
    "template": "class Solution:\n    def minMeetingRooms(intervals):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minMeetingRooms())"
  },
  {
    "id": "254",
    "slug": "factor-combinations",
    "template": "class Solution:\n    def getFactors(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getFactors())"
  },
  {
    "id": "256",
    "slug": "paint-house",
    "template": "class Solution:\n    def minCost(costs: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCost())"
  },
  {
    "id": "257",
    "slug": "binary-tree-paths",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "259",
    "slug": "3sum-smaller",
    "template": "class Solution:\n    def threeSumSmaller(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.threeSumSmaller())"
  },
  {
    "id": "260",
    "slug": "single-number-iii",
    "template": "class Solution:\n    def singleNumber(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.singleNumber())"
  },
  {
    "id": "261",
    "slug": "graph-valid-tree",
    "template": "class Solution:\n    def isTree(n: int, edges: List[List[int]]) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isTree())"
  },
  {
    "id": "264",
    "slug": "ugly-number-ii",
    "template": "class Solution:\n    def nthUglyNumber(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nthUglyNumber())"
  },
  {
    "id": "265",
    "slug": "paint-house-ii",
    "template": "class Solution:\n    def min_cost(costs: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_cost())"
  },
  {
    "id": "266",
    "slug": "palindrome-permutation",
    "template": "class Solution:\n    def canPermutePalindrome(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canPermutePalindrome())"
  },
  {
    "id": "267",
    "slug": "palindrome-permutation-ii",
    "template": "class Solution:\n    def generatePalindromes(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.generatePalindromes())"
  },
  {
    "id": "268",
    "slug": "missing-number",
    "template": "class Solution:\n    def missingNumber(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.missingNumber())"
  },
  {
    "id": "269",
    "slug": "alien-dictionary",
    "template": "class Solution:\n    def alienOrder(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.alienOrder())"
  },
  {
    "id": "270",
    "slug": "closest-binary-search-tree-value",
    "template": "class Solution:\n    def closestValue(self, root: TreeNode, target: float) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.closestValue())"
  },
  {
    "id": "271",
    "slug": "encode-and-decode-strings",
    "template": "class Solution:\n    def encode(strs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.encode())"
  },
  {
    "id": "272",
    "slug": "closest-binary-search-tree-value-ii",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "273",
    "slug": "integer-to-english-words",
    "template": "class Solution:\n    def numberToWords(self, num: int) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberToWords())"
  },
  {
    "id": "274",
    "slug": "h-index",
    "template": "class Solution:\n    def hIndex(citations: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.hIndex())"
  },
  {
    "id": "276",
    "slug": "paint-fence",
    "template": "class Solution:\n    def numWays(n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numWays())"
  },
  {
    "id": "277",
    "slug": "find-the-celebrity",
    "template": "class Solution:\n    def knows(a: int, b:int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.knows())"
  },
  {
    "id": "278",
    "slug": "first-bad-version",
    "template": "class Solution:\n    def first_bad_version(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.first_bad_version())"
  },
  {
    "id": "279",
    "slug": "perfect-squares",
    "template": "class Solution:\n    def numSquares(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSquares())"
  },
  {
    "id": "280",
    "slug": "wiggle-sort",
    "template": "class Solution:\n    def wiggleSort(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.wiggleSort())"
  },
  {
    "id": "281",
    "slug": "zigzag-iterator",
    "template": "class Solution:\n    def __init__(self, v1: List[int], v2: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "282",
    "slug": "expression-add-operators",
    "template": "class Solution:\n    def addOperators(num: str, target: int) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.addOperators())"
  },
  {
    "id": "283",
    "slug": "move-zeroes",
    "template": "class Solution:\n    def moveZeroes(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.moveZeroes())"
  },
  {
    "id": "284",
    "slug": "peeking-iterator",
    "template": "class Solution:\n    def __init__(self, iterator):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "285",
    "slug": "inorder-successor-in-bst",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "286",
    "slug": "walls-and-gates",
    "template": "class Solution:\n    def wallsAndGates(rooms):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.wallsAndGates())"
  },
  {
    "id": "287",
    "slug": "find-the-duplicate-number",
    "template": "class Solution:\n    def findDuplicate(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findDuplicate())"
  },
  {
    "id": "288",
    "slug": "unique-word-abbreviation",
    "template": "class Solution:\n    def __init__(self, dictionary):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "289",
    "slug": "game-of-life",
    "template": "class Solution:\n    def gameOfLife(board):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.gameOfLife())"
  },
  {
    "id": "290",
    "slug": "word-pattern",
    "template": "class Solution:\n    def word_pattern(pattern, s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.word_pattern())"
  },
  {
    "id": "291",
    "slug": "word-pattern-ii",
    "template": "class Solution:\n    def wordPatternMatch(pattern: str, s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.wordPatternMatch())"
  },
  {
    "id": "292",
    "slug": "nim-game",
    "template": "class Solution:\n    def canWinNim(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canWinNim())"
  },
  {
    "id": "293",
    "slug": "flip-game",
    "template": "class Solution:\n    def generate_possible_next_moves(current_state):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.generate_possible_next_moves())"
  },
  {
    "id": "294",
    "slug": "flip-game-ii",
    "template": "class Solution:\n    def canWin(currentState: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canWin())"
  },
  {
    "id": "295",
    "slug": "find-median-from-data-stream",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "296",
    "slug": "best-meeting-point",
    "template": "class Solution:\n    def minTotalDistance(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minTotalDistance())"
  },
  {
    "id": "297",
    "slug": "serialize-and-deserialize-binary-tree",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "298",
    "slug": "binary-tree-longest-consecutive-sequence",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "299",
    "slug": "bulls-and-cows",
    "template": "class Solution:\n    def get_hint(secret: str, guess: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_hint())"
  },
  {
    "id": "300",
    "slug": "longest-increasing-subsequence",
    "template": "class Solution:\n    def lengthOfLIS(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lengthOfLIS())"
  },
  {
    "id": "301",
    "slug": "remove-invalid-parentheses",
    "template": "class Solution:\n    def removeInvalidParentheses(self, s: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeInvalidParentheses())"
  },
  {
    "id": "302",
    "slug": "smallest-rectangle-enclosing-black-pixels",
    "template": "class Solution:\n    def minArea(image, x, y):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minArea())"
  },
  {
    "id": "303",
    "slug": "range-sum-query-immutable",
    "template": "class Solution:\n    def __init__(self, nums: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "304",
    "slug": "range-sum-query-2d-immutable",
    "template": "class Solution:\n    def __init__(self, matrix: List[List[int]]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "306",
    "slug": "additive-number",
    "template": "class Solution:\n    def isAdditiveNumber(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isAdditiveNumber())"
  },
  {
    "id": "307",
    "slug": "range-sum-query-mutable",
    "template": "class Solution:\n    def __init__(self, nums: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "308",
    "slug": "range-sum-query-2d-mutable",
    "template": "class Solution:\n    def __init__(self, matrix: List[List[int]]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "309",
    "slug": "best-time-to-buy-and-sell-stock-with-cooldown",
    "template": "class Solution:\n    def maxProfit(prices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProfit())"
  },
  {
    "id": "310",
    "slug": "minimum-height-trees",
    "template": "class Solution:\n    def find_min_height_trees(n: int, edges: List[List[int]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_min_height_trees())"
  },
  {
    "id": "311",
    "slug": "sparse-matrix-multiplication",
    "template": "class Solution:\n    def multiply(mat1, mat2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.multiply())"
  },
  {
    "id": "312",
    "slug": "burst-balloons",
    "template": "class Solution:\n    def maxCoins(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxCoins())"
  },
  {
    "id": "313",
    "slug": "super-ugly-number",
    "template": "class Solution:\n    def nthSuperUglyNumber(n, primes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nthSuperUglyNumber())"
  },
  {
    "id": "314",
    "slug": "binary-tree-vertical-order-traversal",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "315",
    "slug": "count-of-smaller-numbers-after-self",
    "template": "class Solution:\n    def countSmaller(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countSmaller())"
  },
  {
    "id": "316",
    "slug": "remove-duplicate-letters",
    "template": "class Solution:\n    def removeDuplicateLetters(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeDuplicateLetters())"
  },
  {
    "id": "317",
    "slug": "shortest-distance-from-all-buildings",
    "template": "class Solution:\n    def shortestDistance(grid: list[list[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestDistance())"
  },
  {
    "id": "318",
    "slug": "maximum-product-of-word-lengths",
    "template": "class Solution:\n    def maxProduct(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProduct())"
  },
  {
    "id": "319",
    "slug": "bulb-switcher",
    "template": "class Solution:\n    def bulbSwitch(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.bulbSwitch())"
  },
  {
    "id": "320",
    "slug": "generalized-abbreviation",
    "template": "class Solution:\n    def generateAbbreviations(word):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.generateAbbreviations())"
  },
  {
    "id": "322",
    "slug": "coin-change",
    "template": "class Solution:\n    def coinChange(coins, amount):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.coinChange())"
  },
  {
    "id": "323",
    "slug": "number-of-connected-components-in-an-undirected-graph",
    "template": "class Solution:\n    def countComponents(n, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countComponents())"
  },
  {
    "id": "324",
    "slug": "wiggle-sort-ii",
    "template": "class Solution:\n    def wiggleSort(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.wiggleSort())"
  },
  {
    "id": "325",
    "slug": "maximum-size-subarray-sum-equals-k",
    "template": "class Solution:\n    def maxSubArrayLen(nums: List[int], k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSubArrayLen())"
  },
  {
    "id": "327",
    "slug": "count-of-range-sum",
    "template": "class Solution:\n    def countRangeSum(nums, lower, upper):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countRangeSum())"
  },
  {
    "id": "328",
    "slug": "odd-even-linked-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "329",
    "slug": "longest-increasing-path-in-a-matrix",
    "template": "class Solution:\n    def dfs(matrix, memo, i, j):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "330",
    "slug": "patching-array",
    "template": "class Solution:\n    def minPatches(nums, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minPatches())"
  },
  {
    "id": "332",
    "slug": "reconstruct-itinerary",
    "template": "class Solution:\n    def findItinerary(tickets):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findItinerary())"
  },
  {
    "id": "333",
    "slug": "largest-bst-subtree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "335",
    "slug": "self-crossing",
    "template": "class Solution:\n    def is_path_crossing(distance):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_path_crossing())"
  },
  {
    "id": "336",
    "slug": "palindrome-pairs",
    "template": "class Solution:\n    def palindrome_pairs(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.palindrome_pairs())"
  },
  {
    "id": "337",
    "slug": "house-robber-iii",
    "template": "class Solution:\n    def rob(self, root: TreeNode) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rob())"
  },
  {
    "id": "338",
    "slug": "counting-bits",
    "template": "class Solution:\n    def countBits(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countBits())"
  },
  {
    "id": "340",
    "slug": "longest-substring-with-at-most-k-distinct-characters",
    "template": "class Solution:\n    def length_of_longest_substring_k_distinct(s: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.length_of_longest_substring_k_distinct())"
  },
  {
    "id": "341",
    "slug": "flatten-nested-list-iterator",
    "template": "class Solution:\n    def __init__(self, nestedList):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "343",
    "slug": "integer-break",
    "template": "class Solution:\n    def integer_break(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.integer_break())"
  },
  {
    "id": "346",
    "slug": "moving-average-from-data-stream",
    "template": "class Solution:\n    def __init__(self, size: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "347",
    "slug": "top-k-frequent-elements",
    "template": "class Solution:\n    def k_most_frequent(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.k_most_frequent())"
  },
  {
    "id": "348",
    "slug": "design-tic-tac-toe",
    "template": "class Solution:\n    def __init__(self, n: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "349",
    "slug": "intersection-of-two-arrays",
    "template": "class Solution:\n    def intersection(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.intersection())"
  },
  {
    "id": "350",
    "slug": "intersection-of-two-arrays-ii",
    "template": "class Solution:\n    def intersect(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.intersect())"
  },
  {
    "id": "351",
    "slug": "android-unlock-patterns",
    "template": "class Solution:\n    def numberOfPatterns(m: int, n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfPatterns())"
  },
  {
    "id": "352",
    "slug": "data-stream-as-disjoint-intervals",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "353",
    "slug": "design-snake-game",
    "template": "class Solution:\n    def __init__(self, width: int, height: int, food: List[List[int]]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "354",
    "slug": "russian-doll-envelopes",
    "template": "class Solution:\n    def max_envelopes(envelopes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_envelopes())"
  },
  {
    "id": "355",
    "slug": "design-twitter",
    "template": "class Solution:\n    def __init__(self, time, tweetId):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "356",
    "slug": "line-reflection",
    "template": "class Solution:\n    def isReflected(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isReflected())"
  },
  {
    "id": "357",
    "slug": "count-numbers-with-unique-digits",
    "template": "class Solution:\n    def countNumbersWithUniqueDigits(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countNumbersWithUniqueDigits())"
  },
  {
    "id": "358",
    "slug": "rearrange-string-k-distance-apart",
    "template": "class Solution:\n    def rearrange_string(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rearrange_string())"
  },
  {
    "id": "359",
    "slug": "logger-rate-limiter",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "360",
    "slug": "sort-transformed-array",
    "template": "class Solution:\n    def sort_transformed_array(nums, a, b, c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sort_transformed_array())"
  },
  {
    "id": "361",
    "slug": "bomb-enemy",
    "template": "class Solution:\n    def maxKilledEnemies(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxKilledEnemies())"
  },
  {
    "id": "362",
    "slug": "design-hit-counter",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "363",
    "slug": "max-sum-of-rectangle-no-larger-than-k",
    "template": "class Solution:\n    def maxSumSubmatrix(matrix, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSumSubmatrix())"
  },
  {
    "id": "364",
    "slug": "nested-list-weight-sum-ii",
    "template": "class Solution:\n    def depthSumInverse(nestedList: List[NestedInteger]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.depthSumInverse())"
  },
  {
    "id": "365",
    "slug": "water-and-jug-problem",
    "template": "class Solution:\n    def canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canMeasureWater())"
  },
  {
    "id": "366",
    "slug": "find-leaves-of-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "368",
    "slug": "largest-divisible-subset",
    "template": "class Solution:\n    def largestDivisibleSubset(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestDivisibleSubset())"
  },
  {
    "id": "369",
    "slug": "plus-one-linked-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "370",
    "slug": "range-addition",
    "template": "class Solution:\n    def get_updated_array(length, updates):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_updated_array())"
  },
  {
    "id": "371",
    "slug": "sum-of-two-integers",
    "template": "class Solution:\n    def add(a, b):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.add())"
  },
  {
    "id": "372",
    "slug": "super-pow",
    "template": "class Solution:\n    def powmod(a, b):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.powmod())"
  },
  {
    "id": "373",
    "slug": "find-k-pairs-with-smallest-sums",
    "template": "class Solution:\n    def kSmallestPairs(nums1, nums2, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kSmallestPairs())"
  },
  {
    "id": "374",
    "slug": "guess-number-higher-or-lower",
    "template": "class Solution:\n    def guessNumber(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.guessNumber())"
  },
  {
    "id": "375",
    "slug": "guess-number-higher-or-lower-ii",
    "template": "class Solution:\n    def getMoneyAmount(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getMoneyAmount())"
  },
  {
    "id": "376",
    "slug": "wiggle-subsequence",
    "template": "class Solution:\n    def wiggleMaxLength(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.wiggleMaxLength())"
  },
  {
    "id": "377",
    "slug": "combination-sum-iv",
    "template": "class Solution:\n    def combination_sum(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.combination_sum())"
  },
  {
    "id": "378",
    "slug": "kth-smallest-element-in-a-sorted-matrix",
    "template": "class Solution:\n    def kthSmallest(matrix, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kthSmallest())"
  },
  {
    "id": "379",
    "slug": "design-phone-directory",
    "template": "class Solution:\n    def __init__(self, maxNumbers: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "380",
    "slug": "insert-delete-getrandom-o1",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "381",
    "slug": "insert-delete-getrandom-o1-duplicates-allowed",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "382",
    "slug": "linked-list-random-node",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "383",
    "slug": "ransom-note",
    "template": "class Solution:\n    def can_construct(ransom_note, magazine):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_construct())"
  },
  {
    "id": "384",
    "slug": "shuffle-an-array",
    "template": "class Solution:\n    def __init__(self, nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "385",
    "slug": "mini-parser",
    "template": "class Solution:\n    def __init__(self, value=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "386",
    "slug": "lexicographical-numbers",
    "template": "class Solution:\n    def lexicographical_order_helper(current, n, result):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lexicographical_order_helper())"
  },
  {
    "id": "387",
    "slug": "first-unique-character-in-a-string",
    "template": "class Solution:\n    def firstUniqChar(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.firstUniqChar())"
  },
  {
    "id": "391",
    "slug": "perfect-rectangle",
    "template": "class Solution:\n    def isRectangleCover(rectangles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isRectangleCover())"
  },
  {
    "id": "392",
    "slug": "is-subsequence",
    "template": "class Solution:\n    def is_subsequence(s, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_subsequence())"
  },
  {
    "id": "393",
    "slug": "utf-8-validation",
    "template": "class Solution:\n    def validUtf8(data):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.validUtf8())"
  },
  {
    "id": "394",
    "slug": "decode-string",
    "template": "class Solution:\n    def decodeString(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decodeString())"
  },
  {
    "id": "395",
    "slug": "longest-substring-with-at-least-k-repeating-characters",
    "template": "class Solution:\n    def longestSubstring(s: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestSubstring())"
  },
  {
    "id": "396",
    "slug": "rotate-function",
    "template": "class Solution:\n    def maxRotateFunction(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxRotateFunction())"
  },
  {
    "id": "397",
    "slug": "integer-replacement",
    "template": "class Solution:\n    def min_operations(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "398",
    "slug": "random-pick-index",
    "template": "class Solution:\n    def __init__(self, nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "399",
    "slug": "evaluate-division",
    "template": "class Solution:\n    def dfs(s1, s2, graph):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "400",
    "slug": "nth-digit",
    "template": "class Solution:\n    def findNthDigit(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findNthDigit())"
  },
  {
    "id": "401",
    "slug": "binary-watch",
    "template": "class Solution:\n    def readBinaryWatch(turnedOn: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.readBinaryWatch())"
  },
  {
    "id": "402",
    "slug": "remove-k-digits",
    "template": "class Solution:\n    def remove_k_digits(num, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.remove_k_digits())"
  },
  {
    "id": "403",
    "slug": "frog-jump",
    "template": "class Solution:\n    def can_cross(stones):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_cross())"
  },
  {
    "id": "404",
    "slug": "sum-of-left-leaves",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "407",
    "slug": "trapping-rain-water-ii",
    "template": "class Solution:\n    def trapRainWater(heightMap):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.trapRainWater())"
  },
  {
    "id": "408",
    "slug": "valid-word-abbreviation",
    "template": "class Solution:\n    def validWordAbbreviation(word, abbr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.validWordAbbreviation())"
  },
  {
    "id": "410",
    "slug": "split-array-largest-sum",
    "template": "class Solution:\n    def splitArray(nums, m):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.splitArray())"
  },
  {
    "id": "411",
    "slug": "minimum-unique-word-abbreviation",
    "template": "class Solution:\n    def abbreviate(s, k, i):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.abbreviate())"
  },
  {
    "id": "412",
    "slug": "fizz-buzz",
    "template": "class Solution:\n    def fizzBuzz(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fizzBuzz())"
  },
  {
    "id": "413",
    "slug": "arithmetic-slices",
    "template": "class Solution:\n    def numberOfArithmeticSlices(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfArithmeticSlices())"
  },
  {
    "id": "414",
    "slug": "third-maximum-number",
    "template": "class Solution:\n    def third_max(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.third_max())"
  },
  {
    "id": "416",
    "slug": "partition-equal-subset-sum",
    "template": "class Solution:\n    def canPartition(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canPartition())"
  },
  {
    "id": "417",
    "slug": "pacific-atlantic-water-flow",
    "template": "class Solution:\n    def pacificAtlantic(heights):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pacificAtlantic())"
  },
  {
    "id": "418",
    "slug": "sentence-screen-fitting",
    "template": "class Solution:\n    def words_typing(sentence, rows, cols):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.words_typing())"
  },
  {
    "id": "419",
    "slug": "battleships-in-a-board",
    "template": "class Solution:\n    def countBattleships(board):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countBattleships())"
  },
  {
    "id": "420",
    "slug": "strong-password-checker",
    "template": "class Solution:\n    def strong_password(password):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.strong_password())"
  },
  {
    "id": "421",
    "slug": "maximum-xor-of-two-numbers-in-an-array",
    "template": "class Solution:\n    def findMaximumXOR(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaximumXOR())"
  },
  {
    "id": "422",
    "slug": "valid-word-square",
    "template": "class Solution:\n    def valid_word_square(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.valid_word_square())"
  },
  {
    "id": "423",
    "slug": "reconstruct-original-digits-from-english",
    "template": "class Solution:\n    def find_digits_in_ascending_order(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_digits_in_ascending_order())"
  },
  {
    "id": "424",
    "slug": "longest-repeating-character-replacement",
    "template": "class Solution:\n    def characterReplacement(s:str, k:int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.characterReplacement())"
  },
  {
    "id": "425",
    "slug": "word-squares",
    "template": "class Solution:\n    def wordSquares(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.wordSquares())"
  },
  {
    "id": "426",
    "slug": "convert-binary-search-tree-to-sorted-doubly-linked-list",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "427",
    "slug": "construct-quad-tree",
    "template": "class Solution:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "428",
    "slug": "serialize-and-deserialize-n-ary-tree",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "429",
    "slug": "n-ary-tree-level-order-traversal",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "430",
    "slug": "flatten-a-multilevel-doubly-linked-list",
    "template": "class Solution:\n    def __init__(self, val, prev, next, child):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "431",
    "slug": "encode-n-ary-tree-to-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "432",
    "slug": "all-oone-data-structure",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "433",
    "slug": "minimum-genetic-mutation",
    "template": "class Solution:\n    def minMutation(start, end, bank):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minMutation())"
  },
  {
    "id": "435",
    "slug": "non-overlapping-intervals",
    "template": "class Solution:\n    def eraseOverlapIntervals(intervals):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.eraseOverlapIntervals())"
  },
  {
    "id": "436",
    "slug": "find-right-interval",
    "template": "class Solution:\n    def findRightInterval(intervals):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findRightInterval())"
  },
  {
    "id": "437",
    "slug": "path-sum-iii",
    "template": "class Solution:\n    def path_sum_helper(node, target_sum, current_sum):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.path_sum_helper())"
  },
  {
    "id": "438",
    "slug": "find-all-anagrams-in-a-string",
    "template": "class Solution:\n    def find_anagrams(s, p):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_anagrams())"
  },
  {
    "id": "439",
    "slug": "ternary-expression-parser",
    "template": "class Solution:\n    def parseTernary(expression: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.parseTernary())"
  },
  {
    "id": "440",
    "slug": "k-th-smallest-in-lexicographical-order",
    "template": "class Solution:\n    def find_kth_number(n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_kth_number())"
  },
  {
    "id": "442",
    "slug": "find-all-duplicates-in-an-array",
    "template": "class Solution:\n    def find_duplicates(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_duplicates())"
  },
  {
    "id": "443",
    "slug": "string-compression",
    "template": "class Solution:\n    def compress(chars):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.compress())"
  },
  {
    "id": "444",
    "slug": "sequence-reconstruction",
    "template": "class Solution:\n    def is_shortest_and_unique_supersequence(nums, sequences):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_shortest_and_unique_supersequence())"
  },
  {
    "id": "445",
    "slug": "add-two-numbers-ii",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "446",
    "slug": "arithmetic-slices-ii-subsequence",
    "template": "class Solution:\n    def numberOfArithmeticSlices(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfArithmeticSlices())"
  },
  {
    "id": "447",
    "slug": "number-of-boomerangs",
    "template": "class Solution:\n    def numberOfBoomerangs(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfBoomerangs())"
  },
  {
    "id": "448",
    "slug": "find-all-numbers-disappeared-in-an-array",
    "template": "class Solution:\n    def find_disappeared_numbers(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_disappeared_numbers())"
  },
  {
    "id": "449",
    "slug": "serialize-and-deserialize-bst",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "450",
    "slug": "delete-node-in-a-bst",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "451",
    "slug": "sort-characters-by-frequency",
    "template": "class Solution:\n    def sort_by_frequency(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sort_by_frequency())"
  },
  {
    "id": "452",
    "slug": "minimum-number-of-arrows-to-burst-balloons",
    "template": "class Solution:\n    def findMinArrowShots(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMinArrowShots())"
  },
  {
    "id": "453",
    "slug": "minimum-moves-to-equal-array-elements",
    "template": "class Solution:\n    def min_moves(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_moves())"
  },
  {
    "id": "454",
    "slug": "4sum-ii",
    "template": "class Solution:\n    def fourSumCount(nums1, nums2, nums3, nums4):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fourSumCount())"
  },
  {
    "id": "455",
    "slug": "assign-cookies",
    "template": "class Solution:\n    def find_content_children(g, s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_content_children())"
  },
  {
    "id": "456",
    "slug": "132-pattern",
    "template": "class Solution:\n    def find132pattern(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find132pattern())"
  },
  {
    "id": "457",
    "slug": "circular-array-loop",
    "template": "class Solution:\n    def circularArrayLoop(nums: List[int]) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.circularArrayLoop())"
  },
  {
    "id": "458",
    "slug": "poor-pigs",
    "template": "class Solution:\n    def poor_pigs(buckets, minutes_to_die, minutes_to_test):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.poor_pigs())"
  },
  {
    "id": "459",
    "slug": "repeated-substring-pattern",
    "template": "class Solution:\n    def can_construct(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_construct())"
  },
  {
    "id": "460",
    "slug": "lfu-cache",
    "template": "class Solution:\n    def __init__(self, capacity: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "462",
    "slug": "minimum-moves-to-equal-array-elements-ii",
    "template": "class Solution:\n    def min_moves2(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_moves2())"
  },
  {
    "id": "463",
    "slug": "island-perimeter",
    "template": "class Solution:\n    def islandPerimeter(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.islandPerimeter())"
  },
  {
    "id": "464",
    "slug": "can-i-win",
    "template": "class Solution:\n    def canIWin(maxChoosableInteger, desiredTotal):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canIWin())"
  },
  {
    "id": "465",
    "slug": "optimal-account-balancing",
    "template": "class Solution:\n    def minTransfers(transactions):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minTransfers())"
  },
  {
    "id": "466",
    "slug": "count-the-repetitions",
    "template": "class Solution:\n    def getMaxRepetitions(s1: str, n1: int, s2: str, n2: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getMaxRepetitions())"
  },
  {
    "id": "467",
    "slug": "unique-substrings-in-wraparound-string",
    "template": "class Solution:\n    def findSubstringInWraproundString(p: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findSubstringInWraproundString())"
  },
  {
    "id": "468",
    "slug": "validate-ip-address",
    "template": "class Solution:\n    def validateIP(queryIP):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.validateIP())"
  },
  {
    "id": "469",
    "slug": "convex-polygon",
    "template": "class Solution:\n    def isConvex(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isConvex())"
  },
  {
    "id": "470",
    "slug": "implement-rand10-using-rand7",
    "template": "class Solution:\n    def rand7():\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rand7())"
  },
  {
    "id": "471",
    "slug": "encode-string-with-shortest-length",
    "template": "class Solution:\n    def encode(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.encode())"
  },
  {
    "id": "472",
    "slug": "concatenated-words",
    "template": "class Solution:\n    def is_concatenated(word, word_dict):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_concatenated())"
  },
  {
    "id": "473",
    "slug": "matchsticks-to-square",
    "template": "class Solution:\n    def makesquare(matchsticks):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.makesquare())"
  },
  {
    "id": "474",
    "slug": "ones-and-zeroes",
    "template": "class Solution:\n    def findMaxForm(strs, m, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaxForm())"
  },
  {
    "id": "475",
    "slug": "heaters",
    "template": "class Solution:\n    def findRadius(houses, heaters):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findRadius())"
  },
  {
    "id": "477",
    "slug": "total-hamming-distance",
    "template": "class Solution:\n    def total_hamming_distance(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.total_hamming_distance())"
  },
  {
    "id": "478",
    "slug": "generate-random-point-in-a-circle",
    "template": "class Solution:\n    def __init__(self, radius: float, x_center: float, y_center: float):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "479",
    "slug": "largest-palindrome-product",
    "template": "class Solution:\n    def largestPalindrome(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestPalindrome())"
  },
  {
    "id": "480",
    "slug": "sliding-window-median",
    "template": "class Solution:\n    def medianSlidingWindow(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.medianSlidingWindow())"
  },
  {
    "id": "481",
    "slug": "magical-string",
    "template": "class Solution:\n    def magical_string(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.magical_string())"
  },
  {
    "id": "482",
    "slug": "license-key-formatting",
    "template": "class Solution:\n    def license_key_formatting(s: str, k: int) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.license_key_formatting())"
  },
  {
    "id": "483",
    "slug": "smallest-good-base",
    "template": "class Solution:\n    def smallest_good_base(n: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_good_base())"
  },
  {
    "id": "484",
    "slug": "find-permutation",
    "template": "class Solution:\n    def findPermutation(s: str) -> list[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findPermutation())"
  },
  {
    "id": "485",
    "slug": "max-consecutive-ones",
    "template": "class Solution:\n    def findMaxConsecutiveOnes(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaxConsecutiveOnes())"
  },
  {
    "id": "486",
    "slug": "predict-the-winner",
    "template": "class Solution:\n    def can_win(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_win())"
  },
  {
    "id": "487",
    "slug": "max-consecutive-ones-ii",
    "template": "class Solution:\n    def findMaxConsecutiveOnes(nums: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaxConsecutiveOnes())"
  },
  {
    "id": "488",
    "slug": "zuma-game",
    "template": "class Solution:\n    def find_min_step(board: str, hand: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_min_step())"
  },
  {
    "id": "489",
    "slug": "robot-room-cleaner",
    "template": "class Solution:\n    def kthSmallestPath(destination, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kthSmallestPath())"
  },
  {
    "id": "490",
    "slug": "the-maze",
    "template": "class Solution:\n    def hasPath(maze, start, destination):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.hasPath())"
  },
  {
    "id": "491",
    "slug": "non-decreasing-subsequences",
    "template": "class Solution:\n    def findSubsequences(nums: List[int]) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findSubsequences())"
  },
  {
    "id": "493",
    "slug": "reverse-pairs",
    "template": "class Solution:\n    def reversePairs(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reversePairs())"
  },
  {
    "id": "494",
    "slug": "target-sum",
    "template": "class Solution:\n    def findTargetSumWays(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findTargetSumWays())"
  },
  {
    "id": "495",
    "slug": "teemo-attacking",
    "template": "class Solution:\n    def find_poisoned_duration(time_series, duration):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_poisoned_duration())"
  },
  {
    "id": "496",
    "slug": "next-greater-element-i",
    "template": "class Solution:\n    def next_greater_element(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.next_greater_element())"
  },
  {
    "id": "497",
    "slug": "random-point-in-non-overlapping-rectangles",
    "template": "class Solution:\n    def __init__(self, rects: List[List[int]]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "498",
    "slug": "diagonal-traverse",
    "template": "class Solution:\n    def findDiagonalOrder(mat: List[List[int]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findDiagonalOrder())"
  },
  {
    "id": "499",
    "slug": "the-maze-iii",
    "template": "class Solution:\n    def findShortestWay(self, maze: List[List[int]], ball: List[int], hole: List[int]) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findShortestWay())"
  },
  {
    "id": "500",
    "slug": "keyboard-row",
    "template": "class Solution:\n    def find_words(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_words())"
  },
  {
    "id": "501",
    "slug": "find-mode-in-binary-search-tree",
    "template": "class Solution:\n    def findMode(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMode())"
  },
  {
    "id": "503",
    "slug": "next-greater-element-ii",
    "template": "class Solution:\n    def nextGreaterElements(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nextGreaterElements())"
  },
  {
    "id": "505",
    "slug": "the-maze-ii",
    "template": "class Solution:\n    def shortestDistance(maze, start, destination):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestDistance())"
  },
  {
    "id": "506",
    "slug": "relative-ranks",
    "template": "class Solution:\n    def find_relative_ranks(score):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_relative_ranks())"
  },
  {
    "id": "508",
    "slug": "most-frequent-subtree-sum",
    "template": "class Solution:\n    def helper(node, counts):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.helper())"
  },
  {
    "id": "509",
    "slug": "fibonacci-number",
    "template": "class Solution:\n    def fib(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fib())"
  },
  {
    "id": "510",
    "slug": "inorder-successor-in-bst-ii",
    "template": "class Solution:\n    def __init__(self, val, left=None, right=None, parent=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "513",
    "slug": "find-bottom-left-tree-value",
    "template": "class Solution:\n    def findBottomLeftValue(self, root: TreeNode) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findBottomLeftValue())"
  },
  {
    "id": "514",
    "slug": "freedom-trail",
    "template": "class Solution:\n    def find_rotate_steps(ring: str, key: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_rotate_steps())"
  },
  {
    "id": "515",
    "slug": "find-largest-value-in-each-tree-row",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "516",
    "slug": "longest-palindromic-subsequence",
    "template": "class Solution:\n    def longestPalindromeSubseq(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestPalindromeSubseq())"
  },
  {
    "id": "517",
    "slug": "super-washing-machines",
    "template": "class Solution:\n    def find_min_moves(machines):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_min_moves())"
  },
  {
    "id": "518",
    "slug": "coin-change-ii",
    "template": "class Solution:\n    def change(amount, coins):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.change())"
  },
  {
    "id": "519",
    "slug": "random-flip-matrix",
    "template": "class Solution:\n    def __init__(self, m: int, n: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "522",
    "slug": "longest-uncommon-subsequence-ii",
    "template": "class Solution:\n    def find_lus_length(strs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_lus_length())"
  },
  {
    "id": "523",
    "slug": "continuous-subarray-sum",
    "template": "class Solution:\n    def checkSubarraySum(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.checkSubarraySum())"
  },
  {
    "id": "524",
    "slug": "longest-word-in-dictionary-through-deleting",
    "template": "class Solution:\n    def findLongestWord(s, dictionary):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLongestWord())"
  },
  {
    "id": "525",
    "slug": "contiguous-array",
    "template": "class Solution:\n    def findMaxLength(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaxLength())"
  },
  {
    "id": "526",
    "slug": "beautiful-arrangement",
    "template": "class Solution:\n    def countArrangement(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countArrangement())"
  },
  {
    "id": "527",
    "slug": "word-abbreviation",
    "template": "class Solution:\n    def wordsAbbreviation(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.wordsAbbreviation())"
  },
  {
    "id": "528",
    "slug": "random-pick-with-weight",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "530",
    "slug": "minimum-absolute-difference-in-bst",
    "template": "class Solution:\n    def __init__(self, x: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "531",
    "slug": "lonely-pixel-i",
    "template": "class Solution:\n    def findLonelyPixel(picture):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLonelyPixel())"
  },
  {
    "id": "532",
    "slug": "k-diff-pairs-in-an-array",
    "template": "class Solution:\n    def find_pairs(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_pairs())"
  },
  {
    "id": "533",
    "slug": "lonely-pixel-ii",
    "template": "class Solution:\n    def findBlackPixel(picture, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findBlackPixel())"
  },
  {
    "id": "535",
    "slug": "encode-and-decode-tinyurl",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "536",
    "slug": "construct-binary-tree-from-string",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "538",
    "slug": "convert-bst-to-greater-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "539",
    "slug": "minimum-time-difference",
    "template": "class Solution:\n    def findMinDifference(timePoints):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMinDifference())"
  },
  {
    "id": "540",
    "slug": "single-element-in-a-sorted-array",
    "template": "class Solution:\n    def singleNonDuplicate(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.singleNonDuplicate())"
  },
  {
    "id": "541",
    "slug": "reverse-string-ii",
    "template": "class Solution:\n    def reverseStr(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverseStr())"
  },
  {
    "id": "542",
    "slug": "01-matrix",
    "template": "class Solution:\n    def updateMatrix(mat):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.updateMatrix())"
  },
  {
    "id": "543",
    "slug": "diameter-of-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "544",
    "slug": "output-contest-matches",
    "template": "class Solution:\n    def findContestMatch(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findContestMatch())"
  },
  {
    "id": "545",
    "slug": "boundary-of-binary-tree",
    "template": "class Solution:\n    def leftBoundary(self, node, boundary):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.leftBoundary())"
  },
  {
    "id": "546",
    "slug": "remove-boxes",
    "template": "class Solution:\n    def removeBoxes(boxes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeBoxes())"
  },
  {
    "id": "547",
    "slug": "number-of-provinces",
    "template": "class Solution:\n    def findCircleNum(isConnected):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findCircleNum())"
  },
  {
    "id": "548",
    "slug": "split-array-with-equal-sum",
    "template": "class Solution:\n    def find_triplet_equal_sum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_triplet_equal_sum())"
  },
  {
    "id": "549",
    "slug": "binary-tree-longest-consecutive-sequence-ii",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "553",
    "slug": "optimal-division",
    "template": "class Solution:\n    def optimal_division(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.optimal_division())"
  },
  {
    "id": "554",
    "slug": "brick-wall",
    "template": "class Solution:\n    def least_bricks(wall):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.least_bricks())"
  },
  {
    "id": "555",
    "slug": "split-concatenated-strings",
    "template": "class Solution:\n    def splitLoopedString(strs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.splitLoopedString())"
  },
  {
    "id": "558",
    "slug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
    "template": "class Solution:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "559",
    "slug": "maximum-depth-of-n-ary-tree",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "560",
    "slug": "subarray-sum-equals-k",
    "template": "class Solution:\n    def subarraySum(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.subarraySum())"
  },
  {
    "id": "561",
    "slug": "array-partition",
    "template": "class Solution:\n    def array_pair_sum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.array_pair_sum())"
  },
  {
    "id": "562",
    "slug": "longest-line-of-consecutive-one-in-matrix",
    "template": "class Solution:\n    def longestLine(mat):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestLine())"
  },
  {
    "id": "563",
    "slug": "binary-tree-tilt",
    "template": "class Solution:\n    def findTilt(self, root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findTilt())"
  },
  {
    "id": "564",
    "slug": "find-the-closest-palindrome",
    "template": "class Solution:\n    def is_palindrome(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_palindrome())"
  },
  {
    "id": "565",
    "slug": "array-nesting",
    "template": "class Solution:\n    def arrayNesting(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.arrayNesting())"
  },
  {
    "id": "566",
    "slug": "reshape-the-matrix",
    "template": "class Solution:\n    def matrixReshape(mat, r, c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.matrixReshape())"
  },
  {
    "id": "567",
    "slug": "permutation-in-string",
    "template": "class Solution:\n    def checkInclusion(s1: str, s2: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.checkInclusion())"
  },
  {
    "id": "568",
    "slug": "maximum-vacation-days",
    "template": "class Solution:\n    def maxVacationDays(flights, days):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxVacationDays())"
  },
  {
    "id": "573",
    "slug": "squirrel-simulation",
    "template": "class Solution:\n    def minDistance(height, width, tree, squirrel, nuts):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDistance())"
  },
  {
    "id": "575",
    "slug": "distribute-candies",
    "template": "class Solution:\n    def maxNumberOfCandies(candyType):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxNumberOfCandies())"
  },
  {
    "id": "576",
    "slug": "out-of-boundary-paths",
    "template": "class Solution:\n    def findPaths(m, n, maxMove, startRow, startColumn):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findPaths())"
  },
  {
    "id": "581",
    "slug": "shortest-unsorted-continuous-subarray",
    "template": "class Solution:\n    def findUnsortedSubarray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findUnsortedSubarray())"
  },
  {
    "id": "582",
    "slug": "kill-process",
    "template": "class Solution:\n    def killProcess(pid, ppid, kill):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.killProcess())"
  },
  {
    "id": "583",
    "slug": "delete-operation-for-two-strings",
    "template": "class Solution:\n    def minDistance(word1, word2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDistance())"
  },
  {
    "id": "587",
    "slug": "erect-the-fence",
    "template": "class Solution:\n    def cross_product(p, q, r):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.cross_product())"
  },
  {
    "id": "588",
    "slug": "design-in-memory-file-system",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "589",
    "slug": "n-ary-tree-preorder-traversal",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "590",
    "slug": "n-ary-tree-postorder-traversal",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "591",
    "slug": "tag-validator",
    "template": "class Solution:\n    def is_valid(code, i):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_valid())"
  },
  {
    "id": "593",
    "slug": "valid-square",
    "template": "class Solution:\n    def validSquare(p1, p2, p3, p4):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.validSquare())"
  },
  {
    "id": "594",
    "slug": "longest-harmonious-subsequence",
    "template": "class Solution:\n    def findLHS(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLHS())"
  },
  {
    "id": "599",
    "slug": "minimum-index-sum-of-two-lists",
    "template": "class Solution:\n    def findRestaurant(list1: List[str], list2: List[str]) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findRestaurant())"
  },
  {
    "id": "600",
    "slug": "non-negative-integers-without-consecutive-ones",
    "template": "class Solution:\n    def findIntegers(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findIntegers())"
  },
  {
    "id": "604",
    "slug": "design-compressed-string-iterator",
    "template": "class Solution:\n    def __init__(self, compressedString: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "605",
    "slug": "can-place-flowers",
    "template": "class Solution:\n    def canPlaceFlowers(flowerbed, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canPlaceFlowers())"
  },
  {
    "id": "606",
    "slug": "construct-string-from-binary-tree",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "609",
    "slug": "find-duplicate-file-in-system",
    "template": "class Solution:\n    def find_duplicate(paths):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_duplicate())"
  },
  {
    "id": "611",
    "slug": "valid-triangle-number",
    "template": "class Solution:\n    def triangleNumber(nums: list) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.triangleNumber())"
  },
  {
    "id": "616",
    "slug": "add-bold-tag-in-string",
    "template": "class Solution:\n    def addBoldTag(s: str, words: list) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.addBoldTag())"
  },
  {
    "id": "617",
    "slug": "merge-two-binary-trees",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "621",
    "slug": "task-scheduler",
    "template": "class Solution:\n    def least_interval(tasks, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.least_interval())"
  },
  {
    "id": "622",
    "slug": "design-circular-queue",
    "template": "class Solution:\n    def __init__(self, k: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "623",
    "slug": "add-one-row-to-tree",
    "template": "class Solution:\n    def add_one_row_helper(node, val, depth, current_depth):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.add_one_row_helper())"
  },
  {
    "id": "625",
    "slug": "minimum-factorization",
    "template": "class Solution:\n    def smallestFactorization(num: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestFactorization())"
  },
  {
    "id": "628",
    "slug": "maximum-product-of-three-numbers",
    "template": "class Solution:\n    def maximumProduct(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumProduct())"
  },
  {
    "id": "629",
    "slug": "k-inverse-pairs-array",
    "template": "class Solution:\n    def kInversePairs(n: int, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kInversePairs())"
  },
  {
    "id": "630",
    "slug": "course-schedule-iii",
    "template": "class Solution:\n    def scheduleCourse(courses):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.scheduleCourse())"
  },
  {
    "id": "631",
    "slug": "design-excel-sum-formula",
    "template": "class Solution:\n    def __init__(self, height: int, width: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "632",
    "slug": "smallest-range-covering-elements-from-k-lists",
    "template": "class Solution:\n    def smallestRange(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestRange())"
  },
  {
    "id": "633",
    "slug": "sum-of-square-numbers",
    "template": "class Solution:\n    def judge_square_sum(c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.judge_square_sum())"
  },
  {
    "id": "634",
    "slug": "find-the-derangement-of-an-array",
    "template": "class Solution:\n    def findDerangement(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findDerangement())"
  },
  {
    "id": "635",
    "slug": "design-log-storage-system",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "636",
    "slug": "exclusive-time-of-functions",
    "template": "class Solution:\n    def exclusiveTime(n, logs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.exclusiveTime())"
  },
  {
    "id": "637",
    "slug": "average-of-levels-in-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "638",
    "slug": "shopping-offers",
    "template": "class Solution:\n    def shoppingOffers(price: List[int], special: List[List[int]], needs: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shoppingOffers())"
  },
  {
    "id": "639",
    "slug": "decode-ways-ii",
    "template": "class Solution:\n    def num_decodings(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_decodings())"
  },
  {
    "id": "641",
    "slug": "design-circular-deque",
    "template": "class Solution:\n    def __init__(self, k: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "642",
    "slug": "design-search-autocomplete-system",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "643",
    "slug": "maximum-average-subarray-i",
    "template": "class Solution:\n    def findMaxAverage(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaxAverage())"
  },
  {
    "id": "644",
    "slug": "maximum-average-subarray-ii",
    "template": "class Solution:\n    def findMaxAverage(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaxAverage())"
  },
  {
    "id": "645",
    "slug": "set-mismatch",
    "template": "class Solution:\n    def findErrorNums(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findErrorNums())"
  },
  {
    "id": "646",
    "slug": "maximum-length-of-pair-chain",
    "template": "class Solution:\n    def findLongestChain(pairs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLongestChain())"
  },
  {
    "id": "647",
    "slug": "palindromic-substrings",
    "template": "class Solution:\n    def countSubstrings(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countSubstrings())"
  },
  {
    "id": "648",
    "slug": "replace-words",
    "template": "class Solution:\n    def replaceWords(dict, sentence):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.replaceWords())"
  },
  {
    "id": "649",
    "slug": "dota2-senate",
    "template": "class Solution:\n    def predict_party_victory(senate: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.predict_party_victory())"
  },
  {
    "id": "650",
    "slug": "2-keys-keyboard",
    "template": "class Solution:\n    def min_steps(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_steps())"
  },
  {
    "id": "651",
    "slug": "4-keys-keyboard",
    "template": "class Solution:\n    def maxA(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxA())"
  },
  {
    "id": "652",
    "slug": "find-duplicate-subtrees",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "653",
    "slug": "two-sum-iv-input-is-a-bst",
    "template": "class Solution:\n    def findTarget(root, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findTarget())"
  },
  {
    "id": "654",
    "slug": "maximum-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "655",
    "slug": "print-binary-tree",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "656",
    "slug": "coin-path",
    "template": "class Solution:\n    def cheapestJump(coins, maxJump):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.cheapestJump())"
  },
  {
    "id": "659",
    "slug": "split-array-into-consecutive-subsequences",
    "template": "class Solution:\n    def can_split(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_split())"
  },
  {
    "id": "660",
    "slug": "remove-9",
    "template": "class Solution:\n    def newInteger(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.newInteger())"
  },
  {
    "id": "661",
    "slug": "image-smoother",
    "template": "class Solution:\n    def imageSmoother(img):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.imageSmoother())"
  },
  {
    "id": "662",
    "slug": "maximum-width-of-binary-tree",
    "template": "class Solution:\n    def widthOfBinaryTree(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.widthOfBinaryTree())"
  },
  {
    "id": "663",
    "slug": "equal-tree-partition",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "664",
    "slug": "strange-printer",
    "template": "class Solution:\n    def strange_printer(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.strange_printer())"
  },
  {
    "id": "665",
    "slug": "non-decreasing-array",
    "template": "class Solution:\n    def checkPossibility(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.checkPossibility())"
  },
  {
    "id": "666",
    "slug": "path-sum-iv",
    "template": "class Solution:\n    def sumPaths(root, val):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumPaths())"
  },
  {
    "id": "667",
    "slug": "beautiful-arrangement-ii",
    "template": "class Solution:\n    def constructArray(n: int, k: int) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.constructArray())"
  },
  {
    "id": "668",
    "slug": "kth-smallest-number-in-multiplication-table",
    "template": "class Solution:\n    def findKthNumber(m, n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findKthNumber())"
  },
  {
    "id": "669",
    "slug": "trim-a-binary-search-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "670",
    "slug": "maximum-swap",
    "template": "class Solution:\n    def maximumSwap(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumSwap())"
  },
  {
    "id": "671",
    "slug": "second-minimum-node-in-a-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "672",
    "slug": "bulb-switcher-ii",
    "template": "class Solution:\n    def num_light_configuration(n, presses):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_light_configuration())"
  },
  {
    "id": "673",
    "slug": "number-of-longest-increasing-subsequence",
    "template": "class Solution:\n    def findNumberOfLIS(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findNumberOfLIS())"
  },
  {
    "id": "674",
    "slug": "longest-continuous-increasing-subsequence",
    "template": "class Solution:\n    def findLengthOfLCIS(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLengthOfLCIS())"
  },
  {
    "id": "675",
    "slug": "cut-off-trees-for-golf-event",
    "template": "class Solution:\n    def cutOffTree(forest: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.cutOffTree())"
  },
  {
    "id": "676",
    "slug": "implement-magic-dictionary",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "677",
    "slug": "map-sum-pairs",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "678",
    "slug": "valid-parenthesis-string",
    "template": "class Solution:\n    def checkValidString(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.checkValidString())"
  },
  {
    "id": "679",
    "slug": "24-game",
    "template": "class Solution:\n    def helper(cards, target=24):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.helper())"
  },
  {
    "id": "682",
    "slug": "baseball-game",
    "template": "class Solution:\n    def calPoints(ops):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.calPoints())"
  },
  {
    "id": "683",
    "slug": "k-empty-slots",
    "template": "class Solution:\n    def kEmptySlots(bulbs, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kEmptySlots())"
  },
  {
    "id": "684",
    "slug": "redundant-connection",
    "template": "class Solution:\n    def findRedundantConnection(edges: List[List[int]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findRedundantConnection())"
  },
  {
    "id": "685",
    "slug": "redundant-connection-ii",
    "template": "class Solution:\n    def findRedundantDirectedConnection(edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findRedundantDirectedConnection())"
  },
  {
    "id": "686",
    "slug": "repeated-string-match",
    "template": "class Solution:\n    def min_repeats_to_substring(a: str, b: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_repeats_to_substring())"
  },
  {
    "id": "687",
    "slug": "longest-univalue-path",
    "template": "class Solution:\n    def longestUnivaluePath(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestUnivaluePath())"
  },
  {
    "id": "688",
    "slug": "knight-probability-in-chessboard",
    "template": "class Solution:\n    def knightProbability(self, n: int, k: int, row: int, column: int) -> float:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.knightProbability())"
  },
  {
    "id": "689",
    "slug": "maximum-sum-of-3-non-overlapping-subarrays",
    "template": "class Solution:\n    def max_sum_of_three_subarrays(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_sum_of_three_subarrays())"
  },
  {
    "id": "690",
    "slug": "employee-importance",
    "template": "class Solution:\n    def __init__(self, id: int, importance: int, subordinates: list):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "691",
    "slug": "stickers-to-spell-word",
    "template": "class Solution:\n    def minStickers(stickers, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minStickers())"
  },
  {
    "id": "692",
    "slug": "top-k-frequent-words",
    "template": "class Solution:\n    def k_frequent_words(words, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.k_frequent_words())"
  },
  {
    "id": "693",
    "slug": "binary-number-with-alternating-bits",
    "template": "class Solution:\n    def has_alternating_bits(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.has_alternating_bits())"
  },
  {
    "id": "694",
    "slug": "number-of-distinct-islands",
    "template": "class Solution:\n    def numDistinctIslands(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numDistinctIslands())"
  },
  {
    "id": "695",
    "slug": "max-area-of-island",
    "template": "class Solution:\n    def maxAreaOfIsland(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxAreaOfIsland())"
  },
  {
    "id": "696",
    "slug": "count-binary-substrings",
    "template": "class Solution:\n    def count_binary_substrings(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_binary_substrings())"
  },
  {
    "id": "697",
    "slug": "degree-of-an-array",
    "template": "class Solution:\n    def findShortestSubArray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findShortestSubArray())"
  },
  {
    "id": "698",
    "slug": "partition-to-k-equal-sum-subsets",
    "template": "class Solution:\n    def canPartitionKSubsets(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canPartitionKSubsets())"
  },
  {
    "id": "699",
    "slug": "falling-squares",
    "template": "class Solution:\n    def fallingSquares(positions):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fallingSquares())"
  },
  {
    "id": "700",
    "slug": "search-in-a-binary-search-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "701",
    "slug": "insert-into-a-binary-search-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "702",
    "slug": "search-in-a-sorted-array-of-unknown-size",
    "template": "class Solution:\n    def search(reader, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.search())"
  },
  {
    "id": "703",
    "slug": "kth-largest-element-in-a-stream",
    "template": "class Solution:\n    def __init__(self, k: int, nums: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "705",
    "slug": "design-hashset",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "706",
    "slug": "design-hashmap",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "707",
    "slug": "design-linked-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "708",
    "slug": "insert-into-a-sorted-circular-linked-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "710",
    "slug": "random-pick-with-blacklist",
    "template": "class Solution:\n    def __init__(self, n: int, blacklist: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "711",
    "slug": "number-of-distinct-islands-ii",
    "template": "class Solution:\n    def numDistinctIslands(self, grid: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numDistinctIslands())"
  },
  {
    "id": "712",
    "slug": "minimum-ascii-delete-sum-for-two-strings",
    "template": "class Solution:\n    def minimumDeleteSum(s1: str, s2: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumDeleteSum())"
  },
  {
    "id": "713",
    "slug": "subarray-product-less-than-k",
    "template": "class Solution:\n    def numSubarrayProductLessThanK(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSubarrayProductLessThanK())"
  },
  {
    "id": "714",
    "slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
    "template": "class Solution:\n    def maxProfit(prices, fee):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProfit())"
  },
  {
    "id": "716",
    "slug": "max-stack",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "717",
    "slug": "1-bit-and-2-bit-characters",
    "template": "class Solution:\n    def is_one_bit_character(bits):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_one_bit_character())"
  },
  {
    "id": "718",
    "slug": "maximum-length-of-repeated-subarray",
    "template": "class Solution:\n    def findLength(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLength())"
  },
  {
    "id": "719",
    "slug": "find-k-th-smallest-pair-distance",
    "template": "class Solution:\n    def smallestDistancePair(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestDistancePair())"
  },
  {
    "id": "720",
    "slug": "longest-word-in-dictionary",
    "template": "class Solution:\n    def longest_word(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_word())"
  },
  {
    "id": "721",
    "slug": "accounts-merge",
    "template": "class Solution:\n    def accountsMerge(accounts):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.accountsMerge())"
  },
  {
    "id": "722",
    "slug": "remove-comments",
    "template": "class Solution:\n    def removeComments(self, source: List[str]) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeComments())"
  },
  {
    "id": "723",
    "slug": "candy-crush",
    "template": "class Solution:\n    def candyCrush(board):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.candyCrush())"
  },
  {
    "id": "724",
    "slug": "find-pivot-index",
    "template": "class Solution:\n    def pivotIndex(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pivotIndex())"
  },
  {
    "id": "725",
    "slug": "split-linked-list-in-parts",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "726",
    "slug": "number-of-atoms",
    "template": "class Solution:\n    def parse(formula, i):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.parse())"
  },
  {
    "id": "727",
    "slug": "minimum-window-subsequence",
    "template": "class Solution:\n    def min_window_sub_sequence(s1: str, s2: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_window_sub_sequence())"
  },
  {
    "id": "728",
    "slug": "self-dividing-numbers",
    "template": "class Solution:\n    def is_self_dividing(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_self_dividing())"
  },
  {
    "id": "729",
    "slug": "my-calendar-i",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "730",
    "slug": "count-different-palindromic-subsequences",
    "template": "class Solution:\n    def countPalindromicSubsequences(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countPalindromicSubsequences())"
  },
  {
    "id": "731",
    "slug": "my-calendar-ii",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "732",
    "slug": "my-calendar-iii",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "733",
    "slug": "flood-fill",
    "template": "class Solution:\n    def floodFill(image, sr, sc, newColor):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.floodFill())"
  },
  {
    "id": "734",
    "slug": "sentence-similarity",
    "template": "class Solution:\n    def areSentencesSimilar(sentence1, sentence2, similarPairs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.areSentencesSimilar())"
  },
  {
    "id": "735",
    "slug": "asteroid-collision",
    "template": "class Solution:\n    def asteroidCollision(asteroids):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.asteroidCollision())"
  },
  {
    "id": "736",
    "slug": "parse-lisp-expression",
    "template": "class Solution:\n    def evaluate(expression: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.evaluate())"
  },
  {
    "id": "737",
    "slug": "sentence-similarity-ii",
    "template": "class Solution:\n    def areSentencesSimilar(sentence1, sentence2, pairs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.areSentencesSimilar())"
  },
  {
    "id": "738",
    "slug": "monotone-increasing-digits",
    "template": "class Solution:\n    def monotoneIncreasingDigits(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.monotoneIncreasingDigits())"
  },
  {
    "id": "739",
    "slug": "daily-temperatures",
    "template": "class Solution:\n    def daily_temperatures(temperatures):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.daily_temperatures())"
  },
  {
    "id": "740",
    "slug": "delete-and-earn",
    "template": "class Solution:\n    def max_points(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_points())"
  },
  {
    "id": "741",
    "slug": "cherry-pickup",
    "template": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.cherryPickup())"
  },
  {
    "id": "743",
    "slug": "network-delay-time",
    "template": "class Solution:\n    def networkDelayTime(times, n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.networkDelayTime())"
  },
  {
    "id": "744",
    "slug": "find-smallest-letter-greater-than-target",
    "template": "class Solution:\n    def networkDelayTime(times, n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.networkDelayTime())"
  },
  {
    "id": "745",
    "slug": "prefix-and-suffix-search",
    "template": "class Solution:\n    def next_greatest_letter(letters, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.next_greatest_letter())"
  },
  {
    "id": "746",
    "slug": "min-cost-climbing-stairs",
    "template": "class Solution:\n    def __init__(self, words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "747",
    "slug": "largest-number-at-least-twice-of-others",
    "template": "class Solution:\n    def minCostClimbingStairs(cost):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCostClimbingStairs())"
  },
  {
    "id": "748",
    "slug": "shortest-completing-word",
    "template": "class Solution:\n    def shortestCompletingWord(licensePlate: str, words: list[str]) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestCompletingWord())"
  },
  {
    "id": "749",
    "slug": "contain-virus",
    "template": "class Solution:\n    def shortest_completing_word(license_plate, words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_completing_word())"
  },
  {
    "id": "750",
    "slug": "number-of-corner-rectangles",
    "template": "class Solution:\n    def countCornerRectangles(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countCornerRectangles())"
  },
  {
    "id": "752",
    "slug": "open-the-lock",
    "template": "class Solution:\n    def openLock(deadends, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.openLock())"
  },
  {
    "id": "753",
    "slug": "cracking-the-safe",
    "template": "class Solution:\n    def openLock(deadends, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.openLock())"
  },
  {
    "id": "756",
    "slug": "pyramid-transition-matrix",
    "template": "class Solution:\n    def pyramid_transition(bottom, allowed):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pyramid_transition())"
  },
  {
    "id": "757",
    "slug": "set-intersection-size-at-least-two",
    "template": "class Solution:\n    def pyramidTransition(bottom, allowed):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pyramidTransition())"
  },
  {
    "id": "758",
    "slug": "bold-words-in-string",
    "template": "class Solution:\n    def addBoldTag(words, s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.addBoldTag())"
  },
  {
    "id": "759",
    "slug": "employee-free-time",
    "template": "class Solution:\n    def min_set_size(intervals):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_set_size())"
  },
  {
    "id": "760",
    "slug": "find-anagram-mappings",
    "template": "class Solution:\n    def anagramMappings(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.anagramMappings())"
  },
  {
    "id": "761",
    "slug": "special-binary-string",
    "template": "class Solution:\n    def makeLargestSpecial(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.makeLargestSpecial())"
  },
  {
    "id": "763",
    "slug": "partition-labels",
    "template": "class Solution:\n    def partition_labels(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.partition_labels())"
  },
  {
    "id": "764",
    "slug": "largest-plus-sign",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "765",
    "slug": "couples-holding-hands",
    "template": "class Solution:\n    def minSwapsCouples(row):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSwapsCouples())"
  },
  {
    "id": "766",
    "slug": "toeplitz-matrix",
    "template": "class Solution:\n    def __init__(self, val=0, prev=None, next=None, child=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "767",
    "slug": "reorganize-string",
    "template": "class Solution:\n    def is_prime(n: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_prime())"
  },
  {
    "id": "768",
    "slug": "max-chunks-to-make-sorted-ii",
    "template": "class Solution:\n    def partition_labels(s: str) -> list[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.partition_labels())"
  },
  {
    "id": "769",
    "slug": "max-chunks-to-make-sorted",
    "template": "class Solution:\n    def orderOfLargestPlusSign(n, mines):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.orderOfLargestPlusSign())"
  },
  {
    "id": "770",
    "slug": "basic-calculator-iv",
    "template": "class Solution:\n    def minSwapsCouples(row):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSwapsCouples())"
  },
  {
    "id": "772",
    "slug": "basic-calculator-iii",
    "template": "class Solution:\n    def __init__(self, val: bool, isLeaf: bool, topLeft: 'Node', topRight: 'Node', bottomLeft: 'Node', bottomRight: 'Node'):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "773",
    "slug": "sliding-puzzle",
    "template": "class Solution:\n    def __init__(self, isLeaf, val, topLeft=None, topRight=None, bottomLeft=None, bottomRight=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "774",
    "slug": "minimize-max-distance-to-gas-station",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "775",
    "slug": "global-and-local-inversions",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "776",
    "slug": "split-bst",
    "template": "class Solution:\n    def __init__(self, val=None, children=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "777",
    "slug": "swap-adjacent-in-lr-string",
    "template": "class Solution:\n    def isToeplitzMatrix(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isToeplitzMatrix())"
  },
  {
    "id": "778",
    "slug": "swim-in-rising-water",
    "template": "class Solution:\n    def rearrange_string(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rearrange_string())"
  },
  {
    "id": "779",
    "slug": "k-th-symbol-in-grammar",
    "template": "class Solution:\n    def max_chunks_to_sorted(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_chunks_to_sorted())"
  },
  {
    "id": "780",
    "slug": "reaching-points",
    "template": "class Solution:\n    def max_chunks_to_sorted(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_chunks_to_sorted())"
  },
  {
    "id": "781",
    "slug": "rabbits-in-forest",
    "template": "class Solution:\n    def numRabbits(answers):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numRabbits())"
  },
  {
    "id": "782",
    "slug": "transform-to-chessboard",
    "template": "class Solution:\n    def numJewelsInStones(jewels, stones):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numJewelsInStones())"
  },
  {
    "id": "783",
    "slug": "minimum-distance-between-bst-nodes",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "784",
    "slug": "letter-case-permutation",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "785",
    "slug": "is-graph-bipartite",
    "template": "class Solution:\n    def isBipartite(graph: List[List[int]]) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isBipartite())"
  },
  {
    "id": "786",
    "slug": "k-th-smallest-prime-fraction",
    "template": "class Solution:\n    def kthSmallestPrimeFraction(arr: List[int], k: int) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kthSmallestPrimeFraction())"
  },
  {
    "id": "787",
    "slug": "cheapest-flights-within-k-stops",
    "template": "class Solution:\n    def slidingPuzzle(board):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.slidingPuzzle())"
  },
  {
    "id": "788",
    "slug": "rotated-digits",
    "template": "class Solution:\n    def rotatedDigits(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rotatedDigits())"
  },
  {
    "id": "789",
    "slug": "escape-the-ghosts",
    "template": "class Solution:\n    def __init__(self, k, nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "790",
    "slug": "domino-and-tromino-tiling",
    "template": "class Solution:\n    def is_ideal_permutation(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_ideal_permutation())"
  },
  {
    "id": "791",
    "slug": "custom-sort-string",
    "template": "class Solution:\n    def customSortString(order, s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.customSortString())"
  },
  {
    "id": "792",
    "slug": "number-of-matching-subsequences",
    "template": "class Solution:\n    def search(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.search())"
  },
  {
    "id": "793",
    "slug": "preimage-size-of-factorial-zeroes-function",
    "template": "class Solution:\n    def canTransform(start: str, end: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canTransform())"
  },
  {
    "id": "794",
    "slug": "valid-tic-tac-toe-state",
    "template": "class Solution:\n    def swim(n, grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.swim())"
  },
  {
    "id": "795",
    "slug": "number-of-subarrays-with-bounded-maximum",
    "template": "class Solution:\n    def kthSymbolInGrammar(n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kthSymbolInGrammar())"
  },
  {
    "id": "796",
    "slug": "rotate-string",
    "template": "class Solution:\n    def can_transform(sx, sy, tx, ty):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_transform())"
  },
  {
    "id": "797",
    "slug": "all-paths-from-source-to-target",
    "template": "class Solution:\n    def numRabbits(answers):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numRabbits())"
  },
  {
    "id": "798",
    "slug": "smallest-rotation-with-highest-score",
    "template": "class Solution:\n    def moves_to_chessboard(board):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.moves_to_chessboard())"
  },
  {
    "id": "799",
    "slug": "champagne-tower",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "800",
    "slug": "similar-rgb-color",
    "template": "class Solution:\n    def letterCasePermutation(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.letterCasePermutation())"
  },
  {
    "id": "801",
    "slug": "minimum-swaps-to-make-sequences-increasing",
    "template": "class Solution:\n    def isBipartite(graph):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isBipartite())"
  },
  {
    "id": "802",
    "slug": "find-eventual-safe-states",
    "template": "class Solution:\n    def kthSmallestPrimeFraction(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kthSmallestPrimeFraction())"
  },
  {
    "id": "803",
    "slug": "bricks-falling-when-hit",
    "template": "class Solution:\n    def findCheapestPrice(n, flights, src, dst, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findCheapestPrice())"
  },
  {
    "id": "804",
    "slug": "unique-morse-code-words",
    "template": "class Solution:\n    def rotated_digits(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rotated_digits())"
  },
  {
    "id": "806",
    "slug": "number-of-lines-to-write-string",
    "template": "class Solution:\n    def numberOfWays(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfWays())"
  },
  {
    "id": "807",
    "slug": "max-increase-to-keep-city-skyline",
    "template": "class Solution:\n    def custom_sort_string(order, s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.custom_sort_string())"
  },
  {
    "id": "808",
    "slug": "soup-servings",
    "template": "class Solution:\n    def numMatchingSubseq(s, words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numMatchingSubseq())"
  },
  {
    "id": "809",
    "slug": "expressive-words",
    "template": "class Solution:\n    def num_zeros(k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_zeros())"
  },
  {
    "id": "810",
    "slug": "chalkboard-xor-game",
    "template": "class Solution:\n    def valid_tic_tac_toe(board: List[str]) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.valid_tic_tac_toe())"
  },
  {
    "id": "811",
    "slug": "subdomain-visit-count",
    "template": "class Solution:\n    def numSubarrayBoundedMax(nums, left, right):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSubarrayBoundedMax())"
  },
  {
    "id": "812",
    "slug": "largest-triangle-area",
    "template": "class Solution:\n    def is_shifted(s, goal):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_shifted())"
  },
  {
    "id": "813",
    "slug": "largest-sum-of-averages",
    "template": "class Solution:\n    def allPathsSourceTarget(graph: List[List[int]]) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.allPathsSourceTarget())"
  },
  {
    "id": "814",
    "slug": "binary-tree-pruning",
    "template": "class Solution:\n    def best_rotation(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.best_rotation())"
  },
  {
    "id": "815",
    "slug": "bus-routes",
    "template": "class Solution:\n    def numBusesToDestination(routes, source, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numBusesToDestination())"
  },
  {
    "id": "816",
    "slug": "ambiguous-coordinates",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "817",
    "slug": "linked-list-components",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "818",
    "slug": "race-car",
    "template": "class Solution:\n    def racecar(target: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.racecar())"
  },
  {
    "id": "819",
    "slug": "most-common-word",
    "template": "class Solution:\n    def minSwaps(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSwaps())"
  },
  {
    "id": "820",
    "slug": "short-encoding-of-words",
    "template": "class Solution:\n    def eventualSafeNodes(graph: List[List[int]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.eventualSafeNodes())"
  },
  {
    "id": "821",
    "slug": "shortest-distance-to-a-character",
    "template": "class Solution:\n    def hitBricks(grid: List[List[int]], hits: List[List[int]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.hitBricks())"
  },
  {
    "id": "822",
    "slug": "card-flipping-game",
    "template": "class Solution:\n    def uniqueMorseRepresentations(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.uniqueMorseRepresentations())"
  },
  {
    "id": "823",
    "slug": "binary-trees-with-factors",
    "template": "class Solution:\n    def isPossibleToSplit(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isPossibleToSplit())"
  },
  {
    "id": "824",
    "slug": "goat-latin",
    "template": "class Solution:\n    def number_of_lines(widths, s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.number_of_lines())"
  },
  {
    "id": "825",
    "slug": "friends-of-appropriate-ages",
    "template": "class Solution:\n    def max_increase_keeping_skyline(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_increase_keeping_skyline())"
  },
  {
    "id": "826",
    "slug": "most-profit-assigning-work",
    "template": "class Solution:\n    def maxProfitAssignment(difficulty, profit, worker):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProfitAssignment())"
  },
  {
    "id": "827",
    "slug": "making-a-large-island",
    "template": "class Solution:\n    def maxAreaOfIsland(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxAreaOfIsland())"
  },
  {
    "id": "829",
    "slug": "consecutive-numbers-sum",
    "template": "class Solution:\n    def subdomainVisits(cpdomains):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.subdomainVisits())"
  },
  {
    "id": "830",
    "slug": "positions-of-large-groups",
    "template": "class Solution:\n    def largestTriangleArea(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestTriangleArea())"
  },
  {
    "id": "831",
    "slug": "masking-personal-information",
    "template": "class Solution:\n    def largestSumOfAverages(self, nums: List[int], k: int) -> float:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestSumOfAverages())"
  },
  {
    "id": "833",
    "slug": "find-and-replace-in-string",
    "template": "class Solution:\n    def numBusesToDestination(routes, source, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numBusesToDestination())"
  },
  {
    "id": "834",
    "slug": "sum-of-distances-in-tree",
    "template": "class Solution:\n    def ambiguousCoordinates(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.ambiguousCoordinates())"
  },
  {
    "id": "835",
    "slug": "image-overlap",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "837",
    "slug": "new-21-game",
    "template": "class Solution:\n    def mostCommonWord(paragraph: str, banned: List[str]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mostCommonWord())"
  },
  {
    "id": "838",
    "slug": "push-dominoes",
    "template": "class Solution:\n    def pushDominoes(dominoes: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pushDominoes())"
  },
  {
    "id": "839",
    "slug": "similar-string-groups",
    "template": "class Solution:\n    def minimal_length_encoding(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimal_length_encoding())"
  },
  {
    "id": "840",
    "slug": "magic-squares-in-grid",
    "template": "class Solution:\n    def numMagicSquaresInside(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numMagicSquaresInside())"
  },
  {
    "id": "841",
    "slug": "keys-and-rooms",
    "template": "class Solution:\n    def shortestToChar(s, c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestToChar())"
  },
  {
    "id": "842",
    "slug": "split-array-into-fibonacci-sequence",
    "template": "class Solution:\n    def smallest_good_integer(fronts, backs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_good_integer())"
  },
  {
    "id": "843",
    "slug": "guess-the-word",
    "template": "class Solution:\n    def numFactoredBinaryTrees(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numFactoredBinaryTrees())"
  },
  {
    "id": "844",
    "slug": "backspace-string-compare",
    "template": "class Solution:\n    def backspaceCompare(s: str, t: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.backspaceCompare())"
  },
  {
    "id": "845",
    "slug": "longest-mountain-in-array",
    "template": "class Solution:\n    def longestMountain(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestMountain())"
  },
  {
    "id": "846",
    "slug": "hand-of-straights",
    "template": "class Solution:\n    def is_possible_divide(hand, group_size):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_possible_divide())"
  },
  {
    "id": "847",
    "slug": "shortest-path-visiting-all-nodes",
    "template": "class Solution:\n    def shortestPathLength(graph):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestPathLength())"
  },
  {
    "id": "848",
    "slug": "shifting-letters",
    "template": "class Solution:\n    def shiftingLetters(s: str, shifts) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shiftingLetters())"
  },
  {
    "id": "849",
    "slug": "maximize-distance-to-closest-person",
    "template": "class Solution:\n    def maxDistToClosest(seats):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxDistToClosest())"
  },
  {
    "id": "850",
    "slug": "rectangle-area-ii",
    "template": "class Solution:\n    def rectangleArea(rectangles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rectangleArea())"
  },
  {
    "id": "851",
    "slug": "loud-and-rich",
    "template": "class Solution:\n    def to_goat_latin(sentence: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.to_goat_latin())"
  },
  {
    "id": "852",
    "slug": "peak-index-in-a-mountain-array",
    "template": "class Solution:\n    def numFriendRequests(ages):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numFriendRequests())"
  },
  {
    "id": "853",
    "slug": "car-fleet",
    "template": "class Solution:\n    def max_profit_assignment(difficulty, profit, worker):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_profit_assignment())"
  },
  {
    "id": "854",
    "slug": "k-similar-strings",
    "template": "class Solution:\n    def kSimilarity(s1: str, s2: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kSimilarity())"
  },
  {
    "id": "855",
    "slug": "exam-room",
    "template": "class Solution:\n    def count_unique_chars(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_unique_chars())"
  },
  {
    "id": "857",
    "slug": "minimum-cost-to-hire-k-workers",
    "template": "class Solution:\n    def largeGroupPositions(s: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largeGroupPositions())"
  },
  {
    "id": "860",
    "slug": "lemonade-change",
    "template": "class Solution:\n    def __init__(self, k: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "861",
    "slug": "score-after-flipping-matrix",
    "template": "class Solution:\n    def flipAndInvertImage(image):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.flipAndInvertImage())"
  },
  {
    "id": "862",
    "slug": "shortest-subarray-with-sum-at-least-k",
    "template": "class Solution:\n    def findReplaceString(s, indices, sources, targets):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findReplaceString())"
  },
  {
    "id": "863",
    "slug": "all-nodes-distance-k-in-binary-tree",
    "template": "class Solution:\n    def sumOfDistancesInTree(n, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumOfDistancesInTree())"
  },
  {
    "id": "864",
    "slug": "shortest-path-to-get-all-keys",
    "template": "class Solution:\n    def largestOverlap(img1, img2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestOverlap())"
  },
  {
    "id": "865",
    "slug": "smallest-subtree-with-all-the-deepest-nodes",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "866",
    "slug": "prime-palindrome",
    "template": "class Solution:\n    def isRectangleOverlap(rec1, rec2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isRectangleOverlap())"
  },
  {
    "id": "867",
    "slug": "transpose-matrix",
    "template": "class Solution:\n    def new21Game(n: int, k: int, maxPts: int) -> float:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.new21Game())"
  },
  {
    "id": "868",
    "slug": "binary-gap",
    "template": "class Solution:\n    def push_dominoes(dominoes: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.push_dominoes())"
  },
  {
    "id": "869",
    "slug": "reordered-power-of-2",
    "template": "class Solution:\n    def is_similar(a: str, b: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_similar())"
  },
  {
    "id": "870",
    "slug": "advantage-shuffle",
    "template": "class Solution:\n    def advantage_count(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.advantage_count())"
  },
  {
    "id": "871",
    "slug": "minimum-number-of-refueling-stops",
    "template": "class Solution:\n    def can_visit_all_rooms(rooms):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_visit_all_rooms())"
  },
  {
    "id": "872",
    "slug": "leaf-similar-trees",
    "template": "class Solution:\n    def splitIntoFibonacci(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.splitIntoFibonacci())"
  },
  {
    "id": "873",
    "slug": "length-of-longest-fibonacci-subsequence",
    "template": "class Solution:\n    def match(a, b):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.match())"
  },
  {
    "id": "874",
    "slug": "walking-robot-simulation",
    "template": "class Solution:\n    def backspace_compare(s, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.backspace_compare())"
  },
  {
    "id": "875",
    "slug": "koko-eating-bananas",
    "template": "class Solution:\n    def longest_mountain(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_mountain())"
  },
  {
    "id": "876",
    "slug": "middle-of-the-linked-list",
    "template": "class Solution:\n    def is_n_straight_hand(hand, group_size):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_n_straight_hand())"
  },
  {
    "id": "877",
    "slug": "stone-game",
    "template": "class Solution:\n    def shortestPathLength(graph):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestPathLength())"
  },
  {
    "id": "878",
    "slug": "nth-magical-number",
    "template": "class Solution:\n    def shiftingLetters(s: str, shifts: list[int]) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shiftingLetters())"
  },
  {
    "id": "879",
    "slug": "profitable-schemes",
    "template": "class Solution:\n    def max_dist_to_closest(seats):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_dist_to_closest())"
  },
  {
    "id": "880",
    "slug": "decoded-string-at-index",
    "template": "class Solution:\n    def rectangleArea(rectangles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rectangleArea())"
  },
  {
    "id": "881",
    "slug": "boats-to-save-people",
    "template": "class Solution:\n    def loudAndRich(richer, quiet):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.loudAndRich())"
  },
  {
    "id": "882",
    "slug": "reachable-nodes-in-subdivided-graph",
    "template": "class Solution:\n    def peakIndexInMountainArray(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.peakIndexInMountainArray())"
  },
  {
    "id": "884",
    "slug": "uncommon-words-from-two-sentences",
    "template": "class Solution:\n    def k_similarity(s1, s2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.k_similarity())"
  },
  {
    "id": "885",
    "slug": "spiral-matrix-iii",
    "template": "class Solution:\n    def __init__(self, n: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "886",
    "slug": "possible-bipartition",
    "template": "class Solution:\n    def scoreOfParentheses(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.scoreOfParentheses())"
  },
  {
    "id": "887",
    "slug": "super-egg-drop",
    "template": "class Solution:\n    def mincost_to_hire_workers(quality, wage, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mincost_to_hire_workers())"
  },
  {
    "id": "888",
    "slug": "fair-candy-swap",
    "template": "class Solution:\n    def mirrorReflection(p, q):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mirrorReflection())"
  },
  {
    "id": "889",
    "slug": "construct-binary-tree-from-preorder-and-postorder-traversal",
    "template": "class Solution:\n    def are_almost_equal(s, goal):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.are_almost_equal())"
  },
  {
    "id": "890",
    "slug": "find-and-replace-pattern",
    "template": "class Solution:\n    def lemonadeChange(bills):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lemonadeChange())"
  },
  {
    "id": "891",
    "slug": "sum-of-subsequence-widths",
    "template": "class Solution:\n    def matrixScore(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.matrixScore())"
  },
  {
    "id": "892",
    "slug": "surface-area-of-3d-shapes",
    "template": "class Solution:\n    def shortest_subarray(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_subarray())"
  },
  {
    "id": "893",
    "slug": "groups-of-special-equivalent-strings",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "894",
    "slug": "all-possible-full-binary-trees",
    "template": "class Solution:\n    def __init__(self, n: int, blacklist: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "895",
    "slug": "maximum-frequency-stack",
    "template": "class Solution:\n    def shortestPathAllKeys(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestPathAllKeys())"
  },
  {
    "id": "896",
    "slug": "monotonic-array",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "897",
    "slug": "increasing-order-search-tree",
    "template": "class Solution:\n    def is_prime(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_prime())"
  },
  {
    "id": "898",
    "slug": "bitwise-ors-of-subarrays",
    "template": "class Solution:\n    def transpose(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.transpose())"
  },
  {
    "id": "899",
    "slug": "orderly-queue",
    "template": "class Solution:\n    def longest_distance(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_distance())"
  },
  {
    "id": "900",
    "slug": "rle-iterator",
    "template": "class Solution:\n    def reorderedPowerOf2(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reorderedPowerOf2())"
  },
  {
    "id": "901",
    "slug": "online-stock-span",
    "template": "class Solution:\n    def advantageCount(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.advantageCount())"
  },
  {
    "id": "903",
    "slug": "valid-permutations-for-di-sequence",
    "template": "class Solution:\n    def rand7():\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rand7())"
  },
  {
    "id": "904",
    "slug": "fruit-into-baskets",
    "template": "class Solution:\n    def leafSimilar(root1, root2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.leafSimilar())"
  },
  {
    "id": "905",
    "slug": "sort-array-by-parity",
    "template": "class Solution:\n    def lenLongestFibSubseq(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lenLongestFibSubseq())"
  },
  {
    "id": "906",
    "slug": "super-palindromes",
    "template": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.robotSim())"
  },
  {
    "id": "907",
    "slug": "sum-of-subarray-minimums",
    "template": "class Solution:\n    def minEatingSpeed(piles, h):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minEatingSpeed())"
  },
  {
    "id": "908",
    "slug": "smallest-range-i",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "909",
    "slug": "snakes-and-ladders",
    "template": "class Solution:\n    def aliceWins(piles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.aliceWins())"
  },
  {
    "id": "910",
    "slug": "smallest-range-ii",
    "template": "class Solution:\n    def nthMagicalNumber(n, a, b):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nthMagicalNumber())"
  },
  {
    "id": "911",
    "slug": "online-election",
    "template": "class Solution:\n    def profitableSchemes(n, minProfit, group, profit):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.profitableSchemes())"
  },
  {
    "id": "912",
    "slug": "sort-an-array",
    "template": "class Solution:\n    def __init__(self, w: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "913",
    "slug": "cat-and-mouse",
    "template": "class Solution:\n    def __init__(self, m, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "914",
    "slug": "x-of-a-kind-in-a-deck-of-cards",
    "template": "class Solution:\n    def __init__(self, rects):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "915",
    "slug": "partition-array-into-disjoint-intervals",
    "template": "class Solution:\n    def __init__(self, radius: float, x_center: float, y_center: float):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "916",
    "slug": "word-subsets",
    "template": "class Solution:\n    def find_kth_character(s: str, k: int) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_kth_character())"
  },
  {
    "id": "917",
    "slug": "reverse-only-letters",
    "template": "class Solution:\n    def num_rescue_boats(people, limit):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_rescue_boats())"
  },
  {
    "id": "918",
    "slug": "maximum-sum-circular-subarray",
    "template": "class Solution:\n    def reachableNodes(edges, maxMoves, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reachableNodes())"
  },
  {
    "id": "919",
    "slug": "complete-binary-tree-inserter",
    "template": "class Solution:\n    def projectionArea(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.projectionArea())"
  },
  {
    "id": "920",
    "slug": "number-of-music-playlists",
    "template": "class Solution:\n    def uncommon_from_sentences(s1, s2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.uncommon_from_sentences())"
  },
  {
    "id": "921",
    "slug": "minimum-add-to-make-parentheses-valid",
    "template": "class Solution:\n    def spiral_walk(rows, cols, rStart, cStart):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.spiral_walk())"
  },
  {
    "id": "922",
    "slug": "sort-array-by-parity-ii",
    "template": "class Solution:\n    def possible_bipartition(n, dislikes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.possible_bipartition())"
  },
  {
    "id": "923",
    "slug": "3sum-with-multiplicity",
    "template": "class Solution:\n    def min_moves(k, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_moves())"
  },
  {
    "id": "924",
    "slug": "minimize-malware-spread",
    "template": "class Solution:\n    def fair_candy_swap(aliceSizes, bobSizes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fair_candy_swap())"
  },
  {
    "id": "925",
    "slug": "long-pressed-name",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "926",
    "slug": "flip-string-to-monotone-increasing",
    "template": "class Solution:\n    def find_and_replace_patterns(words, pattern):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_and_replace_patterns())"
  },
  {
    "id": "927",
    "slug": "three-equal-parts",
    "template": "class Solution:\n    def sum_of_widths(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_widths())"
  },
  {
    "id": "928",
    "slug": "minimize-malware-spread-ii",
    "template": "class Solution:\n    def surfaceArea(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.surfaceArea())"
  },
  {
    "id": "929",
    "slug": "unique-email-addresses",
    "template": "class Solution:\n    def num_special_equivalent_groups(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_special_equivalent_groups())"
  },
  {
    "id": "930",
    "slug": "binary-subarrays-with-sum",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "931",
    "slug": "minimum-falling-path-sum",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "932",
    "slug": "beautiful-array",
    "template": "class Solution:\n    def isMonotonic(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isMonotonic())"
  },
  {
    "id": "933",
    "slug": "number-of-recent-calls",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "935",
    "slug": "knight-dialer",
    "template": "class Solution:\n    def lex_smallest_string(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lex_smallest_string())"
  },
  {
    "id": "936",
    "slug": "stamping-the-sequence",
    "template": "class Solution:\n    def __init__(self, encoding):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "937",
    "slug": "reorder-data-in-log-files",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "938",
    "slug": "range-sum-of-bst",
    "template": "class Solution:\n    def num_digits_less_than_n(digits: List[int], n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_digits_less_than_n())"
  },
  {
    "id": "939",
    "slug": "minimum-area-rectangle",
    "template": "class Solution:\n    def find_valid_permutations(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_valid_permutations())"
  },
  {
    "id": "940",
    "slug": "distinct-subsequences-ii",
    "template": "class Solution:\n    def totalFruit(fruits):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.totalFruit())"
  },
  {
    "id": "941",
    "slug": "valid-mountain-array",
    "template": "class Solution:\n    def move_even_odd(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.move_even_odd())"
  },
  {
    "id": "942",
    "slug": "di-string-match",
    "template": "class Solution:\n    def isPalindrome(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isPalindrome())"
  },
  {
    "id": "943",
    "slug": "find-the-shortest-superstring",
    "template": "class Solution:\n    def sum_of_mins(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_mins())"
  },
  {
    "id": "944",
    "slug": "delete-columns-to-make-sorted",
    "template": "class Solution:\n    def minDifference(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDifference())"
  },
  {
    "id": "945",
    "slug": "minimum-increment-to-make-array-unique",
    "template": "class Solution:\n    def snakesAndLadders(board):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.snakesAndLadders())"
  },
  {
    "id": "946",
    "slug": "validate-stack-sequences",
    "template": "class Solution:\n    def minimum_score(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_score())"
  },
  {
    "id": "947",
    "slug": "most-stones-removed-with-same-row-or-column",
    "template": "class Solution:\n    def __init__(self, persons, times):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "948",
    "slug": "bag-of-tokens",
    "template": "class Solution:\n    def sortArray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sortArray())"
  },
  {
    "id": "949",
    "slug": "largest-time-for-given-digits",
    "template": "class Solution:\n    def catMouseGame(graph):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.catMouseGame())"
  },
  {
    "id": "950",
    "slug": "reveal-cards-in-increasing-order",
    "template": "class Solution:\n    def hasGroupsSizeX(deck):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.hasGroupsSizeX())"
  },
  {
    "id": "951",
    "slug": "flip-equivalent-binary-trees",
    "template": "class Solution:\n    def partitionDisjoint(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.partitionDisjoint())"
  },
  {
    "id": "952",
    "slug": "largest-component-size-by-common-factor",
    "template": "class Solution:\n    def word_subsets(words1, words2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.word_subsets())"
  },
  {
    "id": "953",
    "slug": "verifying-an-alien-dictionary",
    "template": "class Solution:\n    def reverse_string(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverse_string())"
  },
  {
    "id": "954",
    "slug": "array-of-doubled-pairs",
    "template": "class Solution:\n    def canReorderDoubled(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canReorderDoubled())"
  },
  {
    "id": "955",
    "slug": "delete-columns-to-make-sorted-ii",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "956",
    "slug": "tallest-billboard",
    "template": "class Solution:\n    def numMusicPlaylists(n, goal, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numMusicPlaylists())"
  },
  {
    "id": "958",
    "slug": "check-completeness-of-a-binary-tree",
    "template": "class Solution:\n    def sortArrayByParityII(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sortArrayByParityII())"
  },
  {
    "id": "959",
    "slug": "regions-cut-by-slashes",
    "template": "class Solution:\n    def threeSumMulti(arr, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.threeSumMulti())"
  },
  {
    "id": "960",
    "slug": "delete-columns-to-make-sorted-iii",
    "template": "class Solution:\n    def minMalwareSpread(graph, initial):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minMalwareSpread())"
  },
  {
    "id": "961",
    "slug": "n-repeated-element-in-size-2n-array",
    "template": "class Solution:\n    def isLongPressedName(name: str, typed: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isLongPressedName())"
  },
  {
    "id": "963",
    "slug": "minimum-area-rectangle-ii",
    "template": "class Solution:\n    def find_same_binary_value_parts(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_same_binary_value_parts())"
  },
  {
    "id": "964",
    "slug": "least-operators-to-express-number",
    "template": "class Solution:\n    def minMalwareSpread(graph: List[List[int]], initial: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minMalwareSpread())"
  },
  {
    "id": "965",
    "slug": "univalued-binary-tree",
    "template": "class Solution:\n    def num_unique_emails(emails):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_unique_emails())"
  },
  {
    "id": "966",
    "slug": "vowel-spellchecker",
    "template": "class Solution:\n    def num_subarrays_with_sum(nums, goal):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_subarrays_with_sum())"
  },
  {
    "id": "967",
    "slug": "numbers-with-same-consecutive-differences",
    "template": "class Solution:\n    def minFallingPathSum(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minFallingPathSum())"
  },
  {
    "id": "969",
    "slug": "pancake-sorting",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "970",
    "slug": "powerful-integers",
    "template": "class Solution:\n    def powerfulIntegers(x, y, bound):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.powerfulIntegers())"
  },
  {
    "id": "971",
    "slug": "flip-binary-tree-to-match-preorder-traversal",
    "template": "class Solution:\n    def shortestBridge(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestBridge())"
  },
  {
    "id": "972",
    "slug": "equal-rational-numbers",
    "template": "class Solution:\n    def knightDialer(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.knightDialer())"
  },
  {
    "id": "973",
    "slug": "k-closest-points-to-origin",
    "template": "class Solution:\n    def moves_to_stamp(stamp: str, target: str) -> list:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.moves_to_stamp())"
  },
  {
    "id": "974",
    "slug": "subarray-sums-divisible-by-k",
    "template": "class Solution:\n    def subarraysDivByK(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.subarraysDivByK())"
  },
  {
    "id": "976",
    "slug": "largest-perimeter-triangle",
    "template": "class Solution:\n    def min_area_rect(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_area_rect())"
  },
  {
    "id": "977",
    "slug": "squares-of-a-sorted-array",
    "template": "class Solution:\n    def distinctSubseqII(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distinctSubseqII())"
  },
  {
    "id": "978",
    "slug": "longest-turbulent-subarray",
    "template": "class Solution:\n    def valid_mountain_array(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.valid_mountain_array())"
  },
  {
    "id": "979",
    "slug": "distribute-coins-in-binary-tree",
    "template": "class Solution:\n    def decode_permutation(s: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decode_permutation())"
  },
  {
    "id": "980",
    "slug": "unique-paths-iii",
    "template": "class Solution:\n    def smallestSuperstring(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestSuperstring())"
  },
  {
    "id": "981",
    "slug": "time-based-key-value-store",
    "template": "class Solution:\n    def min_deletion_size(strs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_deletion_size())"
  },
  {
    "id": "982",
    "slug": "triples-with-bitwise-and-equal-to-zero",
    "template": "class Solution:\n    def min_moves_unique(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_moves_unique())"
  },
  {
    "id": "983",
    "slug": "minimum-cost-for-tickets",
    "template": "class Solution:\n    def validateStackSequences(pushed, popped):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.validateStackSequences())"
  },
  {
    "id": "984",
    "slug": "string-without-aaa-or-bbb",
    "template": "class Solution:\n    def removeStones(stones):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeStones())"
  },
  {
    "id": "985",
    "slug": "sum-of-even-numbers-after-queries",
    "template": "class Solution:\n    def bag_of_tokens_score(tokens, power):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.bag_of_tokens_score())"
  },
  {
    "id": "986",
    "slug": "interval-list-intersections",
    "template": "class Solution:\n    def largestTimeFromDigits(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestTimeFromDigits())"
  },
  {
    "id": "987",
    "slug": "vertical-order-traversal-of-a-binary-tree",
    "template": "class Solution:\n    def deckRevealedIncreasing(deck):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.deckRevealedIncreasing())"
  },
  {
    "id": "988",
    "slug": "smallest-string-starting-from-leaf",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "989",
    "slug": "add-to-array-form-of-integer",
    "template": "class Solution:\n    def largestComponentSize(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestComponentSize())"
  },
  {
    "id": "990",
    "slug": "satisfiability-of-equality-equations",
    "template": "class Solution:\n    def is_alien_sorted(words, order):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_alien_sorted())"
  },
  {
    "id": "991",
    "slug": "broken-calculator",
    "template": "class Solution:\n    def can_reorder_array(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_reorder_array())"
  },
  {
    "id": "992",
    "slug": "subarrays-with-k-different-integers",
    "template": "class Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDeletionSize())"
  },
  {
    "id": "993",
    "slug": "cousins-in-binary-tree",
    "template": "class Solution:\n    def tallestBillboard(rods):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.tallestBillboard())"
  },
  {
    "id": "994",
    "slug": "rotting-oranges",
    "template": "class Solution:\n    def prisonAfterNDays(cells, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.prisonAfterNDays())"
  },
  {
    "id": "995",
    "slug": "minimum-number-of-k-consecutive-bit-flips",
    "template": "class Solution:\n    def min_k_bit_flips(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_k_bit_flips())"
  },
  {
    "id": "996",
    "slug": "number-of-squareful-arrays",
    "template": "class Solution:\n    def numSquarefulPerms(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSquarefulPerms())"
  },
  {
    "id": "997",
    "slug": "find-the-town-judge",
    "template": "class Solution:\n    def findJudge(n, trust):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findJudge())"
  },
  {
    "id": "998",
    "slug": "maximum-binary-tree-ii",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "999",
    "slug": "available-captures-for-rook",
    "template": "class Solution:\n    def regionsBySlashes(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.regionsBySlashes())"
  },
  {
    "id": "1000",
    "slug": "minimum-cost-to-merge-stones",
    "template": "class Solution:\n    def min_deletion_size(strs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_deletion_size())"
  },
  {
    "id": "1001",
    "slug": "grid-illumination",
    "template": "class Solution:\n    def repeatedNTimes(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.repeatedNTimes())"
  },
  {
    "id": "1003",
    "slug": "check-if-word-is-valid-after-substitutions",
    "template": "class Solution:\n    def minAreaFreeRect(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minAreaFreeRect())"
  },
  {
    "id": "1004",
    "slug": "max-consecutive-ones-iii",
    "template": "class Solution:\n    def least_ops_express_target(x, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.least_ops_express_target())"
  },
  {
    "id": "1005",
    "slug": "maximize-sum-of-array-after-k-negations",
    "template": "class Solution:\n    def is_univalued(root, val=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_univalued())"
  },
  {
    "id": "1006",
    "slug": "clumsy-factorial",
    "template": "class Solution:\n    def spellchecker(wordlist, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.spellchecker())"
  },
  {
    "id": "1007",
    "slug": "minimum-domino-rotations-for-equal-row",
    "template": "class Solution:\n    def numsSameConsecDiff(n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numsSameConsecDiff())"
  },
  {
    "id": "1008",
    "slug": "construct-binary-search-tree-from-preorder-traversal",
    "template": "class Solution:\n    def min_camera_cover(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_camera_cover())"
  },
  {
    "id": "1009",
    "slug": "complement-of-base-10-integer",
    "template": "class Solution:\n    def pancakeSort(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pancakeSort())"
  },
  {
    "id": "1010",
    "slug": "pairs-of-songs-with-total-durations-divisible-by-60",
    "template": "class Solution:\n    def powerful_integers(x, y, bound):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.powerful_integers())"
  },
  {
    "id": "1011",
    "slug": "capacity-to-ship-packages-within-d-days",
    "template": "class Solution:\n    def flipRecur(node, voyage, flipped, idx):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.flipRecur())"
  },
  {
    "id": "1013",
    "slug": "partition-array-into-three-parts-with-equal-sum",
    "template": "class Solution:\n    def fib(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fib())"
  },
  {
    "id": "1014",
    "slug": "best-sightseeing-pair",
    "template": "class Solution:\n    def kClosest(points, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kClosest())"
  },
  {
    "id": "1015",
    "slug": "smallest-integer-divisible-by-k",
    "template": "class Solution:\n    def smallestRepunitDivByK(k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestRepunitDivByK())"
  },
  {
    "id": "1016",
    "slug": "binary-string-with-substrings-representing-1-to-n",
    "template": "class Solution:\n    def subarraysDivByK(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.subarraysDivByK())"
  },
  {
    "id": "1017",
    "slug": "convert-to-base-2",
    "template": "class Solution:\n    def odd_even_jumps(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.odd_even_jumps())"
  },
  {
    "id": "1018",
    "slug": "binary-prefix-divisible-by-5",
    "template": "class Solution:\n    def largestPerimeter(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestPerimeter())"
  },
  {
    "id": "1019",
    "slug": "next-greater-node-in-linked-list",
    "template": "class Solution:\n    def sortedSquares(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sortedSquares())"
  },
  {
    "id": "1020",
    "slug": "number-of-enclaves",
    "template": "class Solution:\n    def maxTurbulenceSize(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxTurbulenceSize())"
  },
  {
    "id": "1021",
    "slug": "remove-outermost-parentheses",
    "template": "class Solution:\n    def distributeCoins(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distributeCoins())"
  },
  {
    "id": "1022",
    "slug": "sum-of-root-to-leaf-binary-numbers",
    "template": "class Solution:\n    def uniquePathsIII(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.uniquePathsIII())"
  },
  {
    "id": "1023",
    "slug": "camelcase-matching",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1024",
    "slug": "video-stitching",
    "template": "class Solution:\n    def count_and_triples(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_and_triples())"
  },
  {
    "id": "1025",
    "slug": "divisor-game",
    "template": "class Solution:\n    def mincostTickets(days, costs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mincostTickets())"
  },
  {
    "id": "1026",
    "slug": "maximum-difference-between-node-and-ancestor",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1027",
    "slug": "longest-arithmetic-subsequence",
    "template": "class Solution:\n    def sumEvenAfterQueries(nums, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumEvenAfterQueries())"
  },
  {
    "id": "1028",
    "slug": "recover-a-tree-from-preorder-traversal",
    "template": "class Solution:\n    def interval_intersection(firstList, secondList):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.interval_intersection())"
  },
  {
    "id": "1029",
    "slug": "two-city-scheduling",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1030",
    "slug": "matrix-cells-in-distance-order",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1031",
    "slug": "maximum-sum-of-two-non-overlapping-subarrays",
    "template": "class Solution:\n    def add_to_array_form(num, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.add_to_array_form())"
  },
  {
    "id": "1032",
    "slug": "stream-of-characters",
    "template": "class Solution:\n    def equationsPossible(equations):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.equationsPossible())"
  },
  {
    "id": "1034",
    "slug": "coloring-a-border",
    "template": "class Solution:\n    def good_subarrays(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.good_subarrays())"
  },
  {
    "id": "1035",
    "slug": "uncrossed-lines",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1036",
    "slug": "escape-a-large-maze",
    "template": "class Solution:\n    def orangesRotting(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.orangesRotting())"
  },
  {
    "id": "1037",
    "slug": "valid-boomerang",
    "template": "class Solution:\n    def min_k_bit_flips(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_k_bit_flips())"
  },
  {
    "id": "1038",
    "slug": "binary-search-tree-to-greater-sum-tree",
    "template": "class Solution:\n    def is_squareful(x, int_y):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_squareful())"
  },
  {
    "id": "1039",
    "slug": "minimum-score-triangulation-of-polygon",
    "template": "class Solution:\n    def find_judge(n, trust):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_judge())"
  },
  {
    "id": "1041",
    "slug": "robot-bounded-in-circle",
    "template": "class Solution:\n    def numRookCaptures(board):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numRookCaptures())"
  },
  {
    "id": "1042",
    "slug": "flower-planting-with-no-adjacent",
    "template": "class Solution:\n    def mergeStones(stones, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mergeStones())"
  },
  {
    "id": "1043",
    "slug": "partition-array-for-maximum-sum",
    "template": "class Solution:\n    def grid_illumination(n, lamps, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.grid_illumination())"
  },
  {
    "id": "1044",
    "slug": "longest-duplicate-substring",
    "template": "class Solution:\n    def commonChars(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.commonChars())"
  },
  {
    "id": "1046",
    "slug": "last-stone-weight",
    "template": "class Solution:\n    def longestOnes(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestOnes())"
  },
  {
    "id": "1047",
    "slug": "remove-all-adjacent-duplicates-in-string",
    "template": "class Solution:\n    def maxSumAfterKOperations(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSumAfterKOperations())"
  },
  {
    "id": "1049",
    "slug": "last-stone-weight-ii",
    "template": "class Solution:\n    def min_rotations(tops, bottoms):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_rotations())"
  },
  {
    "id": "1051",
    "slug": "height-checker",
    "template": "class Solution:\n    def height_checker(heights):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.height_checker())"
  },
  {
    "id": "1052",
    "slug": "grumpy-bookstore-owner",
    "template": "class Solution:\n    def maxSatisfied(customers, grumpy, minutes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSatisfied())"
  },
  {
    "id": "1053",
    "slug": "previous-permutation-with-one-swap",
    "template": "class Solution:\n    def prevPermOpt1(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.prevPermOpt1())"
  },
  {
    "id": "1054",
    "slug": "distant-barcodes",
    "template": "class Solution:\n    def bitwise_complement(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.bitwise_complement())"
  },
  {
    "id": "1055",
    "slug": "shortest-way-to-form-string",
    "template": "class Solution:\n    def num_pairs_divisible_by60(time):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_pairs_divisible_by60())"
  },
  {
    "id": "1057",
    "slug": "campus-bikes",
    "template": "class Solution:\n    def num_dup_digits_at_most_n(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_dup_digits_at_most_n())"
  },
  {
    "id": "1058",
    "slug": "minimize-rounding-error-to-meet-target",
    "template": "class Solution:\n    def find_rounding_error(prices, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_rounding_error())"
  },
  {
    "id": "1059",
    "slug": "all-paths-from-source-lead-to-destination",
    "template": "class Solution:\n    def leadsToDestination(n, edges, source, destination):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.leadsToDestination())"
  },
  {
    "id": "1060",
    "slug": "missing-element-in-sorted-array",
    "template": "class Solution:\n    def findKthPositive(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findKthPositive())"
  },
  {
    "id": "1061",
    "slug": "lexicographically-smallest-equivalent-string",
    "template": "class Solution:\n    def lex_smallest_equivalent(s1, s2, base_str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lex_smallest_equivalent())"
  },
  {
    "id": "1062",
    "slug": "longest-repeating-substring",
    "template": "class Solution:\n    def find_longest_repeating_substring(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_longest_repeating_substring())"
  },
  {
    "id": "1063",
    "slug": "number-of-valid-subarrays",
    "template": "class Solution:\n    def maxScoreSightseeingPair(values):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScoreSightseeingPair())"
  },
  {
    "id": "1065",
    "slug": "index-pairs-of-a-string",
    "template": "class Solution:\n    def has_all_codes_in_range(s: str, n: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.has_all_codes_in_range())"
  },
  {
    "id": "1066",
    "slug": "campus-bikes-ii",
    "template": "class Solution:\n    def manhattan_distance(worker: List[int], bike: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.manhattan_distance())"
  },
  {
    "id": "1067",
    "slug": "digit-count-in-range",
    "template": "class Solution:\n    def count_digit(d, low, high):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_digit())"
  },
  {
    "id": "1071",
    "slug": "greatest-common-divisor-of-strings",
    "template": "class Solution:\n    def prefixesDivBy5(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.prefixesDivBy5())"
  },
  {
    "id": "1072",
    "slug": "flip-columns-for-maximum-number-of-equal-rows",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1073",
    "slug": "adding-two-negabinary-numbers",
    "template": "class Solution:\n    def addNegabinary(arr1, arr2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.addNegabinary())"
  },
  {
    "id": "1074",
    "slug": "number-of-submatrices-that-sum-to-target",
    "template": "class Solution:\n    def numSubmatrixSumTarget(matrix: List[List[int]], target: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSubmatrixSumTarget())"
  },
  {
    "id": "1079",
    "slug": "letter-tile-possibilities",
    "template": "class Solution:\n    def sumRootToLeaf(root, path_value=0):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumRootToLeaf())"
  },
  {
    "id": "1080",
    "slug": "insufficient-nodes-in-root-to-leaf-paths",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1081",
    "slug": "smallest-subsequence-of-distinct-characters",
    "template": "class Solution:\n    def videoStitching(clips, time):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.videoStitching())"
  },
  {
    "id": "1085",
    "slug": "sum-of-digits-in-the-minimum-number",
    "template": "class Solution:\n    def sum_of_digits(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_digits())"
  },
  {
    "id": "1086",
    "slug": "high-five",
    "template": "class Solution:\n    def alice_win(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.alice_win())"
  },
  {
    "id": "1087",
    "slug": "brace-expansion",
    "template": "class Solution:\n    def longestArithSeqLength(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestArithSeqLength())"
  },
  {
    "id": "1088",
    "slug": "confusing-number-ii",
    "template": "class Solution:\n    def confusingNumberII(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.confusingNumberII())"
  },
  {
    "id": "1089",
    "slug": "duplicate-zeros",
    "template": "class Solution:\n    def duplicateZeros(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.duplicateZeros())"
  },
  {
    "id": "1091",
    "slug": "shortest-path-in-binary-matrix",
    "template": "class Solution:\n    def shortestPathBinaryMatrix(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestPathBinaryMatrix())"
  },
  {
    "id": "1092",
    "slug": "shortest-common-supersequence",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1093",
    "slug": "statistics-from-a-large-sample",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1094",
    "slug": "car-pooling",
    "template": "class Solution:\n    def allCellsDistOrder(rows, cols, rCenter, cCenter):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.allCellsDistOrder())"
  },
  {
    "id": "1095",
    "slug": "find-in-mountain-array",
    "template": "class Solution:\n    def twoCitySchedCost(costs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.twoCitySchedCost())"
  },
  {
    "id": "1096",
    "slug": "brace-expansion-ii",
    "template": "class Solution:\n    def braceExpansionII(self, expression: str) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.braceExpansionII())"
  },
  {
    "id": "1099",
    "slug": "two-sum-less-than-k",
    "template": "class Solution:\n    def max_sum_under_k(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_sum_under_k())"
  },
  {
    "id": "1100",
    "slug": "find-k-length-substrings-with-no-repeated-characters",
    "template": "class Solution:\n    def num_k_len_substr_no_repeats(s: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_k_len_substr_no_repeats())"
  },
  {
    "id": "1101",
    "slug": "the-earliest-moment-when-everyone-become-friends",
    "template": "class Solution:\n    def earliestAcq(logs, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.earliestAcq())"
  },
  {
    "id": "1102",
    "slug": "path-with-maximum-minimum-value",
    "template": "class Solution:\n    def maxScore(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScore())"
  },
  {
    "id": "1103",
    "slug": "distribute-candies-to-people",
    "template": "class Solution:\n    def distribute_candies(candies, num_people):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distribute_candies())"
  },
  {
    "id": "1104",
    "slug": "path-in-zigzag-labelled-binary-tree",
    "template": "class Solution:\n    def colorBorder(grid, row, col, color):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.colorBorder())"
  },
  {
    "id": "1105",
    "slug": "filling-bookcase-shelves",
    "template": "class Solution:\n    def max_uncrossed_lines(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_uncrossed_lines())"
  },
  {
    "id": "1106",
    "slug": "parsing-a-boolean-expression",
    "template": "class Solution:\n    def isEscapePossible(blocked, source, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isEscapePossible())"
  },
  {
    "id": "1109",
    "slug": "corporate-flight-bookings",
    "template": "class Solution:\n    def corpFlightBookings(bookings, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.corpFlightBookings())"
  },
  {
    "id": "1110",
    "slug": "delete-nodes-and-return-forest",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1111",
    "slug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
    "template": "class Solution:\n    def minScoreTriangulation(values):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minScoreTriangulation())"
  },
  {
    "id": "1118",
    "slug": "number-of-days-in-a-month",
    "template": "class Solution:\n    def number_of_days(year, month):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.number_of_days())"
  },
  {
    "id": "1120",
    "slug": "maximum-average-subtree",
    "template": "class Solution:\n    def gardenNoAdj(n, paths):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.gardenNoAdj())"
  },
  {
    "id": "1121",
    "slug": "divide-array-into-increasing-sequences",
    "template": "class Solution:\n    def maxSumAfterPartitioning(arr: list, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSumAfterPartitioning())"
  },
  {
    "id": "1122",
    "slug": "relative-sort-array",
    "template": "class Solution:\n    def longest_dup_substring(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_dup_substring())"
  },
  {
    "id": "1123",
    "slug": "lowest-common-ancestor-of-deepest-leaves",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1124",
    "slug": "longest-well-performing-interval",
    "template": "class Solution:\n    def longestWellPerformingInterval(hours):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestWellPerformingInterval())"
  },
  {
    "id": "1125",
    "slug": "smallest-sufficient-team",
    "template": "class Solution:\n    def smallestSufficientTeam(req_skills, people):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestSufficientTeam())"
  },
  {
    "id": "1129",
    "slug": "shortest-path-with-alternating-colors",
    "template": "class Solution:\n    def longestStrChain(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestStrChain())"
  },
  {
    "id": "1130",
    "slug": "minimum-cost-tree-from-leaf-values",
    "template": "class Solution:\n    def lastStoneWeight(stones):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lastStoneWeight())"
  },
  {
    "id": "1131",
    "slug": "maximum-of-absolute-value-expression",
    "template": "class Solution:\n    def maxAbsValExpr(arr1, arr2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxAbsValExpr())"
  },
  {
    "id": "1135",
    "slug": "connecting-cities-with-minimum-cost",
    "template": "class Solution:\n    def find(parent, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find())"
  },
  {
    "id": "1137",
    "slug": "n-th-tribonacci-number",
    "template": "class Solution:\n    def height_checker(heights):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.height_checker())"
  },
  {
    "id": "1138",
    "slug": "alphabet-board-path",
    "template": "class Solution:\n    def maxSatisfied(customers, grumpy, minutes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSatisfied())"
  },
  {
    "id": "1139",
    "slug": "largest-1-bordered-square",
    "template": "class Solution:\n    def prev_perm_opt1(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.prev_perm_opt1())"
  },
  {
    "id": "1140",
    "slug": "stone-game-ii",
    "template": "class Solution:\n    def rearrange_barcodes(barcodes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rearrange_barcodes())"
  },
  {
    "id": "1143",
    "slug": "longest-common-subsequence",
    "template": "class Solution:\n    def longestCommonSubsequence(text1: str, text2: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestCommonSubsequence())"
  },
  {
    "id": "1144",
    "slug": "decrease-elements-to-make-array-zigzag",
    "template": "class Solution:\n    def movesToMakeZigzag(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.movesToMakeZigzag())"
  },
  {
    "id": "1145",
    "slug": "binary-tree-coloring-game",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1147",
    "slug": "longest-chunked-palindrome-decomposition",
    "template": "class Solution:\n    def maxEqualRowsAfterFlips(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxEqualRowsAfterFlips())"
  },
  {
    "id": "1150",
    "slug": "check-if-a-number-is-majority-element-in-a-sorted-array",
    "template": "class Solution:\n    def is_majority_element(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_majority_element())"
  },
  {
    "id": "1151",
    "slug": "minimum-swaps-to-group-all-1s-together",
    "template": "class Solution:\n    def minSwaps(data):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSwaps())"
  },
  {
    "id": "1152",
    "slug": "analyze-user-website-visit-pattern",
    "template": "class Solution:\n    def mostVisitedPattern(self, username: List[str], timestamp: List[int], website: List[str]) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mostVisitedPattern())"
  },
  {
    "id": "1153",
    "slug": "string-transforms-into-another-string",
    "template": "class Solution:\n    def canConvert(str1, str2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canConvert())"
  },
  {
    "id": "1154",
    "slug": "day-of-the-year",
    "template": "class Solution:\n    def is_leap_year(year: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_leap_year())"
  },
  {
    "id": "1155",
    "slug": "number-of-dice-rolls-with-target-sum",
    "template": "class Solution:\n    def numRollsToTarget(n, k, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numRollsToTarget())"
  },
  {
    "id": "1156",
    "slug": "swap-for-longest-repeated-character-substring",
    "template": "class Solution:\n    def find_third_words(text, first, second):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_third_words())"
  },
  {
    "id": "1157",
    "slug": "online-majority-element-in-subarray",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1160",
    "slug": "find-words-that-can-be-formed-by-characters",
    "template": "class Solution:\n    def num_tile_possibilities(tiles: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_tile_possibilities())"
  },
  {
    "id": "1161",
    "slug": "maximum-level-sum-of-a-binary-tree",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1162",
    "slug": "as-far-from-land-as-possible",
    "template": "class Solution:\n    def maxDistance(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxDistance())"
  },
  {
    "id": "1163",
    "slug": "last-substring-in-lexicographical-order",
    "template": "class Solution:\n    def lastSubstring(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lastSubstring())"
  },
  {
    "id": "1166",
    "slug": "design-file-system",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1167",
    "slug": "minimum-cost-to-connect-sticks",
    "template": "class Solution:\n    def connectSticks(sticks):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.connectSticks())"
  },
  {
    "id": "1168",
    "slug": "optimize-water-distribution-in-a-village",
    "template": "class Solution:\n    def duplicateZeros(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.duplicateZeros())"
  },
  {
    "id": "1170",
    "slug": "compare-strings-by-frequency-of-the-smallest-character",
    "template": "class Solution:\n    def shortest_common_supersequence(str1, str2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_common_supersequence())"
  },
  {
    "id": "1171",
    "slug": "remove-zero-sum-consecutive-nodes-from-linked-list",
    "template": "class Solution:\n    def shortestPathBinaryMatrix(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestPathBinaryMatrix())"
  },
  {
    "id": "1172",
    "slug": "dinner-plate-stacks",
    "template": "class Solution:\n    def __init__(self, capacity: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1175",
    "slug": "prime-arrangements",
    "template": "class Solution:\n    def numPrimeArrangements(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numPrimeArrangements())"
  },
  {
    "id": "1176",
    "slug": "diet-plan-performance",
    "template": "class Solution:\n    def dietPlanPerformance(calories, k, lower, upper):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dietPlanPerformance())"
  },
  {
    "id": "1177",
    "slug": "can-make-palindrome-from-substring",
    "template": "class Solution:\n    def canMakePaliQueries(s, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canMakePaliQueries())"
  },
  {
    "id": "1178",
    "slug": "number-of-valid-words-for-each-puzzle",
    "template": "class Solution:\n    def find_num_of_valid_words(words, puzzles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_num_of_valid_words())"
  },
  {
    "id": "1180",
    "slug": "count-substrings-with-only-one-distinct-letter",
    "template": "class Solution:\n    def count_letters(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_letters())"
  },
  {
    "id": "1181",
    "slug": "before-and-after-puzzle",
    "template": "class Solution:\n    def beforeAndAfterPuzzles(phrases):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.beforeAndAfterPuzzles())"
  },
  {
    "id": "1182",
    "slug": "shortest-distance-to-target-color",
    "template": "class Solution:\n    def shortestDistance(colors, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestDistance())"
  },
  {
    "id": "1183",
    "slug": "maximum-number-of-ones",
    "template": "class Solution:\n    def sampleStats(count):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sampleStats())"
  },
  {
    "id": "1184",
    "slug": "distance-between-bus-stops",
    "template": "class Solution:\n    def carPooling(trips, capacity):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.carPooling())"
  },
  {
    "id": "1185",
    "slug": "day-of-the-week",
    "template": "class Solution:\n    def day_of_the_week(day, month, year):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.day_of_the_week())"
  },
  {
    "id": "1186",
    "slug": "maximum-subarray-sum-with-one-deletion",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1187",
    "slug": "make-array-strictly-increasing",
    "template": "class Solution:\n    def __init__(self, n: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1190",
    "slug": "reverse-substrings-between-each-pair-of-parentheses",
    "template": "class Solution:\n    def reverseParentheses(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverseParentheses())"
  },
  {
    "id": "1191",
    "slug": "k-concatenation-maximum-sum",
    "template": "class Solution:\n    def kConcatenationMaxSum(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kConcatenationMaxSum())"
  },
  {
    "id": "1192",
    "slug": "critical-connections-in-a-network",
    "template": "class Solution:\n    def criticalConnections(n, connections):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.criticalConnections())"
  },
  {
    "id": "1196",
    "slug": "how-many-apples-can-you-put-into-the-basket",
    "template": "class Solution:\n    def minHeightShelves(books, shelfWidth):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minHeightShelves())"
  },
  {
    "id": "1197",
    "slug": "minimum-knight-moves",
    "template": "class Solution:\n    def parse_bool_expr(expression, pos=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.parse_bool_expr())"
  },
  {
    "id": "1198",
    "slug": "find-smallest-common-element-in-all-rows",
    "template": "class Solution:\n    def smallest_common_element(mat):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_common_element())"
  },
  {
    "id": "1199",
    "slug": "minimum-time-to-build-blocks",
    "template": "class Solution:\n    def min_build_time(blocks, split):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_build_time())"
  },
  {
    "id": "1200",
    "slug": "minimum-absolute-difference",
    "template": "class Solution:\n    def minimumAbsDifference(arr: List[int]) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumAbsDifference())"
  },
  {
    "id": "1201",
    "slug": "ugly-number-iii",
    "template": "class Solution:\n    def nthUglyNumber(n, a, b, c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nthUglyNumber())"
  },
  {
    "id": "1202",
    "slug": "smallest-string-with-swaps",
    "template": "class Solution:\n    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestStringWithSwaps())"
  },
  {
    "id": "1203",
    "slug": "sort-items-by-groups-respecting-dependencies",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1206",
    "slug": "design-skiplist",
    "template": "class Solution:\n    def corp_flight_bookings(bookings, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.corp_flight_bookings())"
  },
  {
    "id": "1207",
    "slug": "unique-number-of-occurrences",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1208",
    "slug": "get-equal-substrings-within-budget",
    "template": "class Solution:\n    def split_string(seq: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.split_string())"
  },
  {
    "id": "1210",
    "slug": "minimum-moves-to-reach-target-with-rotations",
    "template": "class Solution:\n    def trimmed_mean(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.trimmed_mean())"
  },
  {
    "id": "1213",
    "slug": "intersection-of-three-sorted-arrays",
    "template": "class Solution:\n    def arraysIntersection(arr1, arr2, arr3):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.arraysIntersection())"
  },
  {
    "id": "1214",
    "slug": "two-sum-bsts",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1215",
    "slug": "stepping-numbers",
    "template": "class Solution:\n    def countSteppingNumbers(low, high):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countSteppingNumbers())"
  },
  {
    "id": "1216",
    "slug": "valid-palindrome-iii",
    "template": "class Solution:\n    def __init__(self, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1217",
    "slug": "minimum-cost-to-move-chips-to-the-same-position",
    "template": "class Solution:\n    def sort_array(arr1, arr2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sort_array())"
  },
  {
    "id": "1218",
    "slug": "longest-arithmetic-subsequence-of-given-difference",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1219",
    "slug": "path-with-maximum-gold",
    "template": "class Solution:\n    def longest_wpi(hours):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_wpi())"
  },
  {
    "id": "1220",
    "slug": "count-vowels-permutation",
    "template": "class Solution:\n    def smallestSufficientTeam(req_skills: List[str], people: List[List[str]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestSufficientTeam())"
  },
  {
    "id": "1221",
    "slug": "split-a-string-in-balanced-strings",
    "template": "class Solution:\n    def find_special_integer(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_special_integer())"
  },
  {
    "id": "1222",
    "slug": "queens-that-can-attack-the-king",
    "template": "class Solution:\n    def remove_covered_intervals(intervals):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.remove_covered_intervals())"
  },
  {
    "id": "1223",
    "slug": "dice-roll-simulation",
    "template": "class Solution:\n    def areConnected(n, threshold, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.areConnected())"
  },
  {
    "id": "1224",
    "slug": "maximum-equal-frequency",
    "template": "class Solution:\n    def minFallingPathSum(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minFallingPathSum())"
  },
  {
    "id": "1227",
    "slug": "airplane-seat-assignment-probability",
    "template": "class Solution:\n    def num_equiv_domino_pairs(dominoes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_equiv_domino_pairs())"
  },
  {
    "id": "1228",
    "slug": "missing-number-in-arithmetic-progression",
    "template": "class Solution:\n    def mctFromLeafValues(arr: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mctFromLeafValues())"
  },
  {
    "id": "1229",
    "slug": "meeting-scheduler",
    "template": "class Solution:\n    def shortestAlternatingPaths(n, redEdges, blueEdges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestAlternatingPaths())"
  },
  {
    "id": "1230",
    "slug": "toss-strange-coins",
    "template": "class Solution:\n    def max_value(arr1, arr2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_value())"
  },
  {
    "id": "1231",
    "slug": "divide-chocolate",
    "template": "class Solution:\n    def replaceElements(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.replaceElements())"
  },
  {
    "id": "1232",
    "slug": "check-if-it-is-a-straight-line",
    "template": "class Solution:\n    def findBestValue(arr, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findBestValue())"
  },
  {
    "id": "1233",
    "slug": "remove-sub-folders-from-the-filesystem",
    "template": "class Solution:\n    def removeSubfolders(folder: List[str]) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeSubfolders())"
  },
  {
    "id": "1234",
    "slug": "replace-the-substring-for-balanced-string",
    "template": "class Solution:\n    def getMaxSumAndCount(board):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getMaxSumAndCount())"
  },
  {
    "id": "1235",
    "slug": "maximum-profit-in-job-scheduling",
    "template": "class Solution:\n    def jobScheduling(startTime, endTime, profit):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.jobScheduling())"
  },
  {
    "id": "1236",
    "slug": "web-crawler",
    "template": "class Solution:\n    def tribonacci(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.tribonacci())"
  },
  {
    "id": "1237",
    "slug": "find-positive-integer-solution-for-a-given-equation",
    "template": "class Solution:\n    def findSolution(customfunction: 'CustomFunction', z: int) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findSolution())"
  },
  {
    "id": "1239",
    "slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
    "template": "class Solution:\n    def largest1BorderedSquare(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest1BorderedSquare())"
  },
  {
    "id": "1240",
    "slug": "tiling-a-rectangle-with-the-fewest-squares",
    "template": "class Solution:\n    def stoneGameII(piles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stoneGameII())"
  },
  {
    "id": "1243",
    "slug": "array-transformation",
    "template": "class Solution:\n    def sumEvenGrandparent(root, parent=None, grandparent=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumEvenGrandparent())"
  },
  {
    "id": "1244",
    "slug": "design-a-leaderboard",
    "template": "class Solution:\n    def num_distinct_repeated_substrings(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_distinct_repeated_substrings())"
  },
  {
    "id": "1245",
    "slug": "tree-diameter",
    "template": "class Solution:\n    def tree_diameter(edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.tree_diameter())"
  },
  {
    "id": "1246",
    "slug": "palindrome-removal",
    "template": "class Solution:\n    def minimumMoves(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumMoves())"
  },
  {
    "id": "1247",
    "slug": "minimum-swaps-to-make-strings-equal",
    "template": "class Solution:\n    def moves_to_make_zigzag(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.moves_to_make_zigzag())"
  },
  {
    "id": "1248",
    "slug": "count-number-of-nice-subarrays",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1250",
    "slug": "check-if-it-is-a-good-array",
    "template": "class Solution:\n    def isGoodArray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isGoodArray())"
  },
  {
    "id": "1252",
    "slug": "cells-with-odd-values-in-a-matrix",
    "template": "class Solution:\n    def break_palindrome(palindrome: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.break_palindrome())"
  },
  {
    "id": "1253",
    "slug": "reconstruct-a-2-row-binary-matrix",
    "template": "class Solution:\n    def diagonalSort(mat):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.diagonalSort())"
  },
  {
    "id": "1254",
    "slug": "number-of-closed-islands",
    "template": "class Solution:\n    def closedIsland(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.closedIsland())"
  },
  {
    "id": "1255",
    "slug": "maximum-score-words-formed-by-letters",
    "template": "class Solution:\n    def maxValueAfterReverse(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxValueAfterReverse())"
  },
  {
    "id": "1256",
    "slug": "encode-number",
    "template": "class Solution:\n    def arrayRankTransform(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.arrayRankTransform())"
  },
  {
    "id": "1257",
    "slug": "smallest-common-region",
    "template": "class Solution:\n    def matrix_rank_transform(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.matrix_rank_transform())"
  },
  {
    "id": "1258",
    "slug": "synonymous-sentences",
    "template": "class Solution:\n    def generateSentences(synonyms: List[List[str]], text: str) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.generateSentences())"
  },
  {
    "id": "1259",
    "slug": "handshakes-that-dont-cross",
    "template": "class Solution:\n    def numberOfWays(numPeople: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfWays())"
  },
  {
    "id": "1260",
    "slug": "shift-2d-grid",
    "template": "class Solution:\n    def dayOfYear(date: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dayOfYear())"
  },
  {
    "id": "1261",
    "slug": "find-elements-in-a-contaminated-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1262",
    "slug": "greatest-sum-divisible-by-three",
    "template": "class Solution:\n    def __init__(self, arr: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1263",
    "slug": "minimum-moves-to-move-a-box-to-their-target-location",
    "template": "class Solution:\n    def numRollsToTarget(n, k, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numRollsToTarget())"
  },
  {
    "id": "1266",
    "slug": "minimum-time-visiting-all-points",
    "template": "class Solution:\n    def minTimeToVisitAllPoints(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minTimeToVisitAllPoints())"
  },
  {
    "id": "1267",
    "slug": "count-servers-that-communicate",
    "template": "class Solution:\n    def remove_zero_sum_sublists(head):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.remove_zero_sum_sublists())"
  },
  {
    "id": "1268",
    "slug": "search-suggestions-system",
    "template": "class Solution:\n    def suggestedProducts(products, searchWord):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.suggestedProducts())"
  },
  {
    "id": "1269",
    "slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
    "template": "class Solution:\n    def numOfWays(steps: int, arrLen: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numOfWays())"
  },
  {
    "id": "1272",
    "slug": "remove-interval",
    "template": "class Solution:\n    def invalid_transactions(transactions):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.invalid_transactions())"
  },
  {
    "id": "1273",
    "slug": "delete-tree-nodes",
    "template": "class Solution:\n    def countSmallerFrequencies(words, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countSmallerFrequencies())"
  },
  {
    "id": "1274",
    "slug": "number-of-ships-in-a-rectangle",
    "template": "class Solution:\n    def countDaysBetweenDates(date1, date2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countDaysBetweenDates())"
  },
  {
    "id": "1275",
    "slug": "find-winner-on-a-tic-tac-toe-game",
    "template": "class Solution:\n    def validateBinaryTreeNodes(n, leftChild, rightChild):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.validateBinaryTreeNodes())"
  },
  {
    "id": "1276",
    "slug": "number-of-burgers-with-no-waste-of-ingredients",
    "template": "class Solution:\n    def closest_factors(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.closest_factors())"
  },
  {
    "id": "1277",
    "slug": "count-square-submatrices-with-all-ones",
    "template": "class Solution:\n    def largest_multiple_of_three(digits):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest_multiple_of_three())"
  },
  {
    "id": "1278",
    "slug": "palindrome-partitioning-iii",
    "template": "class Solution:\n    def palindromePartition(s: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.palindromePartition())"
  },
  {
    "id": "1281",
    "slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
    "template": "class Solution:\n    def can_make_pali_queries(s, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_make_pali_queries())"
  },
  {
    "id": "1282",
    "slug": "group-the-people-given-the-group-size-they-belong-to",
    "template": "class Solution:\n    def groupThePeople(groupSizes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.groupThePeople())"
  },
  {
    "id": "1283",
    "slug": "find-the-smallest-divisor-given-a-threshold",
    "template": "class Solution:\n    def format_date(date):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.format_date())"
  },
  {
    "id": "1284",
    "slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
    "template": "class Solution:\n    def sum_of_divisors_with_four_divisors(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_divisors_with_four_divisors())"
  },
  {
    "id": "1286",
    "slug": "iterator-for-combination",
    "template": "class Solution:\n    def max_sum_subsequence(nums: List[int], k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_sum_subsequence())"
  },
  {
    "id": "1287",
    "slug": "element-appearing-more-than-25-in-sorted-array",
    "template": "class Solution:\n    def shortest_distance(distance, start, destination):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_distance())"
  },
  {
    "id": "1288",
    "slug": "remove-covered-intervals",
    "template": "class Solution:\n    def maximum_sum(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximum_sum())"
  },
  {
    "id": "1289",
    "slug": "minimum-falling-path-sum-ii",
    "template": "class Solution:\n    def day_of_the_week(day, month, year):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.day_of_the_week())"
  },
  {
    "id": "1290",
    "slug": "convert-binary-number-in-a-linked-list-to-integer",
    "template": "class Solution:\n    def min_operations(arr1, arr2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1291",
    "slug": "sequential-digits",
    "template": "class Solution:\n    def sequential_digits(low, high):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sequential_digits())"
  },
  {
    "id": "1292",
    "slug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
    "template": "class Solution:\n    def maxSideLength(mat: List[List[int]], threshold: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSideLength())"
  },
  {
    "id": "1293",
    "slug": "shortest-path-in-a-grid-with-obstacles-elimination",
    "template": "class Solution:\n    def shortestPath(grid, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestPath())"
  },
  {
    "id": "1295",
    "slug": "find-numbers-with-even-number-of-digits",
    "template": "class Solution:\n    def min_perimeter(neededApples):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_perimeter())"
  },
  {
    "id": "1296",
    "slug": "divide-array-in-sets-of-k-consecutive-numbers",
    "template": "class Solution:\n    def __init__(self, n: int, parent: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1297",
    "slug": "maximum-number-of-occurrences-of-a-substring",
    "template": "class Solution:\n    def maxNumberOfBalloons(text):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxNumberOfBalloons())"
  },
  {
    "id": "1299",
    "slug": "replace-elements-with-greatest-element-on-right-side",
    "template": "class Solution:\n    def kConcatenationMaxSum(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kConcatenationMaxSum())"
  },
  {
    "id": "1300",
    "slug": "sum-of-mutated-array-closest-to-target",
    "template": "class Solution:\n    def criticalConnections(n, connections):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.criticalConnections())"
  },
  {
    "id": "1301",
    "slug": "number-of-paths-with-max-score",
    "template": "class Solution:\n    def pathsWithMaxScore(board: List[str]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pathsWithMaxScore())"
  },
  {
    "id": "1302",
    "slug": "deepest-leaves-sum",
    "template": "class Solution:\n    def make_fancy_string(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.make_fancy_string())"
  },
  {
    "id": "1304",
    "slug": "find-n-unique-integers-sum-up-to-zero",
    "template": "class Solution:\n    def longestHappyString(a, b, c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestHappyString())"
  },
  {
    "id": "1305",
    "slug": "all-elements-in-two-binary-search-trees",
    "template": "class Solution:\n    def people_can_see(heights):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.people_can_see())"
  },
  {
    "id": "1306",
    "slug": "jump-game-iii",
    "template": "class Solution:\n    def minimumAbsDifference(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumAbsDifference())"
  },
  {
    "id": "1307",
    "slug": "verbal-arithmetic-puzzle",
    "template": "class Solution:\n    def nthUglyNumber(n, a, b, c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nthUglyNumber())"
  },
  {
    "id": "1309",
    "slug": "decrypt-string-from-alphabet-to-integer-mapping",
    "template": "class Solution:\n    def sortItems(n, m, group, beforeItems):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sortItems())"
  },
  {
    "id": "1310",
    "slug": "xor-queries-of-a-subarray",
    "template": "class Solution:\n    def water_plants(plants, capacity):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.water_plants())"
  },
  {
    "id": "1311",
    "slug": "get-watched-videos-by-your-friends",
    "template": "class Solution:\n    def largestMagicSquare(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestMagicSquare())"
  },
  {
    "id": "1312",
    "slug": "minimum-insertion-steps-to-make-a-string-palindrome",
    "template": "class Solution:\n    def extract_artifacts(n, artifacts, dig):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.extract_artifacts())"
  },
  {
    "id": "1313",
    "slug": "decompress-run-length-encoded-list",
    "template": "class Solution:\n    def add_rooms(idx, children, memo):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.add_rooms())"
  },
  {
    "id": "1314",
    "slug": "matrix-block-sum",
    "template": "class Solution:\n    def matrix_block_sum(mat, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.matrix_block_sum())"
  },
  {
    "id": "1315",
    "slug": "sum-of-nodes-with-even-valued-grandparent",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1317",
    "slug": "convert-integer-to-the-sum-of-two-no-zero-integers",
    "template": "class Solution:\n    def no_zero_integers(n: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.no_zero_integers())"
  },
  {
    "id": "1318",
    "slug": "minimum-flips-to-make-a-or-b-equal-to-c",
    "template": "class Solution:\n    def minFlips(a: int, b: int, c: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minFlips())"
  },
  {
    "id": "1319",
    "slug": "number-of-operations-to-make-network-connected",
    "template": "class Solution:\n    def unique_occurrences(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.unique_occurrences())"
  },
  {
    "id": "1323",
    "slug": "maximum-69-number",
    "template": "class Solution:\n    def maximum69Number(num: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximum69Number())"
  },
  {
    "id": "1324",
    "slug": "print-words-vertically",
    "template": "class Solution:\n    def findBall(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findBall())"
  },
  {
    "id": "1325",
    "slug": "delete-leaves-with-a-given-value",
    "template": "class Solution:\n    def maxProbability(n, edges, succProb, start, end):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProbability())"
  },
  {
    "id": "1326",
    "slug": "minimum-number-of-taps-to-open-to-water-a-garden",
    "template": "class Solution:\n    def sum_of_floored_pairs(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_floored_pairs())"
  },
  {
    "id": "1328",
    "slug": "break-a-palindrome",
    "template": "class Solution:\n    def breakPalindrome(palindrome: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.breakPalindrome())"
  },
  {
    "id": "1329",
    "slug": "sort-the-matrix-diagonally",
    "template": "class Solution:\n    def minCostToMoveChips(position):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCostToMoveChips())"
  },
  {
    "id": "1330",
    "slug": "reverse-subarray-to-maximize-array-value",
    "template": "class Solution:\n    def longestSubsequence(arr, difference):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestSubsequence())"
  },
  {
    "id": "1331",
    "slug": "rank-transform-of-an-array",
    "template": "class Solution:\n    def getMaximumGold(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getMaximumGold())"
  },
  {
    "id": "1332",
    "slug": "remove-palindromic-subsequences",
    "template": "class Solution:\n    def countStrings(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countStrings())"
  },
  {
    "id": "1333",
    "slug": "filter-restaurants-by-vegan-friendly-price-and-distance",
    "template": "class Solution:\n    def sort_based_on_mapping(mapping, nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sort_based_on_mapping())"
  },
  {
    "id": "1334",
    "slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
    "template": "class Solution:\n    def findTheCity(n, edges, distanceThreshold):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findTheCity())"
  },
  {
    "id": "1335",
    "slug": "minimum-difficulty-of-a-job-schedule",
    "template": "class Solution:\n    def max_candies(candies, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_candies())"
  },
  {
    "id": "1338",
    "slug": "reduce-array-size-to-the-half",
    "template": "class Solution:\n    def minSetSize(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSetSize())"
  },
  {
    "id": "1339",
    "slug": "maximum-product-of-splitted-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1340",
    "slug": "jump-game-v",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1342",
    "slug": "number-of-steps-to-reduce-a-number-to-zero",
    "template": "class Solution:\n    def queensAttacktheKing(queens, king):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.queensAttacktheKing())"
  },
  {
    "id": "1343",
    "slug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
    "template": "class Solution:\n    def dieSimulator(n, rollMax):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dieSimulator())"
  },
  {
    "id": "1344",
    "slug": "angle-between-hands-of-a-clock",
    "template": "class Solution:\n    def maxEqualFreq(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxEqualFreq())"
  },
  {
    "id": "1345",
    "slug": "jump-game-iv",
    "template": "class Solution:\n    def minJumps(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minJumps())"
  },
  {
    "id": "1346",
    "slug": "check-if-n-and-its-double-exist",
    "template": "class Solution:\n    def maxValueInStack(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxValueInStack())"
  },
  {
    "id": "1347",
    "slug": "minimum-number-of-steps-to-make-two-strings-anagram",
    "template": "class Solution:\n    def minSteps(s, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSteps())"
  },
  {
    "id": "1348",
    "slug": "tweet-counts-per-frequency",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1349",
    "slug": "maximum-students-taking-exam",
    "template": "class Solution:\n    def checkStraightLine(coordinates: List[List[int]]) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.checkStraightLine())"
  },
  {
    "id": "1351",
    "slug": "count-negative-numbers-in-a-sorted-matrix",
    "template": "class Solution:\n    def balanced_string(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.balanced_string())"
  },
  {
    "id": "1352",
    "slug": "product-of-the-last-k-numbers",
    "template": "class Solution:\n    def __init__(self, start, end, profit):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1354",
    "slug": "construct-target-array-with-multiple-sums",
    "template": "class Solution:\n    def winners_and_losers(matches):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.winners_and_losers())"
  },
  {
    "id": "1357",
    "slug": "apply-discount-every-n-orders",
    "template": "class Solution:\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1358",
    "slug": "number-of-substrings-containing-all-three-characters",
    "template": "class Solution:\n    def find_pairs(z):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_pairs())"
  },
  {
    "id": "1359",
    "slug": "count-all-valid-pickup-and-delivery-options",
    "template": "class Solution:\n    def circular_permutation(n, start):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.circular_permutation())"
  },
  {
    "id": "1360",
    "slug": "number-of-days-between-two-dates",
    "template": "class Solution:\n    def maxLength(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxLength())"
  },
  {
    "id": "1361",
    "slug": "validate-binary-tree-nodes",
    "template": "class Solution:\n    def tilingRectangle(n, m):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.tilingRectangle())"
  },
  {
    "id": "1362",
    "slug": "closest-divisors",
    "template": "class Solution:\n    def findClosestDivisors(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findClosestDivisors())"
  },
  {
    "id": "1363",
    "slug": "largest-multiple-of-three",
    "template": "class Solution:\n    def largest_multiple_of_three(digits):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest_multiple_of_three())"
  },
  {
    "id": "1365",
    "slug": "how-many-numbers-are-smaller-than-the-current-number",
    "template": "class Solution:\n    def smallerNumbersThanCurrent(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallerNumbersThanCurrent())"
  },
  {
    "id": "1366",
    "slug": "rank-teams-by-votes",
    "template": "class Solution:\n    def rankTeams(votes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rankTeams())"
  },
  {
    "id": "1367",
    "slug": "linked-list-in-binary-tree",
    "template": "class Solution:\n    def maxHeight(cuboids):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxHeight())"
  },
  {
    "id": "1368",
    "slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
    "template": "class Solution:\n    def minCost(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCost())"
  },
  {
    "id": "1370",
    "slug": "increasing-decreasing-string",
    "template": "class Solution:\n    def numberOfSubarrays(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfSubarrays())"
  },
  {
    "id": "1371",
    "slug": "find-the-longest-substring-containing-vowels-in-even-counts",
    "template": "class Solution:\n    def min_remove_to_make_valid(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_remove_to_make_valid())"
  },
  {
    "id": "1372",
    "slug": "longest-zigzag-path-in-a-binary-tree",
    "template": "class Solution:\n    def is_good_array(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_good_array())"
  },
  {
    "id": "1373",
    "slug": "maximum-sum-bst-in-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1375",
    "slug": "number-of-times-binary-string-is-prefix-aligned",
    "template": "class Solution:\n    def find_kth_palindrome(k, int_length):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_kth_palindrome())"
  },
  {
    "id": "1376",
    "slug": "time-needed-to-inform-all-employees",
    "template": "class Solution:\n    def numOfMinutes(n, headID, manager, informTime):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numOfMinutes())"
  },
  {
    "id": "1377",
    "slug": "frog-position-after-t-seconds",
    "template": "class Solution:\n    def dfs(node, parent, t, target, graph, prob, ans):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "1379",
    "slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
    "template": "class Solution:\n    def reconstructMatrix(upper, lower, colsum):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reconstructMatrix())"
  },
  {
    "id": "1380",
    "slug": "lucky-numbers-in-a-matrix",
    "template": "class Solution:\n    def dfs(grid, x, y):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "1381",
    "slug": "design-a-stack-with-increment-operation",
    "template": "class Solution:\n    def get_max_score(word, score):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_max_score())"
  },
  {
    "id": "1382",
    "slug": "balance-a-binary-search-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1385",
    "slug": "find-the-distance-value-between-two-arrays",
    "template": "class Solution:\n    def findTheDistanceValue(arr1, arr2, d):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findTheDistanceValue())"
  },
  {
    "id": "1386",
    "slug": "cinema-seat-allocation",
    "template": "class Solution:\n    def shiftGrid(grid, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shiftGrid())"
  },
  {
    "id": "1388",
    "slug": "pizza-with-3n-slices",
    "template": "class Solution:\n    def maxSumDivThree(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSumDivThree())"
  },
  {
    "id": "1390",
    "slug": "four-divisors",
    "template": "class Solution:\n    def sum_of_four_divisors(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_four_divisors())"
  },
  {
    "id": "1391",
    "slug": "check-if-there-is-a-valid-path-in-a-grid",
    "template": "class Solution:\n    def hasValidPath(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.hasValidPath())"
  },
  {
    "id": "1394",
    "slug": "find-lucky-integer-in-an-array",
    "template": "class Solution:\n    def find_lucky(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_lucky())"
  },
  {
    "id": "1395",
    "slug": "count-number-of-teams",
    "template": "class Solution:\n    def minTimeToVisitAllPoints(points: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minTimeToVisitAllPoints())"
  },
  {
    "id": "1396",
    "slug": "design-underground-system",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1397",
    "slug": "find-all-good-strings",
    "template": "class Solution:\n    def suggestedProducts(products, searchWord):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.suggestedProducts())"
  },
  {
    "id": "1399",
    "slug": "count-largest-group",
    "template": "class Solution:\n    def countLargestGroup(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countLargestGroup())"
  },
  {
    "id": "1400",
    "slug": "construct-k-palindrome-strings",
    "template": "class Solution:\n    def tictactoe(moves):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.tictactoe())"
  },
  {
    "id": "1401",
    "slug": "circle-and-rectangle-overlapping",
    "template": "class Solution:\n    def checkOverlap(radius, xCenter, yCenter, x1, y1, x2, y2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.checkOverlap())"
  },
  {
    "id": "1402",
    "slug": "reducing-dishes",
    "template": "class Solution:\n    def countSquares(matrix: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countSquares())"
  },
  {
    "id": "1403",
    "slug": "minimum-subsequence-in-non-increasing-order",
    "template": "class Solution:\n    def min_changes_to_divide_string(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_changes_to_divide_string())"
  },
  {
    "id": "1404",
    "slug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
    "template": "class Solution:\n    def num_steps(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_steps())"
  },
  {
    "id": "1406",
    "slug": "stone-game-iii",
    "template": "class Solution:\n    def stoneGameIII(stoneValue):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stoneGameIII())"
  },
  {
    "id": "1408",
    "slug": "string-matching-in-an-array",
    "template": "class Solution:\n    def smallest_divisor(nums, threshold):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_divisor())"
  },
  {
    "id": "1409",
    "slug": "queries-on-a-permutation-with-key",
    "template": "class Solution:\n    def minNumberOfFlips(mat):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minNumberOfFlips())"
  },
  {
    "id": "1411",
    "slug": "number-of-ways-to-paint-n-3-grid",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1413",
    "slug": "minimum-value-to-get-positive-step-by-step-sum",
    "template": "class Solution:\n    def maxSideLength(mat, threshold):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSideLength())"
  },
  {
    "id": "1414",
    "slug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
    "template": "class Solution:\n    def shortestPath(grid, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestPath())"
  },
  {
    "id": "1416",
    "slug": "restore-the-array",
    "template": "class Solution:\n    def numDecodings(s: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numDecodings())"
  },
  {
    "id": "1417",
    "slug": "reformat-the-string",
    "template": "class Solution:\n    def reformat(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reformat())"
  },
  {
    "id": "1418",
    "slug": "display-table-of-food-orders-in-a-restaurant",
    "template": "class Solution:\n    def displayTable(orders: List[List[str]]) -> List[List[str]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.displayTable())"
  },
  {
    "id": "1420",
    "slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
    "template": "class Solution:\n    def waysToBuildArray(n, m, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.waysToBuildArray())"
  },
  {
    "id": "1422",
    "slug": "maximum-score-after-splitting-a-string",
    "template": "class Solution:\n    def is_possible_divide(nums: List[int], k: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_possible_divide())"
  },
  {
    "id": "1424",
    "slug": "diagonal-traverse-ii",
    "template": "class Solution:\n    def maxCandies(status, candies, keys, containedBoxes, initialBoxes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxCandies())"
  },
  {
    "id": "1425",
    "slug": "constrained-subsequence-sum",
    "template": "class Solution:\n    def maxSum(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSum())"
  },
  {
    "id": "1426",
    "slug": "counting-elements",
    "template": "class Solution:\n    def sum_zero(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_zero())"
  },
  {
    "id": "1427",
    "slug": "perform-string-shifts",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1429",
    "slug": "first-unique-number",
    "template": "class Solution:\n    def is_solvable(words, result):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_solvable())"
  },
  {
    "id": "1430",
    "slug": "check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1431",
    "slug": "kids-with-the-greatest-number-of-candies",
    "template": "class Solution:\n    def find_ancestors(node, adj_list, visited, ans):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_ancestors())"
  },
  {
    "id": "1432",
    "slug": "max-difference-you-can-get-from-changing-an-integer",
    "template": "class Solution:\n    def max_diff(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_diff())"
  },
  {
    "id": "1433",
    "slug": "check-if-a-string-can-break-another-string",
    "template": "class Solution:\n    def __init__(self, keys, values, dictionary):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1434",
    "slug": "number-of-ways-to-wear-different-hats-to-each-other",
    "template": "class Solution:\n    def freqAlphabets(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.freqAlphabets())"
  },
  {
    "id": "1436",
    "slug": "destination-city",
    "template": "class Solution:\n    def watched_videos_by_friends(watched_videos, friends, id, level):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.watched_videos_by_friends())"
  },
  {
    "id": "1437",
    "slug": "check-if-all-1s-are-at-least-length-k-places-away",
    "template": "class Solution:\n    def min_steps_to_make_palindrome(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_steps_to_make_palindrome())"
  },
  {
    "id": "1438",
    "slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
    "template": "class Solution:\n    def longestSubarray(nums, limit):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestSubarray())"
  },
  {
    "id": "1439",
    "slug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
    "template": "class Solution:\n    def kthSmallest(mat, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kthSmallest())"
  },
  {
    "id": "1441",
    "slug": "build-an-array-with-stack-operations",
    "template": "class Solution:\n    def build_array(target, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.build_array())"
  },
  {
    "id": "1442",
    "slug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
    "template": "class Solution:\n    def make_connected(n, connections):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.make_connected())"
  },
  {
    "id": "1443",
    "slug": "minimum-time-to-collect-all-apples-in-a-tree",
    "template": "class Solution:\n    def minimum_distance(word: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_distance())"
  },
  {
    "id": "1444",
    "slug": "number-of-ways-of-cutting-a-pizza",
    "template": "class Solution:\n    def number_of_steps(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.number_of_steps())"
  },
  {
    "id": "1447",
    "slug": "simplified-fractions",
    "template": "class Solution:\n    def minJumps(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minJumps())"
  },
  {
    "id": "1448",
    "slug": "count-good-nodes-in-binary-tree",
    "template": "class Solution:\n    def maximum69Number(num: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximum69Number())"
  },
  {
    "id": "1449",
    "slug": "form-largest-integer-with-digits-that-add-up-to-target",
    "template": "class Solution:\n    def largestNumber(cost, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestNumber())"
  },
  {
    "id": "1450",
    "slug": "number-of-students-doing-homework-at-a-given-time",
    "template": "class Solution:\n    def removeLeafNodes(root, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.removeLeafNodes())"
  },
  {
    "id": "1451",
    "slug": "rearrange-words-in-a-sentence",
    "template": "class Solution:\n    def min_taps(n, ranges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_taps())"
  },
  {
    "id": "1452",
    "slug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
    "template": "class Solution:\n    def peopleIndexes(favoriteCompanies: List[List[str]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.peopleIndexes())"
  },
  {
    "id": "1453",
    "slug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
    "template": "class Solution:\n    def numPoints(darts, r):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numPoints())"
  },
  {
    "id": "1455",
    "slug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
    "template": "class Solution:\n    def filter_restaurants(restaurants, vegan_friendly, max_price, max_distance):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.filter_restaurants())"
  },
  {
    "id": "1456",
    "slug": "maximum-number-of-vowels-in-a-substring-of-given-length",
    "template": "class Solution:\n    def findTheCity(n, edges, distanceThreshold):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findTheCity())"
  },
  {
    "id": "1457",
    "slug": "pseudo-palindromic-paths-in-a-binary-tree",
    "template": "class Solution:\n    def minDifficulty(jobDifficulty, d):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDifficulty())"
  },
  {
    "id": "1458",
    "slug": "max-dot-product-of-two-subsequences",
    "template": "class Solution:\n    def sortByBits(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sortByBits())"
  },
  {
    "id": "1460",
    "slug": "make-two-arrays-equal-by-reversing-subarrays",
    "template": "class Solution:\n    def numberOfSubstrings(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfSubstrings())"
  },
  {
    "id": "1461",
    "slug": "check-if-a-string-contains-all-binary-codes-of-size-k",
    "template": "class Solution:\n    def countOrders(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countOrders())"
  },
  {
    "id": "1462",
    "slug": "course-schedule-iv",
    "template": "class Solution:\n    def checkIfPrerequisite(numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.checkIfPrerequisite())"
  },
  {
    "id": "1464",
    "slug": "maximum-product-of-two-elements-in-an-array",
    "template": "class Solution:\n    def minSetSize(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSetSize())"
  },
  {
    "id": "1465",
    "slug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1466",
    "slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
    "template": "class Solution:\n    def maxJumps(arr, d):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxJumps())"
  },
  {
    "id": "1467",
    "slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
    "template": "class Solution:\n    def count_combinations(balls, combinations, curr_ball):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_combinations())"
  },
  {
    "id": "1469",
    "slug": "find-all-the-lonely-nodes",
    "template": "class Solution:\n    def min_steps(s, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_steps())"
  },
  {
    "id": "1470",
    "slug": "shuffle-the-array",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1471",
    "slug": "the-k-strongest-values-in-an-array",
    "template": "class Solution:\n    def maxStudents(seats):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxStudents())"
  },
  {
    "id": "1472",
    "slug": "design-browser-history",
    "template": "class Solution:\n    def sortString(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sortString())"
  },
  {
    "id": "1473",
    "slug": "paint-house-iii",
    "template": "class Solution:\n    def findTheLongestSubstring(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findTheLongestSubstring())"
  },
  {
    "id": "1474",
    "slug": "delete-n-nodes-after-m-nodes-of-a-linked-list",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1475",
    "slug": "final-prices-with-a-special-discount-in-a-shop",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1476",
    "slug": "subrectangle-queries",
    "template": "class Solution:\n    def countNegatives(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countNegatives())"
  },
  {
    "id": "1477",
    "slug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1478",
    "slug": "allocate-mailboxes",
    "template": "class Solution:\n    def max_events(events):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_events())"
  },
  {
    "id": "1480",
    "slug": "running-sum-of-1d-array",
    "template": "class Solution:\n    def runningSum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.runningSum())"
  },
  {
    "id": "1481",
    "slug": "least-number-of-unique-integers-after-k-removals",
    "template": "class Solution:\n    def findLeastNumOfUniqueInts(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLeastNumOfUniqueInts())"
  },
  {
    "id": "1482",
    "slug": "minimum-number-of-days-to-make-m-bouquets",
    "template": "class Solution:\n    def smallerNumbersThanCurrent(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallerNumbersThanCurrent())"
  },
  {
    "id": "1483",
    "slug": "kth-ancestor-of-a-tree-node",
    "template": "class Solution:\n    def rank_teams(votes):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rank_teams())"
  },
  {
    "id": "1485",
    "slug": "clone-binary-tree-with-random-pointer",
    "template": "class Solution:\n    def minCost(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCost())"
  },
  {
    "id": "1486",
    "slug": "xor-operation-in-an-array",
    "template": "class Solution:\n    def findTheDistanceValue(arr1, arr2, d):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findTheDistanceValue())"
  },
  {
    "id": "1487",
    "slug": "making-file-names-unique",
    "template": "class Solution:\n    def maxNumberOfFamilies(n, reservedSeats):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxNumberOfFamilies())"
  },
  {
    "id": "1488",
    "slug": "avoid-flood-in-the-city",
    "template": "class Solution:\n    def get_power(x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_power())"
  },
  {
    "id": "1489",
    "slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
    "template": "class Solution:\n    def max_size_slices(slices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_size_slices())"
  },
  {
    "id": "1491",
    "slug": "average-salary-excluding-the-minimum-and-maximum-salary",
    "template": "class Solution:\n    def count_prefix_aligned(flips):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_prefix_aligned())"
  },
  {
    "id": "1492",
    "slug": "the-kth-factor-of-n",
    "template": "class Solution:\n    def numOfMinutes(n, headID, manager, informTime):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numOfMinutes())"
  },
  {
    "id": "1493",
    "slug": "longest-subarray-of-1s-after-deleting-one-element",
    "template": "class Solution:\n    def frogPosition(n, edges, t, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.frogPosition())"
  },
  {
    "id": "1494",
    "slug": "parallel-courses-ii",
    "template": "class Solution:\n    def minNumberOfSemesters(n, relations, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minNumberOfSemesters())"
  },
  {
    "id": "1496",
    "slug": "path-crossing",
    "template": "class Solution:\n    def lucky_numbers(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lucky_numbers())"
  },
  {
    "id": "1499",
    "slug": "max-value-of-equation",
    "template": "class Solution:\n    def max_performance(n, k, speed, efficiency):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_performance())"
  },
  {
    "id": "1500",
    "slug": "design-a-file-sharing-system",
    "template": "class Solution:\n    def countLargestGroup(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countLargestGroup())"
  },
  {
    "id": "1502",
    "slug": "can-make-arithmetic-progression-from-sequence",
    "template": "class Solution:\n    def can_construct(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_construct())"
  },
  {
    "id": "1503",
    "slug": "last-moment-before-all-ants-fall-out-of-a-plank",
    "template": "class Solution:\n    def max_satisfaction(satisfaction):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_satisfaction())"
  },
  {
    "id": "1504",
    "slug": "count-submatrices-with-all-ones",
    "template": "class Solution:\n    def numSubmat(mat: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSubmat())"
  },
  {
    "id": "1505",
    "slug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
    "template": "class Solution:\n    def createTargetArray(nums, index):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.createTargetArray())"
  },
  {
    "id": "1507",
    "slug": "reformat-date",
    "template": "class Solution:\n    def hasValidPath(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.hasValidPath())"
  },
  {
    "id": "1508",
    "slug": "range-sum-of-sorted-subarray-sums",
    "template": "class Solution:\n    def longestHappyPrefix(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestHappyPrefix())"
  },
  {
    "id": "1509",
    "slug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
    "template": "class Solution:\n    def minDifference(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDifference())"
  },
  {
    "id": "1510",
    "slug": "stone-game-iv",
    "template": "class Solution:\n    def find_lucky(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_lucky())"
  },
  {
    "id": "1512",
    "slug": "number-of-good-pairs",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1513",
    "slug": "number-of-substrings-with-only-1s",
    "template": "class Solution:\n    def countGoodStrings(s1, s2, evil):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countGoodStrings())"
  },
  {
    "id": "1514",
    "slug": "path-with-maximum-probability",
    "template": "class Solution:\n    def min_start_value(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_start_value())"
  },
  {
    "id": "1515",
    "slug": "best-position-for-a-service-centre",
    "template": "class Solution:\n    def find_min_fibonacci_numbers(k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_min_fibonacci_numbers())"
  },
  {
    "id": "1516",
    "slug": "move-sub-tree-of-n-ary-tree",
    "template": "class Solution:\n    def get_happy_string(n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_happy_string())"
  },
  {
    "id": "1519",
    "slug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
    "template": "class Solution:\n    def min_subsequence(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_subsequence())"
  },
  {
    "id": "1520",
    "slug": "maximum-number-of-non-overlapping-substrings",
    "template": "class Solution:\n    def num_steps(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_steps())"
  },
  {
    "id": "1522",
    "slug": "diameter-of-n-ary-tree",
    "template": "class Solution:\n    def stoneGameIII(stoneValue):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stoneGameIII())"
  },
  {
    "id": "1523",
    "slug": "count-odd-numbers-in-an-interval-range",
    "template": "class Solution:\n    def count_odds(low, high):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_odds())"
  },
  {
    "id": "1524",
    "slug": "number-of-sub-arrays-with-odd-sum",
    "template": "class Solution:\n    def stringMatching(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stringMatching())"
  },
  {
    "id": "1525",
    "slug": "number-of-good-ways-to-split-a-string",
    "template": "class Solution:\n    def process_queries(queries, m):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.process_queries())"
  },
  {
    "id": "1526",
    "slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
    "template": "class Solution:\n    def entityParser(text: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.entityParser())"
  },
  {
    "id": "1529",
    "slug": "minimum-suffix-flips",
    "template": "class Solution:\n    def max_difference(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_difference())"
  },
  {
    "id": "1530",
    "slug": "number-of-good-leaf-nodes-pairs",
    "template": "class Solution:\n    def check_if_can_break(s1, s2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.check_if_can_break())"
  },
  {
    "id": "1531",
    "slug": "string-compression-ii",
    "template": "class Solution:\n    def number_ways(hats):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.number_ways())"
  },
  {
    "id": "1533",
    "slug": "find-the-index-of-the-large-integer",
    "template": "class Solution:\n    def displayTable(orders: List[List[str]]) -> List[List[str]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.displayTable())"
  },
  {
    "id": "1535",
    "slug": "find-the-winner-of-an-array-game",
    "template": "class Solution:\n    def number_of_ways(n, m, k, mod=1_000_000_007):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.number_of_ways())"
  },
  {
    "id": "1536",
    "slug": "minimum-swaps-to-arrange-a-binary-grid",
    "template": "class Solution:\n    def minSwaps(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSwaps())"
  },
  {
    "id": "1537",
    "slug": "get-the-maximum-score",
    "template": "class Solution:\n    def maxScore(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScore())"
  },
  {
    "id": "1538",
    "slug": "guess-the-majority-in-a-hidden-array",
    "template": "class Solution:\n    def maxScore(cardPoints, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScore())"
  },
  {
    "id": "1539",
    "slug": "kth-missing-positive-number",
    "template": "class Solution:\n    def find_diagonal_order(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_diagonal_order())"
  },
  {
    "id": "1540",
    "slug": "can-convert-string-in-k-moves",
    "template": "class Solution:\n    def canConvertString(s: str, t: str, k: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canConvertString())"
  },
  {
    "id": "1542",
    "slug": "find-longest-awesome-substring",
    "template": "class Solution:\n    def max_power(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_power())"
  },
  {
    "id": "1544",
    "slug": "make-the-string-great",
    "template": "class Solution:\n    def goodNodes(root, maxVal=float('-inf')):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.goodNodes())"
  },
  {
    "id": "1545",
    "slug": "find-kth-bit-in-nth-binary-string",
    "template": "class Solution:\n    def largestNumber(cost, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestNumber())"
  },
  {
    "id": "1546",
    "slug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
    "template": "class Solution:\n    def maxNonOverlapping(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxNonOverlapping())"
  },
  {
    "id": "1547",
    "slug": "minimum-cost-to-cut-a-stick",
    "template": "class Solution:\n    def destCity(paths):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.destCity())"
  },
  {
    "id": "1548",
    "slug": "the-most-similar-path-in-a-graph",
    "template": "class Solution:\n    def kLengthApart(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kLengthApart())"
  },
  {
    "id": "1550",
    "slug": "three-consecutive-odds",
    "template": "class Solution:\n    def kthSmallest(mat, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kthSmallest())"
  },
  {
    "id": "1551",
    "slug": "minimum-operations-to-make-array-equal",
    "template": "class Solution:\n    def min_operations(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1552",
    "slug": "magnetic-force-between-two-balls",
    "template": "class Solution:\n    def build_array(target, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.build_array())"
  },
  {
    "id": "1553",
    "slug": "minimum-number-of-days-to-eat-n-oranges",
    "template": "class Solution:\n    def countTriplets(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countTriplets())"
  },
  {
    "id": "1554",
    "slug": "strings-differ-by-one-character",
    "template": "class Solution:\n    def minTime(n, edges, hasApple):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minTime())"
  },
  {
    "id": "1556",
    "slug": "thousand-separator",
    "template": "class Solution:\n    def can_be_equal(target, arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_be_equal())"
  },
  {
    "id": "1557",
    "slug": "minimum-number-of-vertices-to-reach-all-nodes",
    "template": "class Solution:\n    def has_all_codes(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.has_all_codes())"
  },
  {
    "id": "1558",
    "slug": "minimum-numbers-of-function-calls-to-make-target-array",
    "template": "class Solution:\n    def DFS(src, graph, visited, transitive_closure, dest):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.DFS())"
  },
  {
    "id": "1559",
    "slug": "detect-cycles-in-2d-grid",
    "template": "class Solution:\n    def cherry_pickup(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.cherry_pickup())"
  },
  {
    "id": "1560",
    "slug": "most-visited-sector-in-a-circular-track",
    "template": "class Solution:\n    def busy_student(start_time, end_time, query_time):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.busy_student())"
  },
  {
    "id": "1562",
    "slug": "find-latest-group-of-size-m",
    "template": "class Solution:\n    def peopleIndexes(favoriteCompanies: List[List[str]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.peopleIndexes())"
  },
  {
    "id": "1563",
    "slug": "stone-game-v",
    "template": "class Solution:\n    def max_number_of_darts(darts, r):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_number_of_darts())"
  },
  {
    "id": "1564",
    "slug": "put-boxes-into-the-warehouse-i",
    "template": "class Solution:\n    def maxBoxesInWarehouse(boxes, warehouse):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxBoxesInWarehouse())"
  },
  {
    "id": "1566",
    "slug": "detect-pattern-of-length-m-repeated-k-or-more-times",
    "template": "class Solution:\n    def is_prefix_of_word(sentence: str, search_word: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_prefix_of_word())"
  },
  {
    "id": "1567",
    "slug": "maximum-length-of-subarray-with-positive-product",
    "template": "class Solution:\n    def max_vowels(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_vowels())"
  },
  {
    "id": "1568",
    "slug": "minimum-number-of-days-to-disconnect-island",
    "template": "class Solution:\n    def pseudoPalindromicPaths(root, cnt = 0):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pseudoPalindromicPaths())"
  },
  {
    "id": "1569",
    "slug": "number-of-ways-to-reorder-array-to-get-same-bst",
    "template": "class Solution:\n    def maxDotProduct(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxDotProduct())"
  },
  {
    "id": "1570",
    "slug": "dot-product-of-two-sparse-vectors",
    "template": "class Solution:\n    def final_prices(prices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.final_prices())"
  },
  {
    "id": "1572",
    "slug": "matrix-diagonal-sum",
    "template": "class Solution:\n    def __init__(self, rectangle: List[List[int]]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1573",
    "slug": "number-of-ways-to-split-a-string",
    "template": "class Solution:\n    def min_sum_of_lengths(arr, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_sum_of_lengths())"
  },
  {
    "id": "1574",
    "slug": "shortest-subarray-to-be-removed-to-make-array-sorted",
    "template": "class Solution:\n    def findLengthOfShortestSubarray(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLengthOfShortestSubarray())"
  },
  {
    "id": "1575",
    "slug": "count-all-possible-routes",
    "template": "class Solution:\n    def maxArea(h, w, horizontalCuts, verticalCuts):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxArea())"
  },
  {
    "id": "1576",
    "slug": "replace-all-s-to-avoid-consecutive-repeating-characters",
    "template": "class Solution:\n    def dfs(node, parent, graph, count):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "1577",
    "slug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
    "template": "class Solution:\n    def getProbability(self, balls: List[int]) -> float:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getProbability())"
  },
  {
    "id": "1578",
    "slug": "minimum-time-to-make-rope-colorful",
    "template": "class Solution:\n    def minTime(colors: str, neededTime: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minTime())"
  },
  {
    "id": "1579",
    "slug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
    "template": "class Solution:\n    def __init__(self, size):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1580",
    "slug": "put-boxes-into-the-warehouse-ii",
    "template": "class Solution:\n    def shuffle(nums, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shuffle())"
  },
  {
    "id": "1582",
    "slug": "special-positions-in-a-binary-matrix",
    "template": "class Solution:\n    def __init__(self, homepage: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1583",
    "slug": "count-unhappy-friends",
    "template": "class Solution:\n    def minCost(houses, cost, m, n, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCost())"
  },
  {
    "id": "1584",
    "slug": "min-cost-to-connect-all-points",
    "template": "class Solution:\n    def average(salary):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.average())"
  },
  {
    "id": "1585",
    "slug": "check-if-string-is-transformable-with-substring-sort-operations",
    "template": "class Solution:\n    def kth_factor(n: int, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kth_factor())"
  },
  {
    "id": "1586",
    "slug": "binary-search-tree-iterator-ii",
    "template": "class Solution:\n    def findMaxLength(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaxLength())"
  },
  {
    "id": "1588",
    "slug": "sum-of-all-odd-length-subarrays",
    "template": "class Solution:\n    def sumOddLengthSubarrays(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumOddLengthSubarrays())"
  },
  {
    "id": "1589",
    "slug": "maximum-sum-obtained-of-any-permutation",
    "template": "class Solution:\n    def maxSumRangeQuery(nums, requests):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSumRangeQuery())"
  },
  {
    "id": "1590",
    "slug": "make-sum-divisible-by-p",
    "template": "class Solution:\n    def minSubarray(nums, p):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSubarray())"
  },
  {
    "id": "1591",
    "slug": "strange-printer-ii",
    "template": "class Solution:\n    def isPrintable(self, targetGrid: List[List[int]]) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isPrintable())"
  },
  {
    "id": "1592",
    "slug": "rearrange-spaces-between-words",
    "template": "class Solution:\n    def reorderSpaces(text):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reorderSpaces())"
  },
  {
    "id": "1593",
    "slug": "split-a-string-into-the-max-number-of-unique-substrings",
    "template": "class Solution:\n    def maxUniqueSplit(s, start=0, seen=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxUniqueSplit())"
  },
  {
    "id": "1594",
    "slug": "maximum-non-negative-product-in-a-matrix",
    "template": "class Solution:\n    def maxProductPath(self, grid: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProductPath())"
  },
  {
    "id": "1595",
    "slug": "minimum-cost-to-connect-two-groups-of-points",
    "template": "class Solution:\n    def connectTwoGroups(cost):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.connectTwoGroups())"
  },
  {
    "id": "1597",
    "slug": "build-binary-expression-tree-from-infix-expression",
    "template": "class Solution:\n    def expTree(self, s: str) -> 'Node':\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.expTree())"
  },
  {
    "id": "1598",
    "slug": "crawler-log-folder",
    "template": "class Solution:\n    def minOperations(logs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "1599",
    "slug": "maximum-profit-of-operating-a-centennial-wheel",
    "template": "class Solution:\n    def minOperationsMaxProfit(customers, boardingCost, runningCost):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperationsMaxProfit())"
  },
  {
    "id": "1600",
    "slug": "throne-inheritance",
    "template": "class Solution:\n    def __init__(self, kingName: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1601",
    "slug": "maximum-number-of-achievable-transfer-requests",
    "template": "class Solution:\n    def maximumRequests(n, requests):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumRequests())"
  },
  {
    "id": "1602",
    "slug": "find-nearest-right-node-in-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1603",
    "slug": "design-parking-system",
    "template": "class Solution:\n    def runningSum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.runningSum())"
  },
  {
    "id": "1604",
    "slug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
    "template": "class Solution:\n    def find_least_num_of_unique_ints(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_least_num_of_unique_ints())"
  },
  {
    "id": "1605",
    "slug": "find-valid-matrix-given-row-and-column-sums",
    "template": "class Solution:\n    def minDays(bloomDay, m, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDays())"
  },
  {
    "id": "1606",
    "slug": "find-servers-that-handled-most-number-of-requests",
    "template": "class Solution:\n    def busiestServers(k, arrival, load):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.busiestServers())"
  },
  {
    "id": "1608",
    "slug": "special-array-with-x-elements-greater-than-or-equal-x",
    "template": "class Solution:\n    def specialArray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.specialArray())"
  },
  {
    "id": "1609",
    "slug": "even-odd-tree",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1610",
    "slug": "maximum-number-of-visible-points",
    "template": "class Solution:\n    def xor_operation(n, start):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.xor_operation())"
  },
  {
    "id": "1611",
    "slug": "minimum-one-bit-operations-to-make-integers-zero",
    "template": "class Solution:\n    def get_folder_names(names):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_folder_names())"
  },
  {
    "id": "1612",
    "slug": "check-if-two-expression-trees-are-equivalent",
    "template": "class Solution:\n    def avoidFlood(rains: List[int]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.avoidFlood())"
  },
  {
    "id": "1615",
    "slug": "maximal-network-rank",
    "template": "class Solution:\n    def range_sum(nums, n, left, right):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.range_sum())"
  },
  {
    "id": "1616",
    "slug": "split-two-strings-to-make-palindrome",
    "template": "class Solution:\n    def min_difference(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_difference())"
  },
  {
    "id": "1617",
    "slug": "count-subtrees-with-max-distance-between-cities",
    "template": "class Solution:\n    def winnerSquareGame(n: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.winnerSquareGame())"
  },
  {
    "id": "1620",
    "slug": "coordinate-with-maximum-network-quality",
    "template": "class Solution:\n    def canArrange(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canArrange())"
  },
  {
    "id": "1621",
    "slug": "number-of-sets-of-k-non-overlapping-line-segments",
    "template": "class Solution:\n    def numSubseq(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSubseq())"
  },
  {
    "id": "1622",
    "slug": "fancy-sequence",
    "template": "class Solution:\n    def findMaxValueOfEquation(points, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaxValueOfEquation())"
  },
  {
    "id": "1624",
    "slug": "largest-substring-between-two-equal-characters",
    "template": "class Solution:\n    def maxLengthBetweenEqualCharacters(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxLengthBetweenEqualCharacters())"
  },
  {
    "id": "1625",
    "slug": "lexicographically-smallest-string-after-applying-operations",
    "template": "class Solution:\n    def findLexSmallestString(s: str, a: int, b: int) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLexSmallestString())"
  },
  {
    "id": "1626",
    "slug": "best-team-with-no-conflicts",
    "template": "class Solution:\n    def can_make_arithmetic_progression(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_make_arithmetic_progression())"
  },
  {
    "id": "1627",
    "slug": "graph-connectivity-with-threshold",
    "template": "class Solution:\n    def lastMoment(n, left, right):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lastMoment())"
  },
  {
    "id": "1628",
    "slug": "design-an-expression-tree-with-evaluate-function",
    "template": "class Solution:\n    def numSubmat(mat):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSubmat())"
  },
  {
    "id": "1629",
    "slug": "slowest-key",
    "template": "class Solution:\n    def minInteger(num: str, k: int) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minInteger())"
  },
  {
    "id": "1630",
    "slug": "arithmetic-subarrays",
    "template": "class Solution:\n    def count_odds(low, high):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_odds())"
  },
  {
    "id": "1631",
    "slug": "path-with-minimum-effort",
    "template": "class Solution:\n    def numOfSubarrays(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numOfSubarrays())"
  },
  {
    "id": "1632",
    "slug": "rank-transform-of-a-matrix",
    "template": "class Solution:\n    def numSplits(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSplits())"
  },
  {
    "id": "1634",
    "slug": "add-two-polynomials-represented-as-linked-lists",
    "template": "class Solution:\n    def __init__(self, c: int, p: int, next: 'PolyNode' = None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1637",
    "slug": "widest-vertical-area-between-two-points-containing-no-points",
    "template": "class Solution:\n    def min_length_encoded(s: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_length_encoded())"
  },
  {
    "id": "1639",
    "slug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
    "template": "class Solution:\n    def numWays(words, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numWays())"
  },
  {
    "id": "1640",
    "slug": "check-array-formation-through-concatenation",
    "template": "class Solution:\n    def canFormArray(arr, pieces):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canFormArray())"
  },
  {
    "id": "1641",
    "slug": "count-sorted-vowel-strings",
    "template": "class Solution:\n    def countVowelStrings(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countVowelStrings())"
  },
  {
    "id": "1643",
    "slug": "kth-smallest-instructions",
    "template": "class Solution:\n    def dfs(node, tree, labels, ans, count):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "1644",
    "slug": "lowest-common-ancestor-of-a-binary-tree-ii",
    "template": "class Solution:\n    def max_num_of_substrings(s: str) -> List[str]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_num_of_substrings())"
  },
  {
    "id": "1646",
    "slug": "get-maximum-in-generated-array",
    "template": "class Solution:\n    def findKthPositive(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findKthPositive())"
  },
  {
    "id": "1647",
    "slug": "minimum-deletions-to-make-character-frequencies-unique",
    "template": "class Solution:\n    def can_convert(s, t, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_convert())"
  },
  {
    "id": "1648",
    "slug": "sell-diminishing-valued-colored-balls",
    "template": "class Solution:\n    def minInsertions(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minInsertions())"
  },
  {
    "id": "1649",
    "slug": "create-sorted-array-through-instructions",
    "template": "class Solution:\n    def maxNonOverlapping(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxNonOverlapping())"
  },
  {
    "id": "1650",
    "slug": "lowest-common-ancestor-of-a-binary-tree-iii",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None, parent=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1653",
    "slug": "minimum-deletions-to-make-string-balanced",
    "template": "class Solution:\n    def dfs(root, distance, depths):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "1654",
    "slug": "minimum-jumps-to-reach-home",
    "template": "class Solution:\n    def minimumJumps(forbidden, a, b, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumJumps())"
  },
  {
    "id": "1655",
    "slug": "distribute-repeating-integers",
    "template": "class Solution:\n    def canDistribute(nums, quantity):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canDistribute())"
  },
  {
    "id": "1656",
    "slug": "design-an-ordered-stream",
    "template": "class Solution:\n    def count_good_triplets(arr, a, b, c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_good_triplets())"
  },
  {
    "id": "1657",
    "slug": "determine-if-two-strings-are-close",
    "template": "class Solution:\n    def get_winner(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_winner())"
  },
  {
    "id": "1658",
    "slug": "minimum-operations-to-reduce-x-to-zero",
    "template": "class Solution:\n    def min_swaps(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_swaps())"
  },
  {
    "id": "1659",
    "slug": "maximize-grid-happiness",
    "template": "class Solution:\n    def maxSum(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSum())"
  },
  {
    "id": "1660",
    "slug": "correct-a-binary-tree",
    "template": "class Solution:\n    def thousand_separator(n: int) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.thousand_separator())"
  },
  {
    "id": "1662",
    "slug": "check-if-two-string-arrays-are-equivalent",
    "template": "class Solution:\n    def min_num_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_num_operations())"
  },
  {
    "id": "1663",
    "slug": "smallest-string-with-a-given-numeric-value",
    "template": "class Solution:\n    def contains_cycle(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.contains_cycle())"
  },
  {
    "id": "1664",
    "slug": "ways-to-make-a-fair-array",
    "template": "class Solution:\n    def numberOfFairs(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfFairs())"
  },
  {
    "id": "1665",
    "slug": "minimum-initial-energy-to-finish-tasks",
    "template": "class Solution:\n    def minimumEffort(tasks):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumEffort())"
  },
  {
    "id": "1668",
    "slug": "maximum-repeating-substring",
    "template": "class Solution:\n    def longestAwesomeSubstring(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestAwesomeSubstring())"
  },
  {
    "id": "1669",
    "slug": "merge-in-between-linked-lists",
    "template": "class Solution:\n    def minCost(n, cuts):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCost())"
  },
  {
    "id": "1670",
    "slug": "design-front-middle-back-queue",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1671",
    "slug": "minimum-number-of-removals-to-make-mountain-array",
    "template": "class Solution:\n    def minimumMountainRemovals(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumMountainRemovals())"
  },
  {
    "id": "1672",
    "slug": "richest-customer-wealth",
    "template": "class Solution:\n    def maximumWealth(accounts):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumWealth())"
  },
  {
    "id": "1673",
    "slug": "find-the-most-competitive-subsequence",
    "template": "class Solution:\n    def mostCompetitive(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mostCompetitive())"
  },
  {
    "id": "1674",
    "slug": "minimum-moves-to-make-array-complementary",
    "template": "class Solution:\n    def min_operations(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1675",
    "slug": "minimize-deviation-in-array",
    "template": "class Solution:\n    def can_place_balls(force: int, position: List[int], m: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_place_balls())"
  },
  {
    "id": "1676",
    "slug": "lowest-common-ancestor-of-a-binary-tree-iv",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1679",
    "slug": "max-number-of-k-sum-pairs",
    "template": "class Solution:\n    def findLengthOfShortestSubarray(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLengthOfShortestSubarray())"
  },
  {
    "id": "1680",
    "slug": "concatenation-of-consecutive-binary-numbers",
    "template": "class Solution:\n    def count_routes(locations, start, finish, fuel, curr=None, remaining_fuel=None, memo=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_routes())"
  },
  {
    "id": "1682",
    "slug": "longest-palindromic-subsequence-ii",
    "template": "class Solution:\n    def most_visited(n, rounds):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.most_visited())"
  },
  {
    "id": "1684",
    "slug": "count-the-number-of-consistent-strings",
    "template": "class Solution:\n    def find_latest_step(arr, m):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_latest_step())"
  },
  {
    "id": "1685",
    "slug": "sum-of-absolute-differences-in-a-sorted-array",
    "template": "class Solution:\n    def stoneGameV(stoneValue):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stoneGameV())"
  },
  {
    "id": "1686",
    "slug": "stone-game-vi",
    "template": "class Solution:\n    def stoneGameVI(aliceValues, bobValues):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stoneGameVI())"
  },
  {
    "id": "1687",
    "slug": "delivering-boxes-from-storage-to-ports",
    "template": "class Solution:\n    def min_trips(boxes, portsCount, maxBoxes, maxWeight):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_trips())"
  },
  {
    "id": "1689",
    "slug": "partitioning-into-minimum-number-of-deci-binary-numbers",
    "template": "class Solution:\n    def containsPattern(arr, m, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.containsPattern())"
  },
  {
    "id": "1690",
    "slug": "stone-game-vii",
    "template": "class Solution:\n    def getMaxLen(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getMaxLen())"
  },
  {
    "id": "1692",
    "slug": "count-ways-to-distribute-candies",
    "template": "class Solution:\n    def numTrees(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numTrees())"
  },
  {
    "id": "1694",
    "slug": "reformat-phone-number",
    "template": "class Solution:\n    def min_subarray(nums, p):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_subarray())"
  },
  {
    "id": "1695",
    "slug": "maximum-erasure-value",
    "template": "class Solution:\n    def maxSumRangeQuery(nums: List[int], requests: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSumRangeQuery())"
  },
  {
    "id": "1696",
    "slug": "jump-game-vi",
    "template": "class Solution:\n    def isPrintable(targetGrid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isPrintable())"
  },
  {
    "id": "1697",
    "slug": "checking-existence-of-edge-length-limited-paths",
    "template": "class Solution:\n    def distanceLimitedPathsExist(n, edgeList, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distanceLimitedPathsExist())"
  },
  {
    "id": "1698",
    "slug": "number-of-distinct-substrings-in-a-string",
    "template": "class Solution:\n    def modifyString(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.modifyString())"
  },
  {
    "id": "1700",
    "slug": "number-of-students-unable-to-eat-lunch",
    "template": "class Solution:\n    def min_time_to_remove_balloons(colors, neededTime):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_time_to_remove_balloons())"
  },
  {
    "id": "1701",
    "slug": "average-waiting-time",
    "template": "class Solution:\n    def maxNumEdgesToRemove(n, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxNumEdgesToRemove())"
  },
  {
    "id": "1703",
    "slug": "minimum-adjacent-swaps-for-k-consecutive-ones",
    "template": "class Solution:\n    def minMoves(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minMoves())"
  },
  {
    "id": "1704",
    "slug": "determine-if-string-halves-are-alike",
    "template": "class Solution:\n    def numSpecial(mat):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSpecial())"
  },
  {
    "id": "1705",
    "slug": "maximum-number-of-eaten-apples",
    "template": "class Solution:\n    def unhappyFriends(n, preferences, pairs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.unhappyFriends())"
  },
  {
    "id": "1706",
    "slug": "where-will-the-ball-fall",
    "template": "class Solution:\n    def minCostConnectPoints(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCostConnectPoints())"
  },
  {
    "id": "1707",
    "slug": "maximum-xor-with-an-element-from-array",
    "template": "class Solution:\n    def can_transform(s, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_transform())"
  },
  {
    "id": "1708",
    "slug": "largest-subarray-length-k",
    "template": "class Solution:\n    def __init__(self, big: int, medium: int, small: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1710",
    "slug": "maximum-units-on-a-truck",
    "template": "class Solution:\n    def busiest_servers(k, arrival, load):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.busiest_servers())"
  },
  {
    "id": "1711",
    "slug": "count-good-meals",
    "template": "class Solution:\n    def restoreMatrix(rowSum, colSum):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.restoreMatrix())"
  },
  {
    "id": "1712",
    "slug": "ways-to-split-array-into-three-subarrays",
    "template": "class Solution:\n    def waysToSplit(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.waysToSplit())"
  },
  {
    "id": "1713",
    "slug": "minimum-operations-to-make-a-subsequence",
    "template": "class Solution:\n    def minOperations(target, arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "1714",
    "slug": "sum-of-special-evenly-spaced-elements-in-array",
    "template": "class Solution:\n    def reorder_spaces(text: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reorder_spaces())"
  },
  {
    "id": "1716",
    "slug": "calculate-money-in-leetcode-bank",
    "template": "class Solution:\n    def maxProductPath(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProductPath())"
  },
  {
    "id": "1717",
    "slug": "maximum-score-from-removing-substrings",
    "template": "class Solution:\n    def min_cost(cost, size1, size2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_cost())"
  },
  {
    "id": "1718",
    "slug": "construct-the-lexicographically-largest-valid-sequence",
    "template": "class Solution:\n    def constructDistancedSequence(self, n: int) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.constructDistancedSequence())"
  },
  {
    "id": "1719",
    "slug": "number-of-ways-to-reconstruct-a-tree",
    "template": "class Solution:\n    def check_ways(pairs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.check_ways())"
  },
  {
    "id": "1720",
    "slug": "decode-xored-array",
    "template": "class Solution:\n    def minOperations(logs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "1721",
    "slug": "swapping-nodes-in-a-linked-list",
    "template": "class Solution:\n    def min_operations_max_profit(customers, boarding_cost, running_cost):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations_max_profit())"
  },
  {
    "id": "1722",
    "slug": "minimize-hamming-distance-after-swap-operations",
    "template": "class Solution:\n    def __init__(self, kingName: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1723",
    "slug": "find-minimum-time-to-finish-all-jobs",
    "template": "class Solution:\n    def max_achievable_requests(n, requests, idx=0, counts=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_achievable_requests())"
  },
  {
    "id": "1724",
    "slug": "checking-existence-of-edge-length-limited-paths-ii",
    "template": "class Solution:\n    def __init__(self, n: int, edgeList: List[List[int]]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1725",
    "slug": "number-of-rectangles-that-can-form-the-largest-square",
    "template": "class Solution:\n    def numberOfSets(n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfSets())"
  },
  {
    "id": "1726",
    "slug": "tuple-with-same-product",
    "template": "class Solution:\n    def best_coordinate(towers, radius):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.best_coordinate())"
  },
  {
    "id": "1727",
    "slug": "largest-submatrix-with-rearrangements",
    "template": "class Solution:\n    def canMouseWin(grid: List[List[str]], catJump: int, mouseJump: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canMouseWin())"
  },
  {
    "id": "1728",
    "slug": "cat-and-mouse-ii",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1730",
    "slug": "shortest-path-to-get-food",
    "template": "class Solution:\n    def find_special_integer(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_special_integer())"
  },
  {
    "id": "1732",
    "slug": "find-the-highest-altitude",
    "template": "class Solution:\n    def min_operations(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1733",
    "slug": "minimum-number-of-people-to-teach",
    "template": "class Solution:\n    def visiblePoints(points, angle, location):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.visiblePoints())"
  },
  {
    "id": "1734",
    "slug": "decode-xored-permutation",
    "template": "class Solution:\n    def decode(encoded):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decode())"
  },
  {
    "id": "1735",
    "slug": "count-ways-to-make-array-with-product",
    "template": "class Solution:\n    def mul(a, b):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mul())"
  },
  {
    "id": "1738",
    "slug": "find-kth-largest-xor-coordinate-value",
    "template": "class Solution:\n    def maximalNetworkRank(n, roads):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximalNetworkRank())"
  },
  {
    "id": "1740",
    "slug": "find-distance-in-a-binary-tree",
    "template": "class Solution:\n    def countSubgraphsForEachD(n, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countSubgraphsForEachD())"
  },
  {
    "id": "1742",
    "slug": "maximum-number-of-balls-in-a-box",
    "template": "class Solution:\n    def maxWidthOfVerticalArea(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxWidthOfVerticalArea())"
  },
  {
    "id": "1743",
    "slug": "restore-the-array-from-adjacent-pairs",
    "template": "class Solution:\n    def count_substrings_with_one_difference(s, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_substrings_with_one_difference())"
  },
  {
    "id": "1744",
    "slug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
    "template": "class Solution:\n    def num_ways(words, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_ways())"
  },
  {
    "id": "1745",
    "slug": "palindrome-partitioning-iv",
    "template": "class Solution:\n    def is_palindrome(s, start, end):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_palindrome())"
  },
  {
    "id": "1746",
    "slug": "maximum-subarray-sum-after-one-operation",
    "template": "class Solution:\n    def maxLengthBetweenEqualCharacters(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxLengthBetweenEqualCharacters())"
  },
  {
    "id": "1748",
    "slug": "sum-of-unique-elements",
    "template": "class Solution:\n    def bestTeamScore(scores, ages):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.bestTeamScore())"
  },
  {
    "id": "1749",
    "slug": "maximum-absolute-sum-of-any-subarray",
    "template": "class Solution:\n    def maxAbsoluteSum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxAbsoluteSum())"
  },
  {
    "id": "1751",
    "slug": "maximum-number-of-events-that-can-be-attended-ii",
    "template": "class Solution:\n    def slowestKey(releaseTimes, keysPressed):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.slowestKey())"
  },
  {
    "id": "1752",
    "slug": "check-if-array-is-sorted-and-rotated",
    "template": "class Solution:\n    def check_arithmetic_subarrays(nums, l, r):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.check_arithmetic_subarrays())"
  },
  {
    "id": "1755",
    "slug": "closest-subsequence-sum",
    "template": "class Solution:\n    def decrypt(code, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decrypt())"
  },
  {
    "id": "1758",
    "slug": "minimum-changes-to-make-alternating-binary-string",
    "template": "class Solution:\n    def canDistribute(nums: List[int], quantity: List[int]) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canDistribute())"
  },
  {
    "id": "1759",
    "slug": "count-number-of-homogenous-substrings",
    "template": "class Solution:\n    def count_homogenous(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_homogenous())"
  },
  {
    "id": "1760",
    "slug": "minimum-limit-of-balls-in-a-bag",
    "template": "class Solution:\n    def can_form_array(arr, pieces):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_form_array())"
  },
  {
    "id": "1761",
    "slug": "minimum-degree-of-a-connected-trio-in-a-graph",
    "template": "class Solution:\n    def count_vowel_strings(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_vowel_strings())"
  },
  {
    "id": "1762",
    "slug": "buildings-with-an-ocean-view",
    "template": "class Solution:\n    def furthest_building(heights, bricks, ladders):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.furthest_building())"
  },
  {
    "id": "1763",
    "slug": "longest-nice-substring",
    "template": "class Solution:\n    def longestNiceSubstring(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestNiceSubstring())"
  },
  {
    "id": "1764",
    "slug": "form-array-by-concatenating-subarrays-of-another-array",
    "template": "class Solution:\n    def max_k_repeating(sequence, word):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_k_repeating())"
  },
  {
    "id": "1765",
    "slug": "map-of-highest-peak",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1766",
    "slug": "tree-of-coprimes",
    "template": "class Solution:\n    def minimum_mountain_removals(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_mountain_removals())"
  },
  {
    "id": "1768",
    "slug": "merge-strings-alternately",
    "template": "class Solution:\n    def mergeAlternately(word1: str, word2: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mergeAlternately())"
  },
  {
    "id": "1769",
    "slug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
    "template": "class Solution:\n    def maximum_generated(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximum_generated())"
  },
  {
    "id": "1770",
    "slug": "maximum-score-from-performing-multiplication-operations",
    "template": "class Solution:\n    def min_deletions(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_deletions())"
  },
  {
    "id": "1771",
    "slug": "maximize-palindrome-length-from-subsequences",
    "template": "class Solution:\n    def maxProfit(inventory, orders):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProfit())"
  },
  {
    "id": "1772",
    "slug": "sort-features-by-popularity",
    "template": "class Solution:\n    def create_sorted_array(instructions):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.create_sorted_array())"
  },
  {
    "id": "1773",
    "slug": "count-items-matching-a-rule",
    "template": "class Solution:\n    def countMatches(items, ruleKey, ruleValue):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countMatches())"
  },
  {
    "id": "1774",
    "slug": "closest-dessert-cost",
    "template": "class Solution:\n    def closest_cost(base_costs, topping_costs, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.closest_cost())"
  },
  {
    "id": "1775",
    "slug": "equal-sum-arrays-with-minimum-number-of-operations",
    "template": "class Solution:\n    def __init__(self, n: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1776",
    "slug": "car-fleet-ii",
    "template": "class Solution:\n    def minOperations(nums, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "1778",
    "slug": "shortest-path-in-a-hidden-grid",
    "template": "class Solution:\n    def getMaxGridHappiness(m, n, introvertsCount, extrovertsCount):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getMaxGridHappiness())"
  },
  {
    "id": "1779",
    "slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
    "template": "class Solution:\n    def nearestValidPoint(x: int, y: int, points: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nearestValidPoint())"
  },
  {
    "id": "1781",
    "slug": "sum-of-beauty-of-all-substrings",
    "template": "class Solution:\n    def arrayStringsAreEqual(word1, word2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.arrayStringsAreEqual())"
  },
  {
    "id": "1784",
    "slug": "check-if-binary-string-has-at-most-one-segment-of-ones",
    "template": "class Solution:\n    def minimum_energy(tasks):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_energy())"
  },
  {
    "id": "1785",
    "slug": "minimum-elements-to-add-to-form-a-given-sum",
    "template": "class Solution:\n    def minElements(nums, limit, goal):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minElements())"
  },
  {
    "id": "1786",
    "slug": "number-of-restricted-paths-from-first-to-last-node",
    "template": "class Solution:\n    def count_consistent_strings(allowed, words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_consistent_strings())"
  },
  {
    "id": "1787",
    "slug": "make-the-xor-of-all-segments-equal-to-zero",
    "template": "class Solution:\n    def calculate_summation_of_absolute_differences(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.calculate_summation_of_absolute_differences())"
  },
  {
    "id": "1788",
    "slug": "maximize-the-beauty-of-the-garden",
    "template": "class Solution:\n    def stoneGameVI(aliceValues, bobValues):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stoneGameVI())"
  },
  {
    "id": "1790",
    "slug": "check-if-one-string-swap-can-make-strings-equal",
    "template": "class Solution:\n    def are_almost_equal(s1, s2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.are_almost_equal())"
  },
  {
    "id": "1791",
    "slug": "find-center-of-star-graph",
    "template": "class Solution:\n    def maximum_wealth(accounts):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximum_wealth())"
  },
  {
    "id": "1792",
    "slug": "maximum-average-pass-ratio",
    "template": "class Solution:\n    def most_competitive(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.most_competitive())"
  },
  {
    "id": "1793",
    "slug": "maximum-score-of-a-good-subarray",
    "template": "class Solution:\n    def min_moves(nums, limit):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_moves())"
  },
  {
    "id": "1794",
    "slug": "count-pairs-of-equal-substrings-with-minimum-difference",
    "template": "class Solution:\n    def minimum_deviation(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_deviation())"
  },
  {
    "id": "1796",
    "slug": "second-largest-digit-in-a-string",
    "template": "class Solution:\n    def second_highest(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.second_highest())"
  },
  {
    "id": "1797",
    "slug": "design-authentication-manager",
    "template": "class Solution:\n    def interpret(command: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.interpret())"
  },
  {
    "id": "1798",
    "slug": "maximum-number-of-consecutive-values-you-can-make",
    "template": "class Solution:\n    def maxOperations(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxOperations())"
  },
  {
    "id": "1800",
    "slug": "maximum-ascending-subarray-sum",
    "template": "class Solution:\n    def concatenated_binary(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.concatenated_binary())"
  },
  {
    "id": "1801",
    "slug": "number-of-orders-in-the-backlog",
    "template": "class Solution:\n    def getNumberOfBacklogOrders(orders):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getNumberOfBacklogOrders())"
  },
  {
    "id": "1802",
    "slug": "maximum-value-at-a-given-index-in-a-bounded-array",
    "template": "class Solution:\n    def countStudents(students, sandwiches):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countStudents())"
  },
  {
    "id": "1803",
    "slug": "count-pairs-with-xor-in-a-range",
    "template": "class Solution:\n    def average_waiting_time(customers):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.average_waiting_time())"
  },
  {
    "id": "1805",
    "slug": "number-of-different-integers-in-a-string",
    "template": "class Solution:\n    def min_moves(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_moves())"
  },
  {
    "id": "1806",
    "slug": "minimum-number-of-operations-to-reinitialize-a-permutation",
    "template": "class Solution:\n    def numberOfMatches(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfMatches())"
  },
  {
    "id": "1808",
    "slug": "maximize-number-of-nice-divisors",
    "template": "class Solution:\n    def stoneGame(stones):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stoneGame())"
  },
  {
    "id": "1810",
    "slug": "minimum-path-cost-in-a-hidden-grid",
    "template": "class Solution:\n    def findShortestPath(self, master: 'GridMaster') -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findShortestPath())"
  },
  {
    "id": "1812",
    "slug": "determine-color-of-a-chessboard-square",
    "template": "class Solution:\n    def reformat_number(number):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reformat_number())"
  },
  {
    "id": "1813",
    "slug": "sentence-similarity-iii",
    "template": "class Solution:\n    def maximum_unique_subarray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximum_unique_subarray())"
  },
  {
    "id": "1814",
    "slug": "count-nice-pairs-in-an-array",
    "template": "class Solution:\n    def maxResult(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxResult())"
  },
  {
    "id": "1817",
    "slug": "finding-the-users-active-minutes",
    "template": "class Solution:\n    def total_money(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.total_money())"
  },
  {
    "id": "1818",
    "slug": "minimum-absolute-sum-difference",
    "template": "class Solution:\n    def max_points(s, x, y):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_points())"
  },
  {
    "id": "1819",
    "slug": "number-of-different-subsequences-gcds",
    "template": "class Solution:\n    def largest_lex_sequence(n: int) -> list[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest_lex_sequence())"
  },
  {
    "id": "1820",
    "slug": "maximum-number-of-accepted-invitations",
    "template": "class Solution:\n    def count_trees(pairs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_trees())"
  },
  {
    "id": "1822",
    "slug": "sign-of-the-product-of-an-array",
    "template": "class Solution:\n    def signFunc(x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.signFunc())"
  },
  {
    "id": "1823",
    "slug": "find-the-winner-of-the-circular-game",
    "template": "class Solution:\n    def halves_are_alike(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.halves_are_alike())"
  },
  {
    "id": "1824",
    "slug": "minimum-sideway-jumps",
    "template": "class Solution:\n    def eatenApples(apples, days):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.eatenApples())"
  },
  {
    "id": "1825",
    "slug": "finding-mk-average",
    "template": "class Solution:\n    def minimum_working_time(jobs, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_working_time())"
  },
  {
    "id": "1826",
    "slug": "faulty-sensor",
    "template": "class Solution:\n    def maximizeXor(nums, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximizeXor())"
  },
  {
    "id": "1827",
    "slug": "minimum-operations-to-make-the-array-increasing",
    "template": "class Solution:\n    def min_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1828",
    "slug": "queries-on-number-of-points-inside-a-circle",
    "template": "class Solution:\n    def countPoints(points, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countPoints())"
  },
  {
    "id": "1829",
    "slug": "maximum-xor-for-each-query",
    "template": "class Solution:\n    def maximumUnits(boxTypes, truckSize):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumUnits())"
  },
  {
    "id": "1830",
    "slug": "minimum-number-of-operations-to-make-string-sorted",
    "template": "class Solution:\n    def countPairs(deliciousness):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countPairs())"
  },
  {
    "id": "1832",
    "slug": "check-if-the-sentence-is-pangram",
    "template": "class Solution:\n    def min_operations(target, arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1833",
    "slug": "maximum-ice-cream-bars",
    "template": "class Solution:\n    def largestAltitude(gain):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestAltitude())"
  },
  {
    "id": "1834",
    "slug": "single-threaded-cpu",
    "template": "class Solution:\n    def minimum_teachings(n, languages, friendships):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_teachings())"
  },
  {
    "id": "1835",
    "slug": "find-xor-sum-of-all-pairs-bitwise-and",
    "template": "class Solution:\n    def decode(encoded):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decode())"
  },
  {
    "id": "1838",
    "slug": "frequency-of-the-most-frequent-element",
    "template": "class Solution:\n    def maxFrequency(nums: List[int], k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxFrequency())"
  },
  {
    "id": "1839",
    "slug": "longest-substring-of-all-vowels-in-order",
    "template": "class Solution:\n    def decode(encoded, first):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decode())"
  },
  {
    "id": "1840",
    "slug": "maximum-building-height",
    "template": "class Solution:\n    def dfs(node, visited, graph, group):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "1844",
    "slug": "replace-all-digits-with-characters",
    "template": "class Solution:\n    def count_balls(low_limit: int, high_limit: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_balls())"
  },
  {
    "id": "1845",
    "slug": "seat-reservation-manager",
    "template": "class Solution:\n    def largestSubmatrix(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestSubmatrix())"
  },
  {
    "id": "1846",
    "slug": "maximum-element-after-decreasing-and-rearranging",
    "template": "class Solution:\n    def maximumElementAfterDecrementingAndRearranging(arr: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumElementAfterDecrementingAndRearranging())"
  },
  {
    "id": "1848",
    "slug": "minimum-distance-to-the-target-element",
    "template": "class Solution:\n    def sum_of_unique_elements(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_unique_elements())"
  },
  {
    "id": "1849",
    "slug": "splitting-a-string-into-descending-consecutive-values",
    "template": "class Solution:\n    def maxAbsoluteSum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxAbsoluteSum())"
  },
  {
    "id": "1851",
    "slug": "minimum-interval-to-include-each-query",
    "template": "class Solution:\n    def maxValue(events, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxValue())"
  },
  {
    "id": "1852",
    "slug": "distinct-numbers-in-each-subarray",
    "template": "class Solution:\n    def distinct_numbers_in_subarrays(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distinct_numbers_in_subarrays())"
  },
  {
    "id": "1854",
    "slug": "maximum-population-year",
    "template": "class Solution:\n    def maxAliveYear(logs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxAliveYear())"
  },
  {
    "id": "1855",
    "slug": "maximum-distance-between-a-pair-of-values",
    "template": "class Solution:\n    def maxDistance(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxDistance())"
  },
  {
    "id": "1856",
    "slug": "maximum-subarray-min-product",
    "template": "class Solution:\n    def maxSumMinProduct(nums: list[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSumMinProduct())"
  },
  {
    "id": "1857",
    "slug": "largest-color-value-in-a-directed-graph",
    "template": "class Solution:\n    def largestPathValue(colors: str, edges: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestPathValue())"
  },
  {
    "id": "1859",
    "slug": "sorting-the-sentence",
    "template": "class Solution:\n    def min_operations_to_satisfy_conditions(a: str, b: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations_to_satisfy_conditions())"
  },
  {
    "id": "1860",
    "slug": "incremental-memory-leak",
    "template": "class Solution:\n    def kthLargestValue(matrix, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kthLargestValue())"
  },
  {
    "id": "1861",
    "slug": "rotating-the-box",
    "template": "class Solution:\n    def min_boxes_touching_floor(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_boxes_touching_floor())"
  },
  {
    "id": "1862",
    "slug": "sum-of-floored-pairs",
    "template": "class Solution:\n    def sum_of_floored_pairs(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_floored_pairs())"
  },
  {
    "id": "1863",
    "slug": "sum-of-all-subset-xor-totals",
    "template": "class Solution:\n    def subsetXORSum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.subsetXORSum())"
  },
  {
    "id": "1864",
    "slug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
    "template": "class Solution:\n    def minSwaps(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSwaps())"
  },
  {
    "id": "1865",
    "slug": "finding-pairs-with-a-certain-sum",
    "template": "class Solution:\n    def __init__(self, nums1: list[int], nums2: list[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1866",
    "slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
    "template": "class Solution:\n    def restoreArray(adjacentPairs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.restoreArray())"
  },
  {
    "id": "1868",
    "slug": "product-of-two-run-length-encoded-arrays",
    "template": "class Solution:\n    def findRLEProduct(encoded1, encoded2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findRLEProduct())"
  },
  {
    "id": "1870",
    "slug": "minimum-speed-to-arrive-on-time",
    "template": "class Solution:\n    def minSpeedOnTime(dist, hour):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSpeedOnTime())"
  },
  {
    "id": "1871",
    "slug": "jump-game-vii",
    "template": "class Solution:\n    def is_palindrome(s, l, r):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_palindrome())"
  },
  {
    "id": "1872",
    "slug": "stone-game-viii",
    "template": "class Solution:\n    def can_eat(candiesCount, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_eat())"
  },
  {
    "id": "1874",
    "slug": "minimize-product-sum-of-two-arrays",
    "template": "class Solution:\n    def can_choose(groups, nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_choose())"
  },
  {
    "id": "1876",
    "slug": "substrings-of-size-three-with-distinct-characters",
    "template": "class Solution:\n    def highest_island(is_water):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.highest_island())"
  },
  {
    "id": "1877",
    "slug": "minimize-maximum-pair-sum-in-array",
    "template": "class Solution:\n    def minPairSum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minPairSum())"
  },
  {
    "id": "1878",
    "slug": "get-biggest-three-rhombus-sums-in-a-grid",
    "template": "class Solution:\n    def check(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.check())"
  },
  {
    "id": "1881",
    "slug": "maximum-value-after-insertion",
    "template": "class Solution:\n    def minAbsDifference(nums, goal):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minAbsDifference())"
  },
  {
    "id": "1882",
    "slug": "process-tasks-using-servers",
    "template": "class Solution:\n    def assignTasks(servers: List[int], tasks: List[int]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.assignTasks())"
  },
  {
    "id": "1883",
    "slug": "minimum-skips-to-arrive-at-meeting-on-time",
    "template": "class Solution:\n    def minSkips(dist, speed, hoursBefore):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSkips())"
  },
  {
    "id": "1884",
    "slug": "egg-drop-with-2-eggs-and-n-floors",
    "template": "class Solution:\n    def min_operations_to_alternate(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations_to_alternate())"
  },
  {
    "id": "1885",
    "slug": "count-pairs-in-two-arrays",
    "template": "class Solution:\n    def count_homogenous(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_homogenous())"
  },
  {
    "id": "1886",
    "slug": "determine-whether-matrix-can-be-obtained-by-rotation",
    "template": "class Solution:\n    def minimumSize(nums, maxOperations):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumSize())"
  },
  {
    "id": "1887",
    "slug": "reduction-operations-to-make-the-array-elements-equal",
    "template": "class Solution:\n    def min_trio_degree(n, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_trio_degree())"
  },
  {
    "id": "1888",
    "slug": "minimum-number-of-flips-to-make-the-binary-string-alternating",
    "template": "class Solution:\n    def nearestValidPoint(x, y, points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nearestValidPoint())"
  },
  {
    "id": "1893",
    "slug": "check-if-all-the-integers-in-a-range-are-covered",
    "template": "class Solution:\n    def isCovered(ranges: List[List[int]], left: int, right: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isCovered())"
  },
  {
    "id": "1894",
    "slug": "find-the-student-that-will-replace-the-chalk",
    "template": "class Solution:\n    def merge_alternately(word1, word2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.merge_alternately())"
  },
  {
    "id": "1895",
    "slug": "largest-magic-square",
    "template": "class Solution:\n    def min_operations(boxes: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1896",
    "slug": "minimum-cost-to-change-the-final-value-of-expression",
    "template": "class Solution:\n    def maximumScore(nums, multipliers):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumScore())"
  },
  {
    "id": "1897",
    "slug": "redistribute-characters-to-make-all-strings-equal",
    "template": "class Solution:\n    def longestPalindromeSubseq(word1, word2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestPalindromeSubseq())"
  },
  {
    "id": "1898",
    "slug": "maximum-number-of-removable-characters",
    "template": "class Solution:\n    def maximumRemovals(s: str, p: str, removable: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumRemovals())"
  },
  {
    "id": "1899",
    "slug": "merge-triplets-to-form-target-triplet",
    "template": "class Solution:\n    def count_matches(items, rule_key, rule_value):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_matches())"
  },
  {
    "id": "1900",
    "slug": "the-earliest-and-latest-rounds-where-players-compete",
    "template": "class Solution:\n    def closest_cost(base_costs, topping_costs, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.closest_cost())"
  },
  {
    "id": "1901",
    "slug": "find-a-peak-element-ii",
    "template": "class Solution:\n    def min_operations(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1902",
    "slug": "depth-of-bst-given-insertion-order",
    "template": "class Solution:\n    def get_collision_times(cars):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_collision_times())"
  },
  {
    "id": "1903",
    "slug": "largest-odd-number-in-string",
    "template": "class Solution:\n    def largest_odd_number(num: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest_odd_number())"
  },
  {
    "id": "1904",
    "slug": "the-number-of-full-rounds-you-have-played",
    "template": "class Solution:\n    def second_largest_digit(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.second_largest_digit())"
  },
  {
    "id": "1906",
    "slug": "minimum-absolute-difference-queries",
    "template": "class Solution:\n    def maxScore(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScore())"
  },
  {
    "id": "1908",
    "slug": "game-of-nim",
    "template": "class Solution:\n    def alice_wins(piles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.alice_wins())"
  },
  {
    "id": "1909",
    "slug": "remove-one-element-to-make-the-array-strictly-increasing",
    "template": "class Solution:\n    def canBeIncreasing(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canBeIncreasing())"
  },
  {
    "id": "1910",
    "slug": "remove-all-occurrences-of-a-substring",
    "template": "class Solution:\n    def check_ones_segment(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.check_ones_segment())"
  },
  {
    "id": "1911",
    "slug": "maximum-alternating-subsequence-sum",
    "template": "class Solution:\n    def min_elements(nums, limit, goal):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_elements())"
  },
  {
    "id": "1912",
    "slug": "design-movie-rental-system",
    "template": "class Solution:\n    def countRestrictedPaths(n, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countRestrictedPaths())"
  },
  {
    "id": "1913",
    "slug": "maximum-product-difference-between-two-pairs",
    "template": "class Solution:\n    def min_changes(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_changes())"
  },
  {
    "id": "1914",
    "slug": "cyclically-rotating-a-grid",
    "template": "class Solution:\n    def rotateGrid(grid, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rotateGrid())"
  },
  {
    "id": "1915",
    "slug": "number-of-wonderful-substrings",
    "template": "class Solution:\n    def are_almost_equal(s1, s2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.are_almost_equal())"
  },
  {
    "id": "1916",
    "slug": "count-ways-to-build-rooms-in-an-ant-colony",
    "template": "class Solution:\n    def findCenter(edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findCenter())"
  },
  {
    "id": "1918",
    "slug": "kth-smallest-subarray-sum",
    "template": "class Solution:\n    def maxScore(nums: List[int], k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScore())"
  },
  {
    "id": "1921",
    "slug": "eliminate-maximum-number-of-monsters",
    "template": "class Solution:\n    def eliminate_maximum(dist, speed):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.eliminate_maximum())"
  },
  {
    "id": "1922",
    "slug": "count-good-numbers",
    "template": "class Solution:\n    def goodDigitStrings(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.goodDigitStrings())"
  },
  {
    "id": "1923",
    "slug": "longest-common-subpath",
    "template": "class Solution:\n    def are_sentences_similar(sentence1, sentence2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.are_sentences_similar())"
  },
  {
    "id": "1924",
    "slug": "erect-the-fence-ii",
    "template": "class Solution:\n    def max_happy_groups(batchSize, groups):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_happy_groups())"
  },
  {
    "id": "1925",
    "slug": "count-square-sum-triples",
    "template": "class Solution:\n    def reverse(x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverse())"
  },
  {
    "id": "1926",
    "slug": "nearest-exit-from-entrance-in-maze",
    "template": "class Solution:\n    def nearest_exit(maze, entrance):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nearest_exit())"
  },
  {
    "id": "1927",
    "slug": "sum-game",
    "template": "class Solution:\n    def max_ascending_sum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_ascending_sum())"
  },
  {
    "id": "1928",
    "slug": "minimum-cost-to-reach-destination-in-time",
    "template": "class Solution:\n    def getNumberOfBacklogOrders(orders):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getNumberOfBacklogOrders())"
  },
  {
    "id": "1929",
    "slug": "concatenation-of-array",
    "template": "class Solution:\n    def maxValue(n, index, maxSum):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxValue())"
  },
  {
    "id": "1930",
    "slug": "unique-length-3-palindromic-subsequences",
    "template": "class Solution:\n    def max_consecutive_values(coins):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_consecutive_values())"
  },
  {
    "id": "1931",
    "slug": "painting-a-grid-with-three-different-colors",
    "template": "class Solution:\n    def numOfWays(m, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numOfWays())"
  },
  {
    "id": "1932",
    "slug": "merge-bsts-to-create-single-bst",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1933",
    "slug": "check-if-string-is-decomposable-into-value-equal-substrings",
    "template": "class Solution:\n    def num_different_integers(word):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_different_integers())"
  },
  {
    "id": "1935",
    "slug": "maximum-number-of-words-you-can-type",
    "template": "class Solution:\n    def min_operations(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1936",
    "slug": "add-minimum-number-of-rungs",
    "template": "class Solution:\n    def numberOfNiceDivisors(primeFactors):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfNiceDivisors())"
  },
  {
    "id": "1937",
    "slug": "maximum-number-of-points-with-cost",
    "template": "class Solution:\n    def maxPoints(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxPoints())"
  },
  {
    "id": "1938",
    "slug": "maximum-genetic-difference-query",
    "template": "class Solution:\n    def min_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "1941",
    "slug": "check-if-all-characters-have-equal-number-of-occurrences",
    "template": "class Solution:\n    def make_string_sorted(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.make_string_sorted())"
  },
  {
    "id": "1942",
    "slug": "the-number-of-the-smallest-unoccupied-chair",
    "template": "class Solution:\n    def smallestChair(times, targetFriend):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestChair())"
  },
  {
    "id": "1943",
    "slug": "describe-the-painting",
    "template": "class Solution:\n    def splitPainting(segments):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.splitPainting())"
  },
  {
    "id": "1944",
    "slug": "number-of-visible-people-in-a-queue",
    "template": "class Solution:\n    def truncate_sentence(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.truncate_sentence())"
  },
  {
    "id": "1945",
    "slug": "sum-of-digits-of-string-after-convert",
    "template": "class Solution:\n    def finding_users_active_minutes(logs, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.finding_users_active_minutes())"
  },
  {
    "id": "1946",
    "slug": "largest-number-after-mutating-substring",
    "template": "class Solution:\n    def minAbsoluteSumDiff(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minAbsoluteSumDiff())"
  },
  {
    "id": "1947",
    "slug": "maximum-compatibility-score-sum",
    "template": "class Solution:\n    def count_different_subsequence_GCDs(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_different_subsequence_GCDs())"
  },
  {
    "id": "1948",
    "slug": "delete-duplicate-folders-in-system",
    "template": "class Solution:\n    def delete_duplicate_folder(paths):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.delete_duplicate_folder())"
  },
  {
    "id": "1950",
    "slug": "maximum-of-minimum-values-in-all-subarrays",
    "template": "class Solution:\n    def sign_func(x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sign_func())"
  },
  {
    "id": "1952",
    "slug": "three-divisors",
    "template": "class Solution:\n    def minSideJumps(obstacles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSideJumps())"
  },
  {
    "id": "1953",
    "slug": "maximum-number-of-weeks-for-which-you-can-work",
    "template": "class Solution:\n    def __init__(self, m: int, k: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1954",
    "slug": "minimum-garden-perimeter-to-collect-enough-apples",
    "template": "class Solution:\n    def replace_digits(s: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.replace_digits())"
  },
  {
    "id": "1955",
    "slug": "count-number-of-special-subsequences",
    "template": "class Solution:\n    def __init__(self, n: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1956",
    "slug": "minimum-time-for-k-virus-variants-to-spread",
    "template": "class Solution:\n    def max_element(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_element())"
  },
  {
    "id": "1957",
    "slug": "delete-characters-to-make-fancy-string",
    "template": "class Solution:\n    def smallest_difference_room(rooms, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_difference_room())"
  },
  {
    "id": "1958",
    "slug": "check-if-move-is-legal",
    "template": "class Solution:\n    def checkMove(board, rMove, cMove, color):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.checkMove())"
  },
  {
    "id": "1959",
    "slug": "minimum-total-space-wasted-with-k-resizing-operations",
    "template": "class Solution:\n    def minSpaceWastedKResizing(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSpaceWastedKResizing())"
  },
  {
    "id": "1960",
    "slug": "maximum-product-of-the-length-of-two-palindromic-substrings",
    "template": "class Solution:\n    def is_pangram(sentence):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_pangram())"
  },
  {
    "id": "1961",
    "slug": "check-if-string-is-a-prefix-of-array",
    "template": "class Solution:\n    def max_ice_cream(costs, coins):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_ice_cream())"
  },
  {
    "id": "1962",
    "slug": "remove-stones-to-minimize-the-total",
    "template": "class Solution:\n    def getOrder(tasks):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getOrder())"
  },
  {
    "id": "1963",
    "slug": "minimum-number-of-swaps-to-make-the-string-balanced",
    "template": "class Solution:\n    def get_xor_sum(arr1, arr2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_xor_sum())"
  },
  {
    "id": "1964",
    "slug": "find-the-longest-valid-obstacle-course-at-each-position",
    "template": "class Solution:\n    def longest_obstacle_course(obstacles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_obstacle_course())"
  },
  {
    "id": "1966",
    "slug": "binary-searchable-numbers-in-an-unsorted-array",
    "template": "class Solution:\n    def maxFrequency(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxFrequency())"
  },
  {
    "id": "1967",
    "slug": "number-of-strings-that-appear-as-substrings-in-word",
    "template": "class Solution:\n    def longest_beautiful_substring(word: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_beautiful_substring())"
  },
  {
    "id": "1968",
    "slug": "array-with-elements-not-equal-to-average-of-neighbors",
    "template": "class Solution:\n    def max_building(n, restrictions):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_building())"
  },
  {
    "id": "1971",
    "slug": "find-if-path-exists-in-graph",
    "template": "class Solution:\n    def mem_sticks_crash(memory1, memory2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.mem_sticks_crash())"
  },
  {
    "id": "1973",
    "slug": "count-nodes-equal-to-sum-of-descendants",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "1975",
    "slug": "maximum-matrix-sum",
    "template": "class Solution:\n    def find_target_distance(nums, target, start):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_target_distance())"
  },
  {
    "id": "1976",
    "slug": "number-of-ways-to-arrive-at-destination",
    "template": "class Solution:\n    def can_split_string(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_split_string())"
  },
  {
    "id": "1977",
    "slug": "number-of-ways-to-separate-numbers",
    "template": "class Solution:\n    def intervalFinding(intervals, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.intervalFinding())"
  },
  {
    "id": "1979",
    "slug": "find-greatest-common-divisor-of-array",
    "template": "class Solution:\n    def findGCD(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findGCD())"
  },
  {
    "id": "1980",
    "slug": "find-unique-binary-string",
    "template": "class Solution:\n    def findDifferentBinaryString(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findDifferentBinaryString())"
  },
  {
    "id": "1981",
    "slug": "minimize-the-difference-between-target-and-chosen-elements",
    "template": "class Solution:\n    def minimizeTheDifference(mat, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimizeTheDifference())"
  },
  {
    "id": "1982",
    "slug": "find-array-given-subset-sums",
    "template": "class Solution:\n    def recoverArray(n, sums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.recoverArray())"
  },
  {
    "id": "1983",
    "slug": "widest-pair-of-indices-with-equal-range-sum",
    "template": "class Solution:\n    def max_alive_year(logs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_alive_year())"
  },
  {
    "id": "1984",
    "slug": "minimum-difference-between-highest-and-lowest-of-k-scores",
    "template": "class Solution:\n    def max_distance(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_distance())"
  },
  {
    "id": "1985",
    "slug": "find-the-kth-largest-integer-in-the-array",
    "template": "class Solution:\n    def maxMinProduct(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxMinProduct())"
  },
  {
    "id": "1986",
    "slug": "minimum-number-of-work-sessions-to-finish-the-tasks",
    "template": "class Solution:\n    def largestPathValue(colors, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestPathValue())"
  },
  {
    "id": "1987",
    "slug": "number-of-unique-good-subsequences",
    "template": "class Solution:\n    def count_good_substrings(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_good_substrings())"
  },
  {
    "id": "1989",
    "slug": "maximum-number-of-people-that-can-be-caught-in-tag",
    "template": "class Solution:\n    def minimum_xor_sum(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_xor_sum())"
  },
  {
    "id": "1991",
    "slug": "find-the-middle-index-in-array",
    "template": "class Solution:\n    def findMiddleIndex(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMiddleIndex())"
  },
  {
    "id": "1992",
    "slug": "find-all-groups-of-farmland",
    "template": "class Solution:\n    def findFarmland(land):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findFarmland())"
  },
  {
    "id": "1993",
    "slug": "operations-on-tree",
    "template": "class Solution:\n    def subset_xor_sum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.subset_xor_sum())"
  },
  {
    "id": "1994",
    "slug": "the-number-of-good-subsets",
    "template": "class Solution:\n    def min_swaps(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_swaps())"
  },
  {
    "id": "1996",
    "slug": "the-number-of-weak-characters-in-the-game",
    "template": "class Solution:\n    def numberOfSticks(n, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfSticks())"
  },
  {
    "id": "1997",
    "slug": "first-day-where-you-have-been-in-all-the-rooms",
    "template": "class Solution:\n    def firstDayBeenInAllRooms(nextVisit):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.firstDayBeenInAllRooms())"
  },
  {
    "id": "1998",
    "slug": "gcd-sort-of-an-array",
    "template": "class Solution:\n    def can_be_sorted(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_be_sorted())"
  },
  {
    "id": "2000",
    "slug": "reverse-prefix-of-word",
    "template": "class Solution:\n    def minimum_speed(n, hour, dist):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_speed())"
  },
  {
    "id": "2001",
    "slug": "number-of-pairs-of-interchangeable-rectangles",
    "template": "class Solution:\n    def canReach(s: str, minJump: int, maxJump: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canReach())"
  },
  {
    "id": "2002",
    "slug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
    "template": "class Solution:\n    def stoneGameVII(stones):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stoneGameVII())"
  },
  {
    "id": "2003",
    "slug": "smallest-missing-genetic-value-in-each-subtree",
    "template": "class Solution:\n    def smallestMissingValueSubtree(parents, nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestMissingValueSubtree())"
  },
  {
    "id": "2005",
    "slug": "subtree-removal-game-with-fibonacci-tree",
    "template": "class Solution:\n    def is_covered(ranges, left, right):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_covered())"
  },
  {
    "id": "2006",
    "slug": "count-number-of-pairs-with-absolute-difference-k",
    "template": "class Solution:\n    def chalk_replacer(chalk, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.chalk_replacer())"
  },
  {
    "id": "2007",
    "slug": "find-original-array-from-doubled-array",
    "template": "class Solution:\n    def find_original_array(changed):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_original_array())"
  },
  {
    "id": "2008",
    "slug": "maximum-earnings-from-taxi",
    "template": "class Solution:\n    def minOperationsToFlip(expression: str)\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperationsToFlip())"
  },
  {
    "id": "2009",
    "slug": "minimum-number-of-operations-to-make-array-continuous",
    "template": "class Solution:\n    def min_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2011",
    "slug": "final-value-of-variable-after-performing-operations",
    "template": "class Solution:\n    def max_value(n: str, x: int) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_value())"
  },
  {
    "id": "2012",
    "slug": "sum-of-beauty-in-the-array",
    "template": "class Solution:\n    def assignTasks(servers, tasks):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.assignTasks())"
  },
  {
    "id": "2013",
    "slug": "detect-squares",
    "template": "class Solution:\n    def min_skips(dist, speed, hours_before):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_skips())"
  },
  {
    "id": "2014",
    "slug": "longest-subsequence-repeated-k-times",
    "template": "class Solution:\n    def longestSubsequenceRepeatedK(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestSubsequenceRepeatedK())"
  },
  {
    "id": "2015",
    "slug": "average-height-of-buildings-in-each-segment",
    "template": "class Solution:\n    def findRotation(mat, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findRotation())"
  },
  {
    "id": "2016",
    "slug": "maximum-difference-between-increasing-elements",
    "template": "class Solution:\n    def min_steps_to_equal_elements(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_steps_to_equal_elements())"
  },
  {
    "id": "2017",
    "slug": "grid-game",
    "template": "class Solution:\n    def min_operations(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2019",
    "slug": "the-score-of-students-solving-math-expression",
    "template": "class Solution:\n    def sumOfPoints(s: str, answers: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumOfPoints())"
  },
  {
    "id": "2021",
    "slug": "brightest-position-on-street",
    "template": "class Solution:\n    def remove_occurrences(s, part):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.remove_occurrences())"
  },
  {
    "id": "2022",
    "slug": "convert-1d-array-into-2d-array",
    "template": "class Solution:\n    def max_alternating_sum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_alternating_sum())"
  },
  {
    "id": "2023",
    "slug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
    "template": "class Solution:\n    def __init__(self, n: int, entries: List[List[int]]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2024",
    "slug": "maximize-the-confusion-of-an-exam",
    "template": "class Solution:\n    def max_consecutive_answers(answer_key: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_consecutive_answers())"
  },
  {
    "id": "2025",
    "slug": "maximum-number-of-ways-to-partition-an-array",
    "template": "class Solution:\n    def make_equal(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.make_equal())"
  },
  {
    "id": "2027",
    "slug": "minimum-moves-to-convert-string",
    "template": "class Solution:\n    def maximumRemovals(s: str, p: str, removable: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumRemovals())"
  },
  {
    "id": "2028",
    "slug": "find-missing-observations",
    "template": "class Solution:\n    def earliest_and_latest(n, first_player, second_player):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.earliest_and_latest())"
  },
  {
    "id": "2030",
    "slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
    "template": "class Solution:\n    def smallestSubsequence(s, k, letter, repetition):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestSubsequence())"
  },
  {
    "id": "2031",
    "slug": "count-subarrays-with-more-ones-than-zeros",
    "template": "class Solution:\n    def min_moves(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_moves())"
  },
  {
    "id": "2032",
    "slug": "two-out-of-three",
    "template": "class Solution:\n    def largest_odd(num: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest_odd())"
  },
  {
    "id": "2033",
    "slug": "minimum-operations-to-make-a-uni-value-grid",
    "template": "class Solution:\n    def full_rounds_played(login_time, logout_time):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.full_rounds_played())"
  },
  {
    "id": "2034",
    "slug": "stock-price-fluctuation",
    "template": "class Solution:\n    def min_absolute_difference(nums, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_absolute_difference())"
  },
  {
    "id": "2035",
    "slug": "partition-array-into-two-arrays-to-minimize-sum-difference",
    "template": "class Solution:\n    def countSubIslands(grid1, grid2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countSubIslands())"
  },
  {
    "id": "2036",
    "slug": "maximum-alternating-subarray-sum",
    "template": "class Solution:\n    def maxAlternatingSum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxAlternatingSum())"
  },
  {
    "id": "2037",
    "slug": "minimum-number-of-moves-to-seat-everyone",
    "template": "class Solution:\n    def count_square_triples(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_square_triples())"
  },
  {
    "id": "2038",
    "slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
    "template": "class Solution:\n    def nearest_exit(maze, entrance):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nearest_exit())"
  },
  {
    "id": "2039",
    "slug": "the-time-when-the-network-becomes-idle",
    "template": "class Solution:\n    def sumGame(num: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumGame())"
  },
  {
    "id": "2040",
    "slug": "kth-smallest-product-of-two-sorted-arrays",
    "template": "class Solution:\n    def minCost(maxTime, edges, passingFees):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCost())"
  },
  {
    "id": "2042",
    "slug": "check-if-numbers-are-ascending-in-a-sentence",
    "template": "class Solution:\n    def maxProductDifference(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProductDifference())"
  },
  {
    "id": "2043",
    "slug": "simple-bank-system",
    "template": "class Solution:\n    def rotateGrid(grid, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rotateGrid())"
  },
  {
    "id": "2044",
    "slug": "count-number-of-maximum-bitwise-or-subsets",
    "template": "class Solution:\n    def wonderfulSubstrings(word: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.wonderfulSubstrings())"
  },
  {
    "id": "2045",
    "slug": "second-minimum-time-to-reach-destination",
    "template": "class Solution:\n    def secondMinimum(n, edges, time, change):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.secondMinimum())"
  },
  {
    "id": "2046",
    "slug": "sort-linked-list-already-sorted-using-absolute-values",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2047",
    "slug": "number-of-valid-words-in-a-sentence",
    "template": "class Solution:\n    def findPeakGrid(mat: List[List[int]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findPeakGrid())"
  },
  {
    "id": "2048",
    "slug": "next-greater-numerically-balanced-number",
    "template": "class Solution:\n    def build_array(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.build_array())"
  },
  {
    "id": "2049",
    "slug": "count-nodes-with-the-highest-score",
    "template": "class Solution:\n    def eliminate_monsters(dist, speed):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.eliminate_monsters())"
  },
  {
    "id": "2050",
    "slug": "parallel-courses-iii",
    "template": "class Solution:\n    def count_good_digit_strings(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_good_digit_strings())"
  },
  {
    "id": "2052",
    "slug": "minimum-cost-to-separate-sentence-into-rows",
    "template": "class Solution:\n    def minCost(sentence: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCost())"
  },
  {
    "id": "2053",
    "slug": "kth-distinct-string-in-an-array",
    "template": "class Solution:\n    def is_good_string(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_good_string())"
  },
  {
    "id": "2054",
    "slug": "two-best-non-overlapping-events",
    "template": "class Solution:\n    def find_chair(times, target_friend):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_chair())"
  },
  {
    "id": "2055",
    "slug": "plates-between-candles",
    "template": "class Solution:\n    def splitPainting(segments):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.splitPainting())"
  },
  {
    "id": "2056",
    "slug": "number-of-valid-move-combinations-on-chessboard",
    "template": "class Solution:\n    def count_valid_combos(pieces, positions, index=0):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_valid_combos())"
  },
  {
    "id": "2057",
    "slug": "smallest-index-with-equal-value",
    "template": "class Solution:\n    def smallest_index(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_index())"
  },
  {
    "id": "2058",
    "slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
    "template": "class Solution:\n    def get_concatenation(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_concatenation())"
  },
  {
    "id": "2059",
    "slug": "minimum-operations-to-convert-number",
    "template": "class Solution:\n    def count_three_char_palindromes(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_three_char_palindromes())"
  },
  {
    "id": "2060",
    "slug": "check-if-an-original-string-exists-given-two-encoded-strings",
    "template": "class Solution:\n    def merge_trees(trees):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.merge_trees())"
  },
  {
    "id": "2061",
    "slug": "number-of-spaces-cleaning-robot-cleaned",
    "template": "class Solution:\n    def colorTheGrid(m, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.colorTheGrid())"
  },
  {
    "id": "2063",
    "slug": "vowels-of-all-substrings",
    "template": "class Solution:\n    def count_vowels(word):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_vowels())"
  },
  {
    "id": "2064",
    "slug": "minimized-maximum-of-products-distributed-to-any-store",
    "template": "class Solution:\n    def minimum_maximum(n, quantities):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_maximum())"
  },
  {
    "id": "2065",
    "slug": "maximum-path-quality-of-a-graph",
    "template": "class Solution:\n    def maxQuality_dfs(node, time_left, visited, values, neighbors):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxQuality_dfs())"
  },
  {
    "id": "2067",
    "slug": "number-of-equal-count-substrings",
    "template": "class Solution:\n    def maxScore(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScore())"
  },
  {
    "id": "2068",
    "slug": "check-whether-two-strings-are-almost-equivalent",
    "template": "class Solution:\n    def maxGeneticDifference(parents, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxGeneticDifference())"
  },
  {
    "id": "2069",
    "slug": "walking-robot-simulation-ii",
    "template": "class Solution:\n    def __init__(self, width: int, height: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2070",
    "slug": "most-beautiful-item-for-each-query",
    "template": "class Solution:\n    def maxPrices(items, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxPrices())"
  },
  {
    "id": "2071",
    "slug": "maximum-number-of-tasks-you-can-assign",
    "template": "class Solution:\n    def maxTasks(tasks, workers, pills, strength):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxTasks())"
  },
  {
    "id": "2073",
    "slug": "time-needed-to-buy-tickets",
    "template": "class Solution:\n    def time_to_buy_tickets(tickets, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.time_to_buy_tickets())"
  },
  {
    "id": "2074",
    "slug": "reverse-nodes-in-even-length-groups",
    "template": "class Solution:\n    def reverseGroup(self, head, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reverseGroup())"
  },
  {
    "id": "2075",
    "slug": "decode-the-slanted-ciphertext",
    "template": "class Solution:\n    def slanted_transposition_cipher(encodedText, rows):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.slanted_transposition_cipher())"
  },
  {
    "id": "2076",
    "slug": "process-restricted-friend-requests",
    "template": "class Solution:\n    def alphabet_position_sum(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.alphabet_position_sum())"
  },
  {
    "id": "2077",
    "slug": "paths-in-maze-that-lead-to-same-room",
    "template": "class Solution:\n    def maximumNumber(num: str, change: List[int]) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumNumber())"
  },
  {
    "id": "2078",
    "slug": "two-furthest-houses-with-different-colors",
    "template": "class Solution:\n    def maxCompatibilitySum(students, mentors):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxCompatibilitySum())"
  },
  {
    "id": "2079",
    "slug": "watering-plants",
    "template": "class Solution:\n    def deleteDuplicateFolder(paths):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.deleteDuplicateFolder())"
  },
  {
    "id": "2080",
    "slug": "range-frequency-queries",
    "template": "class Solution:\n    def check_good_line(board, r, c, color, dr, dc):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.check_good_line())"
  },
  {
    "id": "2081",
    "slug": "sum-of-k-mirror-numbers",
    "template": "class Solution:\n    def minWastedSpace(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minWastedSpace())"
  },
  {
    "id": "2083",
    "slug": "substrings-that-begin-and-end-with-the-same-letter",
    "template": "class Solution:\n    def has_three_divisors(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.has_three_divisors())"
  },
  {
    "id": "2085",
    "slug": "count-common-words-with-one-occurrence",
    "template": "class Solution:\n    def rearrangeArray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rearrangeArray())"
  },
  {
    "id": "2086",
    "slug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
    "template": "class Solution:\n    def num_special_subsequences(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_special_subsequences())"
  },
  {
    "id": "2087",
    "slug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
    "template": "class Solution:\n    def minTotalCost(startPos, homePos, rowCosts, colCosts):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minTotalCost())"
  },
  {
    "id": "2089",
    "slug": "find-target-indices-after-sorting-array",
    "template": "class Solution:\n    def maxMatrixSum(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxMatrixSum())"
  },
  {
    "id": "2090",
    "slug": "k-radius-subarray-averages",
    "template": "class Solution:\n    def countPaths(n, roads):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countPaths())"
  },
  {
    "id": "2091",
    "slug": "removing-minimum-and-maximum-from-array",
    "template": "class Solution:\n    def numberOfLists(num: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfLists())"
  },
  {
    "id": "2092",
    "slug": "find-all-people-with-secret",
    "template": "class Solution:\n    def find_secret_sharers(n, meetings, first_person):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_secret_sharers())"
  },
  {
    "id": "2093",
    "slug": "minimum-cost-to-reach-city-with-discounts",
    "template": "class Solution:\n    def is_prefix_string(s, words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_prefix_string())"
  },
  {
    "id": "2094",
    "slug": "finding-3-digit-even-numbers",
    "template": "class Solution:\n    def min_stones_remaining(piles, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_stones_remaining())"
  },
  {
    "id": "2096",
    "slug": "step-by-step-directions-from-a-binary-tree-node-to-another",
    "template": "class Solution:\n    def longest_obstacle_course(obstacles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_obstacle_course())"
  },
  {
    "id": "2097",
    "slug": "valid-arrangement-of-pairs",
    "template": "class Solution:\n    def valid_arrangement(pairs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.valid_arrangement())"
  },
  {
    "id": "2098",
    "slug": "subsequence-of-size-k-with-the-largest-even-sum",
    "template": "class Solution:\n    def largest_even_sum(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest_even_sum())"
  },
  {
    "id": "2099",
    "slug": "find-subsequence-of-length-k-with-the-largest-sum",
    "template": "class Solution:\n    def count_patterns_in_word(patterns, word):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_patterns_in_word())"
  },
  {
    "id": "2100",
    "slug": "find-good-days-to-rob-the-bank",
    "template": "class Solution:\n    def minNonZeroProduct(p):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minNonZeroProduct())"
  },
  {
    "id": "2101",
    "slug": "detonate-the-maximum-bombs",
    "template": "class Solution:\n    def can_reach_bottom(grid, row, col):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_reach_bottom())"
  },
  {
    "id": "2102",
    "slug": "sequentially-ordinal-rank-tracker",
    "template": "class Solution:\n    def findMiddleIndex(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMiddleIndex())"
  },
  {
    "id": "2103",
    "slug": "rings-and-rods",
    "template": "class Solution:\n    def findFarmland(land):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findFarmland())"
  },
  {
    "id": "2104",
    "slug": "sum-of-subarray-ranges",
    "template": "class Solution:\n    def __init__(self, parent):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2105",
    "slug": "watering-plants-ii",
    "template": "class Solution:\n    def numberOfGoodSubsets(nums: list[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfGoodSubsets())"
  },
  {
    "id": "2106",
    "slug": "maximum-fruits-harvested-after-at-most-k-steps",
    "template": "class Solution:\n    def findGCD(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findGCD())"
  },
  {
    "id": "2107",
    "slug": "number-of-unique-flavors-after-sharing-k-candies",
    "template": "class Solution:\n    def find_different_binary_string(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_different_binary_string())"
  },
  {
    "id": "2108",
    "slug": "find-first-palindromic-string-in-the-array",
    "template": "class Solution:\n    def minimizeTheDifference(mat, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimizeTheDifference())"
  },
  {
    "id": "2109",
    "slug": "adding-spaces-to-a-string",
    "template": "class Solution:\n    def recoverArray(n, sums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.recoverArray())"
  },
  {
    "id": "2110",
    "slug": "number-of-smooth-descent-periods-of-a-stock",
    "template": "class Solution:\n    def num_smooth_descent_periods(prices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_smooth_descent_periods())"
  },
  {
    "id": "2111",
    "slug": "minimum-operations-to-make-the-array-k-increasing",
    "template": "class Solution:\n    def minOperations(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "2113",
    "slug": "elements-in-array-after-removing-and-replacing-elements",
    "template": "class Solution:\n    def kthLargestNumber(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kthLargestNumber())"
  },
  {
    "id": "2114",
    "slug": "maximum-number-of-words-found-in-sentences",
    "template": "class Solution:\n    def min_sessions(tasks, session_time):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_sessions())"
  },
  {
    "id": "2115",
    "slug": "find-all-possible-recipes-from-given-supplies",
    "template": "class Solution:\n    def numDistinct(binary):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numDistinct())"
  },
  {
    "id": "2116",
    "slug": "check-if-a-parentheses-string-can-be-valid",
    "template": "class Solution:\n    def count_pairs_with_difference_k(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_pairs_with_difference_k())"
  },
  {
    "id": "2117",
    "slug": "abbreviating-the-product-of-a-range",
    "template": "class Solution:\n    def findOriginalArray(changed):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findOriginalArray())"
  },
  {
    "id": "2119",
    "slug": "a-number-after-a-double-reversal",
    "template": "class Solution:\n    def minOperations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "2120",
    "slug": "execution-of-all-suffix-instructions-staying-in-a-grid",
    "template": "class Solution:\n    def findNoOfInstructions(n: int, startPos: List[int], s: str) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findNoOfInstructions())"
  },
  {
    "id": "2121",
    "slug": "intervals-between-identical-elements",
    "template": "class Solution:\n    def has_path(n, edges, source, destination):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.has_path())"
  },
  {
    "id": "2123",
    "slug": "minimum-operations-to-remove-adjacent-ones-in-matrix",
    "template": "class Solution:\n    def numberOfWeakCharacters(properties):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfWeakCharacters())"
  },
  {
    "id": "2124",
    "slug": "check-if-all-as-appears-before-all-bs",
    "template": "class Solution:\n    def firstDayBeenInAllRooms(nextVisit):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.firstDayBeenInAllRooms())"
  },
  {
    "id": "2125",
    "slug": "number-of-laser-beams-in-a-bank",
    "template": "class Solution:\n    def can_sort_using_swap(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_sort_using_swap())"
  },
  {
    "id": "2127",
    "slug": "maximum-employees-to-be-invited-to-a-meeting",
    "template": "class Solution:\n    def max_invited(favorite):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_invited())"
  },
  {
    "id": "2129",
    "slug": "capitalize-the-title",
    "template": "class Solution:\n    def interchangeable_rectangles(rectangles):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.interchangeable_rectangles())"
  },
  {
    "id": "2130",
    "slug": "maximum-twin-sum-of-a-linked-list",
    "template": "class Solution:\n    def maxProduct(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProduct())"
  },
  {
    "id": "2131",
    "slug": "longest-palindrome-by-concatenating-two-letter-words",
    "template": "class Solution:\n    def smallest_missing_value_subtree(parents, nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_missing_value_subtree())"
  },
  {
    "id": "2132",
    "slug": "stamping-the-grid",
    "template": "class Solution:\n    def construct2DArray(original, m, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.construct2DArray())"
  },
  {
    "id": "2133",
    "slug": "check-if-every-row-and-column-contains-all-numbers",
    "template": "class Solution:\n    def count_pairs(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_pairs())"
  },
  {
    "id": "2134",
    "slug": "minimum-swaps-to-group-all-1s-together-ii",
    "template": "class Solution:\n    def max_consecutive_answers(answer_key: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_consecutive_answers())"
  },
  {
    "id": "2135",
    "slug": "count-words-obtained-after-adding-a-letter",
    "template": "class Solution:\n    def numOfWays(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numOfWays())"
  },
  {
    "id": "2136",
    "slug": "earliest-possible-day-of-full-bloom",
    "template": "class Solution:\n    def earliestBlooms(plantTime, growTime):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.earliestBlooms())"
  },
  {
    "id": "2137",
    "slug": "pour-water-between-buckets-to-make-water-levels-equal",
    "template": "class Solution:\n    def perform_operations(operations):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.perform_operations())"
  },
  {
    "id": "2138",
    "slug": "divide-a-string-into-groups-of-size-k",
    "template": "class Solution:\n    def sum_of_beauties(nums: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_beauties())"
  },
  {
    "id": "2139",
    "slug": "minimum-moves-to-reach-target-score",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2140",
    "slug": "solving-questions-with-brainpower",
    "template": "class Solution:\n    def longest_subsequence_repeated_k(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_subsequence_repeated_k())"
  },
  {
    "id": "2141",
    "slug": "maximum-running-time-of-n-computers",
    "template": "class Solution:\n    def max_computer_runtime(n, batteries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_computer_runtime())"
  },
  {
    "id": "2143",
    "slug": "choose-numbers-from-two-arrays-in-range",
    "template": "class Solution:\n    def numberOfBalancedRanges(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfBalancedRanges())"
  },
  {
    "id": "2144",
    "slug": "minimum-cost-of-buying-candies-with-discount",
    "template": "class Solution:\n    def max_difference(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_difference())"
  },
  {
    "id": "2145",
    "slug": "count-the-hidden-sequences",
    "template": "class Solution:\n    def min_second_robot_points(grid: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_second_robot_points())"
  },
  {
    "id": "2146",
    "slug": "k-highest-ranked-items-within-a-price-range",
    "template": "class Solution:\n    def can_place_word(board, word):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_place_word())"
  },
  {
    "id": "2147",
    "slug": "number-of-ways-to-divide-a-long-corridor",
    "template": "class Solution:\n    def sum_of_points(s, answers):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_points())"
  },
  {
    "id": "2148",
    "slug": "count-elements-with-strictly-smaller-and-greater-elements",
    "template": "class Solution:\n    def min_moves(seats, students):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_moves())"
  },
  {
    "id": "2151",
    "slug": "maximum-good-people-based-on-statements",
    "template": "class Solution:\n    def network_becomes_idle(edges, patience):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.network_becomes_idle())"
  },
  {
    "id": "2152",
    "slug": "minimum-number-of-lines-to-cover-points",
    "template": "class Solution:\n    def minStraightLines(points):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minStraightLines())"
  },
  {
    "id": "2154",
    "slug": "keep-multiplying-found-values-by-two",
    "template": "class Solution:\n    def min_moves_to_convert(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_moves_to_convert())"
  },
  {
    "id": "2155",
    "slug": "all-divisions-with-the-highest-score-of-a-binary-array",
    "template": "class Solution:\n    def missing_rolls(rolls: List[int], mean: int, n: int) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.missing_rolls())"
  },
  {
    "id": "2156",
    "slug": "find-substring-with-given-hash-value",
    "template": "class Solution:\n    def alice_wins(stones):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.alice_wins())"
  },
  {
    "id": "2157",
    "slug": "groups-of-strings",
    "template": "class Solution:\n    def smallest_subsequence(s, k, letter, repetition):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_subsequence())"
  },
  {
    "id": "2158",
    "slug": "amount-of-new-area-painted-each-day",
    "template": "class Solution:\n    def painting_plan(paint):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.painting_plan())"
  },
  {
    "id": "2160",
    "slug": "minimum-sum-of-four-digit-number-after-splitting-digits",
    "template": "class Solution:\n    def min_operations(grid, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2162",
    "slug": "minimum-cost-to-set-cooking-time",
    "template": "class Solution:\n    def min_partition_difference(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_partition_difference())"
  },
  {
    "id": "2163",
    "slug": "minimum-difference-in-sums-after-removal-of-elements",
    "template": "class Solution:\n    def kth_distinct_string(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kth_distinct_string())"
  },
  {
    "id": "2164",
    "slug": "sort-even-and-odd-indices-independently",
    "template": "class Solution:\n    def maxValue(events):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxValue())"
  },
  {
    "id": "2165",
    "slug": "smallest-value-of-the-rearranged-number",
    "template": "class Solution:\n    def plates_between_candles(s: str, queries: List[Tuple[int, int]]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.plates_between_candles())"
  },
  {
    "id": "2166",
    "slug": "design-bitset",
    "template": "class Solution:\n    def valid_move_combinations(pieces, positions):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.valid_move_combinations())"
  },
  {
    "id": "2168",
    "slug": "unique-substrings-with-equal-digit-frequency",
    "template": "class Solution:\n    def are_numbers_increasing(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.are_numbers_increasing())"
  },
  {
    "id": "2170",
    "slug": "minimum-operations-to-make-the-array-alternating",
    "template": "class Solution:\n    def count_max_or_subsets(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_max_or_subsets())"
  },
  {
    "id": "2172",
    "slug": "maximum-and-sum-of-array",
    "template": "class Solution:\n    def max_and_sum(nums, num_slots, idx, used, sum):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_and_sum())"
  },
  {
    "id": "2174",
    "slug": "remove-all-ones-with-row-and-column-flips-ii",
    "template": "class Solution:\n    def next_balanced(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.next_balanced())"
  },
  {
    "id": "2176",
    "slug": "count-equal-and-divisible-pairs-in-an-array",
    "template": "class Solution:\n    def min_months(n, relations, time):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_months())"
  },
  {
    "id": "2177",
    "slug": "find-three-consecutive-integers-that-sum-to-a-given-number",
    "template": "class Solution:\n    def almost_equivalent(word1, word2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.almost_equivalent())"
  },
  {
    "id": "2178",
    "slug": "maximum-split-of-positive-even-integers",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2179",
    "slug": "count-good-triplets-in-an-array",
    "template": "class Solution:\n    def max_beauty(items, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_beauty())"
  },
  {
    "id": "2180",
    "slug": "count-integers-with-even-digit-sum",
    "template": "class Solution:\n    def max_tasks(tasks, workers, pills, strength):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_tasks())"
  },
  {
    "id": "2181",
    "slug": "merge-nodes-in-between-zeros",
    "template": "class Solution:\n    def smallest_index(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_index())"
  },
  {
    "id": "2182",
    "slug": "construct-string-with-repeat-limit",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2183",
    "slug": "count-array-pairs-divisible-by-k",
    "template": "class Solution:\n    def minOperations(nums, start, goal):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "2184",
    "slug": "number-of-ways-to-build-sturdy-brick-wall",
    "template": "class Solution:\n    def are_encoded_strings_equal(s1: str, s2: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.are_encoded_strings_equal())"
  },
  {
    "id": "2185",
    "slug": "counting-words-with-a-given-prefix",
    "template": "class Solution:\n    def count_prefixes(words, pref):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_prefixes())"
  },
  {
    "id": "2186",
    "slug": "minimum-number-of-steps-to-make-two-strings-anagram-ii",
    "template": "class Solution:\n    def count_vowel_substrings(word: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_vowel_substrings())"
  },
  {
    "id": "2187",
    "slug": "minimum-time-to-complete-trips",
    "template": "class Solution:\n    def sum_of_vowels_in_the_substrings(word: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_vowels_in_the_substrings())"
  },
  {
    "id": "2188",
    "slug": "minimum-time-to-finish-the-race",
    "template": "class Solution:\n    def min_x(n, quantities):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_x())"
  },
  {
    "id": "2189",
    "slug": "number-of-ways-to-build-house-of-cards",
    "template": "class Solution:\n    def maxQualityRec(adjDict, values, node, timeLeft, visited):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxQualityRec())"
  },
  {
    "id": "2190",
    "slug": "most-frequent-number-following-key-in-an-array",
    "template": "class Solution:\n    def count_once_in_both(words1, words2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_once_in_both())"
  },
  {
    "id": "2191",
    "slug": "sort-the-jumbled-numbers",
    "template": "class Solution:\n    def min_buckets(street):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_buckets())"
  },
  {
    "id": "2192",
    "slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
    "template": "class Solution:\n    def min_cost(grid, start_pos, home_pos, row_costs, col_costs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_cost())"
  },
  {
    "id": "2193",
    "slug": "minimum-number-of-moves-to-make-palindrome",
    "template": "class Solution:\n    def count_pyramids(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_pyramids())"
  },
  {
    "id": "2194",
    "slug": "cells-in-a-range-on-an-excel-sheet",
    "template": "class Solution:\n    def cell_range(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.cell_range())"
  },
  {
    "id": "2195",
    "slug": "append-k-integers-with-minimal-sum",
    "template": "class Solution:\n    def time_to_buy_tickets(tickets, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.time_to_buy_tickets())"
  },
  {
    "id": "2196",
    "slug": "create-binary-tree-from-descriptions",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2197",
    "slug": "replace-non-coprime-numbers-in-array",
    "template": "class Solution:\n    def decode_slanted_cipher(encoded_text, rows):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decode_slanted_cipher())"
  },
  {
    "id": "2198",
    "slug": "number-of-single-divisor-triplets",
    "template": "class Solution:\n    def check_friends(n, restrictions, requests):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.check_friends())"
  },
  {
    "id": "2200",
    "slug": "find-all-k-distant-indices-in-an-array",
    "template": "class Solution:\n    def can_fit_stamps(grid, stampHeight, stampWidth):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_fit_stamps())"
  },
  {
    "id": "2201",
    "slug": "count-artifacts-that-can-be-extracted",
    "template": "class Solution:\n    def arrange_pairs(pairs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.arrange_pairs())"
  },
  {
    "id": "2202",
    "slug": "maximize-the-topmost-element-after-k-moves",
    "template": "class Solution:\n    def to_base_k(num, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.to_base_k())"
  },
  {
    "id": "2203",
    "slug": "minimum-weighted-subgraph-with-the-required-paths",
    "template": "class Solution:\n    def dijkstra(src, adj):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dijkstra())"
  },
  {
    "id": "2204",
    "slug": "distance-to-a-cycle-in-undirected-graph",
    "template": "class Solution:\n    def largest_sum_sequence(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest_sum_sequence())"
  },
  {
    "id": "2206",
    "slug": "divide-array-into-equal-pairs",
    "template": "class Solution:\n    def max_bombs_detonated(bombs: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_bombs_detonated())"
  },
  {
    "id": "2208",
    "slug": "minimum-operations-to-halve-array-sum",
    "template": "class Solution:\n    def min_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2209",
    "slug": "minimum-white-tiles-after-covering-with-carpets",
    "template": "class Solution:\n    def minVisibleWhiteTiles(floor: str, numCarpets: int, carpetLen: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minVisibleWhiteTiles())"
  },
  {
    "id": "2210",
    "slug": "count-hills-and-valleys-in-an-array",
    "template": "class Solution:\n    def sorted_target_indices(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sorted_target_indices())"
  },
  {
    "id": "2211",
    "slug": "count-collisions-on-a-road",
    "template": "class Solution:\n    def k_radius_average(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.k_radius_average())"
  },
  {
    "id": "2212",
    "slug": "maximum-points-in-an-archery-competition",
    "template": "class Solution:\n    def min_deletions(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_deletions())"
  },
  {
    "id": "2213",
    "slug": "longest-substring-of-one-repeating-character",
    "template": "class Solution:\n    def people_with_secret(n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.people_with_secret())"
  },
  {
    "id": "2214",
    "slug": "minimum-health-to-beat-game",
    "template": "class Solution:\n    def min_health(damage, armor):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_health())"
  },
  {
    "id": "2215",
    "slug": "find-the-difference-of-two-arrays",
    "template": "class Solution:\n    def unique_permutations(digits):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.unique_permutations())"
  },
  {
    "id": "2216",
    "slug": "minimum-deletions-to-make-array-beautiful",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2217",
    "slug": "find-palindrome-with-fixed-length",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2218",
    "slug": "maximum-value-of-k-coins-from-piles",
    "template": "class Solution:\n    def maxCoins(piles, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxCoins())"
  },
  {
    "id": "2219",
    "slug": "maximum-sum-score-of-array",
    "template": "class Solution:\n    def max_words_in_sentence(sentences):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_words_in_sentence())"
  },
  {
    "id": "2221",
    "slug": "find-triangular-sum-of-an-array",
    "template": "class Solution:\n    def is_valid_parentheses_string(s: str, locked: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_valid_parentheses_string())"
  },
  {
    "id": "2222",
    "slug": "number-of-ways-to-select-buildings",
    "template": "class Solution:\n    def abbreviated_product(left: int, right: int) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.abbreviated_product())"
  },
  {
    "id": "2223",
    "slug": "sum-of-scores-of-built-strings",
    "template": "class Solution:\n    def string_sum_scores(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.string_sum_scores())"
  },
  {
    "id": "2226",
    "slug": "maximum-candies-allocated-to-k-children",
    "template": "class Solution:\n    def count_rods_with_all_colors(rings: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_rods_with_all_colors())"
  },
  {
    "id": "2227",
    "slug": "encrypt-and-decrypt-strings",
    "template": "class Solution:\n    def sum_of_subarray_ranges(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_subarray_ranges())"
  },
  {
    "id": "2229",
    "slug": "check-if-an-array-is-consecutive",
    "template": "class Solution:\n    def maxFruits(fruits, startPos, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxFruits())"
  },
  {
    "id": "2231",
    "slug": "largest-number-after-digit-swaps-by-parity",
    "template": "class Solution:\n    def first_palindrome(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.first_palindrome())"
  },
  {
    "id": "2232",
    "slug": "minimize-result-by-adding-parentheses-to-expression",
    "template": "class Solution:\n    def add_spaces(s: str, spaces: List[int]) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.add_spaces())"
  },
  {
    "id": "2233",
    "slug": "maximum-product-after-k-increments",
    "template": "class Solution:\n    def smooth_descent_periods(prices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smooth_descent_periods())"
  },
  {
    "id": "2234",
    "slug": "maximum-total-beauty-of-the-gardens",
    "template": "class Solution:\n    def min_operations_to_K_increasing(arr, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations_to_K_increasing())"
  },
  {
    "id": "2235",
    "slug": "add-two-integers",
    "template": "class Solution:\n    def capitalize_title(title):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.capitalize_title())"
  },
  {
    "id": "2236",
    "slug": "root-equals-sum-of-children",
    "template": "class Solution:\n    def max_twin_sum(head):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_twin_sum())"
  },
  {
    "id": "2237",
    "slug": "count-positions-on-street-with-required-brightness",
    "template": "class Solution:\n    def longest_palindrome(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_palindrome())"
  },
  {
    "id": "2239",
    "slug": "find-closest-number-to-zero",
    "template": "class Solution:\n    def robot_instructions(n: int, start_pos: list, s: str) -> list:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.robot_instructions())"
  },
  {
    "id": "2240",
    "slug": "number-of-ways-to-buy-pens-and-pencils",
    "template": "class Solution:\n    def sum_of_intervals(arr):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_intervals())"
  },
  {
    "id": "2241",
    "slug": "design-an-atm-machine",
    "template": "class Solution:\n    def recoverArray(n, nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.recoverArray())"
  },
  {
    "id": "2242",
    "slug": "maximum-score-of-a-node-sequence",
    "template": "class Solution:\n    def maxScore(scores, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScore())"
  },
  {
    "id": "2243",
    "slug": "calculate-digit-sum-of-a-string",
    "template": "class Solution:\n    def is_a_only_before_b(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_a_only_before_b())"
  },
  {
    "id": "2244",
    "slug": "minimum-rounds-to-complete-all-tasks",
    "template": "class Solution:\n    def numOfBeams(bank):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numOfBeams())"
  },
  {
    "id": "2245",
    "slug": "maximum-trailing-zeros-in-a-cornered-path",
    "template": "class Solution:\n    def can_destroy_all_asteroids(mass, asteroids):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_destroy_all_asteroids())"
  },
  {
    "id": "2246",
    "slug": "longest-path-with-different-adjacent-characters",
    "template": "class Solution:\n    def max_invites(favorite):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_invites())"
  },
  {
    "id": "2247",
    "slug": "maximum-cost-of-trip-with-k-highways",
    "template": "class Solution:\n    def dfs(curr_city, remaining_highways, cost_so_far, highways, visited):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "2248",
    "slug": "intersection-of-multiple-arrays",
    "template": "class Solution:\n    def min_cost(cost):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_cost())"
  },
  {
    "id": "2249",
    "slug": "count-lattice-points-inside-a-circle",
    "template": "class Solution:\n    def count_sequences(differences, lower, upper):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_sequences())"
  },
  {
    "id": "2250",
    "slug": "count-number-of-rectangles-containing-each-point",
    "template": "class Solution:\n    def kHighestRankedItems(grid, pricing, start, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kHighestRankedItems())"
  },
  {
    "id": "2251",
    "slug": "number-of-flowers-in-full-bloom",
    "template": "class Solution:\n    def corridor_ways(corridor):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.corridor_ways())"
  },
  {
    "id": "2254",
    "slug": "design-video-sharing-platform",
    "template": "class Solution:\n    def isValidMatrix(matrix):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isValidMatrix())"
  },
  {
    "id": "2255",
    "slug": "count-prefixes-of-a-given-string",
    "template": "class Solution:\n    def minSwaps(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSwaps())"
  },
  {
    "id": "2256",
    "slug": "minimum-average-difference",
    "template": "class Solution:\n    def count_convertible_words(start_words, target_words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_convertible_words())"
  },
  {
    "id": "2257",
    "slug": "count-unguarded-cells-in-the-grid",
    "template": "class Solution:\n    def earliest_blooming_day(plant_time, grow_time):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.earliest_blooming_day())"
  },
  {
    "id": "2258",
    "slug": "escape-the-spreading-fire",
    "template": "class Solution:\n    def getMaxSafeMinutes(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getMaxSafeMinutes())"
  },
  {
    "id": "2260",
    "slug": "minimum-consecutive-cards-to-pick-up",
    "template": "class Solution:\n    def partition_string(s, k, fill):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.partition_string())"
  },
  {
    "id": "2261",
    "slug": "k-divisible-elements-subarrays",
    "template": "class Solution:\n    def highestScoreDivisions(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.highestScoreDivisions())"
  },
  {
    "id": "2262",
    "slug": "total-appeal-of-a-string",
    "template": "class Solution:\n    def max_points(questions):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_points())"
  },
  {
    "id": "2263",
    "slug": "make-array-non-decreasing-or-non-increasing",
    "template": "class Solution:\n    def max_running_time(n, batteries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_running_time())"
  },
  {
    "id": "2264",
    "slug": "largest-3-same-digit-number-in-string",
    "template": "class Solution:\n    def split_and_minimize(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.split_and_minimize())"
  },
  {
    "id": "2265",
    "slug": "count-nodes-equal-to-average-of-subtree",
    "template": "class Solution:\n    def rearrange_array_around_pivot(nums, pivot):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rearrange_array_around_pivot())"
  },
  {
    "id": "2266",
    "slug": "count-number-of-texts",
    "template": "class Solution:\n    def min_cost(startAt, moveCost, pushCost, targetSeconds):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_cost())"
  },
  {
    "id": "2267",
    "slug": "check-if-there-is-a-valid-parentheses-string-path",
    "template": "class Solution:\n    def minDifference(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minDifference())"
  },
  {
    "id": "2269",
    "slug": "find-the-k-beauty-of-a-number",
    "template": "class Solution:\n    def num_elements_with_smaller_and_greater(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_elements_with_smaller_and_greater())"
  },
  {
    "id": "2270",
    "slug": "number-of-ways-to-split-array",
    "template": "class Solution:\n    def lonely_numbers(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.lonely_numbers())"
  },
  {
    "id": "2271",
    "slug": "maximum-white-tiles-covered-by-a-carpet",
    "template": "class Solution:\n    def rearrange_array(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rearrange_array())"
  },
  {
    "id": "2272",
    "slug": "substring-with-largest-variance",
    "template": "class Solution:\n    def maximum_good_people(statements):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximum_good_people())"
  },
  {
    "id": "2273",
    "slug": "find-resultant-array-after-removing-anagrams",
    "template": "class Solution:\n    def anagramOperations(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.anagramOperations())"
  },
  {
    "id": "2274",
    "slug": "maximum-consecutive-floors-without-special-floors",
    "template": "class Solution:\n    def final_value(nums, original):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.final_value())"
  },
  {
    "id": "2275",
    "slug": "largest-combination-with-bitwise-and-greater-than-zero",
    "template": "class Solution:\n    def find_substring(s, power, modulo, k, hash_value):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_substring())"
  },
  {
    "id": "2276",
    "slug": "count-integers-in-intervals",
    "template": "class Solution:\n    def group_strings(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.group_strings())"
  },
  {
    "id": "2277",
    "slug": "closest-node-to-path-in-tree",
    "template": "class Solution:\n    def closest_nodes(n, edges, query):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.closest_nodes())"
  },
  {
    "id": "2278",
    "slug": "percentage-of-letter-in-string",
    "template": "class Solution:\n    def three_consecutive_integers(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.three_consecutive_integers())"
  },
  {
    "id": "2279",
    "slug": "maximum-bags-with-full-capacity-of-rocks",
    "template": "class Solution:\n    def max_unique_even_sum(final_sum):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_unique_even_sum())"
  },
  {
    "id": "2280",
    "slug": "minimum-lines-to-represent-a-line-chart",
    "template": "class Solution:\n    def count_good_triplets(nums1: list, nums2: list) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_good_triplets())"
  },
  {
    "id": "2281",
    "slug": "sum-of-total-strength-of-wizards",
    "template": "class Solution:\n    def sum_of_strength(strength):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_of_strength())"
  },
  {
    "id": "2282",
    "slug": "number-of-people-that-can-be-seen-in-a-grid",
    "template": "class Solution:\n    def visible_people(heights):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.visible_people())"
  },
  {
    "id": "2283",
    "slug": "check-if-number-has-equal-digit-count-and-digit-value",
    "template": "class Solution:\n    def rearrange_array(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rearrange_array())"
  },
  {
    "id": "2284",
    "slug": "sender-with-largest-word-count",
    "template": "class Solution:\n    def rearrange_digits(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.rearrange_digits())"
  },
  {
    "id": "2285",
    "slug": "maximum-total-importance-of-roads",
    "template": "class Solution:\n    def __init__(self, size):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2287",
    "slug": "rearrange-characters-to-make-target-string",
    "template": "class Solution:\n    def maxNumberOfCopies(s, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxNumberOfCopies())"
  },
  {
    "id": "2288",
    "slug": "apply-discount-to-prices",
    "template": "class Solution:\n    def operations(num1, num2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.operations())"
  },
  {
    "id": "2289",
    "slug": "steps-to-make-array-non-decreasing",
    "template": "class Solution:\n    def min_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2290",
    "slug": "minimum-obstacle-removal-to-reach-corner",
    "template": "class Solution:\n    def min_number_of_beans_to_remove(beans):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_number_of_beans_to_remove())"
  },
  {
    "id": "2291",
    "slug": "maximum-profit-from-trading-stocks",
    "template": "class Solution:\n    def max_and_sum(nums, num_slots):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_and_sum())"
  },
  {
    "id": "2294",
    "slug": "partition-array-such-that-maximum-difference-is-k",
    "template": "class Solution:\n    def minimum_time_for_trips(time, total_trips):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_time_for_trips())"
  },
  {
    "id": "2295",
    "slug": "replace-elements-in-an-array",
    "template": "class Solution:\n    def min_race_time(tires, changeTime, numLaps):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_race_time())"
  },
  {
    "id": "2296",
    "slug": "design-a-text-editor",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2297",
    "slug": "jump-game-viii",
    "template": "class Solution:\n    def minHeightJump(nums, costs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minHeightJump())"
  },
  {
    "id": "2299",
    "slug": "strong-password-checker-ii",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2300",
    "slug": "successful-pairs-of-spells-and-potions",
    "template": "class Solution:\n    def repeat_limited_string(s, repeat_limit):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.repeat_limited_string())"
  },
  {
    "id": "2301",
    "slug": "match-substring-after-replacement",
    "template": "class Solution:\n    def count_pairs(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_pairs())"
  },
  {
    "id": "2303",
    "slug": "calculate-amount-paid-in-taxes",
    "template": "class Solution:\n    def tax_amount(brackets, income):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.tax_amount())"
  },
  {
    "id": "2304",
    "slug": "minimum-path-cost-in-a-grid",
    "template": "class Solution:\n    def excel_sheet_cells(s: str):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.excel_sheet_cells())"
  },
  {
    "id": "2305",
    "slug": "fair-distribution-of-cookies",
    "template": "class Solution:\n    def min_append_k_sum(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_append_k_sum())"
  },
  {
    "id": "2306",
    "slug": "naming-a-company",
    "template": "class Solution:\n    def __init__(self, x):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2307",
    "slug": "check-for-contradictions-in-equations",
    "template": "class Solution:\n    def modify_array(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.modify_array())"
  },
  {
    "id": "2310",
    "slug": "sum-of-numbers-with-units-digit-k",
    "template": "class Solution:\n    def min_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2311",
    "slug": "longest-binary-subsequence-less-than-or-equal-to-k",
    "template": "class Solution:\n    def min_visible_white_tiles(floor, num_carpets, carpet_len):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_visible_white_tiles())"
  },
  {
    "id": "2312",
    "slug": "selling-pieces-of-wood",
    "template": "class Solution:\n    def max_count_target(nums, key):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_count_target())"
  },
  {
    "id": "2313",
    "slug": "minimum-flips-in-binary-tree-to-get-result",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2316",
    "slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
    "template": "class Solution:\n    def count_hills_valleys(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_hills_valleys())"
  },
  {
    "id": "2318",
    "slug": "number-of-distinct-roll-sequences",
    "template": "class Solution:\n    def bob_arrows(num_arrows, alice_arrows):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.bob_arrows())"
  },
  {
    "id": "2319",
    "slug": "check-if-matrix-is-x-matrix",
    "template": "class Solution:\n    def longest_repeat_substring(s, query_characters, query_indices):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_repeat_substring())"
  },
  {
    "id": "2320",
    "slug": "count-number-of-ways-to-place-houses",
    "template": "class Solution:\n    def k_distant_indices(nums, key, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.k_distant_indices())"
  },
  {
    "id": "2321",
    "slug": "maximum-score-of-spliced-array",
    "template": "class Solution:\n    def shortest_path(n, edges, src1, src2, dest):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_path())"
  },
  {
    "id": "2322",
    "slug": "minimum-score-after-removals-on-a-tree",
    "template": "class Solution:\n    def dfs(node, parent, xor_values, tree):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "2323",
    "slug": "find-minimum-time-to-finish-all-jobs-ii",
    "template": "class Solution:\n    def min_bit_flips(start, goal):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_bit_flips())"
  },
  {
    "id": "2325",
    "slug": "decode-the-message",
    "template": "class Solution:\n    def valid_selections(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.valid_selections())"
  },
  {
    "id": "2326",
    "slug": "spiral-matrix-iv",
    "template": "class Solution:\n    def sum_prefix_scores(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_prefix_scores())"
  },
  {
    "id": "2327",
    "slug": "number-of-people-aware-of-a-secret",
    "template": "class Solution:\n    def largest_swap_permutations(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest_swap_permutations())"
  },
  {
    "id": "2330",
    "slug": "valid-palindrome-iv",
    "template": "class Solution:\n    def max_beauty(flowers, new_flowers, target, full, partial):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_beauty())"
  },
  {
    "id": "2332",
    "slug": "the-latest-time-to-catch-a-bus",
    "template": "class Solution:\n    def last_passenger_time(buses, passengers, capacity):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.last_passenger_time())"
  },
  {
    "id": "2333",
    "slug": "minimum-sum-of-squared-difference",
    "template": "class Solution:\n    def min_sum_of_squared_difference(nums1, nums2, k1, k2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_sum_of_squared_difference())"
  },
  {
    "id": "2334",
    "slug": "subarray-with-elements-greater-than-varying-threshold",
    "template": "class Solution:\n    def find_subarray_length(nums, threshold):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_subarray_length())"
  },
  {
    "id": "2336",
    "slug": "smallest-number-in-infinite-set",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2338",
    "slug": "count-the-number-of-ideal-arrays",
    "template": "class Solution:\n    def numOfArrays(n: int, maxValue: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numOfArrays())"
  },
  {
    "id": "2340",
    "slug": "minimum-adjacent-swaps-to-make-a-valid-array",
    "template": "class Solution:\n    def minSwaps(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSwaps())"
  },
  {
    "id": "2341",
    "slug": "maximum-number-of-pairs-in-array",
    "template": "class Solution:\n    def count_pairs_leftovers(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_pairs_leftovers())"
  },
  {
    "id": "2342",
    "slug": "max-sum-of-a-pair-with-equal-sum-of-digits",
    "template": "class Solution:\n    def max_sum_numbers_with_equal_sum_of_digits(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_sum_numbers_with_equal_sum_of_digits())"
  },
  {
    "id": "2344",
    "slug": "minimum-deletions-to-make-array-divisible",
    "template": "class Solution:\n    def min_deletions(nums, nums_divide):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_deletions())"
  },
  {
    "id": "2345",
    "slug": "finding-the-number-of-visible-mountains",
    "template": "class Solution:\n    def min_operations(current, correct):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2347",
    "slug": "best-poker-hand",
    "template": "class Solution:\n    def best_poker_hand(ranks, suits):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.best_poker_hand())"
  },
  {
    "id": "2348",
    "slug": "number-of-zero-filled-subarrays",
    "template": "class Solution:\n    def numberOfSubarraysWithZeroes(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfSubarraysWithZeroes())"
  },
  {
    "id": "2349",
    "slug": "design-a-number-container-system",
    "template": "class Solution:\n    def __init__(self):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2350",
    "slug": "shortest-impossible-sequence-of-rolls",
    "template": "class Solution:\n    def shortest_unrollable_sequence(rolls, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_unrollable_sequence())"
  },
  {
    "id": "2352",
    "slug": "equal-row-and-column-pairs",
    "template": "class Solution:\n    def countEqualRowColumnPairs(grid: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countEqualRowColumnPairs())"
  },
  {
    "id": "2353",
    "slug": "design-a-food-rating-system",
    "template": "class Solution:\n    def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2354",
    "slug": "number-of-excellent-pairs",
    "template": "class Solution:\n    def countExcellentPairs(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countExcellentPairs())"
  },
  {
    "id": "2355",
    "slug": "maximum-number-of-books-you-can-take",
    "template": "class Solution:\n    def max_books(books):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_books())"
  },
  {
    "id": "2357",
    "slug": "make-array-zero-by-subtracting-equal-amounts",
    "template": "class Solution:\n    def minOperations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "2358",
    "slug": "maximum-number-of-groups-entering-a-competition",
    "template": "class Solution:\n    def max_groups(grades):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_groups())"
  },
  {
    "id": "2359",
    "slug": "find-closest-node-to-given-two-nodes",
    "template": "class Solution:\n    def get_index_with_min_max_distance(edges, node1, node2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_index_with_min_max_distance())"
  },
  {
    "id": "2360",
    "slug": "longest-cycle-in-a-graph",
    "template": "class Solution:\n    def findLongestCycle(edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findLongestCycle())"
  },
  {
    "id": "2361",
    "slug": "minimum-costs-using-the-train-line",
    "template": "class Solution:\n    def min_stop_costs(regular, express, express_cost):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_stop_costs())"
  },
  {
    "id": "2363",
    "slug": "merge-similar-items",
    "template": "class Solution:\n    def sum_weights(items1, items2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_weights())"
  },
  {
    "id": "2364",
    "slug": "count-number-of-bad-pairs",
    "template": "class Solution:\n    def bad_pairs(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.bad_pairs())"
  },
  {
    "id": "2365",
    "slug": "task-scheduler-ii",
    "template": "class Solution:\n    def min_days_to_complete_tasks(tasks, space):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_days_to_complete_tasks())"
  },
  {
    "id": "2366",
    "slug": "minimum-replacements-to-sort-the-array",
    "template": "class Solution:\n    def min_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2367",
    "slug": "number-of-arithmetic-triplets",
    "template": "class Solution:\n    def count_arithmetic_triplets(nums, diff):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_arithmetic_triplets())"
  },
  {
    "id": "2368",
    "slug": "reachable-nodes-with-restrictions",
    "template": "class Solution:\n    def max_nodes_without_restricted(n, edges, restricted):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_nodes_without_restricted())"
  },
  {
    "id": "2369",
    "slug": "check-if-there-is-a-valid-partition-for-the-array",
    "template": "class Solution:\n    def valid_partition(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.valid_partition())"
  },
  {
    "id": "2370",
    "slug": "longest-ideal-subsequence",
    "template": "class Solution:\n    def longest_ideal_string(s: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_ideal_string())"
  },
  {
    "id": "2371",
    "slug": "minimize-maximum-value-in-a-grid",
    "template": "class Solution:\n    def smallest_max_number_grid(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_max_number_grid())"
  },
  {
    "id": "2373",
    "slug": "largest-local-values-in-a-matrix",
    "template": "class Solution:\n    def largest_matrix(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largest_matrix())"
  },
  {
    "id": "2374",
    "slug": "node-with-highest-edge-score",
    "template": "class Solution:\n    def highest_edge_score_node(edges: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.highest_edge_score_node())"
  },
  {
    "id": "2375",
    "slug": "construct-smallest-number-from-di-string",
    "template": "class Solution:\n    def findSmallestNum(pattern: str) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findSmallestNum())"
  },
  {
    "id": "2376",
    "slug": "count-special-integers",
    "template": "class Solution:\n    def is_distinct(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_distinct())"
  },
  {
    "id": "2378",
    "slug": "choose-edges-to-maximize-score-in-a-tree",
    "template": "class Solution:\n    def maxWeight(self, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxWeight())"
  },
  {
    "id": "2379",
    "slug": "minimum-recolors-to-get-k-consecutive-black-blocks",
    "template": "class Solution:\n    def min_operations(blocks, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2381",
    "slug": "shifting-letters-ii",
    "template": "class Solution:\n    def shiftCharacters(s: str, shifts: List[List[int]]) -> str:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shiftCharacters())"
  },
  {
    "id": "2382",
    "slug": "maximum-segment-sum-after-removals",
    "template": "class Solution:\n    def max_seg_sum_after_queries(nums, removeQueries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_seg_sum_after_queries())"
  },
  {
    "id": "2383",
    "slug": "minimum-hours-of-training-to-win-a-competition",
    "template": "class Solution:\n    def min_training_hours(initial_energy, initial_experience, energy, experience):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_training_hours())"
  },
  {
    "id": "2384",
    "slug": "largest-palindromic-number",
    "template": "class Solution:\n    def root_sum_equal(root):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.root_sum_equal())"
  },
  {
    "id": "2385",
    "slug": "amount-of-time-for-binary-tree-to-be-infected",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2386",
    "slug": "find-the-k-sum-of-an-array",
    "template": "class Solution:\n    def kSum(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kSum())"
  },
  {
    "id": "2389",
    "slug": "longest-subsequence-with-limited-sum",
    "template": "class Solution:\n    def maxSizeSubsequenceSumQueries(nums, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSizeSubsequenceSumQueries())"
  },
  {
    "id": "2391",
    "slug": "minimum-amount-of-time-to-collect-garbage",
    "template": "class Solution:\n    def min_minutes(garbage: list[str], travel: list[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_minutes())"
  },
  {
    "id": "2392",
    "slug": "build-a-matrix-with-conditions",
    "template": "class Solution:\n    def build_matrix(k: int, row_conditions: List[List[int]], col_conditions: List[List[int]]) -> List[List[int]]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.build_matrix())"
  },
  {
    "id": "2393",
    "slug": "count-strictly-increasing-subarrays",
    "template": "class Solution:\n    def num_strictly_increasing_subarrays(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.num_strictly_increasing_subarrays())"
  },
  {
    "id": "2395",
    "slug": "find-subarrays-with-equal-sum",
    "template": "class Solution:\n    def equal_sum_subarrays(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.equal_sum_subarrays())"
  },
  {
    "id": "2396",
    "slug": "strictly-palindromic-number",
    "template": "class Solution:\n    def is_palindrome(s: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_palindrome())"
  },
  {
    "id": "2397",
    "slug": "maximum-rows-covered-by-columns",
    "template": "class Solution:\n    def max_covered_rows(matrix, num_select):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_covered_rows())"
  },
  {
    "id": "2398",
    "slug": "maximum-number-of-robots-within-budget",
    "template": "class Solution:\n    def max_consecutive_robots(charge_times, running_costs, budget):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_consecutive_robots())"
  },
  {
    "id": "2399",
    "slug": "check-distances-between-same-letters",
    "template": "class Solution:\n    def well_spaced_string(s: str, distance: List[int]) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.well_spaced_string())"
  },
  {
    "id": "2400",
    "slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
    "template": "class Solution:\n    def ways(startPos, endPos, k, dp):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.ways())"
  },
  {
    "id": "2401",
    "slug": "longest-nice-subarray",
    "template": "class Solution:\n    def longestNiceSubarray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestNiceSubarray())"
  },
  {
    "id": "2402",
    "slug": "meeting-rooms-iii",
    "template": "class Solution:\n    def most_visited_room(n, meetings):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.most_visited_room())"
  },
  {
    "id": "2403",
    "slug": "minimum-time-to-kill-all-monsters",
    "template": "class Solution:\n    def min_days(power):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_days())"
  },
  {
    "id": "2404",
    "slug": "most-frequent-even-element",
    "template": "class Solution:\n    def most_frequent_even(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.most_frequent_even())"
  },
  {
    "id": "2406",
    "slug": "divide-intervals-into-minimum-number-of-groups",
    "template": "class Solution:\n    def min_groups(intervals):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_groups())"
  },
  {
    "id": "2407",
    "slug": "longest-increasing-subsequence-ii",
    "template": "class Solution:\n    def longestSubsequence(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestSubsequence())"
  },
  {
    "id": "2408",
    "slug": "design-sql",
    "template": "class Solution:\n    def __init__(self, names: List[str], columns: List[int]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2409",
    "slug": "count-days-spent-together",
    "template": "class Solution:\n    def days_together(arrive_alice, leave_alice, arrive_bob, leave_bob):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.days_together())"
  },
  {
    "id": "2410",
    "slug": "maximum-matching-of-players-with-trainers",
    "template": "class Solution:\n    def max_matchings(players, trainers):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_matchings())"
  },
  {
    "id": "2411",
    "slug": "smallest-subarrays-with-maximum-bitwise-or",
    "template": "class Solution:\n    def minSizeMaxBitwiseOR(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSizeMaxBitwiseOR())"
  },
  {
    "id": "2412",
    "slug": "minimum-money-required-before-transactions",
    "template": "class Solution:\n    def min_money(transactions):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_money())"
  },
  {
    "id": "2413",
    "slug": "smallest-even-multiple",
    "template": "class Solution:\n    def smallest_multiple(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_multiple())"
  },
  {
    "id": "2414",
    "slug": "length-of-the-longest-alphabetical-continuous-substring",
    "template": "class Solution:\n    def longest_alphabetical_continuous_substring(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_alphabetical_continuous_substring())"
  },
  {
    "id": "2415",
    "slug": "reverse-odd-levels-of-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2416",
    "slug": "sum-of-prefix-scores-of-strings",
    "template": "class Solution:\n    def prefix_score_sum(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.prefix_score_sum())"
  },
  {
    "id": "2417",
    "slug": "closest-fair-integer",
    "template": "class Solution:\n    def smallest_fair_number(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_fair_number())"
  },
  {
    "id": "2418",
    "slug": "sort-the-people",
    "template": "class Solution:\n    def sort_names_by_height(names, heights):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sort_names_by_height())"
  },
  {
    "id": "2419",
    "slug": "longest-subarray-with-maximum-bitwise-and",
    "template": "class Solution:\n    def longestSubarray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestSubarray())"
  },
  {
    "id": "2420",
    "slug": "find-all-good-indices",
    "template": "class Solution:\n    def find_good_indices(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_good_indices())"
  },
  {
    "id": "2421",
    "slug": "number-of-good-paths",
    "template": "class Solution:\n    def dfs(node, parent, adj, vals, cur_max, count):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "2422",
    "slug": "merge-operations-to-turn-array-into-a-palindrome",
    "template": "class Solution:\n    def minOperations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "2423",
    "slug": "remove-letter-to-equalize-frequency",
    "template": "class Solution:\n    def can_equal_frequency(word: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.can_equal_frequency())"
  },
  {
    "id": "2424",
    "slug": "longest-uploaded-prefix",
    "template": "class Solution:\n    def __init__(self, n: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2425",
    "slug": "bitwise-xor-of-all-pairings",
    "template": "class Solution:\n    def get_xor(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_xor())"
  },
  {
    "id": "2426",
    "slug": "number-of-pairs-satisfying-inequality",
    "template": "class Solution:\n    def count_pairs(nums1, nums2, diff):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_pairs())"
  },
  {
    "id": "2427",
    "slug": "number-of-common-factors",
    "template": "class Solution:\n    def common_factors(a: int, b: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.common_factors())"
  },
  {
    "id": "2428",
    "slug": "maximum-sum-of-an-hourglass",
    "template": "class Solution:\n    def max_hourglass_sum(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_hourglass_sum())"
  },
  {
    "id": "2429",
    "slug": "minimize-xor",
    "template": "class Solution:\n    def minSetXor(num1: int, num2: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSetXor())"
  },
  {
    "id": "2430",
    "slug": "maximum-deletions-on-a-string",
    "template": "class Solution:\n    def maxOperations(s: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxOperations())"
  },
  {
    "id": "2431",
    "slug": "maximize-total-tastiness-of-purchased-fruits",
    "template": "class Solution:\n    def maxTastiness(price, tastiness, maxAmount, maxCoupons):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxTastiness())"
  },
  {
    "id": "2432",
    "slug": "the-employee-that-worked-on-the-longest-task",
    "template": "class Solution:\n    def worker_with_longest_task(n, logs):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.worker_with_longest_task())"
  },
  {
    "id": "2433",
    "slug": "find-the-original-array-of-prefix-xor",
    "template": "class Solution:\n    def findArray(pref):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findArray())"
  },
  {
    "id": "2434",
    "slug": "using-a-robot-to-print-the-lexicographically-smallest-string",
    "template": "class Solution:\n    def robot_sort(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.robot_sort())"
  },
  {
    "id": "2435",
    "slug": "paths-in-matrix-whose-sum-is-divisible-by-k",
    "template": "class Solution:\n    def ways(grid, m, n, i, j, k, sum, dp):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.ways())"
  },
  {
    "id": "2436",
    "slug": "minimum-split-into-subarrays-with-gcd-greater-than-one",
    "template": "class Solution:\n    def min_arrays(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_arrays())"
  },
  {
    "id": "2438",
    "slug": "range-product-queries-of-powers",
    "template": "class Solution:\n    def getPowers(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getPowers())"
  },
  {
    "id": "2439",
    "slug": "minimize-maximum-of-array",
    "template": "class Solution:\n    def find_min_maximum_value(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_min_maximum_value())"
  },
  {
    "id": "2440",
    "slug": "create-components-with-same-value",
    "template": "class Solution:\n    def dfs(node, parent, nums, graph, total, result):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "2441",
    "slug": "largest-positive-integer-that-exists-with-its-negative",
    "template": "class Solution:\n    def find_K(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_K())"
  },
  {
    "id": "2442",
    "slug": "count-number-of-distinct-integers-after-reverse-operations",
    "template": "class Solution:\n    def distinct_integers_after_reversing_and_adding(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distinct_integers_after_reversing_and_adding())"
  },
  {
    "id": "2443",
    "slug": "sum-of-number-and-its-reverse",
    "template": "class Solution:\n    def sum_with_reverse(num: int) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sum_with_reverse())"
  },
  {
    "id": "2444",
    "slug": "count-subarrays-with-fixed-bounds",
    "template": "class Solution:\n    def fixed_bound_subarrays(nums, minK, maxK):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.fixed_bound_subarrays())"
  },
  {
    "id": "2445",
    "slug": "number-of-nodes-with-value-one",
    "template": "class Solution:\n    def flip_trees(n, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.flip_trees())"
  },
  {
    "id": "2447",
    "slug": "number-of-subarrays-with-gcd-equal-to-k",
    "template": "class Solution:\n    def gcd(a, b):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.gcd())"
  },
  {
    "id": "2448",
    "slug": "minimum-cost-to-make-array-equal",
    "template": "class Solution:\n    def minCost(nums, cost):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCost())"
  },
  {
    "id": "2449",
    "slug": "minimum-number-of-operations-to-make-arrays-similar",
    "template": "class Solution:\n    def minOperations(nums, target):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "2450",
    "slug": "number-of-distinct-binary-strings-after-applying-operations",
    "template": "class Solution:\n    def distinctStrings(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distinctStrings())"
  },
  {
    "id": "2451",
    "slug": "odd-string-difference",
    "template": "class Solution:\n    def stringWithDifferentDifference(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.stringWithDifferentDifference())"
  },
  {
    "id": "2452",
    "slug": "words-within-two-edits-of-dictionary",
    "template": "class Solution:\n    def count_differences(a, b):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_differences())"
  },
  {
    "id": "2453",
    "slug": "destroy-sequential-targets",
    "template": "class Solution:\n    def minSeededValue(nums, space):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minSeededValue())"
  },
  {
    "id": "2454",
    "slug": "next-greater-element-iv",
    "template": "class Solution:\n    def find_second_greater(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_second_greater())"
  },
  {
    "id": "2455",
    "slug": "average-value-of-even-numbers-that-are-divisible-by-three",
    "template": "class Solution:\n    def average_even_divisible_by_three(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.average_even_divisible_by_three())"
  },
  {
    "id": "2456",
    "slug": "most-popular-video-creator",
    "template": "class Solution:\n    def highest_popularity(creators, ids, views):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.highest_popularity())"
  },
  {
    "id": "2457",
    "slug": "minimum-addition-to-make-integer-beautiful",
    "template": "class Solution:\n    def digit_sum(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.digit_sum())"
  },
  {
    "id": "2458",
    "slug": "height-of-binary-tree-after-subtree-removal-queries",
    "template": "class Solution:\n    def __init__(self, x: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2459",
    "slug": "sort-array-by-moving-items-to-empty-space",
    "template": "class Solution:\n    def min_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2460",
    "slug": "apply-operations-to-an-array",
    "template": "class Solution:\n    def performOps(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.performOps())"
  },
  {
    "id": "2461",
    "slug": "maximum-sum-of-distinct-subarrays-with-length-k",
    "template": "class Solution:\n    def maxSubarraySumWithDistinctElements(nums: List[int], k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSubarraySumWithDistinctElements())"
  },
  {
    "id": "2462",
    "slug": "total-cost-to-hire-k-workers",
    "template": "class Solution:\n    def hireWorkers(costs, k, candidates):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.hireWorkers())"
  },
  {
    "id": "2463",
    "slug": "minimum-total-distance-traveled",
    "template": "class Solution:\n    def min_total_distance(robot: List[int], factory: List[List[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_total_distance())"
  },
  {
    "id": "2464",
    "slug": "minimum-subarrays-in-a-valid-split",
    "template": "class Solution:\n    def min_valid_subarrays(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_valid_subarrays())"
  },
  {
    "id": "2465",
    "slug": "number-of-distinct-averages",
    "template": "class Solution:\n    def distinctAverages(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distinctAverages())"
  },
  {
    "id": "2466",
    "slug": "count-ways-to-build-good-strings",
    "template": "class Solution:\n    def modPow(x, n, mod):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.modPow())"
  },
  {
    "id": "2467",
    "slug": "most-profitable-path-in-a-tree",
    "template": "class Solution:\n    def dfs(node, parent, bob, time, alice_income, res, amount, tree):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "2469",
    "slug": "convert-the-temperature",
    "template": "class Solution:\n    def convert_temperature(celsius):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.convert_temperature())"
  },
  {
    "id": "2470",
    "slug": "number-of-subarrays-with-lcm-equal-to-k",
    "template": "class Solution:\n    def count_lcm_subarrays(nums: List[int], k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_lcm_subarrays())"
  },
  {
    "id": "2471",
    "slug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2472",
    "slug": "maximum-number-of-non-overlapping-palindrome-substrings",
    "template": "class Solution:\n    def maxPalindromesSubstrings(s, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxPalindromesSubstrings())"
  },
  {
    "id": "2473",
    "slug": "minimum-cost-to-buy-apples",
    "template": "class Solution:\n    def minTotalCost(n, roads, appleCost, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minTotalCost())"
  },
  {
    "id": "2475",
    "slug": "number-of-unequal-triplets-in-array",
    "template": "class Solution:\n    def countTriplets(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countTriplets())"
  },
  {
    "id": "2476",
    "slug": "closest-nodes-queries-in-a-binary-search-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2477",
    "slug": "minimum-fuel-cost-to-report-to-the-capital",
    "template": "class Solution:\n    def min_fuel(roads, seats):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_fuel())"
  },
  {
    "id": "2478",
    "slug": "number-of-beautiful-partitions",
    "template": "class Solution:\n    def numBeautifulPartitions(s: str, k: int, minLength: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numBeautifulPartitions())"
  },
  {
    "id": "2479",
    "slug": "maximum-xor-of-two-non-overlapping-subtrees",
    "template": "class Solution:\n    def maxXorSubtree(n, edges, values):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxXorSubtree())"
  },
  {
    "id": "2481",
    "slug": "minimum-cuts-to-divide-a-circle",
    "template": "class Solution:\n    def min_cuts(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_cuts())"
  },
  {
    "id": "2482",
    "slug": "difference-between-ones-and-zeros-in-row-and-column",
    "template": "class Solution:\n    def create_difference_matrix(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.create_difference_matrix())"
  },
  {
    "id": "2484",
    "slug": "count-palindromic-subsequences",
    "template": "class Solution:\n    def palindrome_subsequence(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.palindrome_subsequence())"
  },
  {
    "id": "2485",
    "slug": "find-the-pivot-integer",
    "template": "class Solution:\n    def find_pivot(n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_pivot())"
  },
  {
    "id": "2487",
    "slug": "remove-nodes-from-linked-list",
    "template": "class Solution:\n    def __init__(self, val=0, next=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2488",
    "slug": "count-subarrays-with-median-k",
    "template": "class Solution:\n    def count_subarrays_with_median(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_subarrays_with_median())"
  },
  {
    "id": "2490",
    "slug": "circular-sentence",
    "template": "class Solution:\n    def is_circular(sentence: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_circular())"
  },
  {
    "id": "2491",
    "slug": "divide-players-into-teams-of-equal-skill",
    "template": "class Solution:\n    def maximumChemistry(skill):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumChemistry())"
  },
  {
    "id": "2492",
    "slug": "minimum-score-of-a-path-between-two-cities",
    "template": "class Solution:\n    def minimumScore(n, roads):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumScore())"
  },
  {
    "id": "2493",
    "slug": "divide-nodes-into-the-maximum-number-of-groups",
    "template": "class Solution:\n    def maxGroups(n, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxGroups())"
  },
  {
    "id": "2495",
    "slug": "number-of-subarrays-having-even-product",
    "template": "class Solution:\n    def numberOfEvenSubarrays(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfEvenSubarrays())"
  },
  {
    "id": "2496",
    "slug": "maximum-value-of-a-string-in-an-array",
    "template": "class Solution:\n    def maxValue(strs) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxValue())"
  },
  {
    "id": "2497",
    "slug": "maximum-star-sum-of-a-graph",
    "template": "class Solution:\n    def max_star_sum(vals, edges, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_star_sum())"
  },
  {
    "id": "2498",
    "slug": "frog-jump-ii",
    "template": "class Solution:\n    def minimum_path_cost(stones):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_path_cost())"
  },
  {
    "id": "2499",
    "slug": "minimum-total-cost-to-make-arrays-unequal",
    "template": "class Solution:\n    def min_cost(nums1: List[int], nums2: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_cost())"
  },
  {
    "id": "2500",
    "slug": "delete-greatest-value-in-each-row",
    "template": "class Solution:\n    def maxValueAfterOperations(grid):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxValueAfterOperations())"
  },
  {
    "id": "2501",
    "slug": "longest-square-streak-in-an-array",
    "template": "class Solution:\n    def longest_square_streak(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longest_square_streak())"
  },
  {
    "id": "2502",
    "slug": "design-memory-allocator",
    "template": "class Solution:\n    def __init__(self, n: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2503",
    "slug": "maximum-number-of-points-from-grid-queries",
    "template": "class Solution:\n    def maxPoints(grid: List[List[int]], queries: List[int]) -> List[int]:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxPoints())"
  },
  {
    "id": "2505",
    "slug": "bitwise-or-of-all-subsequence-sums",
    "template": "class Solution:\n    def subsequence_or_sum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.subsequence_or_sum())"
  },
  {
    "id": "2506",
    "slug": "count-pairs-of-similar-strings",
    "template": "class Solution:\n    def count_similar_pairs(words):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_similar_pairs())"
  },
  {
    "id": "2507",
    "slug": "smallest-value-after-replacing-with-sum-of-prime-factors",
    "template": "class Solution:\n    def smallestFactorization(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestFactorization())"
  },
  {
    "id": "2508",
    "slug": "add-edges-to-make-degrees-of-all-nodes-even",
    "template": "class Solution:\n    def possible_degree_even(n, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.possible_degree_even())"
  },
  {
    "id": "2509",
    "slug": "cycle-length-queries-in-a-tree",
    "template": "class Solution:\n    def length_of_cycle(n, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.length_of_cycle())"
  },
  {
    "id": "2510",
    "slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s",
    "template": "class Solution:\n    def isValidPath(grid, row, col, zeros, ones):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isValidPath())"
  },
  {
    "id": "2511",
    "slug": "maximum-enemy-forts-that-can-be-captured",
    "template": "class Solution:\n    def max_captured_forts(forts):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_captured_forts())"
  },
  {
    "id": "2512",
    "slug": "reward-top-k-students",
    "template": "class Solution:\n    def top_k_students(positive_feedback, negative_feedback, report, student_id, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.top_k_students())"
  },
  {
    "id": "2513",
    "slug": "minimize-the-maximum-of-two-arrays",
    "template": "class Solution:\n    def minimum_possible_max(divisor1, divisor2, unique_cnt1, unique_cnt2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimum_possible_max())"
  },
  {
    "id": "2515",
    "slug": "shortest-distance-to-target-string-in-a-circular-array",
    "template": "class Solution:\n    def shortest_distance(words, target, startIndex):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_distance())"
  },
  {
    "id": "2516",
    "slug": "take-k-of-each-character-from-left-and-right",
    "template": "class Solution:\n    def min_minutes(s: str, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_minutes())"
  },
  {
    "id": "2517",
    "slug": "maximum-tastiness-of-candy-basket",
    "template": "class Solution:\n    def max_tastiness(price, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_tastiness())"
  },
  {
    "id": "2518",
    "slug": "number-of-great-partitions",
    "template": "class Solution:\n    def countPartitions(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countPartitions())"
  },
  {
    "id": "2519",
    "slug": "count-the-number-of-k-big-indices",
    "template": "class Solution:\n    def kBigIndices(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.kBigIndices())"
  },
  {
    "id": "2520",
    "slug": "count-the-digits-that-divide-a-number",
    "template": "class Solution:\n    def digits_dividing_num(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.digits_dividing_num())"
  },
  {
    "id": "2521",
    "slug": "distinct-prime-factors-of-product-of-array",
    "template": "class Solution:\n    def count_distinct_prime_factors(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_distinct_prime_factors())"
  },
  {
    "id": "2523",
    "slug": "closest-prime-numbers-in-range",
    "template": "class Solution:\n    def is_prime(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_prime())"
  },
  {
    "id": "2524",
    "slug": "maximum-frequency-score-of-a-subarray",
    "template": "class Solution:\n    def maxFrequencyScore(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxFrequencyScore())"
  },
  {
    "id": "2526",
    "slug": "find-consecutive-integers-from-a-data-stream",
    "template": "class Solution:\n    def __init__(self, value: int, k: int):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2527",
    "slug": "find-xor-beauty-of-array",
    "template": "class Solution:\n    def xor_beauty(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.xor_beauty())"
  },
  {
    "id": "2528",
    "slug": "maximize-the-minimum-powered-city",
    "template": "class Solution:\n    def max_min_power(stations, r, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_min_power())"
  },
  {
    "id": "2529",
    "slug": "maximum-count-of-positive-integer-and-negative-integer",
    "template": "class Solution:\n    def max_positive_negative_count(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_positive_negative_count())"
  },
  {
    "id": "2530",
    "slug": "maximal-score-after-applying-k-operations",
    "template": "class Solution:\n    def max_score(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_score())"
  },
  {
    "id": "2531",
    "slug": "make-number-of-distinct-characters-equal",
    "template": "class Solution:\n    def compare(w1,w2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.compare())"
  },
  {
    "id": "2532",
    "slug": "time-to-cross-a-bridge",
    "template": "class Solution:\n    def getLastMoment(n, k, time):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getLastMoment())"
  },
  {
    "id": "2533",
    "slug": "number-of-good-binary-strings",
    "template": "class Solution:\n    def countGoodStrings(minLength, maxLength, oneGroup, zeroGroup):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countGoodStrings())"
  },
  {
    "id": "2534",
    "slug": "time-taken-to-cross-the-door",
    "template": "class Solution:\n    def time_crossing_the_door(arrival, state):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.time_crossing_the_door())"
  },
  {
    "id": "2535",
    "slug": "difference-between-element-sum-and-digit-sum-of-an-array",
    "template": "class Solution:\n    def difference_between_element_and_digit_sum(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.difference_between_element_and_digit_sum())"
  },
  {
    "id": "2536",
    "slug": "increment-submatrices-by-one",
    "template": "class Solution:\n    def apply_queries(n, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.apply_queries())"
  },
  {
    "id": "2537",
    "slug": "count-the-number-of-good-subarrays",
    "template": "class Solution:\n    def goodSubarrays(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.goodSubarrays())"
  },
  {
    "id": "2538",
    "slug": "difference-between-maximum-and-minimum-price-sum",
    "template": "class Solution:\n    def dfs(u, p, adj, price, dp):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.dfs())"
  },
  {
    "id": "2540",
    "slug": "minimum-common-value",
    "template": "class Solution:\n    def min_common_number(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_common_number())"
  },
  {
    "id": "2541",
    "slug": "minimum-operations-to-make-array-equal-ii",
    "template": "class Solution:\n    def min_changes(nums1, nums2, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_changes())"
  },
  {
    "id": "2542",
    "slug": "maximum-subsequence-score",
    "template": "class Solution:\n    def maxScore(nums1, nums2, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScore())"
  },
  {
    "id": "2543",
    "slug": "check-if-point-is-reachable",
    "template": "class Solution:\n    def canReach(targetX, targetY):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canReach())"
  },
  {
    "id": "2545",
    "slug": "sort-the-students-by-their-kth-score",
    "template": "class Solution:\n    def sort_students(score, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sort_students())"
  },
  {
    "id": "2547",
    "slug": "minimum-cost-to-split-an-array",
    "template": "class Solution:\n    def minCost(nums: List[int], k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minCost())"
  },
  {
    "id": "2548",
    "slug": "maximum-price-to-fill-a-bag",
    "template": "class Solution:\n    def maxValue(items, capacity):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxValue())"
  },
  {
    "id": "2549",
    "slug": "count-distinct-numbers-on-board",
    "template": "class Solution:\n    def distinct_numbers(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distinct_numbers())"
  },
  {
    "id": "2550",
    "slug": "count-collisions-of-monkeys-on-a-polygon",
    "template": "class Solution:\n    def ways_to_collide(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.ways_to_collide())"
  },
  {
    "id": "2551",
    "slug": "put-marbles-in-bags",
    "template": "class Solution:\n    def maximize_score(weights, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximize_score())"
  },
  {
    "id": "2553",
    "slug": "separate-the-digits-in-an-array",
    "template": "class Solution:\n    def separate_digits(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.separate_digits())"
  },
  {
    "id": "2554",
    "slug": "maximum-number-of-integers-to-choose-from-a-range-i",
    "template": "class Solution:\n    def max_chosen_integers(banned, n, max_sum):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_chosen_integers())"
  },
  {
    "id": "2555",
    "slug": "maximize-win-from-two-segments",
    "template": "class Solution:\n    def max_prizes(prize_positions, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_prizes())"
  },
  {
    "id": "2556",
    "slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
    "template": "class Solution:\n    def canReach(grid, row, col):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.canReach())"
  },
  {
    "id": "2557",
    "slug": "maximum-number-of-integers-to-choose-from-a-range-ii",
    "template": "class Solution:\n    def max_chosen_integers(banned, n, max_sum):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_chosen_integers())"
  },
  {
    "id": "2558",
    "slug": "take-gifts-from-the-richest-pile",
    "template": "class Solution:\n    def giftsRemaining(gifts, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.giftsRemaining())"
  },
  {
    "id": "2559",
    "slug": "count-vowel-strings-in-ranges",
    "template": "class Solution:\n    def is_vowel(c: str) -> bool:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_vowel())"
  },
  {
    "id": "2560",
    "slug": "house-robber-iv",
    "template": "class Solution:\n    def minimumCapability(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumCapability())"
  },
  {
    "id": "2561",
    "slug": "rearranging-fruits",
    "template": "class Solution:\n    def min_cost_to_equal_baskets(basket1, basket2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_cost_to_equal_baskets())"
  },
  {
    "id": "2562",
    "slug": "find-the-array-concatenation-value",
    "template": "class Solution:\n    def concatenationValue(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.concatenationValue())"
  },
  {
    "id": "2563",
    "slug": "count-the-number-of-fair-pairs",
    "template": "class Solution:\n    def count_fair_pairs(nums, lower, upper):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.count_fair_pairs())"
  },
  {
    "id": "2564",
    "slug": "substring-xor-queries",
    "template": "class Solution:\n    def shortestSubstringQueries(s, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortestSubstringQueries())"
  },
  {
    "id": "2565",
    "slug": "subsequence-with-the-minimum-score",
    "template": "class Solution:\n    def minScore(s, t):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minScore())"
  },
  {
    "id": "2566",
    "slug": "maximum-difference-by-remapping-a-digit",
    "template": "class Solution:\n    def diffMaxMin(num):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.diffMaxMin())"
  },
  {
    "id": "2567",
    "slug": "minimum-score-by-changing-two-elements",
    "template": "class Solution:\n    def min_score_after_change(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_score_after_change())"
  },
  {
    "id": "2568",
    "slug": "minimum-impossible-or",
    "template": "class Solution:\n    def min_non_expressible_integer(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_non_expressible_integer())"
  },
  {
    "id": "2569",
    "slug": "handling-sum-queries-after-update",
    "template": "class Solution:\n    def solve(nums1, nums2, queries):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.solve())"
  },
  {
    "id": "2570",
    "slug": "merge-two-2d-arrays-by-summing-values",
    "template": "class Solution:\n    def merge_nums(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.merge_nums())"
  },
  {
    "id": "2572",
    "slug": "count-the-number-of-square-free-subsets",
    "template": "class Solution:\n    def countSquareFreeSubsets(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countSquareFreeSubsets())"
  },
  {
    "id": "2573",
    "slug": "find-the-string-with-lcp",
    "template": "class Solution:\n    def smallestWordForLCP(lcp):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallestWordForLCP())"
  },
  {
    "id": "2574",
    "slug": "left-and-right-sum-differences",
    "template": "class Solution:\n    def get_answer(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.get_answer())"
  },
  {
    "id": "2577",
    "slug": "minimum-time-to-visit-a-cell-in-a-grid",
    "template": "class Solution:\n    def minTime(grid: list[list[int]]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minTime())"
  },
  {
    "id": "2578",
    "slug": "split-with-minimum-sum",
    "template": "class Solution:\n    def min_sum_of_two_numbers(num: str) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_sum_of_two_numbers())"
  },
  {
    "id": "2579",
    "slug": "count-total-number-of-colored-cells",
    "template": "class Solution:\n    def number_of_colored_cells(n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.number_of_colored_cells())"
  },
  {
    "id": "2580",
    "slug": "count-ways-to-group-overlapping-ranges",
    "template": "class Solution:\n    def total_ways_to_split_ranges(ranges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.total_ways_to_split_ranges())"
  },
  {
    "id": "2581",
    "slug": "count-number-of-possible-root-nodes",
    "template": "class Solution:\n    def possibleRoots(edges, guesses, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.possibleRoots())"
  },
  {
    "id": "2582",
    "slug": "pass-the-pillow",
    "template": "class Solution:\n    def pillowHolder(n, time):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pillowHolder())"
  },
  {
    "id": "2583",
    "slug": "kth-largest-sum-in-a-binary-tree",
    "template": "class Solution:\n    def __init__(self, val=0, left=None, right=None):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2584",
    "slug": "split-the-array-to-make-coprime-products",
    "template": "class Solution:\n    def find_valid_split(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_valid_split())"
  },
  {
    "id": "2585",
    "slug": "number-of-ways-to-earn-points",
    "template": "class Solution:\n    def numberOfWays(target, types):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numberOfWays())"
  },
  {
    "id": "2586",
    "slug": "count-the-number-of-vowel-strings-in-range",
    "template": "class Solution:\n    def is_vowel(c):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.is_vowel())"
  },
  {
    "id": "2587",
    "slug": "rearrange-array-to-maximize-prefix-score",
    "template": "class Solution:\n    def maxScore(nums: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxScore())"
  },
  {
    "id": "2588",
    "slug": "count-the-number-of-beautiful-subarrays",
    "template": "class Solution:\n    def beautifulSubarrays(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.beautifulSubarrays())"
  },
  {
    "id": "2589",
    "slug": "minimum-time-to-complete-all-tasks",
    "template": "class Solution:\n    def min_time_on(tasks):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_time_on())"
  },
  {
    "id": "2590",
    "slug": "design-a-todo-list",
    "template": "class Solution:\n    def __init__(self, id: int, description: str, due_date: int, tags: List[str]):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.__init__())"
  },
  {
    "id": "2591",
    "slug": "distribute-money-to-maximum-children",
    "template": "class Solution:\n    def maximum_children_with_eight_dollars(money, children):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximum_children_with_eight_dollars())"
  },
  {
    "id": "2592",
    "slug": "maximize-greatness-of-an-array",
    "template": "class Solution:\n    def max_greatness(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_greatness())"
  },
  {
    "id": "2593",
    "slug": "find-score-of-an-array-after-marking-all-elements",
    "template": "class Solution:\n    def calculate_score(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.calculate_score())"
  },
  {
    "id": "2594",
    "slug": "minimum-time-to-repair-cars",
    "template": "class Solution:\n    def min_time_to_repair(ranks, cars):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_time_to_repair())"
  },
  {
    "id": "2596",
    "slug": "check-knight-tour-configuration",
    "template": "class Solution:\n    def isValidMove(i, j, k, n):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isValidMove())"
  },
  {
    "id": "2597",
    "slug": "the-number-of-beautiful-subsets",
    "template": "class Solution:\n    def countBeautifulSubsets(nums, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countBeautifulSubsets())"
  },
  {
    "id": "2598",
    "slug": "smallest-missing-non-negative-integer-after-operations",
    "template": "class Solution:\n    def maximum_mex(nums: List[int], value: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximum_mex())"
  },
  {
    "id": "2599",
    "slug": "make-the-prefix-sum-non-negative",
    "template": "class Solution:\n    def min_operations(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_operations())"
  },
  {
    "id": "2600",
    "slug": "k-items-with-the-maximum-sum",
    "template": "class Solution:\n    def max_sum(numOnes: int, numZeros: int, numNegOnes: int, k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_sum())"
  },
  {
    "id": "2601",
    "slug": "prime-subtraction-operation",
    "template": "class Solution:\n    def strictlyIncreasingArray(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.strictlyIncreasingArray())"
  },
  {
    "id": "2603",
    "slug": "collect-coins-in-a-tree",
    "template": "class Solution:\n    def min_edges_to_collect_coins(coins, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_edges_to_collect_coins())"
  },
  {
    "id": "2604",
    "slug": "minimum-time-to-eat-all-grains",
    "template": "class Solution:\n    def min_time_to_eat_grains(hens, grains):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.min_time_to_eat_grains())"
  },
  {
    "id": "2605",
    "slug": "form-smallest-number-from-two-digit-arrays",
    "template": "class Solution:\n    def smallest_number_with_at_least_one_digit_from_each_array(nums1, nums2):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.smallest_number_with_at_least_one_digit_from_each_array())"
  },
  {
    "id": "2606",
    "slug": "find-the-substring-with-maximum-cost",
    "template": "class Solution:\n    def max_value_substring(s, chars, vals):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max_value_substring())"
  },
  {
    "id": "2607",
    "slug": "make-k-subarray-sums-equal",
    "template": "class Solution:\n    def minOperations(arr: List[int], k: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minOperations())"
  },
  {
    "id": "2608",
    "slug": "shortest-cycle-in-a-graph",
    "template": "class Solution:\n    def shortest_cycle_length(n, edges):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.shortest_cycle_length())"
  },
  {
    "id": "2609",
    "slug": "find-the-longest-balanced-substring-of-a-binary-string",
    "template": "class Solution:\n    def longestBalancedSubstring(s):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestBalancedSubstring())"
  },
  {
    "id": "2610",
    "slug": "convert-an-array-into-a-2d-array-with-conditions",
    "template": "class Solution:\n    def distinct_rows_from(nums):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distinct_rows_from())"
  },
  {
    "id": "2611",
    "slug": "mice-and-cheese",
    "template": "class Solution:\n    def maxPoints(reward1, reward2, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxPoints())"
  },
  {
    "id": "2612",
    "slug": "minimum-reverse-operations",
    "template": "class Solution:\n    def reach_position(n, p, banned, k):\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.reach_position())"
  }
]