[
  {
    "id": "1",
    "slug": "two-sum",
    "title": "Two Sum",
    "difficulty": "Easy",
    "description": "Given an array of integers `nums` and an integer `target`, return _indices of the two numbers such that they add up to `target`_. You may assume that each input would have **_exactly_ one solution**, and you may not use the _same_ element twice. You can return the answer in any order.",
    "examples": [
      {
        "input": "nums = \\[2,7,11,15\\], target = 9",
        "output": "\\[0,1\\]",
        "explanation": "Because nums\\[0\\] + nums\\[1\\] == 9, we return \\[0, 1\\]."
      },
      {
        "input": "nums = \\[3,2,4\\], target = 6",
        "output": "\\[1,2\\]"
      },
      {
        "input": "nums = \\[3,3\\], target = 6",
        "output": "\\[0,1\\]"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 104`",
      "`-109 <= nums[i] <= 109`",
      "`-109 <= target <= 109`",
      "Only one valid answer exists."
    ],
    "note": null,
    "follow_up": "Can you come up with an algorithm that is less than `O(n2)` time complexity?"
  },
  {
    "id": "2",
    "slug": "add-two-numbers",
    "title": "Add Two Numbers",
    "difficulty": "Medium",
    "description": "You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order**, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
    "examples": [
      {
        "input": "l1 = \\[2,4,3\\], l2 = \\[5,6,4\\]",
        "output": "\\[7,0,8\\]",
        "explanation": "342 + 465 = 807."
      },
      {
        "input": "l1 = \\[0\\], l2 = \\[0\\]",
        "output": "\\[0\\]"
      },
      {
        "input": "l1 = \\[9,9,9,9,9,9,9\\], l2 = \\[9,9,9,9\\]",
        "output": "\\[8,9,9,9,0,0,0,1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in each linked list is in the range `[1, 100]`.",
      "`0 <= Node.val <= 9`",
      "It is guaranteed that the list represents a number that does not have leading zeros."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "3",
    "slug": "longest-substring-without-repeating-characters",
    "title": "Longest Substring Without Repeating Characters",
    "difficulty": "Medium",
    "description": "Given a string `s`, find the length of the **longest** **substring** without repeating characters.",
    "examples": [
      {
        "input": "s =  \"abcabcbb \"",
        "output": "3",
        "explanation": "The answer is  \"abc \", with the length of 3."
      },
      {
        "input": "s =  \"bbbbb \"",
        "output": "1",
        "explanation": "The answer is  \"b \", with the length of 1."
      },
      {
        "input": "s =  \"pwwkew \"",
        "output": "3",
        "explanation": "The answer is  \"wke \", with the length of 3."
      }
    ],
    "constraints": [
      "`0 <= s.length <= 5  104`",
      "`s` consists of English letters, digits, symbols and spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "4",
    "slug": "median-of-two-sorted-arrays",
    "title": "Median of Two Sorted Arrays",
    "difficulty": "Hard",
    "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return **the median** of the two sorted arrays. The overall run time complexity should be `O(log (m+n))`.",
    "examples": [
      {
        "input": "nums1 = \\[1,3\\], nums2 = \\[2\\]",
        "output": "2.00000",
        "explanation": "merged array = \\[1,2,3\\] and median is 2."
      },
      {
        "input": "nums1 = \\[1,2\\], nums2 = \\[3,4\\]",
        "output": "2.50000",
        "explanation": "merged array = \\[1,2,3,4\\] and median is (2 + 3) / 2 = 2.5."
      }
    ],
    "constraints": [
      "`nums1.length == m`",
      "`nums2.length == n`",
      "`0 <= m <= 1000`",
      "`0 <= n <= 1000`",
      "`1 <= m + n <= 2000`",
      "`-106 <= nums1[i], nums2[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "5",
    "slug": "longest-palindromic-substring",
    "title": "Longest Palindromic Substring",
    "difficulty": "Medium",
    "description": "Given a string `s`, return _the longest_ _palindromic_ _substring_ in `s`.",
    "examples": [
      {
        "input": "s =  \"babad \"",
        "output": "\"bab \"",
        "explanation": "\"aba \" is also a valid answer."
      },
      {
        "input": "s =  \"cbbd \"",
        "output": "\"bb \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consist of only digits and English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "6",
    "slug": "zigzag-conversion",
    "title": "Zigzag Conversion",
    "difficulty": "Medium",
    "description": "The string `\"PAYPALISHIRING \"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) P  A  H  N A P L S I I G Y  I  R And then read line by line: `\"PAHNAPLSIIGYIR \"` Write the code that will take a string and make this conversion given a number of rows: string convert(string s, int numRows);",
    "examples": [
      {
        "input": "s =  \"PAYPALISHIRING \", numRows = 3",
        "output": "\"PAHNAPLSIIGYIR \""
      },
      {
        "input": "s =  \"PAYPALISHIRING \", numRows = 4",
        "output": "\"PINALSIGYAHRPI \"",
        "explanation": ""
      },
      {
        "input": "s =  \"A \", numRows = 1",
        "output": "\"A \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of English letters (lower-case and upper-case), `','` and `'.'`.",
      "`1 <= numRows <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "7",
    "slug": "reverse-integer",
    "title": "Reverse Integer",
    "difficulty": "Medium",
    "description": "Given a signed 32-bit integer `x`, return `x` _with its digits reversed_. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`. **Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**",
    "examples": [
      {
        "input": "x = 123",
        "output": "321"
      },
      {
        "input": "x = -123",
        "output": "-321"
      },
      {
        "input": "x = 120",
        "output": "21"
      }
    ],
    "constraints": [
      "`-231 <= x <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "8",
    "slug": "string-to-integer-atoi",
    "title": "String to Integer (atoi)",
    "difficulty": "Medium",
    "description": "Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function). The algorithm for `myAtoi(string s)` is as follows: 1. Read in and ignore any leading whitespace. 2. Check if the next character (if not already at the end of the string) is `'-'` or `'+'`. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present. 3. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored. 4. Convert these digits into an integer (i.e. `\"123 \" -> 123`, `\"0032 \" -> 32`). If no digits were read, then the integer is `0`. Change the sign as necessary (from step 2). 5. If the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then clamp the integer so that it remains in the range. Specifically, integers less than `-231` should be clamped to `-231`, and integers greater than `231 - 1` should be clamped to `231 - 1`. 6. Return the integer as the final result.",
    "examples": [
      {
        "input": "s =  \"42 \"",
        "output": "42",
        "explanation": "The underlined characters are what is read in, the caret is the current reader position."
      },
      {
        "input": "s =  \"   -42 \"",
        "output": "-42",
        "explanation": ""
      },
      {
        "input": "s =  \"4193 with words \"",
        "output": "4193",
        "explanation": ""
      }
    ],
    "constraints": [
      "`0 <= s.length <= 200`",
      "`s` consists of English letters (lower-case and upper-case), digits (`0-9`), `' '`, `'+'`, `'-'`, and `'.'`."
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "9",
    "slug": "palindrome-number",
    "title": "Palindrome Number",
    "difficulty": "Easy",
    "description": "Given an integer `x`, return `true` _if_ `x` _is a_ _**palindrome**__, and_ `false` _otherwise_.",
    "examples": [
      {
        "input": "x = 121",
        "output": "true",
        "explanation": "121 reads as 121 from left to right and from right to left."
      },
      {
        "input": "x = -121",
        "output": "false",
        "explanation": "From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome."
      },
      {
        "input": "x = 10",
        "output": "false",
        "explanation": "Reads 01 from right to left. Therefore it is not a palindrome."
      }
    ],
    "constraints": [
      "`-231 <= x <= 231 - 1`",
      "Follow up: Could you solve it without converting the integer to a string?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "10",
    "slug": "regular-expression-matching",
    "title": "Regular Expression Matching",
    "difficulty": "Hard",
    "description": "Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where: *  `'.'` Matches any single character.\u200b\u200b\u200b\u200b *  `'*'` Matches zero or more of the preceding element. The matching should cover the **entire** input string (not partial).",
    "examples": [
      {
        "input": "s =  \"aa \", p =  \"a \"",
        "output": "false",
        "explanation": "\"a \" does not match the entire string  \"aa \"."
      },
      {
        "input": "s =  \"aa \", p =  \"a\\* \"",
        "output": "true",
        "explanation": "'\\*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes  \"aa \"."
      },
      {
        "input": "s =  \"ab \", p =  \".\\* \"",
        "output": "true",
        "explanation": "\".\\* \" means  \"zero or more (\\*) of any character (.) \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 20`",
      "`1 <= p.length <= 20`",
      "`s` contains only lowercase English letters.",
      "`p` contains only lowercase English letters, `'.'`, and `''`.",
      "It is guaranteed for each appearance of the character `''`, there will be a previous valid character to match."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "11",
    "slug": "container-with-most-water",
    "title": "Container With Most Water",
    "difficulty": "Medium",
    "description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, 0)` and `(i, height[i])`. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return _the maximum amount of water a container can store_. **Notice** that you may not slant the container.",
    "examples": [
      {
        "input": "height = \\[1,8,6,2,5,4,8,3,7\\]",
        "output": "49",
        "explanation": "The above vertical lines are represented by array \\[1,8,6,2,5,4,8,3,7\\]. In this case, the max area of water (blue section) the container can contain is 49."
      },
      {
        "input": "height = \\[1,1\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`n == height.length`",
      "`2 <= n <= 105`",
      "`0 <= height[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "12",
    "slug": "integer-to-roman",
    "title": "Integer to Roman",
    "difficulty": "Medium",
    "description": "Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`. **Symbol**    **Value** I       1 V       5 X       10 L       50 C       100 D       500 M       1000 For example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: *  `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. *  `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. *  `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Given an integer, convert it to a roman numeral.",
    "examples": [
      {
        "input": "num = 3",
        "output": "\"III \"",
        "explanation": "3 is represented as 3 ones."
      },
      {
        "input": "num = 58",
        "output": "\"LVIII \"",
        "explanation": "L = 50, V = 5, III = 3."
      },
      {
        "input": "num = 1994",
        "output": "\"MCMXCIV \"",
        "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."
      }
    ],
    "constraints": [
      "`1 <= num <= 3999`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "13",
    "slug": "roman-to-integer",
    "title": "Roman to Integer",
    "difficulty": "Easy",
    "description": "Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`. **Symbol**    **Value** I       1 V       5 X       10 L       50 C       100 D       500 M       1000 For example, `2` is written as `II` in Roman numeral, just two ones added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: *  `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. *  `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. *  `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Given a roman numeral, convert it to an integer.",
    "examples": [
      {
        "input": "s =  \"III \"",
        "output": "3",
        "explanation": "III = 3."
      },
      {
        "input": "s =  \"LVIII \"",
        "output": "58",
        "explanation": "L = 50, V= 5, III = 3."
      },
      {
        "input": "s =  \"MCMXCIV \"",
        "output": "1994",
        "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 15`",
      "`s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.",
      "It is guaranteed that `s` is a valid roman numeral in the range `[1, 3999]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "14",
    "slug": "longest-common-prefix",
    "title": "Longest Common Prefix",
    "difficulty": "Easy",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string `\" \"`.",
    "examples": [
      {
        "input": "strs = \\[ \"flower \", \"flow \", \"flight \"\\]",
        "output": "\"fl \""
      },
      {
        "input": "strs = \\[ \"dog \", \"racecar \", \"car \"\\]",
        "output": "\" \"",
        "explanation": "There is no common prefix among the input strings."
      }
    ],
    "constraints": [
      "`1 <= strs.length <= 200`",
      "`0 <= strs[i].length <= 200`",
      "`strs[i]` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "15",
    "slug": "3sum",
    "title": "3Sum",
    "difficulty": "Medium",
    "description": "Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. Notice that the solution set must not contain duplicate triplets.",
    "examples": [
      {
        "input": "nums = \\[-1,0,1,2,-1,-4\\]",
        "output": "\\[\\[-1,-1,2\\],\\[-1,0,1\\]\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[0,1,1\\]",
        "output": "\\[\\]",
        "explanation": "The only possible triplet does not sum up to 0."
      },
      {
        "input": "nums = \\[0,0,0\\]",
        "output": "\\[\\[0,0,0\\]\\]",
        "explanation": "The only possible triplet sums up to 0."
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 3000`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "16",
    "slug": "3sum-closest",
    "title": "3Sum Closest",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return _the sum of the three integers_. You may assume that each input would have exactly one solution.",
    "examples": [
      {
        "input": "nums = \\[-1,2,1,-4\\], target = 1",
        "output": "2",
        "explanation": "The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."
      },
      {
        "input": "nums = \\[0,0,0\\], target = 1",
        "output": "0",
        "explanation": "The sum that is closest to the target is 0. (0 + 0 + 0 = 0)."
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 500`",
      "`-1000 <= nums[i] <= 1000`",
      "`-104 <= target <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "17",
    "slug": "letter-combinations-of-a-phone-number",
    "title": "Letter Combinations of a Phone Number",
    "difficulty": "Medium",
    "description": "Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**. A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.",
    "examples": [
      {
        "input": "digits =  \"23 \"",
        "output": "\\[ \"ad \", \"ae \", \"af \", \"bd \", \"be \", \"bf \", \"cd \", \"ce \", \"cf \"\\]"
      },
      {
        "input": "digits =  \" \"",
        "output": "\\[\\]"
      },
      {
        "input": "digits =  \"2 \"",
        "output": "\\[ \"a \", \"b \", \"c \"\\]"
      }
    ],
    "constraints": [
      "`0 <= digits.length <= 4`",
      "`digits[i]` is a digit in the range `['2', '9']`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "18",
    "slug": "4sum",
    "title": "4Sum",
    "difficulty": "Medium",
    "description": "Given an array `nums` of `n` integers, return _an array of all the **unique** quadruplets_ `[nums[a], nums[b], nums[c], nums[d]]` such that: *  `0 <= a, b, c, d < n` *  `a`, `b`, `c`, and `d` are **distinct**. *  `nums[a] + nums[b] + nums[c] + nums[d] == target` You may return the answer in **any order**.",
    "examples": [
      {
        "input": "nums = \\[1,0,-1,0,-2,2\\], target = 0",
        "output": "\\[\\[-2,-1,1,2\\],\\[-2,0,0,2\\],\\[-1,0,0,1\\]\\]"
      },
      {
        "input": "nums = \\[2,2,2,2,2\\], target = 8",
        "output": "\\[\\[2,2,2,2\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 200`",
      "`-109 <= nums[i] <= 109`",
      "`-109 <= target <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "19",
    "slug": "remove-nth-node-from-end-of-list",
    "title": "Remove Nth Node From End of List",
    "difficulty": "Medium",
    "description": "Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5\\], n = 2",
        "output": "\\[1,2,3,5\\]"
      },
      {
        "input": "head = \\[1\\], n = 1",
        "output": "\\[\\]"
      },
      {
        "input": "head = \\[1,2\\], n = 1",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is `sz`.",
      "`1 <= sz <= 30`",
      "`0 <= Node.val <= 100`",
      "`1 <= n <= sz`",
      "Follow up: Could you do this in one pass?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "20",
    "slug": "valid-parentheses",
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "description": "Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type.",
    "examples": [
      {
        "input": "s =  \"() \"",
        "output": "true"
      },
      {
        "input": "s =  \"()\\[\\]{} \"",
        "output": "true"
      },
      {
        "input": "s =  \"(\\] \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of parentheses only `'()[]{}'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "21",
    "slug": "merge-two-sorted-lists",
    "title": "Merge Two Sorted Lists",
    "difficulty": "Easy",
    "description": "You are given the heads of two sorted linked lists `list1` and `list2`. Merge the two lists in a one **sorted** list. The list should be made by splicing together the nodes of the first two lists. Return _the head of the merged linked list_.",
    "examples": [
      {
        "input": "list1 = \\[1,2,4\\], list2 = \\[1,3,4\\]",
        "output": "\\[1,1,2,3,4,4\\]"
      },
      {
        "input": "list1 = \\[\\], list2 = \\[\\]",
        "output": "\\[\\]"
      },
      {
        "input": "list1 = \\[\\], list2 = \\[0\\]",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "The number of nodes in both lists is in the range `[0, 50]`.",
      "`-100 <= Node.val <= 100`",
      "Both `list1` and `list2` are sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "22",
    "slug": "generate-parentheses",
    "title": "Generate Parentheses",
    "difficulty": "Medium",
    "description": "Given `n` pairs of parentheses, write a function to _generate all combinations of well-formed parentheses_.",
    "examples": [
      {
        "input": "n = 3",
        "output": "\\[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"\\]"
      },
      {
        "input": "n = 1",
        "output": "\\[\"()\"\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 8`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "23",
    "slug": "merge-k-sorted-lists",
    "title": "Merge k Sorted Lists",
    "difficulty": "Hard",
    "description": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order. _Merge all the linked-lists into one sorted linked-list and return it._",
    "examples": [
      {
        "input": "lists = \\[\\[1,4,5\\],\\[1,3,4\\],\\[2,6\\]\\]",
        "output": "\\[1,1,2,3,4,4,5,6\\]",
        "explanation": "The linked-lists are:"
      },
      {
        "input": "lists = \\[\\]",
        "output": "\\[\\]"
      },
      {
        "input": "lists = \\[\\[\\]\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`k == lists.length`",
      "`0 <= k <= 104`",
      "`0 <= lists[i].length <= 500`",
      "`-104 <= lists[i][j] <= 104`",
      "`lists[i]` is sorted in ascending order.",
      "The sum of `lists[i].length` will not exceed `104`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "24",
    "slug": "swap-nodes-in-pairs",
    "title": "Swap Nodes in Pairs",
    "difficulty": "Medium",
    "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)",
    "examples": [
      {
        "input": "head = \\[1,2,3,4\\]",
        "output": "\\[2,1,4,3\\]"
      },
      {
        "input": "head = \\[\\]",
        "output": "\\[\\]"
      },
      {
        "input": "head = \\[1\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[0, 100]`.",
      "`0 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "25",
    "slug": "reverse-nodes-in-k-group",
    "title": "Reverse Nodes in k-Group",
    "difficulty": "Hard",
    "description": "Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return _the modified list_. `k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k` then left-out nodes, in the end, should remain as it is. You may not alter the values in the list's nodes, only nodes themselves may be changed.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5\\], k = 2",
        "output": "\\[2,1,4,3,5\\]"
      },
      {
        "input": "head = \\[1,2,3,4,5\\], k = 3",
        "output": "\\[3,2,1,4,5\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is `n`.",
      "`1 <= k <= n <= 5000`",
      "`0 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": "Can you solve the problem in `O(1)` extra memory space?"
  },
  {
    "id": "26",
    "slug": "remove-duplicates-from-sorted-array",
    "title": "Remove Duplicates from Sorted Array",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**. Then return _the number of unique elements in_ `nums`. Consider the number of unique elements of `nums` be `k`, to get accepted, you need to do the following things: *  Change the array `nums` such that the first `k` elements of `nums` contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`. *  Return `k`. **Custom Judge:** The judge will test your solution with the following code: int\\[\\] nums = \\[...\\]; // Input array int\\[\\] expectedNums = \\[...\\]; // The expected answer with correct length int k = removeDuplicates(nums); // Calls your implementation assert k == expectedNums.length; for (int i = 0; i < k; i++) { assert nums\\[i\\] == expectedNums\\[i\\]; } If all assertions pass, then your solution will be **accepted**.",
    "examples": [
      {
        "input": "nums = \\[1,1,2\\]",
        "output": "2, nums = \\[1,2,\\_\\]",
        "explanation": "Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively."
      },
      {
        "input": "nums = \\[0,0,1,1,1,2,2,3,3,4\\]",
        "output": "5, nums = \\[0,1,2,3,4,\\_,\\_,\\_,\\_,\\_\\]",
        "explanation": "Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`-100 <= nums[i] <= 100`",
      "`nums` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "27",
    "slug": "remove-element",
    "title": "Remove Element",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm). The order of the elements may be changed. Then return _the number of elements in_ `nums` _which are not equal to_ `val`. Consider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things: *  Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`. *  Return `k`. **Custom Judge:** The judge will test your solution with the following code: int\\[\\] nums = \\[...\\]; // Input array int val = ...; // Value to remove int\\[\\] expectedNums = \\[...\\]; // The expected answer with correct length. // It is sorted with no values equaling val. int k = removeElement(nums, val); // Calls your implementation assert k == expectedNums.length; sort(nums, 0, k); // Sort the first k elements of nums for (int i = 0; i < actualLength; i++) { assert nums\\[i\\] == expectedNums\\[i\\]; } If all assertions pass, then your solution will be **accepted**.",
    "examples": [
      {
        "input": "nums = \\[3,2,2,3\\], val = 3",
        "output": "2, nums = \\[2,2,\\_,\\_\\]",
        "explanation": "Your function should return k = 2, with the first two elements of nums being 2."
      },
      {
        "input": "nums = \\[0,1,2,2,3,0,4,2\\], val = 2",
        "output": "5, nums = \\[0,1,4,0,3,\\_,\\_,\\_\\]",
        "explanation": "Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4."
      }
    ],
    "constraints": [
      "`0 <= nums.length <= 100`",
      "`0 <= nums[i] <= 50`",
      "`0 <= val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "28",
    "slug": "find-the-index-of-the-first-occurrence-in-a-string",
    "title": "Find the Index of the First Occurrence in a String",
    "difficulty": "Easy",
    "description": "Given two strings `needle` and `haystack`, return the index of the first occurrence of `needle` in `haystack`, or `-1` if `needle` is not part of `haystack`.",
    "examples": [
      {
        "input": "haystack =  \"sadbutsad \", needle =  \"sad \"",
        "output": "0",
        "explanation": "\"sad \" occurs at index 0 and 6."
      },
      {
        "input": "haystack =  \"leetcode \", needle =  \"leeto \"",
        "output": "-1",
        "explanation": "\"leeto \" did not occur in  \"leetcode \", so we return -1."
      }
    ],
    "constraints": [
      "`1 <= haystack.length, needle.length <= 104`",
      "`haystack` and `needle` consist of only lowercase English characters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "29",
    "slug": "divide-two-integers",
    "title": "Divide Two Integers",
    "difficulty": "Medium",
    "description": "Given two integers `dividend` and `divisor`, divide two integers **without** using multiplication, division, and mod operator. The integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`. Return _the **quotient** after dividing_ `dividend` _by_ `divisor`.",
    "examples": [
      {
        "input": "dividend = 10, divisor = 3",
        "output": "3",
        "explanation": "10/3 = 3.33333.. which is truncated to 3."
      },
      {
        "input": "dividend = 7, divisor = -3",
        "output": "-2",
        "explanation": "7/-3 = -2.33333.. which is truncated to -2."
      }
    ],
    "constraints": [
      "`-231 <= dividend, divisor <= 231 - 1`",
      "`divisor != 0`"
    ],
    "note": "Assume we are dealing with an environment that could only store integers within the **32-bit** signed integer range: `[-231, 231 - 1]`. For this problem, if the quotient is **strictly greater than** `231 - 1`, then return `231 - 1`, and if the quotient is **strictly less than** `-231`, then return `-231`.",
    "follow_up": null
  },
  {
    "id": "30",
    "slug": "substring-with-concatenation-of-all-words",
    "title": "Substring with Concatenation of All Words",
    "difficulty": "Hard",
    "description": "You are given a string `s` and an array of strings `words`. All the strings of `words` are of **the same length**. A **concatenated substring** in `s` is a substring that contains all the strings of any permutation of `words` concatenated. *  For example, if `words = [ \"ab \", \"cd \", \"ef \"]`, then `\"abcdef \"`, `\"abefcd \"`, `\"cdabef \"`, `\"cdefab \"`, `\"efabcd \"`, and `\"efcdab \"` are all concatenated strings. `\"acdbef \"` is not a concatenated substring because it is not the concatenation of any permutation of `words`. Return _the starting indices of all the concatenated substrings in_ `s`. You can return the answer in **any order**.",
    "examples": [
      {
        "input": "s =  \"barfoothefoobarman \", words = \\[ \"foo \", \"bar \"\\]",
        "output": "\\[0,9\\]",
        "explanation": "Since words.length == 2 and words\\[i\\].length == 3, the concatenated substring has to be of length 6."
      },
      {
        "input": "s =  \"wordgoodgoodgoodbestword \", words = \\[ \"word \", \"good \", \"best \", \"word \"\\]",
        "output": "\\[\\]",
        "explanation": "Since words.length == 4 and words\\[i\\].length == 4, the concatenated substring has to be of length 16."
      },
      {
        "input": "s =  \"barfoofoobarthefoobarman \", words = \\[ \"bar \", \"foo \", \"the \"\\]",
        "output": "\\[6,9,12\\]",
        "explanation": "Since words.length == 3 and words\\[i\\].length == 3, the concatenated substring has to be of length 9."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`1 <= words.length <= 5000`",
      "`1 <= words[i].length <= 30`",
      "`s` and `words[i]` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "31",
    "slug": "next-permutation",
    "title": "Next Permutation",
    "difficulty": "Medium",
    "description": "A **permutation** of an array of integers is an arrangement of its members into a sequence or linear order. *  For example, for `arr = [1,2,3]`, the following are all the permutations of `arr`: `[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]`. The **next permutation** of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the **next permutation** of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). *  For example, the next permutation of `arr = [1,2,3]` is `[1,3,2]`. *  Similarly, the next permutation of `arr = [2,3,1]` is `[3,1,2]`. *  While the next permutation of `arr = [3,2,1]` is `[1,2,3]` because `[3,2,1]` does not have a lexicographical larger rearrangement. Given an array of integers `nums`, _find the next permutation of_ `nums`. The replacement must be **[in place](http://en.wikipedia.org/wiki/In-place_algorithm)** and use only constant extra memory.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "\\[1,3,2\\]"
      },
      {
        "input": "nums = \\[3,2,1\\]",
        "output": "\\[1,2,3\\]"
      },
      {
        "input": "nums = \\[1,1,5\\]",
        "output": "\\[1,5,1\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`0 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "32",
    "slug": "longest-valid-parentheses",
    "title": "Longest Valid Parentheses",
    "difficulty": "Hard",
    "description": "Given a string containing just the characters `'('` and `')'`, return _the length of the longest valid (well-formed) parentheses_ _substring_.",
    "examples": [
      {
        "input": "s =  \"(() \"",
        "output": "2",
        "explanation": "The longest valid parentheses substring is  \"() \"."
      },
      {
        "input": "s =  \")()()) \"",
        "output": "4",
        "explanation": "The longest valid parentheses substring is  \"()() \"."
      },
      {
        "input": "s =  \" \"",
        "output": "0"
      }
    ],
    "constraints": [
      "`0 <= s.length <= 3  104`",
      "`s[i]` is `'('`, or `')'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "33",
    "slug": "search-in-rotated-sorted-array",
    "title": "Search in Rotated Sorted Array",
    "difficulty": "Medium",
    "description": "There is an integer array `nums` sorted in ascending order (with **distinct** values). Prior to being passed to your function, `nums` is **possibly rotated** at an unknown pivot index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`. Given the array `nums` **after** the possible rotation and an integer `target`, return _the index of_ `target` _if it is in_ `nums`_, or_ `-1` _if it is not in_ `nums`. You must write an algorithm with `O(log n)` runtime complexity.",
    "examples": [
      {
        "input": "nums = \\[4,5,6,7,0,1,2\\], target = 0",
        "output": "4"
      },
      {
        "input": "nums = \\[4,5,6,7,0,1,2\\], target = 3",
        "output": "-1"
      },
      {
        "input": "nums = \\[1\\], target = 0",
        "output": "-1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5000`",
      "`-104 <= nums[i] <= 104`",
      "All values of `nums` are unique.",
      "`nums` is an ascending array that is possibly rotated.",
      "`-104 <= target <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "34",
    "slug": "find-first-and-last-position-of-element-in-sorted-array",
    "title": "Find First and Last Position of Element in Sorted Array",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value. If `target` is not found in the array, return `[-1, -1]`. You must write an algorithm with `O(log n)` runtime complexity.",
    "examples": [
      {
        "input": "nums = \\[5,7,7,8,8,10\\], target = 8",
        "output": "\\[3,4\\]"
      },
      {
        "input": "nums = \\[5,7,7,8,8,10\\], target = 6",
        "output": "\\[-1,-1\\]"
      },
      {
        "input": "nums = \\[\\], target = 0",
        "output": "\\[-1,-1\\]"
      }
    ],
    "constraints": [
      "`0 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`",
      "`nums` is a non-decreasing array.",
      "`-109 <= target <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "35",
    "slug": "search-insert-position",
    "title": "Search Insert Position",
    "difficulty": "Easy",
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with `O(log n)` runtime complexity.",
    "examples": [
      {
        "input": "nums = \\[1,3,5,6\\], target = 5",
        "output": "2"
      },
      {
        "input": "nums = \\[1,3,5,6\\], target = 2",
        "output": "1"
      },
      {
        "input": "nums = \\[1,3,5,6\\], target = 7",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-104 <= nums[i] <= 104`",
      "`nums` contains distinct values sorted in ascending order.",
      "`-104 <= target <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "36",
    "slug": "valid-sudoku",
    "title": "Valid Sudoku",
    "difficulty": "Medium",
    "description": "Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated **according to the following rules**: 1. Each row must contain the digits `1-9` without repetition. 2. Each column must contain the digits `1-9` without repetition. 3. Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.",
    "examples": [
      {
        "input": "board =",
        "output": "true"
      },
      {
        "input": "board =",
        "output": "false",
        "explanation": "Same as Example 1, except with the **5** in the top left corner being modified to **8**. Since there are two 8's in the top left 3x3 sub-box, it is invalid."
      }
    ],
    "constraints": [
      "`board.length == 9`",
      "`board[i].length == 9`",
      "`board[i][j]` is a digit `1-9` or `'.'`."
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "37",
    "slug": "sudoku-solver",
    "title": "Sudoku Solver",
    "difficulty": "Hard",
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells. A sudoku solution must satisfy **all of the following rules**: 1. Each of the digits `1-9` must occur exactly once in each row. 2. Each of the digits `1-9` must occur exactly once in each column. 3. Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid. The `'.'` character indicates empty cells.",
    "examples": [
      {
        "input": "board = \\[\\[ \"5 \", \"3 \", \". \", \". \", \"7 \", \". \", \". \", \". \", \". \"\\],\\[ \"6 \", \". \", \". \", \"1 \", \"9 \", \"5 \", \". \", \". \", \". \"\\],\\[ \". \", \"9 \", \"8 \", \". \", \". \", \". \", \". \", \"6 \", \". \"\\],\\[ \"8 \", \". \", \". \", \". \", \"6 \", \". \", \". \", \". \", \"3 \"\\],\\[ \"4 \", \". \", \". \", \"8 \", \". \", \"3 \", \". \", \". \", \"1 \"\\],\\[ \"7 \", \". \", \". \", \". \", \"2 \", \". \", \". \", \". \", \"6 \"\\],\\[ \". \", \"6 \", \". \", \". \", \". \", \". \", \"2 \", \"8 \", \". \"\\],\\[ \". \", \". \", \". \", \"4 \", \"1 \", \"9 \", \". \", \". \", \"5 \"\\],\\[ \". \", \". \", \". \", \". \", \"8 \", \". \", \". \", \"7 \", \"9 \"\\]\\]",
        "output": "\\[\\[ \"5 \", \"3 \", \"4 \", \"6 \", \"7 \", \"8 \", \"9 \", \"1 \", \"2 \"\\],\\[ \"6 \", \"7 \", \"2 \", \"1 \", \"9 \", \"5 \", \"3 \", \"4 \", \"8 \"\\],\\[ \"1 \", \"9 \", \"8 \", \"3 \", \"4 \", \"2 \", \"5 \", \"6 \", \"7 \"\\],\\[ \"8 \", \"5 \", \"9 \", \"7 \", \"6 \", \"1 \", \"4 \", \"2 \", \"3 \"\\],\\[ \"4 \", \"2 \", \"6 \", \"8 \", \"5 \", \"3 \", \"7 \", \"9 \", \"1 \"\\],\\[ \"7 \", \"1 \", \"3 \", \"9 \", \"2 \", \"4 \", \"8 \", \"5 \", \"6 \"\\],\\[ \"9 \", \"6 \", \"1 \", \"5 \", \"3 \", \"7 \", \"2 \", \"8 \", \"4 \"\\],\\[ \"2 \", \"8 \", \"7 \", \"4 \", \"1 \", \"9 \", \"6 \", \"3 \", \"5 \"\\],\\[ \"3 \", \"4 \", \"5 \", \"2 \", \"8 \", \"6 \", \"1 \", \"7 \", \"9 \"\\]\\]",
        "explanation": "The input board is shown above and the only valid solution is shown below:"
      }
    ],
    "constraints": [
      "`board.length == 9`",
      "`board[i].length == 9`",
      "`board[i][j]` is a digit or `'.'`.",
      "It is guaranteed that the input board has only one solution."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "38",
    "slug": "count-and-say",
    "title": "Count and Say",
    "difficulty": "Medium",
    "description": "The **count-and-say** sequence is a sequence of digit strings defined by the recursive formula: *  `countAndSay(1) = \"1 \"` *  `countAndSay(n)` is the way you would \"say \" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string. To determine how you \"say \" a digit string, split it into the **minimal** number of substrings such that each substring contains exactly **one** unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit. For example, the saying and conversion for digit string `\"3322251 \"`: Given a positive integer `n`, return _the_ `nth` _term of the **count-and-say** sequence_.",
    "examples": [
      {
        "input": "n = 1",
        "output": "\"1 \"",
        "explanation": "This is the base case."
      },
      {
        "input": "n = 4",
        "output": "\"1211 \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 30`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "39",
    "slug": "combination-sum",
    "title": "Combination Sum",
    "difficulty": "Medium",
    "description": "Given an array of **distinct** integers `candidates` and a target integer `target`, return _a list of all **unique combinations** of_ `candidates` _where the chosen numbers sum to_ `target`_._ You may return the combinations in **any order**. The **same** number may be chosen from `candidates` an **unlimited number of times**. Two combinations are unique if the frequency of at least one of the chosen numbers is different. The test cases are generated such that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.",
    "examples": [
      {
        "input": "candidates = \\[2,3,6,7\\], target = 7",
        "output": "\\[\\[2,2,3\\],\\[7\\]\\]",
        "explanation": ""
      },
      {
        "input": "candidates = \\[2,3,5\\], target = 8",
        "output": "\\[\\[2,2,2,2\\],\\[2,3,3\\],\\[3,5\\]\\]"
      },
      {
        "input": "candidates = \\[2\\], target = 1",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`1 <= candidates.length <= 30`",
      "`2 <= candidates[i] <= 40`",
      "All elements of `candidates` are distinct.",
      "`1 <= target <= 40`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "40",
    "slug": "combination-sum-ii",
    "title": "Combination Sum II",
    "difficulty": "Medium",
    "description": "Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`. Each number in `candidates` may only be used **once** in the combination.",
    "examples": [
      {
        "input": "candidates = \\[10,1,2,7,6,1,5\\], target = 8",
        "output": ""
      },
      {
        "input": "candidates = \\[2,5,2,1,2\\], target = 5",
        "output": ""
      }
    ],
    "constraints": [
      "`1 <= candidates.length <= 100`",
      "`1 <= candidates[i] <= 50`",
      "`1 <= target <= 30`"
    ],
    "note": "The solution set must not contain duplicate combinations.",
    "follow_up": null
  },
  {
    "id": "41",
    "slug": "first-missing-positive",
    "title": "First Missing Positive",
    "difficulty": "Hard",
    "description": "Given an unsorted integer array `nums`, return the smallest missing positive integer. You must implement an algorithm that runs in `O(n)` time and uses constant extra space.",
    "examples": [
      {
        "input": "nums = \\[1,2,0\\]",
        "output": "3",
        "explanation": "The numbers in the range \\[1,2\\] are all in the array."
      },
      {
        "input": "nums = \\[3,4,-1,1\\]",
        "output": "2",
        "explanation": "1 is in the array but 2 is missing."
      },
      {
        "input": "nums = \\[7,8,9,11,12\\]",
        "output": "1",
        "explanation": "The smallest positive integer 1 is missing."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-231 <= nums[i] <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "42",
    "slug": "trapping-rain-water",
    "title": "Trapping Rain Water",
    "difficulty": "Hard",
    "description": "Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.",
    "examples": [
      {
        "input": "height = \\[0,1,0,2,1,0,1,3,2,1,2,1\\]",
        "output": "6",
        "explanation": "The above elevation map (black section) is represented by array \\[0,1,0,2,1,0,1,3,2,1,2,1\\]. In this case, 6 units of rain water (blue section) are being trapped."
      },
      {
        "input": "height = \\[4,2,0,3,2,5\\]",
        "output": "9"
      }
    ],
    "constraints": [
      "`n == height.length`",
      "`1 <= n <= 2  104`",
      "`0 <= height[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "43",
    "slug": "multiply-strings",
    "title": "Multiply Strings",
    "difficulty": "Medium",
    "description": "Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.",
    "examples": [
      {
        "input": "num1 = \"2\", num2 = \"3\"",
        "output": "\"6\""
      },
      {
        "input": "num1 = \"123\", num2 = \"456\"",
        "output": "\"56088\""
      }
    ],
    "constraints": [
      "`1 <= num1.length, num2.length <= 200`",
      "`num1` and `num2` consist of digits only.",
      "Both `num1` and `num2` do not contain any leading zero, except the number `0` itself."
    ],
    "note": "You must not use any built-in BigInteger library or convert the inputs to integer directly.",
    "follow_up": null
  },
  {
    "id": "44",
    "slug": "wildcard-matching",
    "title": "Wildcard Matching",
    "difficulty": "Hard",
    "description": "Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where: *  `'?'` Matches any single character. *  `'*'` Matches any sequence of characters (including the empty sequence). The matching should cover the **entire** input string (not partial).",
    "examples": [
      {
        "input": "s =  \"aa \", p =  \"a \"",
        "output": "false",
        "explanation": "\"a \" does not match the entire string  \"aa \"."
      },
      {
        "input": "s =  \"aa \", p =  \"\\* \"",
        "output": "true",
        "explanation": "'\\*' matches any sequence."
      },
      {
        "input": "s =  \"cb \", p =  \"?a \"",
        "output": "false",
        "explanation": "'?' matches 'c', but the second letter is 'a', which does not match 'b'."
      }
    ],
    "constraints": [
      "`0 <= s.length, p.length <= 2000`",
      "`s` contains only lowercase English letters.",
      "`p` contains only lowercase English letters, `'?'` or `''`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "45",
    "slug": "jump-game-ii",
    "title": "Jump Game II",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of integers `nums` of length `n`. You are initially positioned at `nums[0]`. Each element `nums[i]` represents the maximum length of a forward jump from index `i`. In other words, if you are at `nums[i]`, you can jump to any `nums[i + j]` where: *  `0 <= j <= nums[i]` and *  `i + j < n` Return _the minimum number of jumps to reach_ `nums[n - 1]`. The test cases are generated such that you can reach `nums[n - 1]`.",
    "examples": [
      {
        "input": "nums = \\[2,3,1,1,4\\]",
        "output": "2",
        "explanation": "The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
      },
      {
        "input": "nums = \\[2,3,0,1,4\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`0 <= nums[i] <= 1000`",
      "It's guaranteed that you can reach `nums[n - 1]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "46",
    "slug": "permutations",
    "title": "Permutations",
    "difficulty": "Medium",
    "description": "Given an array `nums` of distinct integers, return _all the possible permutations_. You can return the answer in **any order**.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "\\[\\[1,2,3\\],\\[1,3,2\\],\\[2,1,3\\],\\[2,3,1\\],\\[3,1,2\\],\\[3,2,1\\]\\]"
      },
      {
        "input": "nums = \\[0,1\\]",
        "output": "\\[\\[0,1\\],\\[1,0\\]\\]"
      },
      {
        "input": "nums = \\[1\\]",
        "output": "\\[\\[1\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 6`",
      "`-10 <= nums[i] <= 10`",
      "All the integers of `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "47",
    "slug": "permutations-ii",
    "title": "Permutations II",
    "difficulty": "Medium",
    "description": "Given a collection of numbers, `nums`, that might contain duplicates, return _all possible unique permutations **in any order**._",
    "examples": [
      {
        "input": "nums = \\[1,1,2\\]",
        "output": ""
      },
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "\\[\\[1,2,3\\],\\[1,3,2\\],\\[2,1,3\\],\\[2,3,1\\],\\[3,1,2\\],\\[3,2,1\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 8`",
      "`-10 <= nums[i] <= 10`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "48",
    "slug": "rotate-image",
    "title": "Rotate Image",
    "difficulty": "Medium",
    "description": "You are given an `n x n` 2D `matrix` representing an image, rotate the image by **90** degrees (clockwise). You have to rotate the image [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm), which means you have to modify the input 2D matrix directly. **DO NOT** allocate another 2D matrix and do the rotation.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]",
        "output": "\\[\\[7,4,1\\],\\[8,5,2\\],\\[9,6,3\\]\\]"
      },
      {
        "input": "matrix = \\[\\[5,1,9,11\\],\\[2,4,8,10\\],\\[13,3,6,7\\],\\[15,14,12,16\\]\\]",
        "output": "\\[\\[15,13,2,5\\],\\[14,3,4,1\\],\\[12,6,8,9\\],\\[16,7,10,11\\]\\]"
      }
    ],
    "constraints": [
      "`n == matrix.length == matrix[i].length`",
      "`1 <= n <= 20`",
      "`-1000 <= matrix[i][j] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "49",
    "slug": "group-anagrams",
    "title": "Group Anagrams",
    "difficulty": "Medium",
    "description": "Given an array of strings `strs`, group **the anagrams** together. You can return the answer in **any order**. An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "examples": [
      {
        "input": "strs = \\[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"\\]",
        "output": "\\[\\[\"bat\"\\],\\[\"nat\",\"tan\"\\],\\[\"ate\",\"eat\",\"tea\"\\]\\]"
      },
      {
        "input": "strs = \\[\"\"\\]",
        "output": "\\[\\[\"\"\\]\\]"
      },
      {
        "input": "strs = \\[\"a\"\\]",
        "output": "\\[\\[\"a\"\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= strs.length <= 104`",
      "`0 <= strs[i].length <= 100`",
      "`strs[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "50",
    "slug": "powx-n",
    "title": "Pow(x, n)",
    "difficulty": "Medium",
    "description": "Implement [pow(x, n)](http://www.cplusplus.com/reference/valarray/pow/), which calculates `x` raised to the power `n` (i.e., `xn`).",
    "examples": [
      {
        "input": "x = 2.00000, n = 10",
        "output": "1024.00000"
      },
      {
        "input": "x = 2.10000, n = 3",
        "output": "9.26100"
      },
      {
        "input": "x = 2.00000, n = -2",
        "output": "0.25000",
        "explanation": "2\\-2 = 1/22 = 1/4 = 0.25"
      }
    ],
    "constraints": [
      "`-100.0 < x < 100.0`",
      "`-231 <= n <= 231-1`",
      "`n` is an integer.",
      "`-104 <= xn <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "51",
    "slug": "n-queens",
    "title": "N-Queens",
    "difficulty": "Hard",
    "description": "The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return _all distinct solutions to the **n-queens puzzle**_. You may return the answer in **any order**. Each solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space, respectively.",
    "examples": [
      {
        "input": "n = 4",
        "output": "\\[\\[ \".Q.. \", \"...Q \", \"Q... \", \"..Q. \"\\],\\[ \"..Q. \", \"Q... \", \"...Q \", \".Q.. \"\\]\\]",
        "explanation": "There exist two distinct solutions to the 4-queens puzzle as shown above"
      },
      {
        "input": "n = 1",
        "output": "\\[\\[ \"Q \"\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "52",
    "slug": "n-queens-ii",
    "title": "N-Queens II",
    "difficulty": "Hard",
    "description": "The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return _the number of distinct solutions to the **n-queens puzzle**_.",
    "examples": [
      {
        "input": "n = 4",
        "output": "2",
        "explanation": "There are two distinct solutions to the 4-queens puzzle as shown."
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "53",
    "slug": "maximum-subarray",
    "title": "Maximum Subarray",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, find the subarray with the largest sum, and return _its sum_.",
    "examples": [
      {
        "input": "nums = \\[-2,1,-3,4,-1,2,1,-5,4\\]",
        "output": "6",
        "explanation": "The subarray \\[4,-1,2,1\\] has the largest sum 6."
      },
      {
        "input": "nums = \\[1\\]",
        "output": "1",
        "explanation": "The subarray \\[1\\] has the largest sum 1."
      },
      {
        "input": "nums = \\[5,4,-1,7,8\\]",
        "output": "23",
        "explanation": "The subarray \\[5,4,-1,7,8\\] has the largest sum 23."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-104 <= nums[i] <= 104`",
      "Follow up: If you have figured out the `O(n)` solution, try coding another solution using the divide and conquer approach, which is more subtle."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "54",
    "slug": "spiral-matrix",
    "title": "Spiral Matrix",
    "difficulty": "Medium",
    "description": "Given an `m x n` `matrix`, return _all elements of the_ `matrix` _in spiral order_.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]",
        "output": "\\[1,2,3,6,9,8,7,4,5\\]"
      },
      {
        "input": "matrix = \\[\\[1,2,3,4\\],\\[5,6,7,8\\],\\[9,10,11,12\\]\\]",
        "output": "\\[1,2,3,4,8,12,11,10,9,5,6,7\\]"
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 10`",
      "`-100 <= matrix[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "55",
    "slug": "jump-game",
    "title": "Jump Game",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. You are initially positioned at the array's **first index**, and each element in the array represents your maximum jump length at that position. Return `true` _if you can reach the last index, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "nums = \\[2,3,1,1,4\\]",
        "output": "true",
        "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."
      },
      {
        "input": "nums = \\[3,2,1,0,4\\]",
        "output": "false",
        "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "56",
    "slug": "merge-intervals",
    "title": "Merge Intervals",
    "difficulty": "Medium",
    "description": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return _an array of the non-overlapping intervals that cover all the intervals in the input_.",
    "examples": [
      {
        "input": "intervals = \\[\\[1,3\\],\\[2,6\\],\\[8,10\\],\\[15,18\\]\\]",
        "output": "\\[\\[1,6\\],\\[8,10\\],\\[15,18\\]\\]",
        "explanation": "Since intervals \\[1,3\\] and \\[2,6\\] overlap, merge them into \\[1,6\\]."
      },
      {
        "input": "intervals = \\[\\[1,4\\],\\[4,5\\]\\]",
        "output": "\\[\\[1,5\\]\\]",
        "explanation": "Intervals \\[1,4\\] and \\[4,5\\] are considered overlapping."
      }
    ],
    "constraints": [
      "`1 <= intervals.length <= 104`",
      "`intervals[i].length == 2`",
      "`0 <= starti <= endi <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "57",
    "slug": "insert-interval",
    "title": "Insert Interval",
    "difficulty": "Medium",
    "description": "You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `ith` interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval. Insert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary). Return `intervals` _after the insertion_.",
    "examples": [
      {
        "input": "intervals = \\[\\[1,3\\],\\[6,9\\]\\], newInterval = \\[2,5\\]",
        "output": "\\[\\[1,5\\],\\[6,9\\]\\]"
      },
      {
        "input": "intervals = \\[\\[1,2\\],\\[3,5\\],\\[6,7\\],\\[8,10\\],\\[12,16\\]\\], newInterval = \\[4,8\\]",
        "output": "\\[\\[1,2\\],\\[3,10\\],\\[12,16\\]\\]",
        "explanation": "Because the new interval \\[4,8\\] overlaps with \\[3,5\\],\\[6,7\\],\\[8,10\\]."
      }
    ],
    "constraints": [
      "`0 <= intervals.length <= 104`",
      "`intervals[i].length == 2`",
      "`0 <= starti <= endi <= 105`",
      "`intervals` is sorted by `starti` in ascending order.",
      "`newInterval.length == 2`",
      "`0 <= start <= end <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "58",
    "slug": "length-of-last-word",
    "title": "Length of Last Word",
    "difficulty": "Easy",
    "description": "Given a string `s` consisting of words and spaces, return _the length of the **last** word in the string._ A **word** is a maximal substring consisting of non-space characters only.",
    "examples": [
      {
        "input": "s =  \"Hello World \"",
        "output": "5",
        "explanation": "The last word is  \"World \" with length 5."
      },
      {
        "input": "s =  \"   fly me   to   the moon   \"",
        "output": "4",
        "explanation": "The last word is  \"moon \" with length 4."
      },
      {
        "input": "s =  \"luffy is still joyboy \"",
        "output": "6",
        "explanation": "The last word is  \"joyboy \" with length 6."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of only English letters and spaces `' '`.",
      "There will be at least one word in `s`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "59",
    "slug": "spiral-matrix-ii",
    "title": "Spiral Matrix II",
    "difficulty": "Medium",
    "description": "Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.",
    "examples": [
      {
        "input": "n = 3",
        "output": "\\[\\[1,2,3\\],\\[8,9,4\\],\\[7,6,5\\]\\]"
      },
      {
        "input": "n = 1",
        "output": "\\[\\[1\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 20`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "60",
    "slug": "permutation-sequence",
    "title": "Permutation Sequence",
    "difficulty": "Hard",
    "description": "The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations. By listing and labeling all of the permutations in order, we get the following sequence for `n = 3`: 1. `\"123 \"` 2. `\"132 \"` 3. `\"213 \"` 4. `\"231 \"` 5. `\"312 \"` 6. `\"321 \"` Given `n` and `k`, return the `kth` permutation sequence.",
    "examples": [
      {
        "input": "n = 3, k = 3",
        "output": "\"213\""
      },
      {
        "input": "n = 4, k = 9",
        "output": "\"2314\""
      },
      {
        "input": "n = 3, k = 1",
        "output": "\"123\""
      }
    ],
    "constraints": [
      "`1 <= n <= 9`",
      "`1 <= k <= n!`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "61",
    "slug": "rotate-list",
    "title": "Rotate List",
    "difficulty": "Medium",
    "description": "Given the `head` of a linked list, rotate the list to the right by `k` places.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5\\], k = 2",
        "output": "\\[4,5,1,2,3\\]"
      },
      {
        "input": "head = \\[0,1,2\\], k = 4",
        "output": "\\[2,0,1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[0, 500]`.",
      "`-100 <= Node.val <= 100`",
      "`0 <= k <= 2  109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "62",
    "slug": "unique-paths",
    "title": "Unique Paths",
    "difficulty": "Medium",
    "description": "There is a robot on an `m x n` grid. The robot is initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time. Given the two integers `m` and `n`, return _the number of possible unique paths that the robot can take to reach the bottom-right corner_. The test cases are generated so that the answer will be less than or equal to `2 * 109`.",
    "examples": [
      {
        "input": "m = 3, n = 7",
        "output": "28"
      },
      {
        "input": "m = 3, n = 2",
        "output": "3",
        "explanation": "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:"
      }
    ],
    "constraints": [
      "`1 <= m, n <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "63",
    "slug": "unique-paths-ii",
    "title": "Unique Paths II",
    "difficulty": "Medium",
    "description": "You are given an `m x n` integer array `grid`. There is a robot initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time. An obstacle and space are marked as `1` or `0` respectively in `grid`. A path that the robot takes cannot include **any** square that is an obstacle. Return _the number of possible unique paths that the robot can take to reach the bottom-right corner_. The testcases are generated so that the answer will be less than or equal to `2 * 109`.",
    "examples": [
      {
        "input": "obstacleGrid = \\[\\[0,0,0\\],\\[0,1,0\\],\\[0,0,0\\]\\]",
        "output": "2",
        "explanation": "There is one obstacle in the middle of the 3x3 grid above."
      },
      {
        "input": "obstacleGrid = \\[\\[0,1\\],\\[0,0\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`m == obstacleGrid.length`",
      "`n == obstacleGrid[i].length`",
      "`1 <= m, n <= 100`",
      "`obstacleGrid[i][j]` is `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "64",
    "slug": "minimum-path-sum",
    "title": "Minimum Path Sum",
    "difficulty": "Medium",
    "description": "Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.",
    "examples": [
      {
        "input": "grid = \\[\\[1,3,1\\],\\[1,5,1\\],\\[4,2,1\\]\\]",
        "output": "7",
        "explanation": "Because the path 1 -> 3 -> 1 -> 1 -> 1 minimizes the sum."
      },
      {
        "input": "grid = \\[\\[1,2,3\\],\\[4,5,6\\]\\]",
        "output": "12"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 200`",
      "`0 <= grid[i][j] <= 100`"
    ],
    "note": "You can only move either down or right at any point in time.",
    "follow_up": null
  },
  {
    "id": "65",
    "slug": "valid-number",
    "title": "Valid Number",
    "difficulty": "Hard",
    "description": "A **valid number** can be split up into these components (in order): 1. A **decimal number** or an **integer**. 2. (Optional) An `'e'` or `'E'`, followed by an **integer**. A **decimal number** can be split up into these components (in order): 1. (Optional) A sign character (either `'+'` or `'-'`). 2. One of the following formats: 1. One or more digits, followed by a dot `'.'`. 2. One or more digits, followed by a dot `'.'`, followed by one or more digits. 3. A dot `'.'`, followed by one or more digits. An **integer** can be split up into these components (in order): 1. (Optional) A sign character (either `'+'` or `'-'`). 2. One or more digits. For example, all the following are valid numbers: `[ \"2 \", \"0089 \", \"-0.1 \", \"+3.14 \", \"4. \", \"-.9 \", \"2e10 \", \"-90E3 \", \"3e+7 \", \"+6e-1 \", \"53.5e93 \", \"-123.456e789 \"]`, while the following are not valid numbers: `[ \"abc \", \"1a \", \"1e \", \"e3 \", \"99e2.5 \", \"--6 \", \"-+3 \", \"95a54e53 \"]`. Given a string `s`, return `true` _if_ `s` _is a **valid number**_.",
    "examples": [
      {
        "input": "s =  \"0 \"",
        "output": "true"
      },
      {
        "input": "s =  \"e \"",
        "output": "false"
      },
      {
        "input": "s =  \". \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 20`",
      "`s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "66",
    "slug": "plus-one",
    "title": "Plus One",
    "difficulty": "Easy",
    "description": "You are given a **large integer** represented as an integer array `digits`, where each `digits[i]` is the `ith` digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading `0`'s. Increment the large integer by one and return _the resulting array of digits_.",
    "examples": [
      {
        "input": "digits = \\[1,2,3\\]",
        "output": "\\[1,2,4\\]",
        "explanation": "The array represents the integer 123."
      },
      {
        "input": "digits = \\[4,3,2,1\\]",
        "output": "\\[4,3,2,2\\]",
        "explanation": "The array represents the integer 4321."
      },
      {
        "input": "digits = \\[9\\]",
        "output": "\\[1,0\\]",
        "explanation": "The array represents the integer 9."
      }
    ],
    "constraints": [
      "`1 <= digits.length <= 100`",
      "`0 <= digits[i] <= 9`",
      "`digits` does not contain any leading `0`'s."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "67",
    "slug": "add-binary",
    "title": "Add Binary",
    "difficulty": "Easy",
    "description": "Given two binary strings `a` and `b`, return _their sum as a binary string_.",
    "examples": [
      {
        "input": "a = \"11\", b = \"1\"",
        "output": "\"100\""
      },
      {
        "input": "a = \"1010\", b = \"1011\"",
        "output": "\"10101\""
      }
    ],
    "constraints": [
      "`1 <= a.length, b.length <= 104`",
      "`a` and `b` consist only of `'0'` or `'1'` characters.",
      "Each string does not contain leading zeros except for the zero itself."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "68",
    "slug": "text-justification",
    "title": "Text Justification",
    "difficulty": "Hard",
    "description": "Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly `maxWidth` characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left-justified, and no extra space is inserted between words.",
    "examples": [
      {
        "input": "words = \\[ \"This \",  \"is \",  \"an \",  \"example \",  \"of \",  \"text \",  \"justification. \"\\], maxWidth = 16",
        "output": ""
      },
      {
        "input": "words = \\[ \"What \", \"must \", \"be \", \"acknowledgment \", \"shall \", \"be \"\\], maxWidth = 16",
        "output": "",
        "explanation": "Note that the last line is  \"shall be     \" instead of  \"shall     be \", because the last line must be left-justified instead of fully-justified."
      },
      {
        "input": "words = \\[ \"Science \", \"is \", \"what \", \"we \", \"understand \", \"well \", \"enough \", \"to \", \"explain \", \"to \", \"a \", \"computer. \", \"Art \", \"is \", \"everything \", \"else \", \"we \", \"do \"\\], maxWidth = 20",
        "output": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 300`",
      "`1 <= words[i].length <= 20`",
      "`words[i]` consists of only English letters and symbols.",
      "`1 <= maxWidth <= 100`",
      "`words[i].length <= maxWidth`"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "69",
    "slug": "sqrtx",
    "title": "Sqrt(x)",
    "difficulty": "Easy",
    "description": "Given a non-negative integer `x`, return _the square root of_ `x` _rounded down to the nearest integer_. The returned integer should be **non-negative** as well. You **must not use** any built-in exponent function or operator. *  For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.",
    "examples": [
      {
        "input": "x = 4",
        "output": "2",
        "explanation": "The square root of 4 is 2, so we return 2."
      },
      {
        "input": "x = 8",
        "output": "2",
        "explanation": "The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned."
      }
    ],
    "constraints": [
      "`0 <= x <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "70",
    "slug": "climbing-stairs",
    "title": "Climbing Stairs",
    "difficulty": "Easy",
    "description": "You are climbing a staircase. It takes `n` steps to reach the top. Each time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?",
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb to the top."
      }
    ],
    "constraints": [
      "`1 <= n <= 45`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "71",
    "slug": "simplify-path",
    "title": "Simplify Path",
    "difficulty": "Medium",
    "description": "Given a string `path`, which is an **absolute path** (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified **canonical path**. In a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names. The **canonical path** should have the following format: *  The path starts with a single slash `'/'`. *  Any two directories are separated by a single slash `'/'`. *  The path does not end with a trailing `'/'`. *  The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`) Return _the simplified **canonical path**_.",
    "examples": [
      {
        "input": "path =  \"/home/ \"",
        "output": "\"/home \"",
        "explanation": "Note that there is no trailing slash after the last directory name."
      },
      {
        "input": "path =  \"/../ \"",
        "output": "\"/ \"",
        "explanation": "Going one level up from the root directory is a no-op, as the root level is the highest level you can go."
      },
      {
        "input": "path =  \"/home//foo/ \"",
        "output": "\"/home/foo \"",
        "explanation": "In the canonical path, multiple consecutive slashes are replaced by a single one."
      }
    ],
    "constraints": [
      "`1 <= path.length <= 3000`",
      "`path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.",
      "`path` is a valid absolute Unix path."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "72",
    "slug": "edit-distance",
    "title": "Edit Distance",
    "difficulty": "Hard",
    "description": "Given two strings `word1` and `word2`, return _the minimum number of operations required to convert `word1` to `word2`_. You have the following three operations permitted on a word: *  Insert a character *  Delete a character *  Replace a character",
    "examples": [
      {
        "input": "word1 =  \"horse \", word2 =  \"ros \"",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "word1 =  \"intention \", word2 =  \"execution \"",
        "output": "5",
        "explanation": ""
      }
    ],
    "constraints": [
      "`0 <= word1.length, word2.length <= 500`",
      "`word1` and `word2` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "73",
    "slug": "set-matrix-zeroes",
    "title": "Set Matrix Zeroes",
    "difficulty": "Medium",
    "description": "Given an `m x n` integer matrix `matrix`, if an element is `0`, set its entire row and column to `0`'s. You must do it [in place](https://en.wikipedia.org/wiki/In-place_algorithm).",
    "examples": [
      {
        "input": "matrix = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]",
        "output": "\\[\\[1,0,1\\],\\[0,0,0\\],\\[1,0,1\\]\\]"
      },
      {
        "input": "matrix = \\[\\[0,1,2,0\\],\\[3,4,5,2\\],\\[1,3,1,5\\]\\]",
        "output": "\\[\\[0,0,0,0\\],\\[0,4,5,0\\],\\[0,3,1,0\\]\\]"
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[0].length`",
      "`1 <= m, n <= 200`",
      "`-231 <= matrix[i][j] <= 231 - 1`",
      "Follow up:",
      "A straightforward solution using `O(mn)` space is probably a bad idea.",
      "A simple improvement uses `O(m + n)` space, but still not the best solution.",
      "Could you devise a constant space solution?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "74",
    "slug": "search-a-2d-matrix",
    "title": "Search a 2D Matrix",
    "difficulty": "Medium",
    "description": "You are given an `m x n` integer matrix `matrix` with the following two properties: *  Each row is sorted in non-decreasing order. *  The first integer of each row is greater than the last integer of the previous row. Given an integer `target`, return `true` _if_ `target` _is in_ `matrix` _or_ `false` _otherwise_. You must write a solution in `O(log(m * n))` time complexity.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,3,5,7\\],\\[10,11,16,20\\],\\[23,30,34,60\\]\\], target = 3",
        "output": "true"
      },
      {
        "input": "matrix = \\[\\[1,3,5,7\\],\\[10,11,16,20\\],\\[23,30,34,60\\]\\], target = 13",
        "output": "false"
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 100`",
      "`-104 <= matrix[i][j], target <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "75",
    "slug": "sort-colors",
    "title": "Sort Colors",
    "difficulty": "Medium",
    "description": "Given an array `nums` with `n` objects colored red, white, or blue, sort them **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function.",
    "examples": [
      {
        "input": "nums = \\[2,0,2,1,1,0\\]",
        "output": "\\[0,0,1,1,2,2\\]"
      },
      {
        "input": "nums = \\[2,0,1\\]",
        "output": "\\[0,1,2\\]"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 300`",
      "`nums[i]` is either `0`, `1`, or `2`.",
      "Follow up: Could you come up with a one-pass algorithm using only constant extra space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "76",
    "slug": "minimum-window-substring",
    "title": "Minimum Window Substring",
    "difficulty": "Hard",
    "description": "Given two strings `s` and `t` of lengths `m` and `n` respectively, return _the **minimum window**_ **_substring_** _of_ `s` _such that every character in_ `t` _(**including duplicates**) is included in the window_. If there is no such substring, return _the empty string_ `\" \"`. The testcases will be generated such that the answer is **unique**.",
    "examples": [
      {
        "input": "s =  \"ADOBECODEBANC \", t =  \"ABC \"",
        "output": "\"BANC \"",
        "explanation": "The minimum window substring  \"BANC \" includes 'A', 'B', and 'C' from string t."
      },
      {
        "input": "s =  \"a \", t =  \"a \"",
        "output": "\"a \"",
        "explanation": "The entire string s is the minimum window."
      },
      {
        "input": "s =  \"a \", t =  \"aa \"",
        "output": "\" \"",
        "explanation": "Both 'a's from t must be included in the window."
      }
    ],
    "constraints": [
      "`m == s.length`",
      "`n == t.length`",
      "`1 <= m, n <= 105`",
      "`s` and `t` consist of uppercase and lowercase English letters.",
      "Follow up: Could you find an algorithm that runs in `O(m + n)` time?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "77",
    "slug": "combinations",
    "title": "Combinations",
    "difficulty": "Medium",
    "description": "Given two integers `n` and `k`, return _all possible combinations of_ `k` _numbers chosen from the range_ `[1, n]`. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "n = 4, k = 2",
        "output": "\\[\\[1,2\\],\\[1,3\\],\\[1,4\\],\\[2,3\\],\\[2,4\\],\\[3,4\\]\\]",
        "explanation": "There are 4 choose 2 = 6 total combinations."
      },
      {
        "input": "n = 1, k = 1",
        "output": "\\[\\[1\\]\\]",
        "explanation": "There is 1 choose 1 = 1 total combination."
      }
    ],
    "constraints": [
      "`1 <= n <= 20`",
      "`1 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "78",
    "slug": "subsets",
    "title": "Subsets",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` of **unique** elements, return _all possible_ _subsets_ _(the power set)_. The solution set **must not** contain duplicate subsets. Return the solution in **any order**.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "\\[\\[\\],\\[1\\],\\[2\\],\\[1,2\\],\\[3\\],\\[1,3\\],\\[2,3\\],\\[1,2,3\\]\\]"
      },
      {
        "input": "nums = \\[0\\]",
        "output": "\\[\\[\\],\\[0\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 10`",
      "`-10 <= nums[i] <= 10`",
      "All the numbers of `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "79",
    "slug": "word-search",
    "title": "Word Search",
    "difficulty": "Medium",
    "description": "Given an `m x n` grid of characters `board` and a string `word`, return `true` _if_ `word` _exists in the grid_. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
    "examples": [
      {
        "input": "board = \\[\\[ \"A \", \"B \", \"C \", \"E \"\\],\\[ \"S \", \"F \", \"C \", \"S \"\\],\\[ \"A \", \"D \", \"E \", \"E \"\\]\\], word =  \"ABCCED \"",
        "output": "true"
      },
      {
        "input": "board = \\[\\[ \"A \", \"B \", \"C \", \"E \"\\],\\[ \"S \", \"F \", \"C \", \"S \"\\],\\[ \"A \", \"D \", \"E \", \"E \"\\]\\], word =  \"SEE \"",
        "output": "true"
      },
      {
        "input": "board = \\[\\[ \"A \", \"B \", \"C \", \"E \"\\],\\[ \"S \", \"F \", \"C \", \"S \"\\],\\[ \"A \", \"D \", \"E \", \"E \"\\]\\], word =  \"ABCB \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`m == board.length`",
      "`n = board[i].length`",
      "`1 <= m, n <= 6`",
      "`1 <= word.length <= 15`",
      "`board` and `word` consists of only lowercase and uppercase English letters.",
      "Follow up: Could you use search pruning to make your solution faster with a larger `board`?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "80",
    "slug": "remove-duplicates-from-sorted-array-ii",
    "title": "Remove Duplicates from Sorted Array II",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` sorted in **non-decreasing order**, remove some duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears **at most twice**. The **relative order** of the elements should be kept the **same**. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the **first part** of the array `nums`. More formally, if there are `k` elements after removing the duplicates, then the first `k` elements of `nums` should hold the final result. It does not matter what you leave beyond the first `k` elements. Return `k` _after placing the final result in the first_ `k` _slots of_ `nums`. Do **not** allocate extra space for another array. You must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory. **Custom Judge:** The judge will test your solution with the following code: int\\[\\] nums = \\[...\\]; // Input array int\\[\\] expectedNums = \\[...\\]; // The expected answer with correct length int k = removeDuplicates(nums); // Calls your implementation assert k == expectedNums.length; for (int i = 0; i < k; i++) { assert nums\\[i\\] == expectedNums\\[i\\]; } If all assertions pass, then your solution will be **accepted**.",
    "examples": [
      {
        "input": "nums = \\[1,1,1,2,2,3\\]",
        "output": "5, nums = \\[1,1,2,2,3,\\_\\]",
        "explanation": "Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively."
      },
      {
        "input": "nums = \\[0,0,1,1,1,1,2,3,3\\]",
        "output": "7, nums = \\[0,0,1,1,2,3,3,\\_,\\_\\]",
        "explanation": "Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`-104 <= nums[i] <= 104`",
      "`nums` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "81",
    "slug": "search-in-rotated-sorted-array-ii",
    "title": "Search in Rotated Sorted Array II",
    "difficulty": "Medium",
    "description": "There is an integer array `nums` sorted in non-decreasing order (not necessarily with **distinct** values). Before being passed to your function, `nums` is **rotated** at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`. Given the array `nums` **after** the rotation and an integer `target`, return `true` _if_ `target` _is in_ `nums`_, or_ `false` _if it is not in_ `nums`_._ You must decrease the overall operation steps as much as possible.",
    "examples": [
      {
        "input": "nums = \\[2,5,6,0,0,1,2\\], target = 0",
        "output": "true"
      },
      {
        "input": "nums = \\[2,5,6,0,0,1,2\\], target = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5000`",
      "`-104 <= nums[i] <= 104`",
      "`nums` is guaranteed to be rotated at some pivot.",
      "`-104 <= target <= 104`",
      "Follow up: This problem is similar to Search in Rotated Sorted Array, but `nums` may contain duplicates. Would this affect the runtime complexity? How and why?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "82",
    "slug": "remove-duplicates-from-sorted-list-ii",
    "title": "Remove Duplicates from Sorted List II",
    "difficulty": "Medium",
    "description": "Given the `head` of a sorted linked list, _delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list_. Return _the linked list **sorted** as well_.",
    "examples": [
      {
        "input": "head = \\[1,2,3,3,4,4,5\\]",
        "output": "\\[1,2,5\\]"
      },
      {
        "input": "head = \\[1,1,1,2,3\\]",
        "output": "\\[2,3\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[0, 300]`.",
      "`-100 <= Node.val <= 100`",
      "The list is guaranteed to be sorted in ascending order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "83",
    "slug": "remove-duplicates-from-sorted-list",
    "title": "Remove Duplicates from Sorted List",
    "difficulty": "Easy",
    "description": "Given the `head` of a sorted linked list, _delete all duplicates such that each element appears only once_. Return _the linked list **sorted** as well_.",
    "examples": [
      {
        "input": "head = \\[1,1,2\\]",
        "output": "\\[1,2\\]"
      },
      {
        "input": "head = \\[1,1,2,3,3\\]",
        "output": "\\[1,2,3\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[0, 300]`.",
      "`-100 <= Node.val <= 100`",
      "The list is guaranteed to be sorted in ascending order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "84",
    "slug": "largest-rectangle-in-histogram",
    "title": "Largest Rectangle in Histogram",
    "difficulty": "Hard",
    "description": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return _the area of the largest rectangle in the histogram_.",
    "examples": [
      {
        "input": "heights = \\[2,1,5,6,2,3\\]",
        "output": "10",
        "explanation": "The above is a histogram where width of each bar is 1."
      },
      {
        "input": "heights = \\[2,4\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= heights.length <= 105`",
      "`0 <= heights[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "85",
    "slug": "maximal-rectangle",
    "title": "Maximal Rectangle",
    "difficulty": "Hard",
    "description": "Given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return _its area_.",
    "examples": [
      {
        "input": "matrix = \\[\\[ \"1 \", \"0 \", \"1 \", \"0 \", \"0 \"\\],\\[ \"1 \", \"0 \", \"1 \", \"1 \", \"1 \"\\],\\[ \"1 \", \"1 \", \"1 \", \"1 \", \"1 \"\\],\\[ \"1 \", \"0 \", \"0 \", \"1 \", \"0 \"\\]\\]",
        "output": "6",
        "explanation": "The maximal rectangle is shown in the above picture."
      },
      {
        "input": "matrix = \\[\\[ \"0 \"\\]\\]",
        "output": "0"
      },
      {
        "input": "matrix = \\[\\[ \"1 \"\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`rows == matrix.length`",
      "`cols == matrix[i].length`",
      "`1 <= row, cols <= 200`",
      "`matrix[i][j]` is `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "86",
    "slug": "partition-list",
    "title": "Partition List",
    "difficulty": "Medium",
    "description": "Given the `head` of a linked list and a value `x`, partition it such that all nodes **less than** `x` come before nodes **greater than or equal** to `x`. You should **preserve** the original relative order of the nodes in each of the two partitions.",
    "examples": [
      {
        "input": "head = \\[1,4,3,2,5,2\\], x = 3",
        "output": "\\[1,2,2,4,3,5\\]"
      },
      {
        "input": "head = \\[2,1\\], x = 2",
        "output": "\\[1,2\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[0, 200]`.",
      "`-100 <= Node.val <= 100`",
      "`-200 <= x <= 200`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "87",
    "slug": "scramble-string",
    "title": "Scramble String",
    "difficulty": "Hard",
    "description": "We can scramble a string s to get a string t using the following algorithm: 1. If the length of the string is 1, stop. 2. If the length of the string is > 1, do the following: *  Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`. *  **Randomly** decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`. *  Apply step 1 recursively on each of the two substrings `x` and `y`. Given two strings `s1` and `s2` of **the same length**, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.",
    "examples": [
      {
        "input": "s1 =  \"great \", s2 =  \"rgeat \"",
        "output": "true",
        "explanation": "One possible scenario applied on s1 is:"
      },
      {
        "input": "s1 =  \"abcde \", s2 =  \"caebd \"",
        "output": "false"
      },
      {
        "input": "s1 =  \"a \", s2 =  \"a \"",
        "output": "true"
      }
    ],
    "constraints": [
      "`s1.length == s2.length`",
      "`1 <= s1.length <= 30`",
      "`s1` and `s2` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "88",
    "slug": "merge-sorted-array",
    "title": "Merge Sorted Array",
    "difficulty": "Easy",
    "description": "You are given two integer arrays `nums1` and `nums2`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively. **Merge** `nums1` and `nums2` into a single array sorted in **non-decreasing order**. The final sorted array should not be returned by the function, but instead be _stored inside the array_ `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.",
    "examples": [
      {
        "input": "nums1 = \\[1,2,3,0,0,0\\], m = 3, nums2 = \\[2,5,6\\], n = 3",
        "output": "\\[1,2,2,3,5,6\\]",
        "explanation": "The arrays we are merging are \\[1,2,3\\] and \\[2,5,6\\]."
      },
      {
        "input": "nums1 = \\[1\\], m = 1, nums2 = \\[\\], n = 0",
        "output": "\\[1\\]",
        "explanation": "The arrays we are merging are \\[1\\] and \\[\\]."
      },
      {
        "input": "nums1 = \\[0\\], m = 0, nums2 = \\[1\\], n = 1",
        "output": "\\[1\\]",
        "explanation": "The arrays we are merging are \\[\\] and \\[1\\]."
      }
    ],
    "constraints": [
      "`nums1.length == m + n`",
      "`nums2.length == n`",
      "`0 <= m, n <= 200`",
      "`1 <= m + n <= 200`",
      "`-109 <= nums1[i], nums2[j] <= 109`",
      "Follow up: Can you come up with an algorithm that runs in `O(m + n)` time?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "89",
    "slug": "gray-code",
    "title": "Gray Code",
    "difficulty": "Medium",
    "description": "An **n-bit gray code sequence** is a sequence of `2n` integers where: *  Every integer is in the **inclusive** range `[0, 2n - 1]`, *  The first integer is `0`, *  An integer appears **no more than once** in the sequence, *  The binary representation of every pair of **adjacent** integers differs by **exactly one bit**, and *  The binary representation of the **first** and **last** integers differs by **exactly one bit**. Given an integer `n`, return _any valid **n-bit gray code sequence**_.",
    "examples": [
      {
        "input": "n = 2",
        "output": "\\[0,1,3,2\\]",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "\\[0,1\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 16`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "90",
    "slug": "subsets-ii",
    "title": "Subsets II",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` that may contain duplicates, return _all possible_ _subsets_ _(the power set)_. The solution set **must not** contain duplicate subsets. Return the solution in **any order**.",
    "examples": [
      {
        "input": "nums = \\[1,2,2\\]",
        "output": "\\[\\[\\],\\[1\\],\\[1,2\\],\\[1,2,2\\],\\[2\\],\\[2,2\\]\\]"
      },
      {
        "input": "nums = \\[0\\]",
        "output": "\\[\\[\\],\\[0\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 10`",
      "`-10 <= nums[i] <= 10`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "91",
    "slug": "decode-ways",
    "title": "Decode Ways",
    "difficulty": "Medium",
    "description": "A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping: 'A' -> \"1 \" 'B' -> \"2 \" ... 'Z' -> \"26 \" To **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106 \"` can be mapped into: *  `\"AAJF \"` with the grouping `(1 1 10 6)` *  `\"KJF \"` with the grouping `(11 10 6)` Note that the grouping `(1 11 06)` is invalid because `\"06 \"` cannot be mapped into `'F'` since `\"6 \"` is different from `\"06 \"`. Given a string `s` containing only digits, return _the **number** of ways to **decode** it_. The test cases are generated so that the answer fits in a **32-bit** integer.",
    "examples": [
      {
        "input": "s =  \"12 \"",
        "output": "2",
        "explanation": "\"12 \" could be decoded as  \"AB \" (1 2) or  \"L \" (12)."
      },
      {
        "input": "s =  \"226 \"",
        "output": "3",
        "explanation": "\"226 \" could be decoded as  \"BZ \" (2 26),  \"VF \" (22 6), or  \"BBF \" (2 2 6)."
      },
      {
        "input": "s =  \"06 \"",
        "output": "0",
        "explanation": "\"06 \" cannot be mapped to  \"F \" because of the leading zero ( \"6 \" is different from  \"06 \")."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` contains only digits and may contain leading zero(s)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "92",
    "slug": "reverse-linked-list-ii",
    "title": "Reverse Linked List II",
    "difficulty": "Medium",
    "description": "Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return _the reversed list_.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5\\], left = 2, right = 4",
        "output": "\\[1,4,3,2,5\\]"
      },
      {
        "input": "head = \\[5\\], left = 1, right = 1",
        "output": "\\[5\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is `n`.",
      "`1 <= n <= 500`",
      "`-500 <= Node.val <= 500`",
      "`1 <= left <= right <= n`",
      "Follow up: Could you do it in one pass?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "93",
    "slug": "restore-ip-addresses",
    "title": "Restore IP Addresses",
    "difficulty": "Medium",
    "description": "A **valid IP address** consists of exactly four integers separated by single dots. Each integer is between `0` and `255` (**inclusive**) and cannot have leading zeros. *  For example, `\"0.1.2.201 \"` and `\"192.168.1.1 \"` are **valid** IP addresses, but `\"0.011.255.245 \"`, `\"192.168.1.312 \"` and `\"192.168@1.1 \"` are **invalid** IP addresses. Given a string `s` containing only digits, return _all possible valid IP addresses that can be formed by inserting dots into_ `s`. You are **not** allowed to reorder or remove any digits in `s`. You may return the valid IP addresses in **any** order.",
    "examples": [
      {
        "input": "s =  \"25525511135 \"",
        "output": "\\[ \"255.255.11.135 \", \"255.255.111.35 \"\\]"
      },
      {
        "input": "s =  \"0000 \"",
        "output": "\\[ \"0.0.0.0 \"\\]"
      },
      {
        "input": "s =  \"101023 \"",
        "output": "\\[ \"1.0.10.23 \", \"1.0.102.3 \", \"10.1.0.23 \", \"10.10.2.3 \", \"101.0.2.3 \"\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 20`",
      "`s` consists of digits only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "94",
    "slug": "binary-tree-inorder-traversal",
    "title": "Binary Tree Inorder Traversal",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, return _the inorder traversal of its nodes' values_.",
    "examples": [
      {
        "input": "root = \\[1,null,2,3\\]",
        "output": "\\[1,3,2\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 100]`.",
      "`-100 <= Node.val <= 100`",
      "Follow up: Recursive solution is trivial, could you do it iteratively?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "95",
    "slug": "unique-binary-search-trees-ii",
    "title": "Unique Binary Search Trees II",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _all the structurally unique **BST'**s (binary search trees), which has exactly_ `n` _nodes of unique values from_ `1` _to_ `n`. Return the answer in **any order**.",
    "examples": [
      {
        "input": "n = 3",
        "output": "\\[\\[1,null,2,null,3\\],\\[1,null,3,2\\],\\[2,1,3\\],\\[3,1,null,null,2\\],\\[3,2,null,1\\]\\]"
      },
      {
        "input": "n = 1",
        "output": "\\[\\[1\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 8`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "96",
    "slug": "unique-binary-search-trees",
    "title": "Unique Binary Search Trees",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _the number of structurally unique **BST'**s (binary search trees) which has exactly_ `n` _nodes of unique values from_ `1` _to_ `n`.",
    "examples": [
      {
        "input": "n = 3",
        "output": "5"
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 19`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "97",
    "slug": "interleaving-string",
    "title": "Interleaving String",
    "difficulty": "Medium",
    "description": "Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an **interleaving** of `s1` and `s2`. An **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that: *  `s = s1 + s2 + ... + sn` *  `t = t1 + t2 + ... + tm` *  `|n - m| <= 1` *  The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`",
    "examples": [
      {
        "input": "s1 =  \"aabcc \", s2 =  \"dbbca \", s3 =  \"aadbbcbcac \"",
        "output": "true",
        "explanation": "One way to obtain s3 is:"
      },
      {
        "input": "s1 =  \"aabcc \", s2 =  \"dbbca \", s3 =  \"aadbbbaccc \"",
        "output": "false",
        "explanation": "Notice how it is impossible to interleave s2 with any other string to obtain s3."
      },
      {
        "input": "s1 =  \" \", s2 =  \" \", s3 =  \" \"",
        "output": "true"
      }
    ],
    "constraints": [
      "`0 <= s1.length, s2.length <= 100`",
      "`0 <= s3.length <= 200`",
      "`s1`, `s2`, and `s3` consist of lowercase English letters.",
      "Follow up: Could you solve it using only `O(s2.length)` additional memory space?"
    ],
    "note": "`a + b` is the concatenation of strings `a` and `b`.",
    "follow_up": null
  },
  {
    "id": "98",
    "slug": "validate-binary-search-tree",
    "title": "Validate Binary Search Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, _determine if it is a valid binary search tree (BST)_. A **valid BST** is defined as follows: *  The left subtree of a node contains only nodes with keys **less than** the node's key. *  The right subtree of a node contains only nodes with keys **greater than** the node's key. *  Both the left and right subtrees must also be binary search trees.",
    "examples": [
      {
        "input": "root = \\[2,1,3\\]",
        "output": "true"
      },
      {
        "input": "root = \\[5,1,4,null,null,3,6\\]",
        "output": "false",
        "explanation": "The root node's value is 5 but its right child's value is 4."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-231 <= Node.val <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "99",
    "slug": "recover-binary-search-tree",
    "title": "Recover Binary Search Tree",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary search tree (BST), where the values of **exactly** two nodes of the tree were swapped by mistake. _Recover the tree without changing its structure_.",
    "examples": [
      {
        "input": "root = \\[1,3,null,null,2\\]",
        "output": "\\[3,1,null,null,2\\]",
        "explanation": "3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid."
      },
      {
        "input": "root = \\[3,1,4,null,null,2\\]",
        "output": "\\[2,1,4,null,null,3\\]",
        "explanation": "2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 1000]`.",
      "`-231 <= Node.val <= 231 - 1`",
      "Follow up: A solution using `O(n)` space is pretty straight-forward. Could you devise a constant `O(1)` space solution?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "100",
    "slug": "same-tree",
    "title": "Same Tree",
    "difficulty": "Easy",
    "description": "Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
    "examples": [
      {
        "input": "p = \\[1,2,3\\], q = \\[1,2,3\\]",
        "output": "true"
      },
      {
        "input": "p = \\[1,2\\], q = \\[1,null,2\\]",
        "output": "false"
      },
      {
        "input": "p = \\[1,2,1\\], q = \\[1,1,2\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in both trees is in the range `[0, 100]`.",
      "`-104 <= Node.val <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "101",
    "slug": "symmetric-tree",
    "title": "Symmetric Tree",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, _check whether it is a mirror of itself_ (i.e., symmetric around its center).",
    "examples": [
      {
        "input": "root = \\[1,2,2,3,4,4,3\\]",
        "output": "true"
      },
      {
        "input": "root = \\[1,2,2,null,3,null,3\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 1000]`.",
      "`-100 <= Node.val <= 100`",
      "Follow up: Could you solve it both recursively and iteratively?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "102",
    "slug": "binary-tree-level-order-traversal",
    "title": "Binary Tree Level Order Traversal",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the level order traversal of its nodes' values_. (i.e., from left to right, level by level).",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "\\[\\[3\\],\\[9,20\\],\\[15,7\\]\\]"
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[\\[1\\]\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 2000]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "103",
    "slug": "binary-tree-zigzag-level-order-traversal",
    "title": "Binary Tree Zigzag Level Order Traversal",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the zigzag level order traversal of its nodes' values_. (i.e., from left to right, then right to left for the next level and alternate between).",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "\\[\\[3\\],\\[20,9\\],\\[15,7\\]\\]"
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[\\[1\\]\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 2000]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "104",
    "slug": "maximum-depth-of-binary-tree",
    "title": "Maximum Depth of Binary Tree",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, return _its maximum depth_. A binary tree's **maximum depth** is the number of nodes along the longest path from the root node down to the farthest leaf node.",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "3"
      },
      {
        "input": "root = \\[1,null,2\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "105",
    "slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "difficulty": "Medium",
    "description": "Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return _the binary tree_.",
    "examples": [
      {
        "input": "preorder = \\[3,9,20,15,7\\], inorder = \\[9,3,15,20,7\\]",
        "output": "\\[3,9,20,null,null,15,7\\]"
      },
      {
        "input": "preorder = \\[-1\\], inorder = \\[-1\\]",
        "output": "\\[-1\\]"
      }
    ],
    "constraints": [
      "`1 <= preorder.length <= 3000`",
      "`inorder.length == preorder.length`",
      "`-3000 <= preorder[i], inorder[i] <= 3000`",
      "`preorder` and `inorder` consist of unique values.",
      "Each value of `inorder` also appears in `preorder`.",
      "`preorder` is guaranteed to be the preorder traversal of the tree.",
      "`inorder` is guaranteed to be the inorder traversal of the tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "106",
    "slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
    "title": "Construct Binary Tree from Inorder and Postorder Traversal",
    "difficulty": "Medium",
    "description": "Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return _the binary tree_.",
    "examples": [
      {
        "input": "inorder = \\[9,3,15,20,7\\], postorder = \\[9,15,7,20,3\\]",
        "output": "\\[3,9,20,null,null,15,7\\]"
      },
      {
        "input": "inorder = \\[-1\\], postorder = \\[-1\\]",
        "output": "\\[-1\\]"
      }
    ],
    "constraints": [
      "`1 <= inorder.length <= 3000`",
      "`postorder.length == inorder.length`",
      "`-3000 <= inorder[i], postorder[i] <= 3000`",
      "`inorder` and `postorder` consist of unique values.",
      "Each value of `postorder` also appears in `inorder`.",
      "`inorder` is guaranteed to be the inorder traversal of the tree.",
      "`postorder` is guaranteed to be the postorder traversal of the tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "107",
    "slug": "binary-tree-level-order-traversal-ii",
    "title": "Binary Tree Level Order Traversal II",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the bottom-up level order traversal of its nodes' values_. (i.e., from left to right, level by level from leaf to root).",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "\\[\\[15,7\\],\\[9,20\\],\\[3\\]\\]"
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[\\[1\\]\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 2000]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "108",
    "slug": "convert-sorted-array-to-binary-search-tree",
    "title": "Convert Sorted Array to Binary Search Tree",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` where the elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.",
    "examples": [
      {
        "input": "nums = \\[-10,-3,0,5,9\\]",
        "output": "\\[0,-3,9,-10,null,5\\]",
        "explanation": "\\[0,-10,5,null,-3,null,9\\] is also accepted:"
      },
      {
        "input": "nums = \\[1,3\\]",
        "output": "\\[3,1\\]",
        "explanation": "\\[1,null,3\\] and \\[3,1\\] are both height-balanced BSTs."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-104 <= nums[i] <= 104`",
      "`nums` is sorted in a strictly increasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "109",
    "slug": "convert-sorted-list-to-binary-search-tree",
    "title": "Convert Sorted List to Binary Search Tree",
    "difficulty": "Medium",
    "description": "Given the `head` of a singly linked list where elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.",
    "examples": [
      {
        "input": "head = \\[-10,-3,0,5,9\\]",
        "output": "\\[0,-3,9,-10,null,5\\]",
        "explanation": "One possible answer is \\[0,-3,9,-10,null,5\\], which represents the shown height balanced BST."
      },
      {
        "input": "head = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in `head` is in the range `[0, 2  104]`.",
      "`-105 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "110",
    "slug": "balanced-binary-tree",
    "title": "Balanced Binary Tree",
    "difficulty": "Easy",
    "description": "Given a binary tree, determine if it is **height-balanced**.",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "true"
      },
      {
        "input": "root = \\[1,2,2,3,3,null,null,4,4\\]",
        "output": "false"
      },
      {
        "input": "root = \\[\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 5000]`.",
      "`-104 <= Node.val <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "111",
    "slug": "minimum-depth-of-binary-tree",
    "title": "Minimum Depth of Binary Tree",
    "difficulty": "Easy",
    "description": "Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "2"
      },
      {
        "input": "root = \\[2,null,3,null,4,null,5,null,6\\]",
        "output": "5"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 105]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": "A leaf is a node with no children.",
    "follow_up": null
  },
  {
    "id": "112",
    "slug": "path-sum",
    "title": "Path Sum",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a **root-to-leaf** path such that adding up all the values along the path equals `targetSum`. A **leaf** is a node with no children.",
    "examples": [
      {
        "input": "root = \\[5,4,8,11,null,13,4,7,2,null,null,null,1\\], targetSum = 22",
        "output": "true",
        "explanation": "The root-to-leaf path with the target sum is shown."
      },
      {
        "input": "root = \\[1,2,3\\], targetSum = 5",
        "output": "false",
        "explanation": "There two root-to-leaf paths in the tree:"
      },
      {
        "input": "root = \\[\\], targetSum = 0",
        "output": "false",
        "explanation": "Since the tree is empty, there are no root-to-leaf paths."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 5000]`.",
      "`-1000 <= Node.val <= 1000`",
      "`-1000 <= targetSum <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "113",
    "slug": "path-sum-ii",
    "title": "Path Sum II",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree and an integer `targetSum`, return _all **root-to-leaf** paths where the sum of the node values in the path equals_ `targetSum`_. Each path should be returned as a list of the node **values**, not node references_. A **root-to-leaf** path is a path starting from the root and ending at any leaf node. A **leaf** is a node with no children.",
    "examples": [
      {
        "input": "root = \\[5,4,8,11,null,13,4,7,2,null,null,5,1\\], targetSum = 22",
        "output": "\\[\\[5,4,11,2\\],\\[5,8,4,5\\]\\]",
        "explanation": "There are two paths whose sum equals targetSum:"
      },
      {
        "input": "root = \\[1,2,3\\], targetSum = 5",
        "output": "\\[\\]"
      },
      {
        "input": "root = \\[1,2\\], targetSum = 0",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 5000]`.",
      "`-1000 <= Node.val <= 1000`",
      "`-1000 <= targetSum <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "114",
    "slug": "flatten-binary-tree-to-linked-list",
    "title": "Flatten Binary Tree to Linked List",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, flatten the tree into a \"linked list \": *  The \"linked list \" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`. *  The \"linked list \" should be in the same order as a [**pre-order** **traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) of the binary tree.",
    "examples": [
      {
        "input": "root = \\[1,2,5,3,4,null,6\\]",
        "output": "\\[1,null,2,null,3,null,4,null,5,null,6\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      },
      {
        "input": "root = \\[0\\]",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 2000]`.",
      "`-100 <= Node.val <= 100`",
      "Follow up: Can you flatten the tree in-place (with `O(1)` extra space)?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "115",
    "slug": "distinct-subsequences",
    "title": "Distinct Subsequences",
    "difficulty": "Hard",
    "description": "Given two strings `s` and `t`, return _the number of distinct_ **_subsequences_** _of_ `s` _which equals_ `t`. The test cases are generated so that the answer fits on a 32-bit signed integer.",
    "examples": [
      {
        "input": "s =  \"rabbbit \", t =  \"rabbit \"",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "s =  \"babgbag \", t =  \"bag \"",
        "output": "5",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length, t.length <= 1000`",
      "`s` and `t` consist of English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "116",
    "slug": "populating-next-right-pointers-in-each-node",
    "title": "Populating Next Right Pointers in Each Node",
    "difficulty": "Medium",
    "description": "You are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition: struct Node { int val; Node \\*left; Node \\*right; Node \\*next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`. Initially, all next pointers are set to `NULL`.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5,6,7\\]",
        "output": "\\[1,#,2,3,#,4,5,6,7,#\\]",
        "explanation": "Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 212 - 1]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": ""
  },
  {
    "id": "117",
    "slug": "populating-next-right-pointers-in-each-node-ii",
    "title": "Populating Next Right Pointers in Each Node II",
    "difficulty": "Medium",
    "description": "Given a binary tree struct Node { int val; Node \\*left; Node \\*right; Node \\*next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`. Initially, all next pointers are set to `NULL`.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5,null,7\\]",
        "output": "\\[1,#,2,3,#,4,5,7,#\\]",
        "explanation": "Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 6000]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": ""
  },
  {
    "id": "118",
    "slug": "pascals-triangle",
    "title": "Pascal's Triangle",
    "difficulty": "Easy",
    "description": "Given an integer `numRows`, return the first numRows of **Pascal's triangle**. In **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:",
    "examples": [
      {
        "input": "numRows = 5",
        "output": "\\[\\[1\\],\\[1,1\\],\\[1,2,1\\],\\[1,3,3,1\\],\\[1,4,6,4,1\\]\\]"
      },
      {
        "input": "numRows = 1",
        "output": "\\[\\[1\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= numRows <= 30`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "119",
    "slug": "pascals-triangle-ii",
    "title": "Pascal's Triangle II",
    "difficulty": "Easy",
    "description": "Given an integer `rowIndex`, return the `rowIndexth` (**0-indexed**) row of the **Pascal's triangle**. In **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:",
    "examples": [
      {
        "input": "rowIndex = 3",
        "output": "\\[1,3,3,1\\]"
      },
      {
        "input": "rowIndex = 0",
        "output": "\\[1\\]"
      },
      {
        "input": "rowIndex = 1",
        "output": "\\[1,1\\]"
      }
    ],
    "constraints": [
      "`0 <= rowIndex <= 33`",
      "Follow up: Could you optimize your algorithm to use only `O(rowIndex)` extra space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "120",
    "slug": "triangle",
    "title": "Triangle",
    "difficulty": "Medium",
    "description": "Given a `triangle` array, return _the minimum path sum from top to bottom_. For each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.",
    "examples": [
      {
        "input": "triangle = \\[\\[2\\],\\[3,4\\],\\[6,5,7\\],\\[4,1,8,3\\]\\]",
        "output": "11",
        "explanation": "The triangle looks like:"
      },
      {
        "input": "triangle = \\[\\[-10\\]\\]",
        "output": "-10"
      }
    ],
    "constraints": [
      "`1 <= triangle.length <= 200`",
      "`triangle[0].length == 1`",
      "`triangle[i].length == triangle[i - 1].length + 1`",
      "`-104 <= triangle[i][j] <= 104`",
      "Follow up: Could you do this using only `O(n)` extra space, where `n` is the total number of rows in the triangle?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "121",
    "slug": "best-time-to-buy-and-sell-stock",
    "title": "Best Time to Buy and Sell Stock",
    "difficulty": "Easy",
    "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. You want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock. Return _the maximum profit you can achieve from this transaction_. If you cannot achieve any profit, return `0`.",
    "examples": [
      {
        "input": "prices = \\[7,1,5,3,6,4\\]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
      },
      {
        "input": "prices = \\[7,6,4,3,1\\]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "constraints": [
      "`1 <= prices.length <= 105`",
      "`0 <= prices[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "122",
    "slug": "best-time-to-buy-and-sell-stock-ii",
    "title": "Best Time to Buy and Sell Stock II",
    "difficulty": "Medium",
    "description": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day. On each day, you may decide to buy and/or sell the stock. You can only hold **at most one** share of the stock at any time. However, you can buy it then immediately sell it on the **same day**. Find and return _the **maximum** profit you can achieve_.",
    "examples": [
      {
        "input": "prices = \\[7,1,5,3,6,4\\]",
        "output": "7",
        "explanation": "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4."
      },
      {
        "input": "prices = \\[1,2,3,4,5\\]",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4."
      },
      {
        "input": "prices = \\[7,6,4,3,1\\]",
        "output": "0",
        "explanation": "There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0."
      }
    ],
    "constraints": [
      "`1 <= prices.length <= 3  104`",
      "`0 <= prices[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "123",
    "slug": "best-time-to-buy-and-sell-stock-iii",
    "title": "Best Time to Buy and Sell Stock III",
    "difficulty": "Hard",
    "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. Find the maximum profit you can achieve. You may complete **at most two transactions**.",
    "examples": [
      {
        "input": "prices = \\[3,3,5,0,0,3,1,4\\]",
        "output": "6",
        "explanation": "Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3."
      },
      {
        "input": "prices = \\[1,2,3,4,5\\]",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4."
      },
      {
        "input": "prices = \\[7,6,4,3,1\\]",
        "output": "0",
        "explanation": "In this case, no transaction is done, i.e. max profit = 0."
      }
    ],
    "constraints": [
      "`1 <= prices.length <= 105`",
      "`0 <= prices[i] <= 105`"
    ],
    "note": "You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "follow_up": null
  },
  {
    "id": "124",
    "slug": "binary-tree-maximum-path-sum",
    "title": "Binary Tree Maximum Path Sum",
    "difficulty": "Hard",
    "description": "A **path** in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence **at most once**. Note that the path does not need to pass through the root. The **path sum** of a path is the sum of the node's values in the path. Given the `root` of a binary tree, return _the maximum **path sum** of any **non-empty** path_.",
    "examples": [
      {
        "input": "root = \\[1,2,3\\]",
        "output": "6",
        "explanation": "The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6."
      },
      {
        "input": "root = \\[-10,9,20,null,null,15,7\\]",
        "output": "42",
        "explanation": "The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 3  104]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "125",
    "slug": "valid-palindrome",
    "title": "Valid Palindrome",
    "difficulty": "Easy",
    "description": "A phrase is a **palindrome** if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers. Given a string `s`, return `true` _if it is a **palindrome**, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "s =  \"A man, a plan, a canal: Panama \"",
        "output": "true",
        "explanation": "\"amanaplanacanalpanama \" is a palindrome."
      },
      {
        "input": "s =  \"race a car \"",
        "output": "false",
        "explanation": "\"raceacar \" is not a palindrome."
      },
      {
        "input": "s =  \"  \"",
        "output": "true",
        "explanation": "s is an empty string  \" \" after removing non-alphanumeric characters."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 2  105`",
      "`s` consists only of printable ASCII characters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "126",
    "slug": "word-ladder-ii",
    "title": "Word Ladder II",
    "difficulty": "Hard",
    "description": "A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that: *  Every adjacent pair of words differs by a single letter. *  Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`. *  `sk == endWord` Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _all the **shortest transformation sequences** from_ `beginWord` _to_ `endWord`_, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words_ `[beginWord, s1, s2, ..., sk]`.",
    "examples": [
      {
        "input": "beginWord =  \"hit \", endWord =  \"cog \", wordList = \\[ \"hot \", \"dot \", \"dog \", \"lot \", \"log \", \"cog \"\\]",
        "output": "\\[\\[ \"hit \", \"hot \", \"dot \", \"dog \", \"cog \"\\],\\[ \"hit \", \"hot \", \"lot \", \"log \", \"cog \"\\]\\]",
        "explanation": "There are 2 shortest transformation sequences:"
      },
      {
        "input": "beginWord =  \"hit \", endWord =  \"cog \", wordList = \\[ \"hot \", \"dot \", \"dog \", \"lot \", \"log \"\\]",
        "output": "\\[\\]",
        "explanation": "The endWord  \"cog \" is not in wordList, therefore there is no valid transformation sequence."
      }
    ],
    "constraints": [
      "`1 <= beginWord.length <= 5`",
      "`endWord.length == beginWord.length`",
      "`1 <= wordList.length <= 500`",
      "`wordList[i].length == beginWord.length`",
      "`beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.",
      "`beginWord != endWord`",
      "All the words in `wordList` are unique.",
      "The sum of all shortest transformation sequences does not exceed `105`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "127",
    "slug": "word-ladder",
    "title": "Word Ladder",
    "difficulty": "Hard",
    "description": "A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that: *  Every adjacent pair of words differs by a single letter. *  Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`. *  `sk == endWord` Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _the **number of words** in the **shortest transformation sequence** from_ `beginWord` _to_ `endWord`_, or_ `0` _if no such sequence exists._",
    "examples": [
      {
        "input": "beginWord =  \"hit \", endWord =  \"cog \", wordList = \\[ \"hot \", \"dot \", \"dog \", \"lot \", \"log \", \"cog \"\\]",
        "output": "5",
        "explanation": "One shortest transformation sequence is  \"hit \" ->  \"hot \" ->  \"dot \" ->  \"dog \" -> cog \", which is 5 words long."
      },
      {
        "input": "beginWord =  \"hit \", endWord =  \"cog \", wordList = \\[ \"hot \", \"dot \", \"dog \", \"lot \", \"log \"\\]",
        "output": "0",
        "explanation": "The endWord  \"cog \" is not in wordList, therefore there is no valid transformation sequence."
      }
    ],
    "constraints": [
      "`1 <= beginWord.length <= 10`",
      "`endWord.length == beginWord.length`",
      "`1 <= wordList.length <= 5000`",
      "`wordList[i].length == beginWord.length`",
      "`beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.",
      "`beginWord != endWord`",
      "All the words in `wordList` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "128",
    "slug": "longest-consecutive-sequence",
    "title": "Longest Consecutive Sequence",
    "difficulty": "Medium",
    "description": "Given an unsorted array of integers `nums`, return _the length of the longest consecutive elements sequence._ You must write an algorithm that runs in `O(n)` time.",
    "examples": [
      {
        "input": "nums = \\[100,4,200,1,3,2\\]",
        "output": "4",
        "explanation": "The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4."
      },
      {
        "input": "nums = \\[0,3,7,2,5,8,4,6,0,1\\]",
        "output": "9"
      }
    ],
    "constraints": [
      "`0 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "129",
    "slug": "sum-root-to-leaf-numbers",
    "title": "Sum Root to Leaf Numbers",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary tree containing digits from `0` to `9` only. Each root-to-leaf path in the tree represents a number. *  For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`. Return _the total sum of all root-to-leaf numbers_. Test cases are generated so that the answer will fit in a **32-bit** integer. A **leaf** node is a node with no children.",
    "examples": [
      {
        "input": "root = \\[1,2,3\\]",
        "output": "25",
        "explanation": ""
      },
      {
        "input": "root = \\[4,9,0,5,1\\]",
        "output": "1026",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 1000]`.",
      "`0 <= Node.val <= 9`",
      "The depth of the tree will not exceed `10`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "130",
    "slug": "surrounded-regions",
    "title": "Surrounded Regions",
    "difficulty": "Medium",
    "description": "Given an `m x n` matrix `board` containing `'X'` and `'O'`, _capture all regions that are 4-directionally surrounded by_ `'X'`. A region is **captured** by flipping all `'O'`s into `'X'`s in that surrounded region.",
    "examples": [
      {
        "input": "board = \\[\\[ \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"O \", \"O \", \"X \"\\],\\[ \"X \", \"X \", \"O \", \"X \"\\],\\[ \"X \", \"O \", \"X \", \"X \"\\]\\]",
        "output": "\\[\\[ \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"O \", \"X \", \"X \"\\]\\]",
        "explanation": "Notice that an 'O' should not be flipped if:"
      },
      {
        "input": "board = \\[\\[ \"X \"\\]\\]",
        "output": "\\[\\[ \"X \"\\]\\]"
      }
    ],
    "constraints": [
      "`m == board.length`",
      "`n == board[i].length`",
      "`1 <= m, n <= 200`",
      "`board[i][j]` is `'X'` or `'O'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "131",
    "slug": "palindrome-partitioning",
    "title": "Palindrome Partitioning",
    "difficulty": "Medium",
    "description": "Given a string `s`, partition `s` such that every substring of the partition is a **palindrome**. Return _all possible palindrome partitioning of_ `s`.",
    "examples": [
      {
        "input": "s = \"aab\"",
        "output": "\\[\\[\"a\",\"a\",\"b\"\\],\\[\"aa\",\"b\"\\]\\]"
      },
      {
        "input": "s = \"a\"",
        "output": "\\[\\[\"a\"\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 16`",
      "`s` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "132",
    "slug": "palindrome-partitioning-ii",
    "title": "Palindrome Partitioning II",
    "difficulty": "Hard",
    "description": "Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return _the **minimum** cuts needed for a palindrome partitioning of_ `s`.",
    "examples": [
      {
        "input": "s =  \"aab \"",
        "output": "1",
        "explanation": "The palindrome partitioning \\[ \"aa \", \"b \"\\] could be produced using 1 cut."
      },
      {
        "input": "s =  \"a \"",
        "output": "0"
      },
      {
        "input": "s =  \"ab \"",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 2000`",
      "`s` consists of lowercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "133",
    "slug": "clone-graph",
    "title": "Clone Graph",
    "difficulty": "Medium",
    "description": "Given a reference of a node in a **[connected](https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph)** undirected graph. Return a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the graph. Each node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors. class Node { public int val; public List neighbors; } **Test case format:** For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with `val == 1`, the second node with `val == 2`, and so on. The graph is represented in the test case using an adjacency list. **An adjacency list** is a collection of unordered **lists** used to represent a finite graph. Each list describes the set of neighbors of a node in the graph. The given node will always be the first node with `val = 1`. You must return the **copy of the given node** as a reference to the cloned graph.",
    "examples": [
      {
        "input": "adjList = \\[\\[2,4\\],\\[1,3\\],\\[2,4\\],\\[1,3\\]\\]",
        "output": "\\[\\[2,4\\],\\[1,3\\],\\[2,4\\],\\[1,3\\]\\]",
        "explanation": "There are 4 nodes in the graph."
      },
      {
        "input": "adjList = \\[\\[\\]\\]",
        "output": "\\[\\[\\]\\]",
        "explanation": "Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors."
      },
      {
        "input": "adjList = \\[\\]",
        "output": "\\[\\]",
        "explanation": "This an empty graph, it does not have any nodes."
      }
    ],
    "constraints": [
      "The number of nodes in the graph is in the range `[0, 100]`.",
      "`1 <= Node.val <= 100`",
      "`Node.val` is unique for each node.",
      "There are no repeated edges and no self-loops in the graph.",
      "The Graph is connected and all nodes can be visited starting from the given node."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "134",
    "slug": "gas-station",
    "title": "Gas Station",
    "difficulty": "Medium",
    "description": "There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`. You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations. Given two integer arrays `gas` and `cost`, return _the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return_ `-1`. If there exists a solution, it is **guaranteed** to be **unique**",
    "examples": [
      {
        "input": "gas = \\[1,2,3,4,5\\], cost = \\[3,4,5,1,2\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "gas = \\[2,3,4\\], cost = \\[3,4,3\\]",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == gas.length == cost.length`",
      "`1 <= n <= 105`",
      "`0 <= gas[i], cost[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "135",
    "slug": "candy",
    "title": "Candy",
    "difficulty": "Hard",
    "description": "There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`. You are giving candies to these children subjected to the following requirements: *  Each child must have at least one candy. *  Children with a higher rating get more candies than their neighbors. Return _the minimum number of candies you need to have to distribute the candies to the children_.",
    "examples": [
      {
        "input": "ratings = \\[1,0,2\\]",
        "output": "5",
        "explanation": "You can allocate to the first, second and third child with 2, 1, 2 candies respectively."
      },
      {
        "input": "ratings = \\[1,2,2\\]",
        "output": "4",
        "explanation": "You can allocate to the first, second and third child with 1, 2, 1 candies respectively."
      }
    ],
    "constraints": [
      "`n == ratings.length`",
      "`1 <= n <= 2  104`",
      "`0 <= ratings[i] <= 2  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "136",
    "slug": "single-number",
    "title": "Single Number",
    "difficulty": "Easy",
    "description": "Given a **non-empty** array of integers `nums`, every element appears _twice_ except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.",
    "examples": [
      {
        "input": "nums = \\[2,2,1\\]",
        "output": "1"
      },
      {
        "input": "nums = \\[4,1,2,1,2\\]",
        "output": "4"
      },
      {
        "input": "nums = \\[1\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`-3  104 <= nums[i] <= 3  104`",
      "Each element in the array appears twice except for one element which appears only once."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "137",
    "slug": "single-number-ii",
    "title": "Single Number II",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` where every element appears **three times** except for one, which appears **exactly once**. _Find the single element and return it_. You must implement a solution with a linear runtime complexity and use only constant extra space.",
    "examples": [
      {
        "input": "nums = \\[2,2,3,2\\]",
        "output": "3"
      },
      {
        "input": "nums = \\[0,1,0,1,0,1,99\\]",
        "output": "99"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`-231 <= nums[i] <= 231 - 1`",
      "Each element in `nums` appears exactly three times except for one element which appears once."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "138",
    "slug": "copy-list-with-random-pointer",
    "title": "Copy List with Random Pointer",
    "difficulty": "Medium",
    "description": "A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`. Construct a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the list. The deep copy should consist of exactly `n` **brand new** nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. **None of the pointers in the new list should point to nodes in the original list**. For example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`. Return _the head of the copied linked list_. The linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where: *  `val`: an integer representing `Node.val` *  `random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node. Your code will **only** be given the `head` of the original linked list.",
    "examples": [
      {
        "input": "head = \\[\\[7,null\\],\\[13,0\\],\\[11,4\\],\\[10,2\\],\\[1,0\\]\\]",
        "output": "\\[\\[7,null\\],\\[13,0\\],\\[11,4\\],\\[10,2\\],\\[1,0\\]\\]"
      },
      {
        "input": "head = \\[\\[1,1\\],\\[2,1\\]\\]",
        "output": "\\[\\[1,1\\],\\[2,1\\]\\]"
      },
      {
        "input": "head = \\[\\[3,null\\],\\[3,0\\],\\[3,null\\]\\]",
        "output": "\\[\\[3,null\\],\\[3,0\\],\\[3,null\\]\\]"
      }
    ],
    "constraints": [
      "`0 <= n <= 1000`",
      "`-104 <= Node.val <= 104`",
      "`Node.random` is `null` or is pointing to some node in the linked list."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "139",
    "slug": "word-break",
    "title": "Word Break",
    "difficulty": "Medium",
    "description": "Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words. **Note** that the same word in the dictionary may be reused multiple times in the segmentation.",
    "examples": [
      {
        "input": "s =  \"leetcode \", wordDict = \\[ \"leet \", \"code \"\\]",
        "output": "true",
        "explanation": "Return true because  \"leetcode \" can be segmented as  \"leet code \"."
      },
      {
        "input": "s =  \"applepenapple \", wordDict = \\[ \"apple \", \"pen \"\\]",
        "output": "true",
        "explanation": "Return true because  \"applepenapple \" can be segmented as  \"apple pen apple \"."
      },
      {
        "input": "s =  \"catsandog \", wordDict = \\[ \"cats \", \"dog \", \"sand \", \"and \", \"cat \"\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 300`",
      "`1 <= wordDict.length <= 1000`",
      "`1 <= wordDict[i].length <= 20`",
      "`s` and `wordDict[i]` consist of only lowercase English letters.",
      "All the strings of `wordDict` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "140",
    "slug": "word-break-ii",
    "title": "Word Break II",
    "difficulty": "Hard",
    "description": "Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in **any order**. **Note** that the same word in the dictionary may be reused multiple times in the segmentation.",
    "examples": [
      {
        "input": "s =  \"catsanddog \", wordDict = \\[ \"cat \", \"cats \", \"and \", \"sand \", \"dog \"\\]",
        "output": "\\[ \"cats and dog \", \"cat sand dog \"\\]"
      },
      {
        "input": "s =  \"pineapplepenapple \", wordDict = \\[ \"apple \", \"pen \", \"applepen \", \"pine \", \"pineapple \"\\]",
        "output": "\\[ \"pine apple pen apple \", \"pineapple pen apple \", \"pine applepen apple \"\\]",
        "explanation": "Note that you are allowed to reuse a dictionary word."
      },
      {
        "input": "s =  \"catsandog \", wordDict = \\[ \"cats \", \"dog \", \"sand \", \"and \", \"cat \"\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 20`",
      "`1 <= wordDict.length <= 1000`",
      "`1 <= wordDict[i].length <= 10`",
      "`s` and `wordDict[i]` consist of only lowercase English letters.",
      "All the strings of `wordDict` are unique.",
      "Input is generated in a way that the length of the answer doesn't exceed 105."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "141",
    "slug": "linked-list-cycle",
    "title": "Linked List Cycle",
    "difficulty": "Easy",
    "description": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. **Note that `pos` is not passed as a parameter**. Return `true` _if there is a cycle in the linked list_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "head = \\[3,2,0,-4\\], pos = 1",
        "output": "true",
        "explanation": "There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."
      },
      {
        "input": "head = \\[1,2\\], pos = 0",
        "output": "true",
        "explanation": "There is a cycle in the linked list, where the tail connects to the 0th node."
      },
      {
        "input": "head = \\[1\\], pos = -1",
        "output": "false",
        "explanation": "There is no cycle in the linked list."
      }
    ],
    "constraints": [
      "The number of the nodes in the list is in the range `[0, 104]`.",
      "`-105 <= Node.val <= 105`",
      "`pos` is `-1` or a valid index in the linked-list.",
      "Follow up: Can you solve it using `O(1)` (i.e. constant) memory?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "142",
    "slug": "linked-list-cycle-ii",
    "title": "Linked List Cycle II",
    "difficulty": "Medium",
    "description": "Given the `head` of a linked list, return _the node where the cycle begins. If there is no cycle, return_ `null`. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to (**0-indexed**). It is `-1` if there is no cycle. **Note that** `pos` **is not passed as a parameter**. **Do not modify** the linked list.",
    "examples": [
      {
        "input": "head = \\[3,2,0,-4\\], pos = 1",
        "output": "tail connects to node index 1",
        "explanation": "There is a cycle in the linked list, where tail connects to the second node."
      },
      {
        "input": "head = \\[1,2\\], pos = 0",
        "output": "tail connects to node index 0",
        "explanation": "There is a cycle in the linked list, where tail connects to the first node."
      },
      {
        "input": "head = \\[1\\], pos = -1",
        "output": "no cycle",
        "explanation": "There is no cycle in the linked list."
      }
    ],
    "constraints": [
      "The number of the nodes in the list is in the range `[0, 104]`.",
      "`-105 <= Node.val <= 105`",
      "`pos` is `-1` or a valid index in the linked-list.",
      "Follow up: Can you solve it using `O(1)` (i.e. constant) memory?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "143",
    "slug": "reorder-list",
    "title": "Reorder List",
    "difficulty": "Medium",
    "description": "You are given the head of a singly linked-list. The list can be represented as: L0 -> L1 -> ... -> Ln - 1 -> Ln _Reorder the list to be on the following form:_ L0 -> Ln -> L1 -> Ln - 1 -> L2 -> Ln - 2 -> ... You may not modify the values in the list's nodes. Only nodes themselves may be changed.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4\\]",
        "output": "\\[1,4,2,3\\]"
      },
      {
        "input": "head = \\[1,2,3,4,5\\]",
        "output": "\\[1,5,2,4,3\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[1, 5  104]`.",
      "`1 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "144",
    "slug": "binary-tree-preorder-traversal",
    "title": "Binary Tree Preorder Traversal",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, return _the preorder traversal of its nodes' values_.",
    "examples": [
      {
        "input": "root = \\[1,null,2,3\\]",
        "output": "\\[1,2,3\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 100]`.",
      "`-100 <= Node.val <= 100`",
      "Follow up: Recursive solution is trivial, could you do it iteratively?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "145",
    "slug": "binary-tree-postorder-traversal",
    "title": "Binary Tree Postorder Traversal",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, return _the postorder traversal of its nodes' values_.",
    "examples": [
      {
        "input": "root = \\[1,null,2,3\\]",
        "output": "\\[3,2,1\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "The number of the nodes in the tree is in the range `[0, 100]`.",
      "`-100 <= Node.val <= 100`",
      "Follow up: Recursive solution is trivial, could you do it iteratively?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "146",
    "slug": "lru-cache",
    "title": "LRU Cache",
    "difficulty": "Medium",
    "description": "Design a data structure that follows the constraints of a **[Least Recently Used (LRU) cache](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)**. Implement the `LRUCache` class: *  `LRUCache(int capacity)` Initialize the LRU cache with **positive** size `capacity`. *  `int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`. *  `void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, **evict** the least recently used key. The functions `get` and `put` must each run in `O(1)` average time complexity.",
    "examples": [],
    "constraints": [
      "`1 <= capacity <= 3000`",
      "`0 <= key <= 104`",
      "`0 <= value <= 105`",
      "At most `2  105` calls will be made to `get` and `put`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "147",
    "slug": "insertion-sort-list",
    "title": "Insertion Sort List",
    "difficulty": "Medium",
    "description": "Given the `head` of a singly linked list, sort the list using **insertion sort**, and return _the sorted list's head_. The steps of the **insertion sort** algorithm: 1. Insertion sort iterates, consuming one input element each repetition and growing a sorted output list. 2. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there. 3. It repeats until no input elements remain. The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.",
    "examples": [
      {
        "input": "head = \\[4,2,1,3\\]",
        "output": "\\[1,2,3,4\\]"
      },
      {
        "input": "head = \\[-1,5,3,4,0\\]",
        "output": "\\[-1,0,3,4,5\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[1, 5000]`.",
      "`-5000 <= Node.val <= 5000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "148",
    "slug": "sort-list",
    "title": "Sort List",
    "difficulty": "Medium",
    "description": "Given the `head` of a linked list, return _the list after sorting it in **ascending order**_.",
    "examples": [
      {
        "input": "head = \\[4,2,1,3\\]",
        "output": "\\[1,2,3,4\\]"
      },
      {
        "input": "head = \\[-1,5,3,4,0\\]",
        "output": "\\[-1,0,3,4,5\\]"
      },
      {
        "input": "head = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[0, 5  104]`.",
      "`-105 <= Node.val <= 105`",
      "Follow up: Can you sort the linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "149",
    "slug": "max-points-on-a-line",
    "title": "Max Points on a Line",
    "difficulty": "Hard",
    "description": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return _the maximum number of points that lie on the same straight line_.",
    "examples": [
      {
        "input": "points = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\]",
        "output": "3"
      },
      {
        "input": "points = \\[\\[1,1\\],\\[3,2\\],\\[5,3\\],\\[4,1\\],\\[2,3\\],\\[1,4\\]\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= points.length <= 300`",
      "`points[i].length == 2`",
      "`-104 <= xi, yi <= 104`",
      "All the `points` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "150",
    "slug": "evaluate-reverse-polish-notation",
    "title": "Evaluate Reverse Polish Notation",
    "difficulty": "Medium",
    "description": "You are given an array of strings `tokens` that represents an arithmetic expression in a [Reverse Polish Notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation). Evaluate the expression. Return _an integer that represents the value of the expression_. **Note** that: *  The valid operators are `'+'`, `'-'`, `'*'`, and `'/'`. *  Each operand may be an integer or another expression. *  The division between two integers always **truncates toward zero**. *  There will not be any division by zero. *  The input represents a valid arithmetic expression in a reverse polish notation. *  The answer and all the intermediate calculations can be represented in a **32-bit** integer.",
    "examples": [
      {
        "input": "tokens = \\[ \"2 \", \"1 \", \"+ \", \"3 \", \"\\* \"\\]",
        "output": "9",
        "explanation": "((2 + 1) \\* 3) = 9"
      },
      {
        "input": "tokens = \\[ \"4 \", \"13 \", \"5 \", \"/ \", \"+ \"\\]",
        "output": "6",
        "explanation": "(4 + (13 / 5)) = 6"
      },
      {
        "input": "tokens = \\[ \"10 \", \"6 \", \"9 \", \"3 \", \"+ \", \"-11 \", \"\\* \", \"/ \", \"\\* \", \"17 \", \"+ \", \"5 \", \"+ \"\\]",
        "output": "22",
        "explanation": "((10 \\* (6 / ((9 + 3) \\* -11))) + 17) + 5"
      }
    ],
    "constraints": [
      "`1 <= tokens.length <= 104`",
      "`tokens[i]` is either an operator: `\"+ \"`, `\"- \"`, `\" \"`, or `\"/ \"`, or an integer in the range `[-200, 200]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "151",
    "slug": "reverse-words-in-a-string",
    "title": "Reverse Words in a String",
    "difficulty": "Medium",
    "description": "Given an input string `s`, reverse the order of the **words**. A **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by at least one space. Return _a string of the words in reverse order concatenated by a single space._ **Note** that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.",
    "examples": [
      {
        "input": "s =  \"the sky is blue \"",
        "output": "\"blue is sky the \""
      },
      {
        "input": "s =  \"  hello world   \"",
        "output": "\"world hello \"",
        "explanation": "Your reversed string should not contain leading or trailing spaces."
      },
      {
        "input": "s =  \"a good   example \"",
        "output": "\"example good a \"",
        "explanation": "You need to reduce multiple spaces between two words to a single space in the reversed string."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` contains English letters (upper-case and lower-case), digits, and spaces `' '`.",
      "There is at least one word in `s`."
    ],
    "note": null,
    "follow_up": "If the string data type is mutable in your language, can you solve it **in-place** with `O(1)` extra space?"
  },
  {
    "id": "152",
    "slug": "maximum-product-subarray",
    "title": "Maximum Product Subarray",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, find a subarray that has the largest product, and return _the product_. The test cases are generated so that the answer will fit in a **32-bit** integer.",
    "examples": [
      {
        "input": "nums = \\[2,3,-2,4\\]",
        "output": "6",
        "explanation": "\\[2,3\\] has the largest product 6."
      },
      {
        "input": "nums = \\[-2,0,-1\\]",
        "output": "0",
        "explanation": "The result cannot be 2, because \\[-2,-1\\] is not a subarray."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  104`",
      "`-10 <= nums[i] <= 10`",
      "The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "153",
    "slug": "find-minimum-in-rotated-sorted-array",
    "title": "Find Minimum in Rotated Sorted Array",
    "difficulty": "Medium",
    "description": "Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become: *  `[4,5,6,7,0,1,2]` if it was rotated `4` times. *  `[0,1,2,4,5,6,7]` if it was rotated `7` times. Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`. Given the sorted rotated array `nums` of **unique** elements, return _the minimum element of this array_. You must write an algorithm that runs in `O(log n) time.`",
    "examples": [
      {
        "input": "nums = \\[3,4,5,1,2\\]",
        "output": "1",
        "explanation": "The original array was \\[1,2,3,4,5\\] rotated 3 times."
      },
      {
        "input": "nums = \\[4,5,6,7,0,1,2\\]",
        "output": "0",
        "explanation": "The original array was \\[0,1,2,4,5,6,7\\] and it was rotated 4 times."
      },
      {
        "input": "nums = \\[11,13,15,17\\]",
        "output": "11",
        "explanation": "The original array was \\[11,13,15,17\\] and it was rotated 4 times."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 5000`",
      "`-5000 <= nums[i] <= 5000`",
      "All the integers of `nums` are unique.",
      "`nums` is sorted and rotated between `1` and `n` times."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "154",
    "slug": "find-minimum-in-rotated-sorted-array-ii",
    "title": "Find Minimum in Rotated Sorted Array II",
    "difficulty": "Hard",
    "description": "Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become: *  `[4,5,6,7,0,1,4]` if it was rotated `4` times. *  `[0,1,4,4,5,6,7]` if it was rotated `7` times. Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`. Given the sorted rotated array `nums` that may contain **duplicates**, return _the minimum element of this array_. You must decrease the overall operation steps as much as possible.",
    "examples": [
      {
        "input": "nums = \\[1,3,5\\]",
        "output": "1"
      },
      {
        "input": "nums = \\[2,2,2,0,1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 5000`",
      "`-5000 <= nums[i] <= 5000`",
      "`nums` is sorted and rotated between `1` and `n` times.",
      "Follow up: This problem is similar to [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/), but `nums` may contain duplicates. Would this affect the runtime complexity? How and why?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "155",
    "slug": "min-stack",
    "title": "Min Stack",
    "difficulty": "Medium",
    "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Implement the `MinStack` class: *  `MinStack()` initializes the stack object. *  `void push(int val)` pushes the element `val` onto the stack. *  `void pop()` removes the element on the top of the stack. *  `int top()` gets the top element of the stack. *  `int getMin()` retrieves the minimum element in the stack. You must implement a solution with `O(1)` time complexity for each function.",
    "examples": [],
    "constraints": [
      "`-231 <= val <= 231 - 1`",
      "Methods `pop`, `top` and `getMin` operations will always be called on non-empty stacks.",
      "At most `3  104` calls will be made to `push`, `pop`, `top`, and `getMin`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "156",
    "slug": "binary-tree-upside-down",
    "title": "Binary Tree Upside Down",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, turn the tree upside down and return _the new root_. You can turn a binary tree upside down with the following steps: 1. The original left child becomes the new root. 2. The original root becomes the new right child. 3. The original right child becomes the new left child. The mentioned steps are done level by level. It is **guaranteed** that every right node has a sibling (a left node with the same parent) and has no children.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5\\]",
        "output": "\\[4,5,2,null,null,3,1\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range `[0, 10]`.",
      "`1 <= Node.val <= 10`",
      "Every right node in the tree has a sibling (a left node that shares the same parent).",
      "Every right node in the tree has no children."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "157",
    "slug": "read-n-characters-given-read4",
    "title": "Read N Characters Given Read4",
    "difficulty": "Easy",
    "description": "Given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters. **Method read4:** The API `read4` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf4`. The return value is the number of actual characters read. Note that `read4()` has its own file pointer, much like `FILE *fp` in C. **Definition of read4:** Parameter: char\\[\\] buf4 Returns:  int buf4\\[\\] is a destination, not a source. The results from read4 will be copied to buf4\\[\\]. Below is a high-level example of how `read4` works: File file( \"abcde `\"); // File is \"`abcde `\", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 = \"abcd \", fp points to 'e' read4(buf4); // read4 returns 1. Now buf4 = \"e \", fp points to end of file read4(buf4); // read4 returns 0. Now buf4 = \" \", fp points to end of file` **Method read:** By using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly. The return value is the number of actual characters read. **Definition of read:** Parameters:\tchar\\[\\] buf, int n Returns:\tint buf\\[\\] is a destination, not a source. You will need to write the results to buf\\[\\].",
    "examples": [
      {
        "input": "file =  \"abc \", n = 4",
        "output": "3",
        "explanation": "After calling your read method, buf should contain  \"abc \". We read a total of 3 characters from the file, so return 3."
      },
      {
        "input": "file =  \"abcde \", n = 5",
        "output": "5",
        "explanation": "After calling your read method, buf should contain  \"abcde \". We read a total of 5 characters from the file, so return 5."
      },
      {
        "input": "file =  \"abcdABCD1234 \", n = 12",
        "output": "12",
        "explanation": "After calling your read method, buf should contain  \"abcdABCD1234 \". We read a total of 12 characters from the file, so return 12."
      }
    ],
    "constraints": [
      "`1 <= file.length <= 500`",
      "`file` consist of English letters and digits.",
      "`1 <= n <= 1000`"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "158",
    "slug": "read-n-characters-given-read4-ii-call-multiple-times",
    "title": "Read N Characters Given read4 II - Call Multiple Times",
    "difficulty": "Hard",
    "description": "Given a `file` and assume that you can only read the file using a given method `read4`, implement a method `read` to read `n` characters. Your method `read` may be **called multiple times**. **Method read4:** The API `read4` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf4`. The return value is the number of actual characters read. Note that `read4()` has its own file pointer, much like `FILE *fp` in C. **Definition of read4:** Parameter: char\\[\\] buf4 Returns:  int buf4\\[\\] is a destination, not a source. The results from read4 will be copied to buf4\\[\\]. Below is a high-level example of how `read4` works: File file( \"abcde `\"); // File is \"`abcde `\", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 = \"abcd \", fp points to 'e' read4(buf4); // read4 returns 1. Now buf4 = \"e \", fp points to end of file read4(buf4); // read4 returns 0. Now buf4 = \" \", fp points to end of file` **Method read:** By using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly. The return value is the number of actual characters read. **Definition of read:** Parameters:\tchar\\[\\] buf, int n Returns:\tint buf\\[\\] is a destination, not a source. You will need to write the results to buf\\[\\].",
    "examples": [
      {
        "input": "file =  \"abc \", queries = \\[1,2,1\\]",
        "output": "\\[1,2,0\\]",
        "explanation": "The test case represents the following scenario:"
      },
      {
        "input": "file =  \"abc \", queries = \\[4,1\\]",
        "output": "\\[3,0\\]",
        "explanation": "The test case represents the following scenario:"
      }
    ],
    "constraints": [
      "`1 <= file.length <= 500`",
      "`file` consist of English letters and digits.",
      "`1 <= queries.length <= 10`",
      "`1 <= queries[i] <= 500`"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "159",
    "slug": "longest-substring-with-at-most-two-distinct-characters",
    "title": "Longest Substring with At Most Two Distinct Characters",
    "difficulty": "Medium",
    "description": "Given a string `s`, return _the length of the longest_ _substring_ _that contains at most **two distinct characters**_.",
    "examples": [
      {
        "input": "s =  \"eceba \"",
        "output": "3",
        "explanation": "The substring is  \"ece \" which its length is 3."
      },
      {
        "input": "s =  \"ccaabbb \"",
        "output": "5",
        "explanation": "The substring is  \"aabbb \" which its length is 5."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "160",
    "slug": "intersection-of-two-linked-lists",
    "title": "Intersection of Two Linked Lists",
    "difficulty": "Easy",
    "description": "Given the heads of two singly linked-lists `headA` and `headB`, return _the node at which the two lists intersect_. If the two linked lists have no intersection at all, return `null`. For example, the following two linked lists begin to intersect at node `c1`: The test cases are generated such that there are no cycles anywhere in the entire linked structure. **Note** that the linked lists must **retain their original structure** after the function returns. **Custom Judge:** The inputs to the **judge** are given as follows (your program is **not** given these inputs): *  `intersectVal` - The value of the node where the intersection occurs. This is `0` if there is no intersected node. *  `listA` - The first linked list. *  `listB` - The second linked list. *  `skipA` - The number of nodes to skip ahead in `listA` (starting from the head) to get to the intersected node. *  `skipB` - The number of nodes to skip ahead in `listB` (starting from the head) to get to the intersected node. The judge will then create the linked structure based on these inputs and pass the two heads, `headA` and `headB` to your program. If you correctly return the intersected node, then your solution will be **accepted**.",
    "examples": [
      {
        "input": "intersectVal = 8, listA = \\[4,1,8,4,5\\], listB = \\[5,6,1,8,4,5\\], skipA = 2, skipB = 3",
        "output": "Intersected at '8'",
        "explanation": "The intersected node's value is 8 (note that this must not be 0 if the two lists intersect)."
      },
      {
        "input": "intersectVal = 2, listA = \\[1,9,1,2,4\\], listB = \\[3,2,4\\], skipA = 3, skipB = 1",
        "output": "Intersected at '2'",
        "explanation": "The intersected node's value is 2 (note that this must not be 0 if the two lists intersect)."
      },
      {
        "input": "intersectVal = 0, listA = \\[2,6,4\\], listB = \\[1,5\\], skipA = 3, skipB = 2",
        "output": "No intersection",
        "explanation": "From the head of A, it reads as \\[2,6,4\\]. From the head of B, it reads as \\[1,5\\]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values."
      }
    ],
    "constraints": [
      "The number of nodes of `listA` is in the `m`.",
      "The number of nodes of `listB` is in the `n`.",
      "`1 <= m, n <= 3  104`",
      "`1 <= Node.val <= 105`",
      "`0 <= skipA < m`",
      "`0 <= skipB < n`",
      "`intersectVal` is `0` if `listA` and `listB` do not intersect.",
      "`intersectVal == listA[skipA] == listB[skipB]` if `listA` and `listB` intersect.",
      "Follow up: Could you write a solution that runs in `O(m + n)` time and use only `O(1)` memory?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "161",
    "slug": "one-edit-distance",
    "title": "One Edit Distance",
    "difficulty": "Medium",
    "description": "Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`. A string `s` is said to be one distance apart from a string `t` if you can: *  Insert **exactly one** character into `s` to get `t`. *  Delete **exactly one** character from `s` to get `t`. *  Replace **exactly one** character of `s` with **a different character** to get `t`.",
    "examples": [
      {
        "input": "s =  \"ab \", t =  \"acb \"",
        "output": "true",
        "explanation": "We can insert 'c' into s to get t."
      },
      {
        "input": "s =  \" \", t =  \" \"",
        "output": "false",
        "explanation": "We cannot get t from s by only one step."
      }
    ],
    "constraints": [
      "`0 <= s.length, t.length <= 104`",
      "`s` and `t` consist of lowercase letters, uppercase letters, and digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "162",
    "slug": "find-peak-element",
    "title": "Find Peak Element",
    "difficulty": "Medium",
    "description": "A peak element is an element that is strictly greater than its neighbors. Given a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**. You may imagine that `nums[-1] = nums[n] = -\u221e`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array. You must write an algorithm that runs in `O(log n)` time.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,1\\]",
        "output": "2",
        "explanation": "3 is a peak element and your function should return the index number 2."
      },
      {
        "input": "nums = \\[1,2,1,3,5,6,4\\]",
        "output": "5",
        "explanation": "Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`-231 <= nums[i] <= 231 - 1`",
      "`nums[i] != nums[i + 1]` for all valid `i`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "163",
    "slug": "missing-ranges",
    "title": "Missing Ranges",
    "difficulty": "Easy",
    "description": "You are given an inclusive range `[lower, upper]` and a **sorted unique** integer array `nums`, where all elements are in the inclusive range. A number `x` is considered **missing** if `x` is in the range `[lower, upper]` and `x` is not in `nums`. Return _the **smallest sorted** list of ranges that **cover every missing number exactly**_. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges. Each range `[a,b]` in the list should be output as: *  `\"a->b \"` if `a != b` *  `\"a \"` if `a == b`",
    "examples": [
      {
        "input": "nums = \\[0,1,3,50,75\\], lower = 0, upper = 99",
        "output": "\\[ \"2 \", \"4->49 \", \"51->74 \", \"76->99 \"\\]",
        "explanation": "The ranges are:"
      },
      {
        "input": "nums = \\[-1\\], lower = -1, upper = -1",
        "output": "\\[\\]",
        "explanation": "There are no missing ranges since there are no missing numbers."
      }
    ],
    "constraints": [
      "`-109 <= lower <= upper <= 109`",
      "`0 <= nums.length <= 100`",
      "`lower <= nums[i] <= upper`",
      "All the values of `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "164",
    "slug": "maximum-gap",
    "title": "Maximum Gap",
    "difficulty": "Hard",
    "description": "Given an integer array `nums`, return _the maximum difference between two successive elements in its sorted form_. If the array contains less than two elements, return `0`. You must write an algorithm that runs in linear time and uses linear extra space.",
    "examples": [
      {
        "input": "nums = \\[3,6,9,1\\]",
        "output": "3",
        "explanation": "The sorted form of the array is \\[1,3,6,9\\], either (3,6) or (6,9) has the maximum difference 3."
      },
      {
        "input": "nums = \\[10\\]",
        "output": "0",
        "explanation": "The array contains less than 2 elements, therefore return 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "165",
    "slug": "compare-version-numbers",
    "title": "Compare Version Numbers",
    "difficulty": "Medium",
    "description": "Given two version numbers, `version1` and `version2`, compare them. Version numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **0-indexed from left to right**, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers. To compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `1` and `001` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `0`**. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`. _Return the following:_ *  If `version1 < version2`, return `-1`. *  If `version1 > version2`, return `1`. *  Otherwise, return `0`.",
    "examples": [
      {
        "input": "version1 =  \"1.01 \", version2 =  \"1.001 \"",
        "output": "0",
        "explanation": "Ignoring leading zeroes, both  \"01 \" and  \"001 \" represent the same integer  \"1 \"."
      },
      {
        "input": "version1 =  \"1.0 \", version2 =  \"1.0.0 \"",
        "output": "0",
        "explanation": "version1 does not specify revision 2, which means it is treated as  \"0 \"."
      },
      {
        "input": "version1 =  \"0.1 \", version2 =  \"1.1 \"",
        "output": "-1",
        "explanation": "version1's revision 0 is  \"0 \", while version2's revision 0 is  \"1 \". 0 < 1, so version1 < version2."
      }
    ],
    "constraints": [
      "`1 <= version1.length, version2.length <= 500`",
      "`version1` and `version2` only contain digits and `'.'`.",
      "`version1` and `version2` are valid version numbers.",
      "All the given revisions in `version1` and `version2` can be stored in a 32-bit integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "166",
    "slug": "fraction-to-recurring-decimal",
    "title": "Fraction to Recurring Decimal",
    "difficulty": "Medium",
    "description": "Given two integers representing the `numerator` and `denominator` of a fraction, return _the fraction in string format_. If the fractional part is repeating, enclose the repeating part in parentheses. If multiple answers are possible, return **any of them**. It is **guaranteed** that the length of the answer string is less than `104` for all the given inputs.",
    "examples": [
      {
        "input": "numerator = 1, denominator = 2",
        "output": "\"0.5 \""
      },
      {
        "input": "numerator = 2, denominator = 1",
        "output": "\"2 \""
      },
      {
        "input": "numerator = 4, denominator = 333",
        "output": "\"0.(012) \""
      }
    ],
    "constraints": [
      "`-231 <= numerator, denominator <= 231 - 1`",
      "`denominator != 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "167",
    "slug": "two-sum-ii-input-array-is-sorted",
    "title": "Two Sum II - Input Array Is Sorted",
    "difficulty": "Medium",
    "description": "Given a **1-indexed** array of integers `numbers` that is already **_sorted in non-decreasing order_**, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index1]` and `numbers[index2]` where `1 <= index1 < index2 <= numbers.length`. Return _the indices of the two numbers,_ `index1` _and_ `index2`_, **added by one** as an integer array_ `[index1, index2]` _of length 2._ The tests are generated such that there is **exactly one solution**. You **may not** use the same element twice. Your solution must use only constant extra space.",
    "examples": [
      {
        "input": "numbers = \\[2,7,11,15\\], target = 9",
        "output": "\\[1,2\\]",
        "explanation": "The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return \\[1, 2\\]."
      },
      {
        "input": "numbers = \\[2,3,4\\], target = 6",
        "output": "\\[1,3\\]",
        "explanation": "The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return \\[1, 3\\]."
      },
      {
        "input": "numbers = \\[\\-1,0\\], target = -1",
        "output": "\\[1,2\\]",
        "explanation": "The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return \\[1, 2\\]."
      }
    ],
    "constraints": [
      "`2 <= numbers.length <= 3  104`",
      "`-1000 <= numbers[i] <= 1000`",
      "`numbers` is sorted in non-decreasing order.",
      "`-1000 <= target <= 1000`",
      "The tests are generated such that there is exactly one solution."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "168",
    "slug": "excel-sheet-column-title",
    "title": "Excel Sheet Column Title",
    "difficulty": "Easy",
    "description": "Given an integer `columnNumber`, return _its corresponding column title as it appears in an Excel sheet_. For example: A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28 ...",
    "examples": [
      {
        "input": "columnNumber = 1",
        "output": "\"A \""
      },
      {
        "input": "columnNumber = 28",
        "output": "\"AB \""
      },
      {
        "input": "columnNumber = 701",
        "output": "\"ZY \""
      }
    ],
    "constraints": [
      "`1 <= columnNumber <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "169",
    "slug": "majority-element",
    "title": "Majority Element",
    "difficulty": "Easy",
    "description": "Given an array `nums` of size `n`, return _the majority element_. The majority element is the element that appears more than `\u230an / 2\u230b` times. You may assume that the majority element always exists in the array.",
    "examples": [
      {
        "input": "nums = \\[3,2,3\\]",
        "output": "3"
      },
      {
        "input": "nums = \\[2,2,1,1,1,2,2\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 5  104`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": "Could you solve the problem in linear time and in `O(1)` space?"
  },
  {
    "id": "170",
    "slug": "two-sum-iii-data-structure-design",
    "title": "Two Sum III - Data structure design",
    "difficulty": "Easy",
    "description": "Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value. Implement the `TwoSum` class: *  `TwoSum()` Initializes the `TwoSum` object, with an empty array initially. *  `void add(int number)` Adds `number` to the data structure. *  `boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.",
    "examples": [],
    "constraints": [
      "`-105 <= number <= 105`",
      "`-231 <= value <= 231 - 1`",
      "At most `104` calls will be made to `add` and `find`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "171",
    "slug": "excel-sheet-column-number",
    "title": "Excel Sheet Column Number",
    "difficulty": "Easy",
    "description": "Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return _its corresponding column number_. For example: A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28 ...",
    "examples": [
      {
        "input": "columnTitle =  \"A \"",
        "output": "1"
      },
      {
        "input": "columnTitle =  \"AB \"",
        "output": "28"
      },
      {
        "input": "columnTitle =  \"ZY \"",
        "output": "701"
      }
    ],
    "constraints": [
      "`1 <= columnTitle.length <= 7`",
      "`columnTitle` consists only of uppercase English letters.",
      "`columnTitle` is in the range `[ \"A \", \"FXSHRXW \"]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "172",
    "slug": "factorial-trailing-zeroes",
    "title": "Factorial Trailing Zeroes",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _the number of trailing zeroes in_ `n!`. Note that `n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1`.",
    "examples": [
      {
        "input": "n = 3",
        "output": "0",
        "explanation": "3! = 6, no trailing zero."
      },
      {
        "input": "n = 5",
        "output": "1",
        "explanation": "5! = 120, one trailing zero."
      },
      {
        "input": "n = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "`0 <= n <= 104`",
      "Follow up: Could you write a solution that works in logarithmic time complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "173",
    "slug": "binary-search-tree-iterator",
    "title": "Binary Search Tree Iterator",
    "difficulty": "Medium",
    "description": "Implement the `BSTIterator` class that represents an iterator over the **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** of a binary search tree (BST): *  `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST. *  `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`. *  `int next()` Moves the pointer to the right, then returns the number at the pointer. Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST. You may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.",
    "examples": [],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 105]`.",
      "`0 <= Node.val <= 106`",
      "At most `105` calls will be made to `hasNext`, and `next`.",
      "Follow up:",
      "Could you implement `next()` and `hasNext()` to run in average `O(1)` time and use `O(h)` memory, where `h` is the height of the tree?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "174",
    "slug": "dungeon-game",
    "title": "Dungeon Game",
    "difficulty": "Hard",
    "description": "The demons had captured the princess and imprisoned her in **the bottom-right corner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in **the top-left room** and must fight his way through `dungeon` to rescue the princess. The knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately. Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers). To reach the princess as quickly as possible, the knight decides to move only **rightward** or **downward** in each step. Return _the knight's minimum initial health so that he can rescue the princess_. **Note** that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.",
    "examples": [
      {
        "input": "dungeon = \\[\\[-2,-3,3\\],\\[-5,-10,1\\],\\[10,30,-5\\]\\]",
        "output": "7",
        "explanation": "The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN."
      },
      {
        "input": "dungeon = \\[\\[0\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`m == dungeon.length`",
      "`n == dungeon[i].length`",
      "`1 <= m, n <= 200`",
      "`-1000 <= dungeon[i][j] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "179",
    "slug": "largest-number",
    "title": "Largest Number",
    "difficulty": "Medium",
    "description": "Given a list of non-negative integers `nums`, arrange them such that they form the largest number and return it. Since the result may be very large, so you need to return a string instead of an integer.",
    "examples": [
      {
        "input": "nums = \\[10,2\\]",
        "output": "\"210 \""
      },
      {
        "input": "nums = \\[3,30,34,5,9\\]",
        "output": "\"9534330 \""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "186",
    "slug": "reverse-words-in-a-string-ii",
    "title": "Reverse Words in a String II",
    "difficulty": "Medium",
    "description": "Given a character array `s`, reverse the order of the **words**. A **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by a single space. Your code must solve the problem **in-place,** i.e. without allocating extra space.",
    "examples": [
      {
        "input": "s = \\[\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"\\]",
        "output": "\\[\"b\",\"l\",\"u\",\"e\",\" \",\"i\",\"s\",\" \",\"s\",\"k\",\"y\",\" \",\"t\",\"h\",\"e\"\\]"
      },
      {
        "input": "s = \\[\"a\"\\]",
        "output": "\\[\"a\"\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is an English letter (uppercase or lowercase), digit, or space `' '`.",
      "There is at least one word in `s`.",
      "`s` does not contain leading or trailing spaces.",
      "All the words in `s` are guaranteed to be separated by a single space."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "187",
    "slug": "repeated-dna-sequences",
    "title": "Repeated DNA Sequences",
    "difficulty": "Medium",
    "description": "The **DNA sequence** is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`. *  For example, `\"ACGAATTCCG \"` is a **DNA sequence**. When studying **DNA**, it is useful to identify repeated sequences within the DNA. Given a string `s` that represents a **DNA sequence**, return all the **`10`\\-letter-long** sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"",
        "output": "\\[\"AAAAACCCCC\",\"CCCCCAAAAA\"\\]"
      },
      {
        "input": "s = \"AAAAAAAAAAAAA\"",
        "output": "\\[\"AAAAAAAAAA\"\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is either `'A'`, `'C'`, `'G'`, or `'T'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "188",
    "slug": "best-time-to-buy-and-sell-stock-iv",
    "title": "Best Time to Buy and Sell Stock IV",
    "difficulty": "Hard",
    "description": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`. Find the maximum profit you can achieve. You may complete at most `k` transactions: i.e. you may buy at most `k` times and sell at most `k` times.",
    "examples": [
      {
        "input": "k = 2, prices = \\[2,4,1\\]",
        "output": "2",
        "explanation": "Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2."
      },
      {
        "input": "k = 2, prices = \\[3,2,6,5,0,3\\]",
        "output": "7",
        "explanation": "Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3."
      }
    ],
    "constraints": [
      "`1 <= k <= 100`",
      "`1 <= prices.length <= 1000`",
      "`0 <= prices[i] <= 1000`"
    ],
    "note": "You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "follow_up": null
  },
  {
    "id": "189",
    "slug": "rotate-array",
    "title": "Rotate Array",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, rotate the array to the right by `k` steps, where `k` is non-negative.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4,5,6,7\\], k = 3",
        "output": "\\[5,6,7,1,2,3,4\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[-1,-100,3,99\\], k = 2",
        "output": "\\[3,99,-1,-100\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-231 <= nums[i] <= 231 - 1`",
      "`0 <= k <= 105`",
      "Follow up:",
      "Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.",
      "Could you do it in-place with `O(1)` extra space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "190",
    "slug": "reverse-bits",
    "title": "Reverse Bits",
    "difficulty": "Easy",
    "description": "Reverse bits of a given 32 bits unsigned integer.",
    "examples": [
      {
        "input": "n = 00000010100101000001111010011100",
        "output": "964176192 (00111001011110000010100101000000)",
        "explanation": "The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**."
      },
      {
        "input": "n = 11111111111111111111111111111101",
        "output": "3221225471 (10111111111111111111111111111111)",
        "explanation": "The input binary string **11111111111111111111111111111101** represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is **10111111111111111111111111111111**."
      }
    ],
    "constraints": [
      "The input must be a binary string of length `32`",
      "Follow up: If this function is called many times, how would you optimize it?"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "191",
    "slug": "number-of-1-bits",
    "title": "Number of 1 Bits",
    "difficulty": "Easy",
    "description": "Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the [Hamming weight](http://en.wikipedia.org/wiki/Hamming_weight)).",
    "examples": [
      {
        "input": "n = 00000000000000000000000000001011",
        "output": "3",
        "explanation": "The input binary string **00000000000000000000000000001011** has a total of three '1' bits."
      },
      {
        "input": "n = 00000000000000000000000010000000",
        "output": "1",
        "explanation": "The input binary string **00000000000000000000000010000000** has a total of one '1' bit."
      },
      {
        "input": "n = 11111111111111111111111111111101",
        "output": "31",
        "explanation": "The input binary string **11111111111111111111111111111101** has a total of thirty one '1' bits."
      }
    ],
    "constraints": [
      "The input must be a binary string of length `32`.",
      "Follow up: If this function is called many times, how would you optimize it?"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "194",
    "slug": "title-slug",
    "title": "Transpose File",
    "difficulty": "Medium",
    "description": "Given a text file `file.txt`, transpose its content. You may assume that each row has the same number of columns, and each field is separated by the `' '` character.",
    "examples": [],
    "constraints": [],
    "note": null,
    "follow_up": null
  },
  {
    "id": "198",
    "slug": "house-robber",
    "title": "House Robber",
    "difficulty": "Medium",
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**. Given an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,1\\]",
        "output": "4",
        "explanation": "Rob house 1 (money = 1) and then rob house 3 (money = 3)."
      },
      {
        "input": "nums = \\[2,7,9,3,1\\]",
        "output": "12",
        "explanation": "Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1)."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`0 <= nums[i] <= 400`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "199",
    "slug": "binary-tree-right-side-view",
    "title": "Binary Tree Right Side View",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, imagine yourself standing on the **right side** of it, return _the values of the nodes you can see ordered from top to bottom_.",
    "examples": [
      {
        "input": "root = \\[1,2,3,null,5,null,4\\]",
        "output": "\\[1,3,4\\]"
      },
      {
        "input": "root = \\[1,null,3\\]",
        "output": "\\[1,3\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 100]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "200",
    "slug": "number-of-islands",
    "title": "Number of Islands",
    "difficulty": "Medium",
    "description": "Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return _the number of islands_. An **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "examples": [
      {
        "input": "grid = \\[",
        "output": "1"
      },
      {
        "input": "grid = \\[",
        "output": "3"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 300`",
      "`grid[i][j]` is `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "201",
    "slug": "bitwise-and-of-numbers-range",
    "title": "Bitwise AND of Numbers Range",
    "difficulty": "Medium",
    "description": "Given two integers `left` and `right` that represent the range `[left, right]`, return _the bitwise AND of all numbers in this range, inclusive_.",
    "examples": [
      {
        "input": "left = 5, right = 7",
        "output": "4"
      },
      {
        "input": "left = 0, right = 0",
        "output": "0"
      },
      {
        "input": "left = 1, right = 2147483647",
        "output": "0"
      }
    ],
    "constraints": [
      "`0 <= left <= right <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "202",
    "slug": "happy-number",
    "title": "Happy Number",
    "difficulty": "Easy",
    "description": "Write an algorithm to determine if a number `n` is happy. A **happy number** is a number defined by the following process: *  Starting with any positive integer, replace the number by the sum of the squares of its digits. *  Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1. *  Those numbers for which this process **ends in 1** are happy. Return `true` _if_ `n` _is a happy number, and_ `false` _if not_.",
    "examples": [
      {
        "input": "n = 19",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "n = 2",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "203",
    "slug": "remove-linked-list-elements",
    "title": "Remove Linked List Elements",
    "difficulty": "Easy",
    "description": "Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return _the new head_.",
    "examples": [
      {
        "input": "head = \\[1,2,6,3,4,5,6\\], val = 6",
        "output": "\\[1,2,3,4,5\\]"
      },
      {
        "input": "head = \\[\\], val = 1",
        "output": "\\[\\]"
      },
      {
        "input": "head = \\[7,7,7,7\\], val = 7",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[0, 104]`.",
      "`1 <= Node.val <= 50`",
      "`0 <= val <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "204",
    "slug": "count-primes",
    "title": "Count Primes",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _the number of prime numbers that are strictly less than_ `n`.",
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "There are 4 prime numbers less than 10, they are 2, 3, 5, 7."
      },
      {
        "input": "n = 0",
        "output": "0"
      },
      {
        "input": "n = 1",
        "output": "0"
      }
    ],
    "constraints": [
      "`0 <= n <= 5  106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "205",
    "slug": "isomorphic-strings",
    "title": "Isomorphic Strings",
    "difficulty": "Easy",
    "description": "Given two strings `s` and `t`, _determine if they are isomorphic_. Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.",
    "examples": [
      {
        "input": "s = \"egg\", t = \"add\"",
        "output": "true"
      },
      {
        "input": "s = \"foo\", t = \"bar\"",
        "output": "false"
      },
      {
        "input": "s = \"paper\", t = \"title\"",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5  104`",
      "`t.length == s.length`",
      "`s` and `t` consist of any valid ascii character."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "206",
    "slug": "reverse-linked-list",
    "title": "Reverse Linked List",
    "difficulty": "Easy",
    "description": "Given the `head` of a singly linked list, reverse the list, and return _the reversed list_.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5\\]",
        "output": "\\[5,4,3,2,1\\]"
      },
      {
        "input": "head = \\[1,2\\]",
        "output": "\\[2,1\\]"
      },
      {
        "input": "head = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is the range `[0, 5000]`.",
      "`-5000 <= Node.val <= 5000`",
      "Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "207",
    "slug": "course-schedule",
    "title": "Course Schedule",
    "difficulty": "Medium",
    "description": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`. *  For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`. Return `true` if you can finish all courses. Otherwise, return `false`.",
    "examples": [
      {
        "input": "numCourses = 2, prerequisites = \\[\\[1,0\\]\\]",
        "output": "true",
        "explanation": "There are a total of 2 courses to take."
      },
      {
        "input": "numCourses = 2, prerequisites = \\[\\[1,0\\],\\[0,1\\]\\]",
        "output": "false",
        "explanation": "There are a total of 2 courses to take."
      }
    ],
    "constraints": [
      "`1 <= numCourses <= 2000`",
      "`0 <= prerequisites.length <= 5000`",
      "`prerequisites[i].length == 2`",
      "`0 <= ai, bi < numCourses`",
      "All the pairs prerequisites\\[i\\] are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "208",
    "slug": "implement-trie-prefix-tree",
    "title": "Implement Trie (Prefix Tree)",
    "difficulty": "Medium",
    "description": "A [**trie**](https://en.wikipedia.org/wiki/Trie) (pronounced as \"try \") or **prefix tree** is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker. Implement the Trie class: *  `Trie()` Initializes the trie object. *  `void insert(String word)` Inserts the string `word` into the trie. *  `boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise. *  `boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.",
    "examples": [],
    "constraints": [
      "`1 <= word.length, prefix.length <= 2000`",
      "`word` and `prefix` consist only of lowercase English letters.",
      "At most `3  104` calls in total will be made to `insert`, `search`, and `startsWith`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "209",
    "slug": "minimum-size-subarray-sum",
    "title": "Minimum Size Subarray Sum",
    "difficulty": "Medium",
    "description": "Given an array of positive integers `nums` and a positive integer `target`, return _the **minimal length** of a_ _subarray_ _whose sum is greater than or equal to_ `target`. If there is no such subarray, return `0` instead.",
    "examples": [
      {
        "input": "target = 7, nums = \\[2,3,1,2,4,3\\]",
        "output": "2",
        "explanation": "The subarray \\[4,3\\] has the minimal length under the problem constraint."
      },
      {
        "input": "target = 4, nums = \\[1,4,4\\]",
        "output": "1"
      },
      {
        "input": "target = 11, nums = \\[1,1,1,1,1,1,1,1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= target <= 109`",
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 104`",
      "Follow up: If you have figured out the `O(n)` solution, try coding another solution of which the time complexity is `O(n log(n))`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "210",
    "slug": "course-schedule-ii",
    "title": "Course Schedule II",
    "difficulty": "Medium",
    "description": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`. *  For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`. Return _the ordering of courses you should take to finish all courses_. If there are many valid answers, return **any** of them. If it is impossible to finish all courses, return **an empty array**.",
    "examples": [
      {
        "input": "numCourses = 2, prerequisites = \\[\\[1,0\\]\\]",
        "output": "\\[0,1\\]",
        "explanation": "There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is \\[0,1\\]."
      },
      {
        "input": "numCourses = 4, prerequisites = \\[\\[1,0\\],\\[2,0\\],\\[3,1\\],\\[3,2\\]\\]",
        "output": "\\[0,2,1,3\\]",
        "explanation": "There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0."
      },
      {
        "input": "numCourses = 1, prerequisites = \\[\\]",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "`1 <= numCourses <= 2000`",
      "`0 <= prerequisites.length <= numCourses  (numCourses - 1)`",
      "`prerequisites[i].length == 2`",
      "`0 <= ai, bi < numCourses`",
      "`ai != bi`",
      "All the pairs `[ai, bi]` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "211",
    "slug": "design-add-and-search-words-data-structure",
    "title": "Design Add and Search Words Data Structure",
    "difficulty": "Medium",
    "description": "Design a data structure that supports adding new words and finding if a string matches any previously added string. Implement the `WordDictionary` class: *  `WordDictionary()` Initializes the object. *  `void addWord(word)` Adds `word` to the data structure, it can be matched later. *  `bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.",
    "examples": [],
    "constraints": [
      "`1 <= word.length <= 25`",
      "`word` in `addWord` consists of lowercase English letters.",
      "`word` in `search` consist of `'.'` or lowercase English letters.",
      "There will be at most `2` dots in `word` for `search` queries.",
      "At most `104` calls will be made to `addWord` and `search`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "212",
    "slug": "word-search-ii",
    "title": "Word Search II",
    "difficulty": "Hard",
    "description": "Given an `m x n` `board` of characters and a list of strings `words`, return _all words on the board_. Each word must be constructed from letters of sequentially adjacent cells, where **adjacent cells** are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.",
    "examples": [
      {
        "input": "board = \\[\\[ \"o \", \"a \", \"a \", \"n \"\\],\\[ \"e \", \"t \", \"a \", \"e \"\\],\\[ \"i \", \"h \", \"k \", \"r \"\\],\\[ \"i \", \"f \", \"l \", \"v \"\\]\\], words = \\[ \"oath \", \"pea \", \"eat \", \"rain \"\\]",
        "output": "\\[ \"eat \", \"oath \"\\]"
      },
      {
        "input": "board = \\[\\[ \"a \", \"b \"\\],\\[ \"c \", \"d \"\\]\\], words = \\[ \"abcb \"\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`m == board.length`",
      "`n == board[i].length`",
      "`1 <= m, n <= 12`",
      "`board[i][j]` is a lowercase English letter.",
      "`1 <= words.length <= 3  104`",
      "`1 <= words[i].length <= 10`",
      "`words[i]` consists of lowercase English letters.",
      "All the strings of `words` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "213",
    "slug": "house-robber-ii",
    "title": "House Robber II",
    "difficulty": "Medium",
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and **it will automatically contact the police if two adjacent houses were broken into on the same night**. Given an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.",
    "examples": [
      {
        "input": "nums = \\[2,3,2\\]",
        "output": "3",
        "explanation": "You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses."
      },
      {
        "input": "nums = \\[1,2,3,1\\]",
        "output": "4",
        "explanation": "Rob house 1 (money = 1) and then rob house 3 (money = 3)."
      },
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`0 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "214",
    "slug": "shortest-palindrome",
    "title": "Shortest Palindrome",
    "difficulty": "Hard",
    "description": "You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it. Return _the shortest palindrome you can find by performing this transformation_.",
    "examples": [
      {
        "input": "s = \"aacecaaa\"",
        "output": "\"aaacecaaa\""
      },
      {
        "input": "s = \"abcd\"",
        "output": "\"dcbabcd\""
      }
    ],
    "constraints": [
      "`0 <= s.length <= 5  104`",
      "`s` consists of lowercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "215",
    "slug": "kth-largest-element-in-an-array",
    "title": "Kth Largest Element in an Array",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and an integer `k`, return _the_ `kth` _largest element in the array_. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element. You must solve it in `O(n)` time complexity.",
    "examples": [
      {
        "input": "nums = \\[3,2,1,5,6,4\\], k = 2",
        "output": "5"
      },
      {
        "input": "nums = \\[3,2,3,1,2,4,5,5,6\\], k = 4",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 105`",
      "`-104 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "216",
    "slug": "combination-sum-iii",
    "title": "Combination Sum III",
    "difficulty": "Medium",
    "description": "Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true: *  Only numbers `1` through `9` are used. *  Each number is used **at most once**. Return _a list of all possible valid combinations_. The list must not contain the same combination twice, and the combinations may be returned in any order.",
    "examples": [
      {
        "input": "k = 3, n = 7",
        "output": "\\[\\[1,2,4\\]\\]",
        "explanation": ""
      },
      {
        "input": "k = 3, n = 9",
        "output": "\\[\\[1,2,6\\],\\[1,3,5\\],\\[2,3,4\\]\\]",
        "explanation": ""
      },
      {
        "input": "k = 4, n = 1",
        "output": "\\[\\]",
        "explanation": "There are no valid combinations."
      }
    ],
    "constraints": [
      "`2 <= k <= 9`",
      "`1 <= n <= 60`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "217",
    "slug": "contains-duplicate",
    "title": "Contains Duplicate",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,1\\]",
        "output": "true"
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "false"
      },
      {
        "input": "nums = \\[1,1,1,3,3,4,3,2,4,2\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "218",
    "slug": "the-skyline-problem",
    "title": "The Skyline Problem",
    "difficulty": "Hard",
    "description": "A city's **skyline** is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return _the **skyline** formed by these buildings collectively_. The geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`: *  `lefti` is the x coordinate of the left edge of the `ith` building. *  `righti` is the x coordinate of the right edge of the `ith` building. *  `heighti` is the height of the `ith` building. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`. The **skyline** should be represented as a list of \"key points \" **sorted by their x-coordinate** in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.",
    "examples": [
      {
        "input": "buildings = \\[\\[2,9,10\\],\\[3,7,15\\],\\[5,12,12\\],\\[15,20,10\\],\\[19,24,8\\]\\]",
        "output": "\\[\\[2,10\\],\\[3,15\\],\\[7,12\\],\\[12,0\\],\\[15,10\\],\\[20,8\\],\\[24,0\\]\\]",
        "explanation": ""
      },
      {
        "input": "buildings = \\[\\[0,2,3\\],\\[2,5,3\\]\\]",
        "output": "\\[\\[0,3\\],\\[5,0\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= buildings.length <= 104`",
      "`0 <= lefti < righti <= 231 - 1`",
      "`1 <= heighti <= 231 - 1`",
      "`buildings` is sorted by `lefti` in non-decreasing order."
    ],
    "note": "There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`",
    "follow_up": null
  },
  {
    "id": "219",
    "slug": "contains-duplicate-ii",
    "title": "Contains Duplicate II",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` and an integer `k`, return `true` _if there are two **distinct indices**_ `i` _and_ `j` _in the array such that_ `nums[i] == nums[j]` _and_ `abs(i - j) <= k`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,1\\], k = 3",
        "output": "true"
      },
      {
        "input": "nums = \\[1,0,1,1\\], k = 1",
        "output": "true"
      },
      {
        "input": "nums = \\[1,2,3,1,2,3\\], k = 2",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`",
      "`0 <= k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "220",
    "slug": "contains-duplicate-iii",
    "title": "Contains Duplicate III",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` and two integers `indexDiff` and `valueDiff`. Find a pair of indices `(i, j)` such that: *  `i != j`, *  `abs(i - j) <= indexDiff`. *  `abs(nums[i] - nums[j]) <= valueDiff`, and Return `true` _if such pair exists or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,1\\], indexDiff = 3, valueDiff = 0",
        "output": "true",
        "explanation": "We can choose (i, j) = (0, 3)."
      },
      {
        "input": "nums = \\[1,5,9,1,5,9\\], indexDiff = 2, valueDiff = 3",
        "output": "false",
        "explanation": "After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`",
      "`1 <= indexDiff <= nums.length`",
      "`0 <= valueDiff <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "221",
    "slug": "maximal-square",
    "title": "Maximal Square",
    "difficulty": "Medium",
    "description": "Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, _find the largest square containing only_ `1`'s _and return its area_.",
    "examples": [
      {
        "input": "matrix = \\[\\[ \"1 \", \"0 \", \"1 \", \"0 \", \"0 \"\\],\\[ \"1 \", \"0 \", \"1 \", \"1 \", \"1 \"\\],\\[ \"1 \", \"1 \", \"1 \", \"1 \", \"1 \"\\],\\[ \"1 \", \"0 \", \"0 \", \"1 \", \"0 \"\\]\\]",
        "output": "4"
      },
      {
        "input": "matrix = \\[\\[ \"0 \", \"1 \"\\],\\[ \"1 \", \"0 \"\\]\\]",
        "output": "1"
      },
      {
        "input": "matrix = \\[\\[ \"0 \"\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 300`",
      "`matrix[i][j]` is `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "222",
    "slug": "count-complete-tree-nodes",
    "title": "Count Complete Tree Nodes",
    "difficulty": "Medium",
    "description": "Given the `root` of a **complete** binary tree, return the number of the nodes in the tree. According to **[Wikipedia](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`. Design an algorithm that runs in less than `O(n)` time complexity.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5,6\\]",
        "output": "6"
      },
      {
        "input": "root = \\[\\]",
        "output": "0"
      },
      {
        "input": "root = \\[1\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 5  104]`.",
      "`0 <= Node.val <= 5  104`",
      "The tree is guaranteed to be complete."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "223",
    "slug": "rectangle-area",
    "title": "Rectangle Area",
    "difficulty": "Medium",
    "description": "Given the coordinates of two **rectilinear** rectangles in a 2D plane, return _the total area covered by the two rectangles_. The first rectangle is defined by its **bottom-left** corner `(ax1, ay1)` and its **top-right** corner `(ax2, ay2)`. The second rectangle is defined by its **bottom-left** corner `(bx1, by1)` and its **top-right** corner `(bx2, by2)`.",
    "examples": [
      {
        "input": "ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2",
        "output": "45"
      },
      {
        "input": "ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2",
        "output": "16"
      }
    ],
    "constraints": [
      "`-104 <= ax1 <= ax2 <= 104`",
      "`-104 <= ay1 <= ay2 <= 104`",
      "`-104 <= bx1 <= bx2 <= 104`",
      "`-104 <= by1 <= by2 <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "224",
    "slug": "basic-calculator",
    "title": "Basic Calculator",
    "difficulty": "Hard",
    "description": "Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return _the result of the evaluation_.",
    "examples": [
      {
        "input": "s =  \"1 + 1 \"",
        "output": "2"
      },
      {
        "input": "s =  \" 2-1 + 2  \"",
        "output": "3"
      },
      {
        "input": "s =  \"(1+(4+5+2)-3)+(6+8) \"",
        "output": "23"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 3  105`",
      "`s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`.",
      "`s` represents a valid expression.",
      "`'+'` is not used as a unary operation (i.e., `\"+1 \"` and `\"+(2 + 3) \"` is invalid).",
      "`'-'` could be used as a unary operation (i.e., `\"-1 \"` and `\"-(2 + 3) \"` is valid).",
      "There will be no two consecutive operators in the input.",
      "Every number and running calculation will fit in a signed 32-bit integer."
    ],
    "note": "You are **not** allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.",
    "follow_up": null
  },
  {
    "id": "225",
    "slug": "implement-stack-using-queues",
    "title": "Implement Stack using Queues",
    "difficulty": "Easy",
    "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`). Implement the `MyStack` class: *  `void push(int x)` Pushes element x to the top of the stack. *  `int pop()` Removes the element on the top of the stack and returns it. *  `int top()` Returns the element on the top of the stack. *  `boolean empty()` Returns `true` if the stack is empty, `false` otherwise. **Notes:** *  You must use **only** standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid. *  Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.",
    "examples": [],
    "constraints": [
      "`1 <= x <= 9`",
      "At most `100` calls will be made to `push`, `pop`, `top`, and `empty`.",
      "All the calls to `pop` and `top` are valid."
    ],
    "note": null,
    "follow_up": "Can you implement the stack using only one queue?"
  },
  {
    "id": "226",
    "slug": "invert-binary-tree",
    "title": "Invert Binary Tree",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, invert the tree, and return _its root_.",
    "examples": [
      {
        "input": "root = \\[4,2,7,1,3,6,9\\]",
        "output": "\\[4,7,2,9,6,3,1\\]"
      },
      {
        "input": "root = \\[2,1,3\\]",
        "output": "\\[2,3,1\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 100]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "227",
    "slug": "basic-calculator-ii",
    "title": "Basic Calculator II",
    "difficulty": "Medium",
    "description": "Given a string `s` which represents an expression, _evaluate this expression and return its value_. The integer division should truncate toward zero. You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.",
    "examples": [
      {
        "input": "s = \"3+2\\*2\"",
        "output": "7"
      },
      {
        "input": "s = \" 3/2 \"",
        "output": "1"
      },
      {
        "input": "s = \" 3+5 / 2 \"",
        "output": "5"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 3  105`",
      "`s` consists of integers and operators `('+', '-', '', '/')` separated by some number of spaces.",
      "`s` represents a valid expression.",
      "All the integers in the expression are non-negative integers in the range `[0, 231 - 1]`.",
      "The answer is guaranteed to fit in a 32-bit integer."
    ],
    "note": "You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.",
    "follow_up": null
  },
  {
    "id": "228",
    "slug": "summary-ranges",
    "title": "Summary Ranges",
    "difficulty": "Easy",
    "description": "You are given a **sorted unique** integer array `nums`. A **range** `[a,b]` is the set of all integers from `a` to `b` (inclusive). Return _the **smallest sorted** list of ranges that **cover all the numbers in the array exactly**_. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`. Each range `[a,b]` in the list should be output as: *  `\"a->b \"` if `a != b` *  `\"a \"` if `a == b`",
    "examples": [
      {
        "input": "nums = \\[0,1,2,4,5,7\\]",
        "output": "\\[ \"0->2 \", \"4->5 \", \"7 \"\\]",
        "explanation": "The ranges are:"
      },
      {
        "input": "nums = \\[0,2,3,4,6,8,9\\]",
        "output": "\\[ \"0 \", \"2->4 \", \"6 \", \"8->9 \"\\]",
        "explanation": "The ranges are:"
      }
    ],
    "constraints": [
      "`0 <= nums.length <= 20`",
      "`-231 <= nums[i] <= 231 - 1`",
      "All the values of `nums` are unique.",
      "`nums` is sorted in ascending order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "229",
    "slug": "majority-element-ii",
    "title": "Majority Element II",
    "difficulty": "Medium",
    "description": "Given an integer array of size `n`, find all elements that appear more than `\u230a n/3 \u230b` times.",
    "examples": [
      {
        "input": "nums = \\[3,2,3\\]",
        "output": "\\[3\\]"
      },
      {
        "input": "nums = \\[1\\]",
        "output": "\\[1\\]"
      },
      {
        "input": "nums = \\[1,2\\]",
        "output": "\\[1,2\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  104`",
      "`-109 <= nums[i] <= 109`",
      "Follow up: Could you solve the problem in linear time and in `O(1)` space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "230",
    "slug": "kth-smallest-element-in-a-bst",
    "title": "Kth Smallest Element in a BST",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary search tree, and an integer `k`, return _the_ `kth` _smallest value (**1-indexed**) of all the values of the nodes in the tree_.",
    "examples": [
      {
        "input": "root = \\[3,1,4,null,2\\], k = 1",
        "output": "1"
      },
      {
        "input": "root = \\[5,3,6,2,4,null,null,1\\], k = 3",
        "output": "3"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is `n`.",
      "`1 <= k <= n <= 104`",
      "`0 <= Node.val <= 104`",
      "Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "231",
    "slug": "power-of-two",
    "title": "Power of Two",
    "difficulty": "Easy",
    "description": "Given an integer `n`, return _`true` if it is a power of two. Otherwise, return `false`_. An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.",
    "examples": [
      {
        "input": "n = 1",
        "output": "true",
        "explanation": "20 = 1"
      },
      {
        "input": "n = 16",
        "output": "true",
        "explanation": "24 = 16"
      },
      {
        "input": "n = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "`-231 <= n <= 231 - 1`",
      "Follow up: Could you solve it without loops/recursion?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "232",
    "slug": "implement-queue-using-stacks",
    "title": "Implement Queue using Stacks",
    "difficulty": "Easy",
    "description": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`). Implement the `MyQueue` class: *  `void push(int x)` Pushes element x to the back of the queue. *  `int pop()` Removes the element from the front of the queue and returns it. *  `int peek()` Returns the element at the front of the queue. *  `boolean empty()` Returns `true` if the queue is empty, `false` otherwise. **Notes:** *  You must use **only** standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid. *  Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.",
    "examples": [],
    "constraints": [
      "`1 <= x <= 9`",
      "At most `100` calls will be made to `push`, `pop`, `peek`, and `empty`.",
      "All the calls to `pop` and `peek` are valid."
    ],
    "note": null,
    "follow_up": "Can you implement the queue such that each operation is **[amortized](https://en.wikipedia.org/wiki/Amortized_analysis)** `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer."
  },
  {
    "id": "233",
    "slug": "number-of-digit-one",
    "title": "Number of Digit One",
    "difficulty": "Hard",
    "description": "Given an integer `n`, count _the total number of digit_ `1` _appearing in all non-negative integers less than or equal to_ `n`.",
    "examples": [
      {
        "input": "n = 13",
        "output": "6"
      },
      {
        "input": "n = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "`0 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "234",
    "slug": "palindrome-linked-list",
    "title": "Palindrome Linked List",
    "difficulty": "Easy",
    "description": "Given the `head` of a singly linked list, return `true` _if it is a_ _palindrome_ _or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "head = \\[1,2,2,1\\]",
        "output": "true"
      },
      {
        "input": "head = \\[1,2\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[1, 105]`.",
      "`0 <= Node.val <= 9`",
      "Follow up: Could you do it in `O(n)` time and `O(1)` space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "235",
    "slug": "lowest-common-ancestor-of-a-binary-search-tree",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "difficulty": "Medium",
    "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST. According to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \"The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\"",
    "examples": [
      {
        "input": "root = \\[6,2,8,0,4,7,9,null,null,3,5\\], p = 2, q = 8",
        "output": "6",
        "explanation": "The LCA of nodes 2 and 8 is 6."
      },
      {
        "input": "root = \\[6,2,8,0,4,7,9,null,null,3,5\\], p = 2, q = 4",
        "output": "2",
        "explanation": "The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition."
      },
      {
        "input": "root = \\[2,1\\], p = 2, q = 1",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 105]`.",
      "`-109 <= Node.val <= 109`",
      "All `Node.val` are unique.",
      "`p != q`",
      "`p` and `q` will exist in the BST."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "236",
    "slug": "lowest-common-ancestor-of-a-binary-tree",
    "title": "Lowest Common Ancestor of a Binary Tree",
    "difficulty": "Medium",
    "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \"The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\"",
    "examples": [
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 1",
        "output": "3",
        "explanation": "The LCA of nodes 5 and 1 is 3."
      },
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 4",
        "output": "5",
        "explanation": "The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition."
      },
      {
        "input": "root = \\[1,2\\], p = 1, q = 2",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 105]`.",
      "`-109 <= Node.val <= 109`",
      "All `Node.val` are unique.",
      "`p != q`",
      "`p` and `q` will exist in the tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "237",
    "slug": "delete-node-in-a-linked-list",
    "title": "Delete Node in a Linked List",
    "difficulty": "Medium",
    "description": "There is a singly-linked list `head` and we want to delete a node `node` in it. You are given the node to be deleted `node`. You will **not be given access** to the first node of `head`. All the values of the linked list are **unique**, and it is guaranteed that the given node `node` is not the last node in the linked list. Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean: *  The value of the given node should not exist in the linked list. *  The number of nodes in the linked list should decrease by one. *  All the values before `node` should be in the same order. *  All the values after `node` should be in the same order. **Custom testing:** *  For the input, you should provide the entire linked list `head` and the node to be given `node`. `node` should not be the last node of the list and should be an actual node in the list. *  We will build the linked list and pass the node to your function. *  The output will be the entire list after calling your function.",
    "examples": [
      {
        "input": "head = \\[4,5,1,9\\], node = 5",
        "output": "\\[4,1,9\\]",
        "explanation": "You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function."
      },
      {
        "input": "head = \\[4,5,1,9\\], node = 1",
        "output": "\\[4,5,9\\]",
        "explanation": "You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function."
      }
    ],
    "constraints": [
      "The number of the nodes in the given list is in the range `[2, 1000]`.",
      "`-1000 <= Node.val <= 1000`",
      "The value of each node in the list is unique.",
      "The `node` to be deleted is in the list and is not a tail node."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "238",
    "slug": "product-of-array-except-self",
    "title": "Product of Array Except Self",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _an array_ `answer` _such that_ `answer[i]` _is equal to the product of all the elements of_ `nums` _except_ `nums[i]`. The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer. You must write an algorithm that runs in `O(n)` time and without using the division operation.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "\\[24,12,8,6\\]"
      },
      {
        "input": "nums = \\[-1,1,0,-3,3\\]",
        "output": "\\[0,0,9,0,0\\]"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`-30 <= nums[i] <= 30`",
      "The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.",
      "Follow up: Can you solve the problem in `O(1)` extra space complexity? (The output array does not count as extra space for space complexity analysis.)"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "239",
    "slug": "sliding-window-maximum",
    "title": "Sliding Window Maximum",
    "difficulty": "Hard",
    "description": "You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return _the max sliding window_.",
    "examples": [
      {
        "input": "nums = \\[1,3,-1,-3,5,3,6,7\\], k = 3",
        "output": "\\[3,3,5,5,6,7\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[1\\], k = 1",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-104 <= nums[i] <= 104`",
      "`1 <= k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "240",
    "slug": "search-a-2d-matrix-ii",
    "title": "Search a 2D Matrix II",
    "difficulty": "Medium",
    "description": "Write an efficient algorithm that searches for a value `target` in an `m x n` integer matrix `matrix`. This matrix has the following properties: *  Integers in each row are sorted in ascending from left to right. *  Integers in each column are sorted in ascending from top to bottom.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,4,7,11,15\\],\\[2,5,8,12,19\\],\\[3,6,9,16,22\\],\\[10,13,14,17,24\\],\\[18,21,23,26,30\\]\\], target = 5",
        "output": "true"
      },
      {
        "input": "matrix = \\[\\[1,4,7,11,15\\],\\[2,5,8,12,19\\],\\[3,6,9,16,22\\],\\[10,13,14,17,24\\],\\[18,21,23,26,30\\]\\], target = 20",
        "output": "false"
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= n, m <= 300`",
      "`-109 <= matrix[i][j] <= 109`",
      "All the integers in each row are sorted in ascending order.",
      "All the integers in each column are sorted in ascending order.",
      "`-109 <= target <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "241",
    "slug": "different-ways-to-add-parentheses",
    "title": "Different Ways to Add Parentheses",
    "difficulty": "Medium",
    "description": "Given a string `expression` of numbers and operators, return _all possible results from computing all the different possible ways to group numbers and operators_. You may return the answer in **any order**. The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed `104`.",
    "examples": [
      {
        "input": "expression =  \"2-1-1 \"",
        "output": "\\[0,2\\]",
        "explanation": ""
      },
      {
        "input": "expression =  \"2\\*3-4\\*5 \"",
        "output": "\\[-34,-14,-10,-10,10\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= expression.length <= 20`",
      "`expression` consists of digits and the operator `'+'`, `'-'`, and `''`.",
      "All the integer values in the input expression are in the range `[0, 99]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "242",
    "slug": "valid-anagram",
    "title": "Valid Anagram",
    "difficulty": "Easy",
    "description": "Given two strings `s` and `t`, return `true` _if_ `t` _is an anagram of_ `s`_, and_ `false` _otherwise_. An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "examples": [
      {
        "input": "s = \"anagram\", t = \"nagaram\"",
        "output": "true"
      },
      {
        "input": "s = \"rat\", t = \"car\"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= s.length, t.length <= 5  104`",
      "`s` and `t` consist of lowercase English letters.",
      "Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "243",
    "slug": "shortest-word-distance",
    "title": "Shortest Word Distance",
    "difficulty": "Easy",
    "description": "Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, return _the shortest distance between these two words in the list_.",
    "examples": [
      {
        "input": "wordsDict = \\[ \"practice \",  \"makes \",  \"perfect \",  \"coding \",  \"makes \"\\], word1 =  \"coding \", word2 =  \"practice \"",
        "output": "3"
      },
      {
        "input": "wordsDict = \\[ \"practice \",  \"makes \",  \"perfect \",  \"coding \",  \"makes \"\\], word1 =  \"makes \", word2 =  \"coding \"",
        "output": "1"
      }
    ],
    "constraints": [
      "`2 <= wordsDict.length <= 3  104`",
      "`1 <= wordsDict[i].length <= 10`",
      "`wordsDict[i]` consists of lowercase English letters.",
      "`word1` and `word2` are in `wordsDict`.",
      "`word1 != word2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "244",
    "slug": "shortest-word-distance-ii",
    "title": "Shortest Word Distance II",
    "difficulty": "Medium",
    "description": "Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array. Implement the `WordDistance` class: *  `WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`. *  `int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.",
    "examples": [],
    "constraints": [
      "`1 <= wordsDict.length <= 3  104`",
      "`1 <= wordsDict[i].length <= 10`",
      "`wordsDict[i]` consists of lowercase English letters.",
      "`word1` and `word2` are in `wordsDict`.",
      "`word1 != word2`",
      "At most `5000` calls will be made to `shortest`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "245",
    "slug": "shortest-word-distance-iii",
    "title": "Shortest Word Distance III",
    "difficulty": "Medium",
    "description": "Given an array of strings `wordsDict` and two strings that already exist in the array `word1` and `word2`, return _the shortest distance between the occurrence of these two words in the list_. **Note** that `word1` and `word2` may be the same. It is guaranteed that they represent **two individual words** in the list.",
    "examples": [
      {
        "input": "wordsDict = \\[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"\\], word1 = \"makes\", word2 = \"coding\"",
        "output": "1"
      },
      {
        "input": "wordsDict = \\[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"\\], word1 = \"makes\", word2 = \"makes\"",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= wordsDict.length <= 105`",
      "`1 <= wordsDict[i].length <= 10`",
      "`wordsDict[i]` consists of lowercase English letters.",
      "`word1` and `word2` are in `wordsDict`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "246",
    "slug": "strobogrammatic-number",
    "title": "Strobogrammatic Number",
    "difficulty": "Easy",
    "description": "Given a string `num` which represents an integer, return `true` _if_ `num` _is a **strobogrammatic number**_. A **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).",
    "examples": [
      {
        "input": "num =  \"69 \"",
        "output": "true"
      },
      {
        "input": "num =  \"88 \"",
        "output": "true"
      },
      {
        "input": "num =  \"962 \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= num.length <= 50`",
      "`num` consists of only digits.",
      "`num` does not contain any leading zeros except for zero itself."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "247",
    "slug": "strobogrammatic-number-ii",
    "title": "Strobogrammatic Number II",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return all the **strobogrammatic numbers** that are of length `n`. You may return the answer in **any order**. A **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).",
    "examples": [
      {
        "input": "n = 2",
        "output": "\\[\"11\",\"69\",\"88\",\"96\"\\]"
      },
      {
        "input": "n = 1",
        "output": "\\[\"0\",\"1\",\"8\"\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 14`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "248",
    "slug": "strobogrammatic-number-iii",
    "title": "Strobogrammatic Number III",
    "difficulty": "Hard",
    "description": "Given two strings low and high that represent two integers `low` and `high` where `low <= high`, return _the number of **strobogrammatic numbers** in the range_ `[low, high]`. A **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).",
    "examples": [
      {
        "input": "low = \"50\", high = \"100\"",
        "output": "3"
      },
      {
        "input": "low = \"0\", high = \"0\"",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= low.length, high.length <= 15`",
      "`low` and `high` consist of only digits.",
      "`low <= high`",
      "`low` and `high` do not contain any leading zeros except for zero itself."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "249",
    "slug": "group-shifted-strings",
    "title": "Group Shifted Strings",
    "difficulty": "Medium",
    "description": "We can shift a string by shifting each of its letters to its successive letter. *  For example, `\"abc \"` can be shifted to be `\"bcd \"`. We can keep shifting the string to form a sequence. *  For example, we can keep shifting `\"abc \"` to form the sequence: `\"abc \" -> \"bcd \" -> ... -> \"xyz \"`. Given an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "strings = \\[\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"\\]",
        "output": "\\[\\[\"acef\"\\],\\[\"a\",\"z\"\\],\\[\"abc\",\"bcd\",\"xyz\"\\],\\[\"az\",\"ba\"\\]\\]"
      },
      {
        "input": "strings = \\[\"a\"\\]",
        "output": "\\[\\[\"a\"\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= strings.length <= 200`",
      "`1 <= strings[i].length <= 50`",
      "`strings[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "250",
    "slug": "count-univalue-subtrees",
    "title": "Count Univalue Subtrees",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the number of **uni-value**_ _subtrees_. A **uni-value subtree** means all nodes of the subtree have the same value.",
    "examples": [
      {
        "input": "root = \\[5,1,5,5,5,null,5\\]",
        "output": "4"
      },
      {
        "input": "root = \\[\\]",
        "output": "0"
      },
      {
        "input": "root = \\[5,5,5,5,5,null,5\\]",
        "output": "6"
      }
    ],
    "constraints": [
      "The number of the node in the tree will be in the range `[0, 1000]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "251",
    "slug": "flatten-2d-vector",
    "title": "Flatten 2D Vector",
    "difficulty": "Medium",
    "description": "Design an iterator to flatten a 2D vector. It should support the `next` and `hasNext` operations. Implement the `Vector2D` class: *  `Vector2D(int[][] vec)` initializes the object with the 2D vector `vec`. *  `next()` returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to `next` are valid. *  `hasNext()` returns `true` if there are still some elements in the vector, and `false` otherwise.",
    "examples": [],
    "constraints": [
      "`0 <= vec.length <= 200`",
      "`0 <= vec[i].length <= 500`",
      "`-500 <= vec[i][j] <= 500`",
      "At most `105` calls will be made to `next` and `hasNext`.",
      "Follow up: As an added challenge, try to code it using only [iterators in C++](http://www.cplusplus.com/reference/iterator/iterator/) or [iterators in Java](http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "252",
    "slug": "meeting-rooms",
    "title": "Meeting Rooms",
    "difficulty": "Easy",
    "description": "Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.",
    "examples": [
      {
        "input": "intervals = \\[\\[0,30\\],\\[5,10\\],\\[15,20\\]\\]",
        "output": "false"
      },
      {
        "input": "intervals = \\[\\[7,10\\],\\[2,4\\]\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`0 <= intervals.length <= 104`",
      "`intervals[i].length == 2`",
      "`0 <= starti < endi <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "253",
    "slug": "meeting-rooms-ii",
    "title": "Meeting Rooms II",
    "difficulty": "Medium",
    "description": "Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return _the minimum number of conference rooms required_.",
    "examples": [
      {
        "input": "intervals = \\[\\[0,30\\],\\[5,10\\],\\[15,20\\]\\]",
        "output": "2"
      },
      {
        "input": "intervals = \\[\\[7,10\\],\\[2,4\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= intervals.length <= 104`",
      "`0 <= starti < endi <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "254",
    "slug": "factor-combinations",
    "title": "Factor Combinations",
    "difficulty": "Medium",
    "description": "Numbers can be regarded as the product of their factors. *  For example, `8 = 2 x 2 x 2 = 2 x 4`. Given an integer `n`, return _all possible combinations of its factors_. You may return the answer in **any order**. **Note** that the factors should be in the range `[2, n - 1]`.",
    "examples": [
      {
        "input": "n = 1",
        "output": "\\[\\]"
      },
      {
        "input": "n = 12",
        "output": "\\[\\[2,6\\],\\[3,4\\],\\[2,2,3\\]\\]"
      },
      {
        "input": "n = 37",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "255",
    "slug": "verify-preorder-sequence-in-binary-search-tree",
    "title": "Verify Preorder Sequence in Binary Search Tree",
    "difficulty": "Medium",
    "description": "Given an array of **unique** integers `preorder`, return `true` _if it is the correct preorder traversal sequence of a binary search tree_.",
    "examples": [
      {
        "input": "preorder = \\[5,2,1,3,6\\]",
        "output": "true"
      },
      {
        "input": "preorder = \\[5,2,6,1,3\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= preorder.length <= 104`",
      "`1 <= preorder[i] <= 104`",
      "All the elements of `preorder` are unique.",
      "Follow up: Could you do it using only constant space complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "256",
    "slug": "paint-house",
    "title": "Paint House",
    "difficulty": "Medium",
    "description": "There is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color. The cost of painting each house with a certain color is represented by an `n x 3` cost matrix `costs`. *  For example, `costs[0][0]` is the cost of painting house `0` with the color red; `costs[1][2]` is the cost of painting house 1 with color green, and so on... Return _the minimum cost to paint all houses_.",
    "examples": [
      {
        "input": "costs = \\[\\[17,2,17\\],\\[16,16,5\\],\\[14,3,19\\]\\]",
        "output": "10",
        "explanation": "Paint house 0 into blue, paint house 1 into green, paint house 2 into blue."
      },
      {
        "input": "costs = \\[\\[7,6,2\\]\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`costs.length == n`",
      "`costs[i].length == 3`",
      "`1 <= n <= 100`",
      "`1 <= costs[i][j] <= 20`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "257",
    "slug": "binary-tree-paths",
    "title": "Binary Tree Paths",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, return _all root-to-leaf paths in **any order**_. A **leaf** is a node with no children.",
    "examples": [
      {
        "input": "root = \\[1,2,3,null,5\\]",
        "output": "\\[ \"1->2->5 \", \"1->3 \"\\]"
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[ \"1 \"\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 100]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "258",
    "slug": "add-digits",
    "title": "Add Digits",
    "difficulty": "Easy",
    "description": "Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.",
    "examples": [
      {
        "input": "num = 38",
        "output": "2",
        "explanation": "The process is"
      },
      {
        "input": "num = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "`0 <= num <= 231 - 1`",
      "Follow up: Could you do it without any loop/recursion in `O(1)` runtime?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "259",
    "slug": "3sum-smaller",
    "title": "3Sum Smaller",
    "difficulty": "Medium",
    "description": "Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.",
    "examples": [
      {
        "input": "nums = \\[-2,0,1,3\\], target = 2",
        "output": "2",
        "explanation": "Because there are two triplets which sums are less than 2:"
      },
      {
        "input": "nums = \\[\\], target = 0",
        "output": "0"
      },
      {
        "input": "nums = \\[0\\], target = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`0 <= n <= 3500`",
      "`-100 <= nums[i] <= 100`",
      "`-100 <= target <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "260",
    "slug": "single-number-iii",
    "title": "Single Number III",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in **any order**. You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.",
    "examples": [
      {
        "input": "nums = \\[1,2,1,3,2,5\\]",
        "output": "\\[3,5\\]"
      },
      {
        "input": "nums = \\[-1,0\\]",
        "output": "\\[-1,0\\]"
      },
      {
        "input": "nums = \\[0,1\\]",
        "output": "\\[1,0\\]"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 3  104`",
      "`-231 <= nums[i] <= 231 - 1`",
      "Each integer in `nums` will appear twice, only two integers will appear once."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "261",
    "slug": "graph-valid-tree",
    "title": "Graph Valid Tree",
    "difficulty": "Medium",
    "description": "You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph. Return `true` _if the edges of the given graph make up a valid tree, and_ `false` _otherwise_.",
    "examples": [
      {
        "input": "n = 5, edges = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\],\\[1,4\\]\\]",
        "output": "true"
      },
      {
        "input": "n = 5, edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[1,3\\],\\[1,4\\]\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= n <= 2000`",
      "`0 <= edges.length <= 5000`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "There are no self-loops or repeated edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "263",
    "slug": "ugly-number",
    "title": "Ugly Number",
    "difficulty": "Easy",
    "description": "An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`. Given an integer `n`, return `true` _if_ `n` _is an **ugly number**_.",
    "examples": [
      {
        "input": "n = 6",
        "output": "true",
        "explanation": "6 = 2 \\* 3"
      },
      {
        "input": "n = 1",
        "output": "true",
        "explanation": "1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."
      },
      {
        "input": "n = 14",
        "output": "false",
        "explanation": "14 is not ugly since it includes the prime factor 7."
      }
    ],
    "constraints": [
      "`-231 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "264",
    "slug": "ugly-number-ii",
    "title": "Ugly Number II",
    "difficulty": "Medium",
    "description": "An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`. Given an integer `n`, return _the_ `nth` _**ugly number**_.",
    "examples": [
      {
        "input": "n = 10",
        "output": "12",
        "explanation": "\\[1, 2, 3, 4, 5, 6, 8, 9, 10, 12\\] is the sequence of the first 10 ugly numbers."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."
      }
    ],
    "constraints": [
      "`1 <= n <= 1690`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "265",
    "slug": "paint-house-ii",
    "title": "Paint House II",
    "difficulty": "Hard",
    "description": "There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color. The cost of painting each house with a certain color is represented by an `n x k` cost matrix costs. *  For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on... Return _the minimum cost to paint all houses_.",
    "examples": [
      {
        "input": "costs = \\[\\[1,5,3\\],\\[2,9,4\\]\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "costs = \\[\\[1,3\\],\\[2,4\\]\\]",
        "output": "5"
      }
    ],
    "constraints": [
      "`costs.length == n`",
      "`costs[i].length == k`",
      "`1 <= n <= 100`",
      "`2 <= k <= 20`",
      "`1 <= costs[i][j] <= 20`",
      "Follow up: Could you solve it in `O(nk)` runtime?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "266",
    "slug": "palindrome-permutation",
    "title": "Palindrome Permutation",
    "difficulty": "Easy",
    "description": "Given a string `s`, return `true` _if a permutation of the string could form a_ _**palindrome**_ _and_ `false` _otherwise_.",
    "examples": [
      {
        "input": "s =  \"code \"",
        "output": "false"
      },
      {
        "input": "s =  \"aab \"",
        "output": "true"
      },
      {
        "input": "s =  \"carerac \"",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5000`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "267",
    "slug": "palindrome-permutation-ii",
    "title": "Palindrome Permutation II",
    "difficulty": "Medium",
    "description": "Given a string s, return _all the palindromic permutations (without duplicates) of it_. You may return the answer in **any order**. If `s` has no palindromic permutation, return an empty list.",
    "examples": [
      {
        "input": "s = \"aabb\"",
        "output": "\\[\"abba\",\"baab\"\\]"
      },
      {
        "input": "s = \"abc\"",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 16`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "268",
    "slug": "missing-number",
    "title": "Missing Number",
    "difficulty": "Easy",
    "description": "Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return _the only number in the range that is missing from the array._",
    "examples": [
      {
        "input": "nums = \\[3,0,1\\]",
        "output": "2",
        "explanation": "n = 3 since there are 3 numbers, so all numbers are in the range \\[0,3\\]. 2 is the missing number in the range since it does not appear in nums."
      },
      {
        "input": "nums = \\[0,1\\]",
        "output": "2",
        "explanation": "n = 2 since there are 2 numbers, so all numbers are in the range \\[0,2\\]. 2 is the missing number in the range since it does not appear in nums."
      },
      {
        "input": "nums = \\[9,6,4,2,3,5,7,0,1\\]",
        "output": "8",
        "explanation": "n = 9 since there are 9 numbers, so all numbers are in the range \\[0,9\\]. 8 is the missing number in the range since it does not appear in nums."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 104`",
      "`0 <= nums[i] <= n`",
      "All the numbers of `nums` are unique.",
      "Follow up: Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "269",
    "slug": "alien-dictionary",
    "title": "Alien Dictionary",
    "difficulty": "Hard",
    "description": "There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you. You are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are **sorted lexicographically** by the rules of this new language. Return _a string of the unique letters in the new alien language sorted in **lexicographically increasing order** by the new language's rules._ If there is no solution, return `\" \"`_._ If there are multiple solutions, return _**any of them**_.",
    "examples": [
      {
        "input": "words = \\[ \"wrt \", \"wrf \", \"er \", \"ett \", \"rftt \"\\]",
        "output": "\"wertf \""
      },
      {
        "input": "words = \\[ \"z \", \"x \"\\]",
        "output": "\"zx \""
      },
      {
        "input": "words = \\[ \"z \", \"x \", \"z \"\\]",
        "output": "\" \"",
        "explanation": "The order is invalid, so return ` \" \"`."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 100`",
      "`words[i]` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "270",
    "slug": "closest-binary-search-tree-value",
    "title": "Closest Binary Search Tree Value",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary search tree and a `target` value, return _the value in the BST that is closest to the_ `target`. If there are multiple answers, print the smallest.",
    "examples": [
      {
        "input": "root = \\[4,2,5,1,3\\], target = 3.714286",
        "output": "4"
      },
      {
        "input": "root = \\[1\\], target = 4.428571",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`0 <= Node.val <= 109`",
      "`-109 <= target <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "271",
    "slug": "encode-and-decode-strings",
    "title": "Encode and Decode Strings",
    "difficulty": "Medium",
    "description": "Design an algorithm to encode **a list of strings** to **a string**. The encoded string is then sent over the network and is decoded back to the original list of strings. Machine 1 (sender) has the function: string encode(vector strs) { // ... your code return encoded\\_string; } Machine 2 (receiver) has the function: vector decode(string s) { //... your code return strs; } So Machine 1 does: string encoded\\_string = encode(strs); and Machine 2 does: vector strs2 = decode(encoded\\_string); `strs2` in Machine 2 should be the same as `strs` in Machine 1. Implement the `encode` and `decode` methods. You are not allowed to solve the problem using any serialize methods (such as `eval`).",
    "examples": [
      {
        "input": "dummy\\_input = \\[ \"Hello \", \"World \"\\]",
        "output": "\\[ \"Hello \", \"World \"\\]",
        "explanation": ""
      },
      {
        "input": "dummy\\_input = \\[ \" \"\\]",
        "output": "\\[ \" \"\\]"
      }
    ],
    "constraints": [
      "`1 <= strs.length <= 200`",
      "`0 <= strs[i].length <= 200`",
      "`strs[i]` contains any possible characters out of `256` valid ASCII characters.",
      "Follow up: Could you write a generalized algorithm to work on any possible set of characters?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "272",
    "slug": "closest-binary-search-tree-value-ii",
    "title": "Closest Binary Search Tree Value II",
    "difficulty": "Hard",
    "description": "Given the `root` of a binary search tree, a `target` value, and an integer `k`, return _the_ `k` _values in the BST that are closest to the_ `target`. You may return the answer in **any order**. You are **guaranteed** to have only one unique set of `k` values in the BST that are closest to the `target`.",
    "examples": [
      {
        "input": "root = \\[4,2,5,1,3\\], target = 3.714286, k = 2",
        "output": "\\[4,3\\]"
      },
      {
        "input": "root = \\[1\\], target = 0.000000, k = 1",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is `n`.",
      "`1 <= k <= n <= 104`.",
      "`0 <= Node.val <= 109`",
      "`-109 <= target <= 109`",
      "Follow up: Assume that the BST is balanced. Could you solve it in less than `O(n)` runtime (where `n = total nodes`)?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "273",
    "slug": "integer-to-english-words",
    "title": "Integer to English Words",
    "difficulty": "Hard",
    "description": "Convert a non-negative integer `num` to its English words representation.",
    "examples": [
      {
        "input": "num = 123",
        "output": "\"One Hundred Twenty Three \""
      },
      {
        "input": "num = 12345",
        "output": "\"Twelve Thousand Three Hundred Forty Five \""
      },
      {
        "input": "num = 1234567",
        "output": "\"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven \""
      }
    ],
    "constraints": [
      "`0 <= num <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "274",
    "slug": "h-index",
    "title": "H-Index",
    "difficulty": "Medium",
    "description": "Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return _the researcher's h-index_. According to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.",
    "examples": [
      {
        "input": "citations = \\[3,0,6,1,5\\]",
        "output": "3",
        "explanation": "\\[3,0,6,1,5\\] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively."
      },
      {
        "input": "citations = \\[1,3,1\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`n == citations.length`",
      "`1 <= n <= 5000`",
      "`0 <= citations[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "275",
    "slug": "h-index-ii",
    "title": "H-Index II",
    "difficulty": "Medium",
    "description": "Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in **ascending order**, return _the researcher's h-index_. According to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times. You must write an algorithm that runs in logarithmic time.",
    "examples": [
      {
        "input": "citations = \\[0,1,3,5,6\\]",
        "output": "3",
        "explanation": "\\[0,1,3,5,6\\] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively."
      },
      {
        "input": "citations = \\[1,2,100\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`n == citations.length`",
      "`1 <= n <= 105`",
      "`0 <= citations[i] <= 1000`",
      "`citations` is sorted in ascending order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "276",
    "slug": "paint-fence",
    "title": "Paint Fence",
    "difficulty": "Medium",
    "description": "You are painting a fence of `n` posts with `k` different colors. You must paint the posts following these rules: *  Every post must be painted **exactly one** color. *  There **cannot** be three or more **consecutive** posts with the same color. Given the two integers `n` and `k`, return _the **number of ways** you can paint the fence_.",
    "examples": [
      {
        "input": "n = 3, k = 2",
        "output": "6",
        "explanation": "All the possibilities are shown."
      },
      {
        "input": "n = 1, k = 1",
        "output": "1"
      },
      {
        "input": "n = 7, k = 2",
        "output": "42"
      }
    ],
    "constraints": [
      "`1 <= n <= 50`",
      "`1 <= k <= 105`",
      "The testcases are generated such that the answer is in the range `[0, 231 - 1]` for the given `n` and `k`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "277",
    "slug": "find-the-celebrity",
    "title": "Find the Celebrity",
    "difficulty": "Medium",
    "description": "Suppose you are at a party with `n` people labeled from `0` to `n - 1` and among them, there may exist one celebrity. The definition of a celebrity is that all the other `n - 1` people know the celebrity, but the celebrity does not know any of them. Now you want to find out who the celebrity is or verify that there is not one. You are only allowed to ask questions like: \"Hi, A. Do you know B? \" to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense). You are given a helper function `bool knows(a, b)` that tells you whether `a` knows `b`. Implement a function `int findCelebrity(n)`. There will be exactly one celebrity if they are at the party. Return _the celebrity's label if there is a celebrity at the party_. If there is no celebrity, return `-1`.",
    "examples": [
      {
        "input": "graph = \\[\\[1,1,0\\],\\[0,1,0\\],\\[1,1,1\\]\\]",
        "output": "1",
        "explanation": "There are three persons labeled with 0, 1 and 2. graph\\[i\\]\\[j\\] = 1 means person i knows person j, otherwise graph\\[i\\]\\[j\\] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody."
      },
      {
        "input": "graph = \\[\\[1,0,1\\],\\[1,1,0\\],\\[0,1,1\\]\\]",
        "output": "-1",
        "explanation": "There is no celebrity."
      }
    ],
    "constraints": [
      "`n == graph.length == graph[i].length`",
      "`2 <= n <= 100`",
      "`graph[i][j]` is `0` or `1`.",
      "`graph[i][i] == 1`",
      "Follow up: If the maximum number of allowed calls to the API `knows` is `3  n`, could you find a solution without exceeding the maximum number of calls?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "278",
    "slug": "first-bad-version",
    "title": "First Bad Version",
    "difficulty": "Easy",
    "description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.",
    "examples": [
      {
        "input": "n = 5, bad = 4",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "n = 1, bad = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= bad <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "279",
    "slug": "perfect-squares",
    "title": "Perfect Squares",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _the least number of perfect square numbers that sum to_ `n`. A **perfect square** is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not.",
    "examples": [
      {
        "input": "n = 12",
        "output": "3",
        "explanation": "12 = 4 + 4 + 4."
      },
      {
        "input": "n = 13",
        "output": "2",
        "explanation": "13 = 4 + 9."
      }
    ],
    "constraints": [
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "280",
    "slug": "wiggle-sort",
    "title": "Wiggle Sort",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`. You may assume the input array always has a valid answer.",
    "examples": [
      {
        "input": "nums = \\[3,5,2,1,6,4\\]",
        "output": "\\[3,5,1,6,2,4\\]",
        "explanation": "\\[1,6,2,5,3,4\\] is also accepted."
      },
      {
        "input": "nums = \\[6,6,5,6,3,8\\]",
        "output": "\\[6,6,5,6,3,8\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  104`",
      "`0 <= nums[i] <= 104`",
      "It is guaranteed that there will be an answer for the given input `nums`.",
      "Follow up: Could you solve the problem in `O(n)` time complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "281",
    "slug": "zigzag-iterator",
    "title": "Zigzag Iterator",
    "difficulty": "Medium",
    "description": "Given two vectors of integers `v1` and `v2`, implement an iterator to return their elements alternately. Implement the `ZigzagIterator` class: *  `ZigzagIterator(List v1, List v2)` initializes the object with the two vectors `v1` and `v2`. *  `boolean hasNext()` returns `true` if the iterator still has elements, and `false` otherwise. *  `int next()` returns the current element of the iterator and moves the iterator to the next element.",
    "examples": [
      {
        "input": "v1 = \\[1,2\\], v2 = \\[3,4,5,6\\]",
        "output": "\\[1,3,2,4,5,6\\]",
        "explanation": "By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: \\[1,3,2,4,5,6\\]."
      },
      {
        "input": "v1 = \\[1\\], v2 = \\[\\]",
        "output": "\\[1\\]"
      },
      {
        "input": "v1 = \\[\\], v2 = \\[1\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "`0 <= v1.length, v2.length <= 1000`",
      "`1 <= v1.length + v2.length <= 2000`",
      "`-231 <= v1[i], v2[i] <= 231 - 1`",
      "Follow up: What if you are given `k` vectors? How well can your code be extended to such cases?",
      "Clarification for the follow-up question:",
      "Follow-up Example:",
      "Input: v1 = \\[1,2,3\\], v2 = \\[4,5,6,7\\], v3 = \\[8,9\\]",
      "Output: \\[1,4,8,2,5,9,3,6,7\\]"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "282",
    "slug": "expression-add-operators",
    "title": "Expression Add Operators",
    "difficulty": "Hard",
    "description": "Given a string `num` that contains only digits and an integer `target`, return _**all possibilities** to insert the binary operators_ `'+'`_,_ `'-'`_, and/or_ `'*'` _between the digits of_ `num` _so that the resultant expression evaluates to the_ `target` _value_. Note that operands in the returned expressions **should not** contain leading zeros.",
    "examples": [
      {
        "input": "num =  \"123 \", target = 6",
        "output": "\\[ \"1\\*2\\*3 \", \"1+2+3 \"\\]",
        "explanation": "Both  \"1\\*2\\*3 \" and  \"1+2+3 \" evaluate to 6."
      },
      {
        "input": "num =  \"232 \", target = 8",
        "output": "\\[ \"2\\*3+2 \", \"2+3\\*2 \"\\]",
        "explanation": "Both  \"2\\*3+2 \" and  \"2+3\\*2 \" evaluate to 8."
      },
      {
        "input": "num =  \"3456237490 \", target = 9191",
        "output": "\\[\\]",
        "explanation": "There are no expressions that can be created from  \"3456237490 \" to evaluate to 9191."
      }
    ],
    "constraints": [
      "`1 <= num.length <= 10`",
      "`num` consists of only digits.",
      "`-231 <= target <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "283",
    "slug": "move-zeroes",
    "title": "Move Zeroes",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements. **Note** that you must do this in-place without making a copy of the array.",
    "examples": [
      {
        "input": "nums = \\[0,1,0,3,12\\]",
        "output": "\\[1,3,12,0,0\\]"
      },
      {
        "input": "nums = \\[0\\]",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-231 <= nums[i] <= 231 - 1`",
      "Follow up: Could you minimize the total number of operations done?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "284",
    "slug": "peeking-iterator",
    "title": "Peeking Iterator",
    "difficulty": "Medium",
    "description": "Design an iterator that supports the `peek` operation on an existing iterator in addition to the `hasNext` and the `next` operations. Implement the `PeekingIterator` class: *  `PeekingIterator(Iterator nums)` Initializes the object with the given integer iterator `iterator`. *  `int next()` Returns the next element in the array and moves the pointer to the next element. *  `boolean hasNext()` Returns `true` if there are still elements in the array. *  `int peek()` Returns the next element in the array **without** moving the pointer.",
    "examples": [],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 1000`",
      "All the calls to `next` and `peek` are valid.",
      "At most `1000` calls will be made to `next`, `hasNext`, and `peek`.",
      "Follow up: How would you extend your design to be generic and work with all types, not just integer?"
    ],
    "note": "Each language may have a different implementation of the constructor and `Iterator`, but they all support the `int next()` and `boolean hasNext()` functions.",
    "follow_up": null
  },
  {
    "id": "285",
    "slug": "inorder-successor-in-bst",
    "title": "Inorder Successor in BST",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary search tree and a node `p` in it, return _the in-order successor of that node in the BST_. If the given node has no in-order successor in the tree, return `null`. The successor of a node `p` is the node with the smallest key greater than `p.val`.",
    "examples": [
      {
        "input": "root = \\[2,1,3\\], p = 1",
        "output": "2",
        "explanation": "1's in-order successor node is 2. Note that both p and the return value is of TreeNode type."
      },
      {
        "input": "root = \\[5,3,6,2,4,null,null,1\\], p = 6",
        "output": "null",
        "explanation": "There is no in-order successor of the current node, so the answer is `null`."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-105 <= Node.val <= 105`",
      "All Nodes will have unique values."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "286",
    "slug": "walls-and-gates",
    "title": "Walls and Gates",
    "difficulty": "Medium",
    "description": "You are given an `m x n` grid `rooms` initialized with these three possible values. *  `-1` A wall or an obstacle. *  `0` A gate. *  `INF` Infinity means an empty room. We use the value `231 - 1 = 2147483647` to represent `INF` as you may assume that the distance to a gate is less than `2147483647`. Fill each empty room with the distance to _its nearest gate_. If it is impossible to reach a gate, it should be filled with `INF`.",
    "examples": [
      {
        "input": "rooms = \\[\\[2147483647,-1,0,2147483647\\],\\[2147483647,2147483647,2147483647,-1\\],\\[2147483647,-1,2147483647,-1\\],\\[0,-1,2147483647,2147483647\\]\\]",
        "output": "\\[\\[3,-1,0,1\\],\\[2,2,1,-1\\],\\[1,-1,2,-1\\],\\[0,-1,3,4\\]\\]"
      },
      {
        "input": "rooms = \\[\\[-1\\]\\]",
        "output": "\\[\\[-1\\]\\]"
      }
    ],
    "constraints": [
      "`m == rooms.length`",
      "`n == rooms[i].length`",
      "`1 <= m, n <= 250`",
      "`rooms[i][j]` is `-1`, `0`, or `231 - 1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "287",
    "slug": "find-the-duplicate-number",
    "title": "Find the Duplicate Number",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only **one repeated number** in `nums`, return _this repeated number_. You must solve the problem **without** modifying the array `nums` and uses only constant extra space.",
    "examples": [
      {
        "input": "nums = \\[1,3,4,2,2\\]",
        "output": "2"
      },
      {
        "input": "nums = \\[3,1,3,4,2\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`nums.length == n + 1`",
      "`1 <= nums[i] <= n`",
      "All the integers in `nums` appear only once except for precisely one integer which appears two or more times.",
      "Follow up:",
      "How can we prove that at least one duplicate number must exist in `nums`?",
      "Can you solve the problem in linear runtime complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "288",
    "slug": "unique-word-abbreviation",
    "title": "Unique Word Abbreviation",
    "difficulty": "Medium",
    "description": "The **abbreviation** of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an **abbreviation** of itself. For example: *  `dog --> d1g` because there is one letter between the first letter `'d'` and the last letter `'g'`. *  `internationalization --> i18n` because there are 18 letters between the first letter `'i'` and the last letter `'n'`. *  `it --> it` because any word with only two characters is an **abbreviation** of itself. Implement the `ValidWordAbbr` class: *  `ValidWordAbbr(String[] dictionary)` Initializes the object with a `dictionary` of words. *  `boolean isUnique(string word)` Returns `true` if **either** of the following conditions are met (otherwise returns `false`): *  There is no word in `dictionary` whose **abbreviation** is equal to `word`'s **abbreviation**. *  For any word in `dictionary` whose **abbreviation** is equal to `word`'s **abbreviation**, that word and `word` are **the same**.",
    "examples": [],
    "constraints": [
      "`1 <= dictionary.length <= 3  104`",
      "`1 <= dictionary[i].length <= 20`",
      "`dictionary[i]` consists of lowercase English letters.",
      "`1 <= word.length <= 20`",
      "`word` consists of lowercase English letters.",
      "At most `5000` calls will be made to `isUnique`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "289",
    "slug": "game-of-life",
    "title": "Game of Life",
    "difficulty": "Medium",
    "description": "According to [Wikipedia's article](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life): \"The **Game of Life**, also known simply as **Life**, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. \" The board is made up of an `m x n` grid of cells, where each cell has an initial state: **live** (represented by a `1`) or **dead** (represented by a `0`). Each cell interacts with its [eight neighbors](https://en.wikipedia.org/wiki/Moore_neighborhood) (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article): 1. Any live cell with fewer than two live neighbors dies as if caused by under-population. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by over-population. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the `m x n` grid `board`, return _the next state_.",
    "examples": [
      {
        "input": "board = \\[\\[0,1,0\\],\\[0,0,1\\],\\[1,1,1\\],\\[0,0,0\\]\\]",
        "output": "\\[\\[0,0,0\\],\\[1,0,1\\],\\[0,1,1\\],\\[0,1,0\\]\\]"
      },
      {
        "input": "board = \\[\\[1,1\\],\\[1,0\\]\\]",
        "output": "\\[\\[1,1\\],\\[1,1\\]\\]"
      }
    ],
    "constraints": [
      "`m == board.length`",
      "`n == board[i].length`",
      "`1 <= m, n <= 25`",
      "`board[i][j]` is `0` or `1`.",
      "Follow up:",
      "Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.",
      "In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "290",
    "slug": "word-pattern",
    "title": "Word Pattern",
    "difficulty": "Easy",
    "description": "Given a `pattern` and a string `s`, find if `s` follows the same pattern. Here **follow** means a full match, such that there is a bijection between a letter in `pattern` and a **non-empty** word in `s`.",
    "examples": [
      {
        "input": "pattern =  \"abba \", s =  \"dog cat cat dog \"",
        "output": "true"
      },
      {
        "input": "pattern =  \"abba \", s =  \"dog cat cat fish \"",
        "output": "false"
      },
      {
        "input": "pattern =  \"aaaa \", s =  \"dog cat cat dog \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= pattern.length <= 300`",
      "`pattern` contains only lower-case English letters.",
      "`1 <= s.length <= 3000`",
      "`s` contains only lowercase English letters and spaces `' '`.",
      "`s` does not contain any leading or trailing spaces.",
      "All the words in `s` are separated by a single space."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "291",
    "slug": "word-pattern-ii",
    "title": "Word Pattern II",
    "difficulty": "Medium",
    "description": "Given a `pattern` and a string `s`, return `true` _if_ `s` _**matches** the_ `pattern`_._ A string `s` **matches** a `pattern` if there is some **bijective mapping** of single characters to strings such that if each character in `pattern` is replaced by the string it maps to, then the resulting string is `s`. A **bijective mapping** means that no two characters map to the same string, and no character maps to two different strings.",
    "examples": [
      {
        "input": "pattern =  \"abab \", s =  \"redblueredblue \"",
        "output": "true",
        "explanation": "One possible mapping is as follows:"
      },
      {
        "input": "pattern =  \"aaaa \", s =  \"asdasdasdasd \"",
        "output": "true",
        "explanation": "One possible mapping is as follows:"
      },
      {
        "input": "pattern =  \"aabb \", s =  \"xyzabcxzyabc \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= pattern.length, s.length <= 20`",
      "`pattern` and `s` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "292",
    "slug": "nim-game",
    "title": "Nim Game",
    "difficulty": "Easy",
    "description": "You are playing the following Nim Game with your friend: *  Initially, there is a heap of stones on the table. *  You and your friend will alternate taking turns, and **you go first**. *  On each turn, the person whose turn it is will remove 1 to 3 stones from the heap. *  The one who removes the last stone is the winner. Given `n`, the number of stones in the heap, return `true` _if you can win the game assuming both you and your friend play optimally, otherwise return_ `false`.",
    "examples": [
      {
        "input": "n = 4",
        "output": "false",
        "explanation": "These are the possible outcomes:"
      },
      {
        "input": "n = 1",
        "output": "true"
      },
      {
        "input": "n = 2",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "293",
    "slug": "flip-game",
    "title": "Flip Game",
    "difficulty": "Easy",
    "description": "You are playing a Flip Game with your friend. You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip **two consecutive** `\"++ \"` into `\"-- \"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner. Return all possible states of the string `currentState` after **one valid move**. You may return the answer in **any order**. If there is no valid move, return an empty list `[]`.",
    "examples": [
      {
        "input": "currentState =  \"++++ \"",
        "output": "\\[ \"--++ \", \"+--+ \", \"++-- \"\\]"
      },
      {
        "input": "currentState =  \"+ \"",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`1 <= currentState.length <= 500`",
      "`currentState[i]` is either `'+'` or `'-'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "294",
    "slug": "flip-game-ii",
    "title": "Flip Game II",
    "difficulty": "Medium",
    "description": "You are playing a Flip Game with your friend. You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip **two consecutive** `\"++ \"` into `\"-- \"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner. Return `true` _if the starting player can **guarantee a win**_, and `false` otherwise.",
    "examples": [
      {
        "input": "currentState =  \"++++ \"",
        "output": "true",
        "explanation": "The starting player can guarantee a win by flipping the middle  \"++ \" to become  \"+--+ \"."
      },
      {
        "input": "currentState =  \"+ \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= currentState.length <= 60`",
      "`currentState[i]` is either `'+'` or `'-'`.",
      "Follow up: Derive your algorithm's runtime complexity."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "295",
    "slug": "find-median-from-data-stream",
    "title": "Find Median from Data Stream",
    "difficulty": "Hard",
    "description": "The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values. *  For example, for `arr = [2,3,4]`, the median is `3`. *  For example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`. Implement the MedianFinder class: *  `MedianFinder()` initializes the `MedianFinder` object. *  `void addNum(int num)` adds the integer `num` from the data stream to the data structure. *  `double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [],
    "constraints": [
      "`-105 <= num <= 105`",
      "There will be at least one element in the data structure before calling `findMedian`.",
      "At most `5  104` calls will be made to `addNum` and `findMedian`.",
      "Follow up:",
      "If all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?",
      "If `99%` of all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "296",
    "slug": "best-meeting-point",
    "title": "Best Meeting Point",
    "difficulty": "Hard",
    "description": "Given an `m x n` binary grid `grid` where each `1` marks the home of one friend, return _the minimal **total travel distance**_. The **total travel distance** is the sum of the distances between the houses of the friends and the meeting point. The distance is calculated using [Manhattan Distance](http://en.wikipedia.org/wiki/Taxicab_geometry), where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.",
    "examples": [
      {
        "input": "grid = \\[\\[1,0,0,0,1\\],\\[0,0,0,0,0\\],\\[0,0,1,0,0\\]\\]",
        "output": "6",
        "explanation": "Given three friends living at (0,0), (0,4), and (2,2)."
      },
      {
        "input": "grid = \\[\\[1,1\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 200`",
      "`grid[i][j]` is either `0` or `1`.",
      "There will be at least two friends in the `grid`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "297",
    "slug": "serialize-and-deserialize-binary-tree",
    "title": "Serialize and Deserialize Binary Tree",
    "difficulty": "Hard",
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. **Clarification:** The input/output format is the same as [how LeetCode serializes a binary tree](https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-). You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.",
    "examples": [
      {
        "input": "root = \\[1,2,3,null,null,4,5\\]",
        "output": "\\[1,2,3,null,null,4,5\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "298",
    "slug": "binary-tree-longest-consecutive-sequence",
    "title": "Binary Tree Longest Consecutive Sequence",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the length of the longest **consecutive sequence path**_. A **consecutive sequence path** is a path where the values **increase by one** along the path. Note that the path can start **at any node** in the tree, and you cannot go from a node to its parent in the path.",
    "examples": [
      {
        "input": "root = \\[1,null,3,2,4,null,null,null,5\\]",
        "output": "3",
        "explanation": "Longest consecutive sequence path is 3-4-5, so return 3."
      },
      {
        "input": "root = \\[2,null,3,2,null,1\\]",
        "output": "2",
        "explanation": "Longest consecutive sequence path is 2-3, not 3-2-1, so return 2."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 3  104]`.",
      "`-3  104 <= Node.val <= 3  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "299",
    "slug": "bulls-and-cows",
    "title": "Bulls and Cows",
    "difficulty": "Medium",
    "description": "You are playing the **[Bulls and Cows](https://en.wikipedia.org/wiki/Bulls_and_Cows)** game with your friend. You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info: *  The number of \"bulls \", which are digits in the guess that are in the correct position. *  The number of \"cows \", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls. Given the secret number `secret` and your friend's guess `guess`, return _the hint for your friend's guess_. The hint should be formatted as `\"xAyB \"`, where `x` is the number of bulls and `y` is the number of cows. Note that both `secret` and `guess` may contain duplicate digits.",
    "examples": [
      {
        "input": "secret =  \"1807 \", guess =  \"7810 \"",
        "output": "\"1A3B \"",
        "explanation": "Bulls are connected with a '|' and cows are underlined:"
      },
      {
        "input": "secret =  \"1123 \", guess =  \"0111 \"",
        "output": "\"1A1B \"",
        "explanation": "Bulls are connected with a '|' and cows are underlined:"
      }
    ],
    "constraints": [
      "`1 <= secret.length, guess.length <= 1000`",
      "`secret.length == guess.length`",
      "`secret` and `guess` consist of digits only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "300",
    "slug": "longest-increasing-subsequence",
    "title": "Longest Increasing Subsequence",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _the length of the longest **strictly increasing**_ _**subsequence**_.",
    "examples": [
      {
        "input": "nums = \\[10,9,2,5,3,7,101,18\\]",
        "output": "4",
        "explanation": "The longest increasing subsequence is \\[2,3,7,101\\], therefore the length is 4."
      },
      {
        "input": "nums = \\[0,1,0,3,2,3\\]",
        "output": "4"
      },
      {
        "input": "nums = \\[7,7,7,7,7,7,7\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2500`",
      "`-104 <= nums[i] <= 104`",
      "Follow up: Can you come up with an algorithm that runs in `O(n log(n))` time complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "301",
    "slug": "remove-invalid-parentheses",
    "title": "Remove Invalid Parentheses",
    "difficulty": "Hard",
    "description": "Given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid. Return _a list of **unique strings** that are valid with the minimum number of removals_. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "s =  \"()())() \"",
        "output": "\\[ \"(())() \", \"()()() \"\\]"
      },
      {
        "input": "s =  \"(a)())() \"",
        "output": "\\[ \"(a())() \", \"(a)()() \"\\]"
      },
      {
        "input": "s =  \")( \"",
        "output": "\\[ \" \"\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 25`",
      "`s` consists of lowercase English letters and parentheses `'('` and `')'`.",
      "There will be at most `20` parentheses in `s`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "302",
    "slug": "smallest-rectangle-enclosing-black-pixels",
    "title": "Smallest Rectangle Enclosing Black Pixels",
    "difficulty": "Hard",
    "description": "You are given an `m x n` binary matrix `image` where `0` represents a white pixel and `1` represents a black pixel. The black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically. Given two integers `x` and `y` that represents the location of one of the black pixels, return _the area of the smallest (axis-aligned) rectangle that encloses all black pixels_. You must write an algorithm with less than `O(mn)` runtime complexity",
    "examples": [
      {
        "input": "image = \\[\\[ \"0 \", \"0 \", \"1 \", \"0 \"\\],\\[ \"0 \", \"1 \", \"1 \", \"0 \"\\],\\[ \"0 \", \"1 \", \"0 \", \"0 \"\\]\\], x = 0, y = 2",
        "output": "6"
      },
      {
        "input": "image = \\[\\[ \"1 \"\\]\\], x = 0, y = 0",
        "output": "1"
      }
    ],
    "constraints": [
      "`m == image.length`",
      "`n == image[i].length`",
      "`1 <= m, n <= 100`",
      "`image[i][j]` is either `'0'` or `'1'`.",
      "`0 <= x < m`",
      "`0 <= y < n`",
      "`image[x][y] == '1'.`",
      "The black pixels in the `image` only form one component."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "303",
    "slug": "range-sum-query-immutable",
    "title": "Range Sum Query - Immutable",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, handle multiple queries of the following type: 1. Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`. Implement the `NumArray` class: *  `NumArray(int[] nums)` Initializes the object with the integer array `nums`. *  `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).",
    "examples": [],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-105 <= nums[i] <= 105`",
      "`0 <= left <= right < nums.length`",
      "At most `104` calls will be made to `sumRange`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "304",
    "slug": "range-sum-query-2d-immutable",
    "title": "Range Sum Query 2D - Immutable",
    "difficulty": "Medium",
    "description": "Given a 2D matrix `matrix`, handle multiple queries of the following type: *  Calculate the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`. Implement the `NumMatrix` class: *  `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix `matrix`. *  `int sumRegion(int row1, int col1, int row2, int col2)` Returns the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`. You must design an algorithm where `sumRegion` works on `O(1)` time complexity.",
    "examples": [],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 200`",
      "`-104 <= matrix[i][j] <= 104`",
      "`0 <= row1 <= row2 < m`",
      "`0 <= col1 <= col2 < n`",
      "At most `104` calls will be made to `sumRegion`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "305",
    "slug": "number-of-islands-ii",
    "title": "Number of Islands II",
    "difficulty": "Hard",
    "description": "You are given an empty 2D binary grid `grid` of size `m x n`. The grid represents a map where `0`'s represent water and `1`'s represent land. Initially, all the cells of `grid` are water cells (i.e., all the cells are `0`'s). We may perform an add land operation which turns the water at position into a land. You are given an array `positions` where `positions[i] = [ri, ci]` is the position `(ri, ci)` at which we should operate the `ith` operation. Return _an array of integers_ `answer` _where_ `answer[i]` _is the number of islands after turning the cell_ `(ri, ci)` _into a land_. An **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "examples": [
      {
        "input": "m = 3, n = 3, positions = \\[\\[0,0\\],\\[0,1\\],\\[1,2\\],\\[2,1\\]\\]",
        "output": "\\[1,1,2,3\\]",
        "explanation": ""
      },
      {
        "input": "m = 1, n = 1, positions = \\[\\[0,0\\]\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "`1 <= m, n, positions.length <= 104`",
      "`1 <= m  n <= 104`",
      "`positions[i].length == 2`",
      "`0 <= ri < m`",
      "`0 <= ci < n`",
      "Follow up: Could you solve it in time complexity `O(k log(mn))`, where `k == positions.length`?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "306",
    "slug": "additive-number",
    "title": "Additive Number",
    "difficulty": "Medium",
    "description": "An **additive number** is a string whose digits can form an **additive sequence**. A valid **additive sequence** should contain **at least** three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two. Given a string containing only digits, return `true` if it is an **additive number** or `false` otherwise.",
    "examples": [
      {
        "input": "\"112358 \"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "\"199100199 \"",
        "output": "true",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= num.length <= 35`",
      "`num` consists only of digits.",
      "Follow up: How would you handle overflow for very large input integers?"
    ],
    "note": "Numbers in the additive sequence **cannot** have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.",
    "follow_up": null
  },
  {
    "id": "307",
    "slug": "range-sum-query-mutable",
    "title": "Range Sum Query - Mutable",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, handle multiple queries of the following types: 1. **Update** the value of an element in `nums`. 2. Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`. Implement the `NumArray` class: *  `NumArray(int[] nums)` Initializes the object with the integer array `nums`. *  `void update(int index, int val)` **Updates** the value of `nums[index]` to be `val`. *  `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).",
    "examples": [],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`-100 <= nums[i] <= 100`",
      "`0 <= index < nums.length`",
      "`-100 <= val <= 100`",
      "`0 <= left <= right < nums.length`",
      "At most `3  104` calls will be made to `update` and `sumRange`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "308",
    "slug": "range-sum-query-2d-mutable",
    "title": "Range Sum Query 2D - Mutable",
    "difficulty": "Hard",
    "description": "Given a 2D matrix `matrix`, handle multiple queries of the following types: 1. **Update** the value of a cell in `matrix`. 2. Calculate the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`. Implement the NumMatrix class: *  `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix `matrix`. *  `void update(int row, int col, int val)` **Updates** the value of `matrix[row][col]` to be `val`. *  `int sumRegion(int row1, int col1, int row2, int col2)` Returns the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.",
    "examples": [],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 200`",
      "`-1000 <= matrix[i][j] <= 1000`",
      "`0 <= row < m`",
      "`0 <= col < n`",
      "`-1000 <= val <= 1000`",
      "`0 <= row1 <= row2 < m`",
      "`0 <= col1 <= col2 < n`",
      "At most `5000` calls will be made to `sumRegion` and `update`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "309",
    "slug": "best-time-to-buy-and-sell-stock-with-cooldown",
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "difficulty": "Medium",
    "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: *  After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).",
    "examples": [
      {
        "input": "prices = \\[1,2,3,0,2\\]",
        "output": "3",
        "explanation": "transactions = \\[buy, sell, cooldown, buy, sell\\]"
      },
      {
        "input": "prices = \\[1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= prices.length <= 5000`",
      "`0 <= prices[i] <= 1000`"
    ],
    "note": "You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "follow_up": null
  },
  {
    "id": "310",
    "slug": "minimum-height-trees",
    "title": "Minimum Height Trees",
    "difficulty": "Medium",
    "description": "A tree is an undirected graph in which any two vertices are connected by _exactly_ one path. In other words, any connected graph without simple cycles is a tree. Given a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`) are called **minimum height trees** (MHTs). Return _a list of all **MHTs'** root labels_. You can return the answer in **any order**. The **height** of a rooted tree is the number of edges on the longest downward path between the root and a leaf.",
    "examples": [
      {
        "input": "n = 4, edges = \\[\\[1,0\\],\\[1,2\\],\\[1,3\\]\\]",
        "output": "\\[1\\]",
        "explanation": "As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT."
      },
      {
        "input": "n = 6, edges = \\[\\[3,0\\],\\[3,1\\],\\[3,2\\],\\[3,4\\],\\[5,4\\]\\]",
        "output": "\\[3,4\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 2  104`",
      "`edges.length == n - 1`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "All the pairs `(ai, bi)` are distinct.",
      "The given input is guaranteed to be a tree and there will be no repeated edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "311",
    "slug": "sparse-matrix-multiplication",
    "title": "Sparse Matrix Multiplication",
    "difficulty": "Medium",
    "description": "Given two [sparse matrices](https://en.wikipedia.org/wiki/Sparse_matrix) `mat1` of size `m x k` and `mat2` of size `k x n`, return the result of `mat1 x mat2`. You may assume that multiplication is always possible.",
    "examples": [
      {
        "input": "mat1 = \\[\\[1,0,0\\],\\[-1,0,3\\]\\], mat2 = \\[\\[7,0,0\\],\\[0,0,0\\],\\[0,0,1\\]\\]",
        "output": "\\[\\[7,0,0\\],\\[-7,0,3\\]\\]"
      },
      {
        "input": "mat1 = \\[\\[0\\]\\], mat2 = \\[\\[0\\]\\]",
        "output": "\\[\\[0\\]\\]"
      }
    ],
    "constraints": [
      "`m == mat1.length`",
      "`k == mat1[i].length == mat2.length`",
      "`n == mat2[i].length`",
      "`1 <= m, n, k <= 100`",
      "`-100 <= mat1[i][j], mat2[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "312",
    "slug": "burst-balloons",
    "title": "Burst Balloons",
    "difficulty": "Hard",
    "description": "You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons. If you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it. Return _the maximum coins you can collect by bursting the balloons wisely_.",
    "examples": [
      {
        "input": "nums = \\[3,1,5,8\\]",
        "output": "167",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,5\\]",
        "output": "10"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 300`",
      "`0 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "313",
    "slug": "super-ugly-number",
    "title": "Super Ugly Number",
    "difficulty": "Medium",
    "description": "A **super ugly number** is a positive integer whose prime factors are in the array `primes`. Given an integer `n` and an array of integers `primes`, return _the_ `nth` _**super ugly number**_. The `nth` **super ugly number** is **guaranteed** to fit in a **32-bit** signed integer.",
    "examples": [
      {
        "input": "n = 12, primes = \\[2,7,13,19\\]",
        "output": "32",
        "explanation": "\\[1,2,4,7,8,13,14,16,19,26,28,32\\] is the sequence of the first 12 super ugly numbers given primes = \\[2,7,13,19\\]."
      },
      {
        "input": "n = 1, primes = \\[2,3,5\\]",
        "output": "1",
        "explanation": "1 has no prime factors, therefore all of its prime factors are in the array primes = \\[2,3,5\\]."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`1 <= primes.length <= 100`",
      "`2 <= primes[i] <= 1000`",
      "`primes[i]` is guaranteed to be a prime number.",
      "All the values of `primes` are unique and sorted in ascending order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "314",
    "slug": "binary-tree-vertical-order-traversal",
    "title": "Binary Tree Vertical Order Traversal",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _**the vertical order traversal** of its nodes' values_. (i.e., from top to bottom, column by column). If two nodes are in the same row and column, the order should be from **left to right**.",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "\\[\\[9\\],\\[3,15\\],\\[20\\],\\[7\\]\\]"
      },
      {
        "input": "root = \\[3,9,8,4,0,1,7\\]",
        "output": "\\[\\[4\\],\\[9\\],\\[3,0,1\\],\\[8\\],\\[7\\]\\]"
      },
      {
        "input": "root = \\[3,9,8,4,0,1,7,null,null,null,2,5\\]",
        "output": "\\[\\[4\\],\\[9,5\\],\\[3,0,1\\],\\[8,2\\],\\[7\\]\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 100]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "315",
    "slug": "count-of-smaller-numbers-after-self",
    "title": "Count of Smaller Numbers After Self",
    "difficulty": "Hard",
    "description": "Given an integer array `nums`, return _an integer array_ `counts` _where_ `counts[i]` _is the number of smaller elements to the right of_ `nums[i]`.",
    "examples": [
      {
        "input": "nums = \\[5,2,6,1\\]",
        "output": "\\[2,1,1,0\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[-1\\]",
        "output": "\\[0\\]"
      },
      {
        "input": "nums = \\[-1,-1\\]",
        "output": "\\[0,0\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-104 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "316",
    "slug": "remove-duplicate-letters",
    "title": "Remove Duplicate Letters",
    "difficulty": "Medium",
    "description": "Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is **the smallest in lexicographical order** among all possible results.",
    "examples": [
      {
        "input": "s =  \"bcabc \"",
        "output": "\"abc \""
      },
      {
        "input": "s =  \"cbacdcbc \"",
        "output": "\"acdb \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of lowercase English letters."
    ],
    "note": "This question is the same as 1081: [https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/](https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/)",
    "follow_up": null
  },
  {
    "id": "317",
    "slug": "shortest-distance-from-all-buildings",
    "title": "Shortest Distance from All Buildings",
    "difficulty": "Hard",
    "description": "You are given an `m x n` grid `grid` of values `0`, `1`, or `2`, where: *  each `0` marks **an empty land** that you can pass by freely, *  each `1` marks **a building** that you cannot pass through, and *  each `2` marks **an obstacle** that you cannot pass through. You want to build a house on an empty land that reaches all buildings in the **shortest total travel** distance. You can only move up, down, left, and right. Return _the **shortest travel distance** for such a house_. If it is not possible to build such a house according to the above rules, return `-1`. The **total travel distance** is the sum of the distances between the houses of the friends and the meeting point. The distance is calculated using [Manhattan Distance](http://en.wikipedia.org/wiki/Taxicab_geometry), where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.",
    "examples": [
      {
        "input": "grid = \\[\\[1,0,2,0,1\\],\\[0,0,0,0,0\\],\\[0,0,1,0,0\\]\\]",
        "output": "7",
        "explanation": "Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2)."
      },
      {
        "input": "grid = \\[\\[1,0\\]\\]",
        "output": "1"
      },
      {
        "input": "grid = \\[\\[1\\]\\]",
        "output": "-1"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 50`",
      "`grid[i][j]` is either `0`, `1`, or `2`.",
      "There will be at least one building in the `grid`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "318",
    "slug": "maximum-product-of-word-lengths",
    "title": "Maximum Product of Word Lengths",
    "difficulty": "Medium",
    "description": "Given a string array `words`, return _the maximum value of_ `length(word[i]) * length(word[j])` _where the two words do not share common letters_. If no such two words exist, return `0`.",
    "examples": [
      {
        "input": "words = \\[ \"abcw \", \"baz \", \"foo \", \"bar \", \"xtfn \", \"abcdef \"\\]",
        "output": "16",
        "explanation": "The two words can be  \"abcw \",  \"xtfn \"."
      },
      {
        "input": "words = \\[ \"a \", \"ab \", \"abc \", \"d \", \"cd \", \"bcd \", \"abcd \"\\]",
        "output": "4",
        "explanation": "The two words can be  \"ab \",  \"cd \"."
      },
      {
        "input": "words = \\[ \"a \", \"aa \", \"aaa \", \"aaaa \"\\]",
        "output": "0",
        "explanation": "No such pair of words."
      }
    ],
    "constraints": [
      "`2 <= words.length <= 1000`",
      "`1 <= words[i].length <= 1000`",
      "`words[i]` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "319",
    "slug": "bulb-switcher",
    "title": "Bulb Switcher",
    "difficulty": "Medium",
    "description": "There are `n` bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb. Return _the number of bulbs that are on after `n` rounds_.",
    "examples": [
      {
        "input": "n = 3",
        "output": "1",
        "explanation": "At first, the three bulbs are \\[off, off, off\\]."
      },
      {
        "input": "n = 0",
        "output": "0"
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`0 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "320",
    "slug": "generalized-abbreviation",
    "title": "Generalized Abbreviation",
    "difficulty": "Medium",
    "description": "A word's **generalized abbreviation** can be constructed by taking any number of **non-overlapping** and **non-adjacent** substrings and replacing them with their respective lengths. *  For example, `\"abcde \"` can be abbreviated into: *  `\"a3e \"` ( `\"bcd \"` turned into `\"3 \"`) *  `\"1bcd1 \"` ( `\"a \"` and `\"e \"` both turned into `\"1 \"`) *  `\"5 \"` ( `\"abcde \"` turned into `\"5 \"`) *  `\"abcde \"` (no substrings replaced) *  However, these abbreviations are **invalid**: *  `\"23 \"` ( `\"ab \"` turned into `\"2 \"` and `\"cde \"` turned into `\"3 \"`) is invalid as the substrings chosen are adjacent. *  `\"22de \"` ( `\"ab \"` turned into `\"2 \"` and `\"bc \"` turned into `\"2 \"`) is invalid as the substring chosen overlap. Given a string `word`, return _a list of all the possible **generalized abbreviations** of_ `word`. Return the answer in **any order**.",
    "examples": [
      {
        "input": "word = \"word\"",
        "output": "\\[\"4\",\"3d\",\"2r1\",\"2rd\",\"1o2\",\"1o1d\",\"1or1\",\"1ord\",\"w3\",\"w2d\",\"w1r1\",\"w1rd\",\"wo2\",\"wo1d\",\"wor1\",\"word\"\\]"
      },
      {
        "input": "word = \"a\"",
        "output": "\\[\"1\",\"a\"\\]"
      }
    ],
    "constraints": [
      "`1 <= word.length <= 15`",
      "`word` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "321",
    "slug": "create-maximum-number",
    "title": "Create Maximum Number",
    "difficulty": "Hard",
    "description": "You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`. Create the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved. Return an array of the `k` digits representing the answer.",
    "examples": [
      {
        "input": "nums1 = \\[3,4,6,5\\], nums2 = \\[9,1,2,5,8,3\\], k = 5",
        "output": "\\[9,8,6,5,3\\]"
      },
      {
        "input": "nums1 = \\[6,7\\], nums2 = \\[6,0,4\\], k = 5",
        "output": "\\[6,7,6,0,4\\]"
      },
      {
        "input": "nums1 = \\[3,9\\], nums2 = \\[8,9\\], k = 3",
        "output": "\\[9,8,9\\]"
      }
    ],
    "constraints": [
      "`m == nums1.length`",
      "`n == nums2.length`",
      "`1 <= m, n <= 500`",
      "`0 <= nums1[i], nums2[i] <= 9`",
      "`1 <= k <= m + n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "322",
    "slug": "coin-change",
    "title": "Coin Change",
    "difficulty": "Medium",
    "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return _the fewest number of coins that you need to make up that amount_. If that amount of money cannot be made up by any combination of the coins, return `-1`. You may assume that you have an infinite number of each kind of coin.",
    "examples": [
      {
        "input": "coins = \\[1,2,5\\], amount = 11",
        "output": "3",
        "explanation": "11 = 5 + 5 + 1"
      },
      {
        "input": "coins = \\[2\\], amount = 3",
        "output": "-1"
      },
      {
        "input": "coins = \\[1\\], amount = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= coins.length <= 12`",
      "`1 <= coins[i] <= 231 - 1`",
      "`0 <= amount <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "323",
    "slug": "number-of-connected-components-in-an-undirected-graph",
    "title": "Number of Connected Components in an Undirected Graph",
    "difficulty": "Medium",
    "description": "You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph. Return _the number of connected components in the graph_.",
    "examples": [
      {
        "input": "n = 5, edges = \\[\\[0,1\\],\\[1,2\\],\\[3,4\\]\\]",
        "output": "2"
      },
      {
        "input": "n = 5, edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[3,4\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 2000`",
      "`1 <= edges.length <= 5000`",
      "`edges[i].length == 2`",
      "`0 <= ai <= bi < n`",
      "`ai != bi`",
      "There are no repeated edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "324",
    "slug": "wiggle-sort-ii",
    "title": "Wiggle Sort II",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`. You may assume the input array always has a valid answer.",
    "examples": [
      {
        "input": "nums = \\[1,5,1,1,6,4\\]",
        "output": "\\[1,6,1,5,1,4\\]",
        "explanation": "\\[1,4,1,5,1,6\\] is also accepted."
      },
      {
        "input": "nums = \\[1,3,2,2,3,1\\]",
        "output": "\\[2,3,1,3,1,2\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  104`",
      "`0 <= nums[i] <= 5000`",
      "It is guaranteed that there will be an answer for the given input `nums`.",
      "Follow Up: Can you do it in `O(n)` time and/or in-place with `O(1)` extra space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "325",
    "slug": "maximum-size-subarray-sum-equals-k",
    "title": "Maximum Size Subarray Sum Equals k",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and an integer `k`, return _the maximum length of a_ _subarray_ _that sums to_ `k`. If there is not one, return `0` instead.",
    "examples": [
      {
        "input": "nums = \\[1,-1,5,-2,3\\], k = 3",
        "output": "4",
        "explanation": "The subarray \\[1, -1, 5, -2\\] sums to 3 and is the longest."
      },
      {
        "input": "nums = \\[-2,-1,2,1\\], k = 1",
        "output": "2",
        "explanation": "The subarray \\[-1, 2\\] sums to 1 and is the longest."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  105`",
      "`-104 <= nums[i] <= 104`",
      "`-109 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "326",
    "slug": "power-of-three",
    "title": "Power of Three",
    "difficulty": "Easy",
    "description": "Given an integer `n`, return _`true` if it is a power of three. Otherwise, return `false`_. An integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.",
    "examples": [
      {
        "input": "n = 27",
        "output": "true",
        "explanation": "27 = 33"
      },
      {
        "input": "n = 0",
        "output": "false",
        "explanation": "There is no x where 3x = 0."
      },
      {
        "input": "n = -1",
        "output": "false",
        "explanation": "There is no x where 3x = (-1)."
      }
    ],
    "constraints": [
      "`-231 <= n <= 231 - 1`",
      "Follow up: Could you solve it without loops/recursion?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "327",
    "slug": "count-of-range-sum",
    "title": "Count of Range Sum",
    "difficulty": "Hard",
    "description": "Given an integer array `nums` and two integers `lower` and `upper`, return _the number of range sums that lie in_ `[lower, upper]` _inclusive_. Range sum `S(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`.",
    "examples": [
      {
        "input": "nums = \\[-2,5,-1\\], lower = -2, upper = 2",
        "output": "3",
        "explanation": "The three ranges are: \\[0,0\\], \\[2,2\\], and \\[0,2\\] and their respective sums are: -2, -1, 2."
      },
      {
        "input": "nums = \\[0\\], lower = 0, upper = 0",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-231 <= nums[i] <= 231 - 1`",
      "`-105 <= lower <= upper <= 105`",
      "The answer is guaranteed to fit in a 32-bit integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "328",
    "slug": "odd-even-linked-list",
    "title": "Odd Even Linked List",
    "difficulty": "Medium",
    "description": "Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return _the reordered list_. The **first** node is considered **odd**, and the **second** node is **even**, and so on. Note that the relative order inside both the even and odd groups should remain as it was in the input. You must solve the problem in `O(1)` extra space complexity and `O(n)` time complexity.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5\\]",
        "output": "\\[1,3,5,2,4\\]"
      },
      {
        "input": "head = \\[2,1,3,5,6,4,7\\]",
        "output": "\\[2,3,6,7,1,5,4\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the linked list is in the range `[0, 104]`.",
      "`-106 <= Node.val <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "329",
    "slug": "longest-increasing-path-in-a-matrix",
    "title": "Longest Increasing Path in a Matrix",
    "difficulty": "Hard",
    "description": "Given an `m x n` integers `matrix`, return _the length of the longest increasing path in_ `matrix`. From each cell, you can either move in four directions: left, right, up, or down. You **may not** move **diagonally** or move **outside the boundary** (i.e., wrap-around is not allowed).",
    "examples": [
      {
        "input": "matrix = \\[\\[9,9,4\\],\\[6,6,8\\],\\[2,1,1\\]\\]",
        "output": "4",
        "explanation": "The longest increasing path is `[1, 2, 6, 9]`."
      },
      {
        "input": "matrix = \\[\\[3,4,5\\],\\[3,2,6\\],\\[2,2,1\\]\\]",
        "output": "4",
        "explanation": "The longest increasing path is `[3, 4, 5, 6]`. Moving diagonally is not allowed."
      },
      {
        "input": "matrix = \\[\\[1\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 200`",
      "`0 <= matrix[i][j] <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "330",
    "slug": "patching-array",
    "title": "Patching Array",
    "difficulty": "Hard",
    "description": "Given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array. Return _the minimum number of patches required_.",
    "examples": [
      {
        "input": "nums = \\[1,3\\], n = 6",
        "output": "1"
      },
      {
        "input": "nums = \\[1,5,10\\], n = 20",
        "output": "2"
      },
      {
        "input": "nums = \\[1,2,2\\], n = 5",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 104`",
      "`nums` is sorted in ascending order.",
      "`1 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "331",
    "slug": "verify-preorder-serialization-of-a-binary-tree",
    "title": "Verify Preorder Serialization of a Binary Tree",
    "difficulty": "Medium",
    "description": "One way to serialize a binary tree is to use **preorder traversal**. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as `'#'`. For example, the above binary tree can be serialized to the string `\"9,3,4,#,#,1,#,#,2,#,6,#,# \"`, where `'#'` represents a null node. Given a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree. It is **guaranteed** that each comma-separated value in the string must be either an integer or a character `'#'` representing null pointer. You may assume that the input format is always valid. *  For example, it could never contain two consecutive commas, such as `\"1,,3 \"`.",
    "examples": [
      {
        "input": "preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"",
        "output": "true"
      },
      {
        "input": "preorder = \"1,#\"",
        "output": "false"
      },
      {
        "input": "preorder = \"9,#,#,1\"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= preorder.length <= 104`",
      "`preorder` consist of integers in the range `[0, 100]` and `'#'` separated by commas `','`."
    ],
    "note": "You are not allowed to reconstruct the tree.",
    "follow_up": null
  },
  {
    "id": "332",
    "slug": "reconstruct-itinerary",
    "title": "Reconstruct Itinerary",
    "difficulty": "Hard",
    "description": "You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it. All of the tickets belong to a man who departs from `\"JFK \"`, thus, the itinerary must begin with `\"JFK \"`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. *  For example, the itinerary `[ \"JFK \", \"LGA \"]` has a smaller lexical order than `[ \"JFK \", \"LGB \"]`. You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.",
    "examples": [
      {
        "input": "tickets = \\[\\[ \"MUC \", \"LHR \"\\],\\[ \"JFK \", \"MUC \"\\],\\[ \"SFO \", \"SJC \"\\],\\[ \"LHR \", \"SFO \"\\]\\]",
        "output": "\\[ \"JFK \", \"MUC \", \"LHR \", \"SFO \", \"SJC \"\\]"
      },
      {
        "input": "tickets = \\[\\[ \"JFK \", \"SFO \"\\],\\[ \"JFK \", \"ATL \"\\],\\[ \"SFO \", \"ATL \"\\],\\[ \"ATL \", \"JFK \"\\],\\[ \"ATL \", \"SFO \"\\]\\]",
        "output": "\\[ \"JFK \", \"ATL \", \"JFK \", \"SFO \", \"ATL \", \"SFO \"\\]",
        "explanation": "Another possible reconstruction is \\[ \"JFK \", \"SFO \", \"ATL \", \"JFK \", \"ATL \", \"SFO \"\\] but it is larger in lexical order."
      }
    ],
    "constraints": [
      "`1 <= tickets.length <= 300`",
      "`tickets[i].length == 2`",
      "`fromi.length == 3`",
      "`toi.length == 3`",
      "`fromi` and `toi` consist of uppercase English letters.",
      "`fromi != toi`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "333",
    "slug": "largest-bst-subtree",
    "title": "Largest BST Subtree",
    "difficulty": "Medium",
    "description": "Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes. A **Binary Search Tree (BST)** is a tree in which all the nodes follow the below-mentioned properties: *  The left subtree values are less than the value of their parent (root) node's value. *  The right subtree values are greater than the value of their parent (root) node's value.",
    "examples": [
      {
        "input": "root = \\[10,5,15,1,8,null,7\\]",
        "output": "3",
        "explanation": "The Largest BST Subtree in this case is the highlighted one. The return value is the subtree's size, which is 3."
      },
      {
        "input": "root = \\[4,2,7,2,3,5,null,2,null,null,null,null,null,1\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`-104 <= Node.val <= 104`",
      "Follow up: Can you figure out ways to solve it with `O(n)` time complexity?"
    ],
    "note": "A subtree must include all of its descendants.",
    "follow_up": null
  },
  {
    "id": "334",
    "slug": "increasing-triplet-subsequence",
    "title": "Increasing Triplet Subsequence",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return `true` _if there exists a triple of indices_ `(i, j, k)` _such that_ `i < j < k` _and_ `nums[i] < nums[j] < nums[k]`. If no such indices exists, return `false`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4,5\\]",
        "output": "true",
        "explanation": "Any triplet where i < j < k is valid."
      },
      {
        "input": "nums = \\[5,4,3,2,1\\]",
        "output": "false",
        "explanation": "No triplet exists."
      },
      {
        "input": "nums = \\[2,1,5,0,4,6\\]",
        "output": "true",
        "explanation": "The triplet (3, 4, 5) is valid because nums\\[3\\] == 0 < nums\\[4\\] == 4 < nums\\[5\\] == 6."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  105`",
      "`-231 <= nums[i] <= 231 - 1`",
      "Follow up: Could you implement a solution that runs in `O(n)` time complexity and `O(1)` space complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "335",
    "slug": "self-crossing",
    "title": "Self Crossing",
    "difficulty": "Hard",
    "description": "You are given an array of integers `distance`. You start at the point `(0, 0)` on an **X-Y plane,** and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise. Return `true` _if your path crosses itself or_ `false` _if it does not_.",
    "examples": [
      {
        "input": "distance = \\[2,1,1,2\\]",
        "output": "true",
        "explanation": "The path crosses itself at the point (0, 1)."
      },
      {
        "input": "distance = \\[1,2,3,4\\]",
        "output": "false",
        "explanation": "The path does not cross itself at any point."
      },
      {
        "input": "distance = \\[1,1,1,2,1\\]",
        "output": "true",
        "explanation": "The path crosses itself at the point (0, 0)."
      }
    ],
    "constraints": [
      "`1 <= distance.length <= 105`",
      "`1 <= distance[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "336",
    "slug": "palindrome-pairs",
    "title": "Palindrome Pairs",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** array of **unique** strings `words`. A **palindrome pair** is a pair of integers `(i, j)` such that: *  `0 <= i, j < words.length`, *  `i != j`, and *  `words[i] + words[j]` (the concatenation of the two strings) is a palindrome. Return _an array of all the **palindrome pairs** of_ `words`.",
    "examples": [
      {
        "input": "words = \\[ \"abcd \", \"dcba \", \"lls \", \"s \", \"sssll \"\\]",
        "output": "\\[\\[0,1\\],\\[1,0\\],\\[3,2\\],\\[2,4\\]\\]",
        "explanation": "The palindromes are \\[ \"abcddcba \", \"dcbaabcd \", \"slls \", \"llssssll \"\\]"
      },
      {
        "input": "words = \\[ \"bat \", \"tab \", \"cat \"\\]",
        "output": "\\[\\[0,1\\],\\[1,0\\]\\]",
        "explanation": "The palindromes are \\[ \"battab \", \"tabbat \"\\]"
      },
      {
        "input": "words = \\[ \"a \", \" \"\\]",
        "output": "\\[\\[0,1\\],\\[1,0\\]\\]",
        "explanation": "The palindromes are \\[ \"a \", \"a \"\\]"
      }
    ],
    "constraints": [
      "`1 <= words.length <= 5000`",
      "`0 <= words[i].length <= 300`",
      "`words[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "337",
    "slug": "house-robber-iii",
    "title": "House Robber III",
    "difficulty": "Medium",
    "description": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`. Besides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if **two directly-linked houses were broken into on the same night**. Given the `root` of the binary tree, return _the maximum amount of money the thief can rob **without alerting the police**_.",
    "examples": [
      {
        "input": "root = \\[3,2,3,null,3,null,1\\]",
        "output": "7",
        "explanation": "Maximum amount of money the thief can rob = 3 + 3 + 1 = 7."
      },
      {
        "input": "root = \\[3,4,5,1,3,null,1\\]",
        "output": "9",
        "explanation": "Maximum amount of money the thief can rob = 4 + 5 = 9."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`0 <= Node.val <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "338",
    "slug": "counting-bits",
    "title": "Counting Bits",
    "difficulty": "Easy",
    "description": "Given an integer `n`, return _an array_ `ans` _of length_ `n + 1` _such that for each_ `i` (`0 <= i <= n`)_,_ `ans[i]` _is the **number of**_ `1`_**'s** in the binary representation of_ `i`.",
    "examples": [
      {
        "input": "n = 2",
        "output": "\\[0,1,1\\]",
        "explanation": ""
      },
      {
        "input": "n = 5",
        "output": "\\[0,1,1,2,1,2\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`0 <= n <= 105`",
      "Follow up:",
      "It is very easy to come up with a solution with a runtime of `O(n log n)`. Can you do it in linear time `O(n)` and possibly in a single pass?",
      "Can you do it without using any built-in function (i.e., like `__builtin_popcount` in C++)?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "339",
    "slug": "nested-list-weight-sum",
    "title": "Nested List Weight Sum",
    "difficulty": "Medium",
    "description": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. The **depth** of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its **depth**. Return _the sum of each integer in_ `nestedList` _multiplied by its **depth**_.",
    "examples": [
      {
        "input": "nestedList = \\[\\[1,1\\],2,\\[1,1\\]\\]",
        "output": "10",
        "explanation": "Four 1's at depth 2, one 2 at depth 1. 1\\*2 + 1\\*2 + 2\\*1 + 1\\*2 + 1\\*2 = 10."
      },
      {
        "input": "nestedList = \\[1,\\[4,\\[6\\]\\]\\]",
        "output": "27",
        "explanation": "One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1\\*1 + 4\\*2 + 6\\*3 = 27."
      },
      {
        "input": "nestedList = \\[0\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nestedList.length <= 50`",
      "The values of the integers in the nested list is in the range `[-100, 100]`.",
      "The maximum depth of any integer is less than or equal to `50`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "340",
    "slug": "longest-substring-with-at-most-k-distinct-characters",
    "title": "Longest Substring with At Most K Distinct Characters",
    "difficulty": "Medium",
    "description": "Given a string `s` and an integer `k`, return _the length of the longest_ _substring_ _of_ `s` _that contains at most_ `k` _**distinct** characters_.",
    "examples": [
      {
        "input": "s =  \"eceba \", k = 2",
        "output": "3",
        "explanation": "The substring is  \"ece \" with length 3."
      },
      {
        "input": "s =  \"aa \", k = 1",
        "output": "2",
        "explanation": "The substring is  \"aa \" with length 2."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5  104`",
      "`0 <= k <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "341",
    "slug": "flatten-nested-list-iterator",
    "title": "Flatten Nested List Iterator",
    "difficulty": "Medium",
    "description": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it. Implement the `NestedIterator` class: *  `NestedIterator(List nestedList)` Initializes the iterator with the nested list `nestedList`. *  `int next()` Returns the next integer in the nested list. *  `boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise. Your code will be tested with the following pseudocode: initialize iterator with nestedList res = \\[\\] while iterator.hasNext() append iterator.next() to the end of res return res If `res` matches the expected flattened list, then your code will be judged as correct.",
    "examples": [
      {
        "input": "nestedList = \\[\\[1,1\\],2,\\[1,1\\]\\]",
        "output": "\\[1,1,2,1,1\\]",
        "explanation": "By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: \\[1,1,2,1,1\\]."
      },
      {
        "input": "nestedList = \\[1,\\[4,\\[6\\]\\]\\]",
        "output": "\\[1,4,6\\]",
        "explanation": "By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: \\[1,4,6\\]."
      }
    ],
    "constraints": [
      "`1 <= nestedList.length <= 500`",
      "The values of the integers in the nested list is in the range `[-106, 106]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "342",
    "slug": "power-of-four",
    "title": "Power of Four",
    "difficulty": "Easy",
    "description": "Given an integer `n`, return _`true` if it is a power of four. Otherwise, return `false`_. An integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.",
    "examples": [
      {
        "input": "n = 16",
        "output": "true"
      },
      {
        "input": "n = 5",
        "output": "false"
      },
      {
        "input": "n = 1",
        "output": "true"
      }
    ],
    "constraints": [
      "`-231 <= n <= 231 - 1`",
      "Follow up: Could you solve it without loops/recursion?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "343",
    "slug": "integer-break",
    "title": "Integer Break",
    "difficulty": "Medium",
    "description": "Given an integer `n`, break it into the sum of `k` **positive integers**, where `k >= 2`, and maximize the product of those integers. Return _the maximum product you can get_.",
    "examples": [
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "2 = 1 + 1, 1 \\* 1 = 1."
      },
      {
        "input": "n = 10",
        "output": "36",
        "explanation": "10 = 3 + 3 + 4, 3 \\* 3 \\* 4 = 36."
      }
    ],
    "constraints": [
      "`2 <= n <= 58`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "344",
    "slug": "reverse-string",
    "title": "Reverse String",
    "difficulty": "Easy",
    "description": "Write a function that reverses a string. The input string is given as an array of characters `s`. You must do this by modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm) with `O(1)` extra memory.",
    "examples": [
      {
        "input": "s = \\[\"h\",\"e\",\"l\",\"l\",\"o\"\\]",
        "output": "\\[\"o\",\"l\",\"l\",\"e\",\"h\"\\]"
      },
      {
        "input": "s = \\[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"\\]",
        "output": "\\[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is a [printable ascii character](https://en.wikipedia.org/wiki/ASCII#Printable_characters)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "345",
    "slug": "reverse-vowels-of-a-string",
    "title": "Reverse Vowels of a String",
    "difficulty": "Easy",
    "description": "Given a string `s`, reverse only all the vowels in the string and return it. The vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both lower and upper cases, more than once.",
    "examples": [
      {
        "input": "s = \"hello\"",
        "output": "\"holle\""
      },
      {
        "input": "s = \"leetcode\"",
        "output": "\"leotcede\""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 3  105`",
      "`s` consist of printable ASCII characters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "346",
    "slug": "moving-average-from-data-stream",
    "title": "Moving Average from Data Stream",
    "difficulty": "Easy",
    "description": "Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window. Implement the `MovingAverage` class: *  `MovingAverage(int size)` Initializes the object with the size of the window `size`. *  `double next(int val)` Returns the moving average of the last `size` values of the stream.",
    "examples": [],
    "constraints": [
      "`1 <= size <= 1000`",
      "`-105 <= val <= 105`",
      "At most `104` calls will be made to `next`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "347",
    "slug": "top-k-frequent-elements",
    "title": "Top K Frequent Elements",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and an integer `k`, return _the_ `k` _most frequent elements_. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "nums = \\[1,1,1,2,2,3\\], k = 2",
        "output": "\\[1,2\\]"
      },
      {
        "input": "nums = \\[1\\], k = 1",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-104 <= nums[i] <= 104`",
      "`k` is in the range `[1, the number of unique elements in the array]`.",
      "It is guaranteed that the answer is unique.",
      "Follow up: Your algorithm's time complexity must be better than `O(n log n)`, where n is the array's size."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "348",
    "slug": "design-tic-tac-toe",
    "title": "Design Tic-Tac-Toe",
    "difficulty": "Medium",
    "description": "Assume the following rules are for the tic-tac-toe game on an `n x n` board between two players: 1. A move is guaranteed to be valid and is placed on an empty block. 2. Once a winning condition is reached, no more moves are allowed. 3. A player who succeeds in placing `n` of their marks in a horizontal, vertical, or diagonal row wins the game. Implement the `TicTacToe` class: *  `TicTacToe(int n)` Initializes the object the size of the board `n`. *  `int move(int row, int col, int player)` Indicates that the player with id `player` plays at the cell `(row, col)` of the board. The move is guaranteed to be a valid move, and the two players alternate in making moves. Return *  `0` if there is **no winner** after the move, *  `1` if **player 1** is the winner after the move, or *  `2` if **player 2** is the winner after the move.",
    "examples": [],
    "constraints": [
      "`2 <= n <= 100`",
      "player is `1` or `2`.",
      "`0 <= row, col < n`",
      "`(row, col)` are unique for each different call to `move`.",
      "At most `n2` calls will be made to `move`."
    ],
    "note": null,
    "follow_up": "Could you do better than `O(n2)` per `move()` operation?"
  },
  {
    "id": "349",
    "slug": "intersection-of-two-arrays",
    "title": "Intersection of Two Arrays",
    "difficulty": "Easy",
    "description": "Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must be **unique** and you may return the result in **any order**.",
    "examples": [
      {
        "input": "nums1 = \\[1,2,2,1\\], nums2 = \\[2,2\\]",
        "output": "\\[2\\]"
      },
      {
        "input": "nums1 = \\[4,9,5\\], nums2 = \\[9,4,9,8,4\\]",
        "output": "\\[9,4\\]",
        "explanation": "\\[4,9\\] is also accepted."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 1000`",
      "`0 <= nums1[i], nums2[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "350",
    "slug": "intersection-of-two-arrays-ii",
    "title": "Intersection of Two Arrays II",
    "difficulty": "Easy",
    "description": "Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must appear as many times as it shows in both arrays and you may return the result in **any order**.",
    "examples": [
      {
        "input": "nums1 = \\[1,2,2,1\\], nums2 = \\[2,2\\]",
        "output": "\\[2,2\\]"
      },
      {
        "input": "nums1 = \\[4,9,5\\], nums2 = \\[9,4,9,8,4\\]",
        "output": "\\[4,9\\]",
        "explanation": "\\[9,4\\] is also accepted."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 1000`",
      "`0 <= nums1[i], nums2[i] <= 1000`",
      "Follow up:",
      "What if the given array is already sorted? How would you optimize your algorithm?",
      "What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?",
      "What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "351",
    "slug": "android-unlock-patterns",
    "title": "Android Unlock Patterns",
    "difficulty": "Medium",
    "description": "Android devices have a special lock screen with a `3 x 3` grid of dots. Users can set an \"unlock pattern \" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of `k` dots is a **valid** unlock pattern if both of the following are true: *  All the dots in the sequence are **distinct**. *  If the line segment connecting two consecutive dots in the sequence passes through the **center** of any other dot, the other dot **must have previously appeared** in the sequence. No jumps through the center non-selected dots are allowed. *  For example, connecting dots `2` and `9` without dots `5` or `6` appearing beforehand is valid because the line from dot `2` to dot `9` does not pass through the center of either dot `5` or `6`. *  However, connecting dots `1` and `3` without dot `2` appearing beforehand is invalid because the line from dot `1` to dot `3` passes through the center of dot `2`. Here are some example valid and invalid unlock patterns: *  The 1st pattern `[4,1,3,6]` is invalid because the line connecting dots `1` and `3` pass through dot `2`, but dot `2` did not previously appear in the sequence. *  The 2nd pattern `[4,1,9,2]` is invalid because the line connecting dots `1` and `9` pass through dot `5`, but dot `5` did not previously appear in the sequence. *  The 3rd pattern `[2,4,1,3,6]` is valid because it follows the conditions. The line connecting dots `1` and `3` meets the condition because dot `2` previously appeared in the sequence. *  The 4th pattern `[6,5,4,1,9,2]` is valid because it follows the conditions. The line connecting dots `1` and `9` meets the condition because dot `5` previously appeared in the sequence. Given two integers `m` and `n`, return _the **number of unique and valid unlock patterns** of the Android grid lock screen that consist of **at least**_ `m` _keys and **at most**_ `n` _keys._ Two unlock patterns are considered **unique** if there is a dot in one sequence that is not in the other, or the order of the dots is different.",
    "examples": [
      {
        "input": "m = 1, n = 1",
        "output": "9"
      },
      {
        "input": "m = 1, n = 2",
        "output": "65"
      }
    ],
    "constraints": [
      "`1 <= m, n <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "352",
    "slug": "data-stream-as-disjoint-intervals",
    "title": "Data Stream as Disjoint Intervals",
    "difficulty": "Hard",
    "description": "Given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals. Implement the `SummaryRanges` class: *  `SummaryRanges()` Initializes the object with an empty stream. *  `void addNum(int value)` Adds the integer `value` to the stream. *  `int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`. The answer should be sorted by `starti`.",
    "examples": [],
    "constraints": [
      "`0 <= value <= 104`",
      "At most `3  104` calls will be made to `addNum` and `getIntervals`.",
      "At most `102` calls will be made to `getIntervals`.",
      "Follow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "353",
    "slug": "design-snake-game",
    "title": "Design Snake Game",
    "difficulty": "Medium",
    "description": "Design a [Snake game](https://en.wikipedia.org/wiki/Snake_(video_game)) that is played on a device with screen size `height x width`. [Play the game online](http://patorjk.com/games/snake/) if you are not familiar with the game. The snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit. You are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by `1`. Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food. When a piece of food appears on the screen, it is **guaranteed** that it will not appear on a block occupied by the snake. The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies **after** moving (i.e. a snake of length 4 cannot run into itself). Implement the `SnakeGame` class: *  `SnakeGame(int width, int height, int[][] food)` Initializes the object with a screen of size `height x width` and the positions of the `food`. *  `int move(String direction)` Returns the score of the game after applying one `direction` move by the snake. If the game is over, return `-1`.",
    "examples": [],
    "constraints": [
      "`1 <= width, height <= 104`",
      "`1 <= food.length <= 50`",
      "`food[i].length == 2`",
      "`0 <= ri < height`",
      "`0 <= ci < width`",
      "`direction.length == 1`",
      "`direction` is `'U'`, `'D'`, `'L'`, or `'R'`.",
      "At most `104` calls will be made to `move`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "354",
    "slug": "russian-doll-envelopes",
    "title": "Russian Doll Envelopes",
    "difficulty": "Hard",
    "description": "You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope. One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height. Return _the maximum number of envelopes you can Russian doll (i.e., put one inside the other)_.",
    "examples": [
      {
        "input": "envelopes = \\[\\[5,4\\],\\[6,4\\],\\[6,7\\],\\[2,3\\]\\]",
        "output": "3",
        "explanation": "The maximum number of envelopes you can Russian doll is `3` (\\[2,3\\] => \\[5,4\\] => \\[6,7\\])."
      },
      {
        "input": "envelopes = \\[\\[1,1\\],\\[1,1\\],\\[1,1\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= envelopes.length <= 105`",
      "`envelopes[i].length == 2`",
      "`1 <= wi, hi <= 105`"
    ],
    "note": "You cannot rotate an envelope.",
    "follow_up": null
  },
  {
    "id": "355",
    "slug": "design-twitter",
    "title": "Design Twitter",
    "difficulty": "Medium",
    "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user's news feed. Implement the `Twitter` class: *  `Twitter()` Initializes your twitter object. *  `void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`. *  `List getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be **ordered from most recent to least recent**. *  `void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`. *  `void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`.",
    "examples": [],
    "constraints": [
      "`1 <= userId, followerId, followeeId <= 500`",
      "`0 <= tweetId <= 104`",
      "All the tweets have unique IDs.",
      "At most `3  104` calls will be made to `postTweet`, `getNewsFeed`, `follow`, and `unfollow`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "356",
    "slug": "line-reflection",
    "title": "Line Reflection",
    "difficulty": "Medium",
    "description": "Given `n` points on a 2D plane, find if there is such a line parallel to the y-axis that reflects the given points symmetrically. In other words, answer whether or not if there exists a line that after reflecting all points over the given line, the original points' set is the same as the reflected ones. **Note** that there can be repeated points.",
    "examples": [
      {
        "input": "points = \\[\\[1,1\\],\\[-1,1\\]\\]",
        "output": "true",
        "explanation": "We can choose the line x = 0."
      },
      {
        "input": "points = \\[\\[1,1\\],\\[-1,-1\\]\\]",
        "output": "false",
        "explanation": "We can't choose a line."
      }
    ],
    "constraints": [
      "`n == points.length`",
      "`1 <= n <= 104`",
      "`-108 <= points[i][j] <= 108`",
      "Follow up: Could you do better than `O(n2)`?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "357",
    "slug": "count-numbers-with-unique-digits",
    "title": "Count Numbers with Unique Digits",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.",
    "examples": [
      {
        "input": "n = 2",
        "output": "91",
        "explanation": "The answer should be the total numbers in the range of 0 <= x < 100, excluding 11,22,33,44,55,66,77,88,99"
      },
      {
        "input": "n = 0",
        "output": "1"
      }
    ],
    "constraints": [
      "`0 <= n <= 8`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "358",
    "slug": "rearrange-string-k-distance-apart",
    "title": "Rearrange String k Distance Apart",
    "difficulty": "Hard",
    "description": "Given a string `s` and an integer `k`, rearrange `s` such that the same characters are **at least** distance `k` from each other. If it is not possible to rearrange the string, return an empty string `\" \"`.",
    "examples": [
      {
        "input": "s =  \"aabbcc \", k = 3",
        "output": "\"abcabc \"",
        "explanation": "The same letters are at least a distance of 3 from each other."
      },
      {
        "input": "s =  \"aaabc \", k = 3",
        "output": "\" \"",
        "explanation": "It is not possible to rearrange the string."
      },
      {
        "input": "s =  \"aaadbbcc \", k = 2",
        "output": "\"abacabcd \"",
        "explanation": "The same letters are at least a distance of 2 from each other."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 3  105`",
      "`s` consists of only lowercase English letters.",
      "`0 <= k <= s.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "359",
    "slug": "logger-rate-limiter",
    "title": "Logger Rate Limiter",
    "difficulty": "Easy",
    "description": "Design a logger system that receives a stream of messages along with their timestamps. Each **unique** message should only be printed **at most every 10 seconds** (i.e. a message printed at timestamp `t` will prevent other identical messages from being printed until timestamp `t + 10`). All messages will come in chronological order. Several messages may arrive at the same timestamp. Implement the `Logger` class: *  `Logger()` Initializes the `logger` object. *  `bool shouldPrintMessage(int timestamp, string message)` Returns `true` if the `message` should be printed in the given `timestamp`, otherwise returns `false`.",
    "examples": [],
    "constraints": [
      "`0 <= timestamp <= 109`",
      "Every `timestamp` will be passed in non-decreasing order (chronological order).",
      "`1 <= message.length <= 30`",
      "At most `104` calls will be made to `shouldPrintMessage`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "360",
    "slug": "sort-transformed-array",
    "title": "Sort Transformed Array",
    "difficulty": "Medium",
    "description": "Given a **sorted** integer array `nums` and three integers `a`, `b` and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` in the array, and return _the array in a sorted order_.",
    "examples": [
      {
        "input": "nums = \\[-4,-2,2,4\\], a = 1, b = 3, c = 5",
        "output": "\\[3,9,15,33\\]"
      },
      {
        "input": "nums = \\[-4,-2,2,4\\], a = -1, b = 3, c = 5",
        "output": "\\[-23,-5,1,7\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 200`",
      "`-100 <= nums[i], a, b, c <= 100`",
      "`nums` is sorted in ascending order.",
      "Follow up: Could you solve it in `O(n)` time?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "361",
    "slug": "bomb-enemy",
    "title": "Bomb Enemy",
    "difficulty": "Medium",
    "description": "Given an `m x n` matrix `grid` where each cell is either a wall `'W'`, an enemy `'E'` or empty `'0'`, return _the maximum enemies you can kill using one bomb_. You can only place the bomb in an empty cell. The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.",
    "examples": [
      {
        "input": "grid = \\[\\[ \"0 \", \"E \", \"0 \", \"0 \"\\],\\[ \"E \", \"0 \", \"W \", \"E \"\\],\\[ \"0 \", \"E \", \"0 \", \"0 \"\\]\\]",
        "output": "3"
      },
      {
        "input": "grid = \\[\\[ \"W \", \"W \", \"W \"\\],\\[ \"0 \", \"0 \", \"0 \"\\],\\[ \"E \", \"E \", \"E \"\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 500`",
      "`grid[i][j]` is either `'W'`, `'E'`, or `'0'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "362",
    "slug": "design-hit-counter",
    "title": "Design Hit Counter",
    "difficulty": "Medium",
    "description": "Design a hit counter which counts the number of hits received in the past `5` minutes (i.e., the past `300` seconds). Your system should accept a `timestamp` parameter (**in seconds** granularity), and you may assume that calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing). Several hits may arrive roughly at the same time. Implement the `HitCounter` class: *  `HitCounter()` Initializes the object of the hit counter system. *  `void hit(int timestamp)` Records a hit that happened at `timestamp` (**in seconds**). Several hits may happen at the same `timestamp`. *  `int getHits(int timestamp)` Returns the number of hits in the past 5 minutes from `timestamp` (i.e., the past `300` seconds).",
    "examples": [],
    "constraints": [
      "`1 <= timestamp <= 2  109`",
      "All the calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing).",
      "At most `300` calls will be made to `hit` and `getHits`.",
      "Follow up: What if the number of hits per second could be huge? Does your design scale?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "363",
    "slug": "max-sum-of-rectangle-no-larger-than-k",
    "title": "Max Sum of Rectangle No Larger Than K",
    "difficulty": "Hard",
    "description": "Given an `m x n` matrix `matrix` and an integer `k`, return _the max sum of a rectangle in the matrix such that its sum is no larger than_ `k`. It is **guaranteed** that there will be a rectangle with a sum no larger than `k`.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,0,1\\],\\[0,-2,3\\]\\], k = 2",
        "output": "2",
        "explanation": "Because the sum of the blue rectangle \\[\\[0, 1\\], \\[-2, 3\\]\\] is 2, and 2 is the max number no larger than k (k = 2)."
      },
      {
        "input": "matrix = \\[\\[2,2,-1\\]\\], k = 3",
        "output": "3"
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 100`",
      "`-100 <= matrix[i][j] <= 100`",
      "`-105 <= k <= 105`",
      "Follow up: What if the number of rows is much larger than the number of columns?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "364",
    "slug": "nested-list-weight-sum-ii",
    "title": "Nested List Weight Sum II",
    "difficulty": "Medium",
    "description": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. The **depth** of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its **depth**. Let `maxDepth` be the **maximum depth** of any integer. The **weight** of an integer is `maxDepth - (the depth of the integer) + 1`. Return _the sum of each integer in_ `nestedList` _multiplied by its **weight**_.",
    "examples": [
      {
        "input": "nestedList = \\[\\[1,1\\],2,\\[1,1\\]\\]",
        "output": "8",
        "explanation": "Four 1's with a weight of 1, one 2 with a weight of 2."
      },
      {
        "input": "nestedList = \\[1,\\[4,\\[6\\]\\]\\]",
        "output": "17",
        "explanation": "One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1."
      }
    ],
    "constraints": [
      "`1 <= nestedList.length <= 50`",
      "The values of the integers in the nested list is in the range `[-100, 100]`.",
      "The maximum depth of any integer is less than or equal to `50`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "365",
    "slug": "water-and-jug-problem",
    "title": "Water and Jug Problem",
    "difficulty": "Medium",
    "description": "You are given two jugs with capacities `jug1Capacity` and `jug2Capacity` liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly `targetCapacity` liters using these two jugs. If `targetCapacity` liters of water are measurable, you must have `targetCapacity` liters of water contained **within one or both buckets** by the end. Operations allowed: *  Fill any of the jugs with water. *  Empty any of the jugs. *  Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.",
    "examples": [
      {
        "input": "jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4",
        "output": "true",
        "explanation": "The famous [Die Hard](https://www.youtube.com/watch?v=BVtQNK_ZUJg&ab_channel=notnek01) example"
      },
      {
        "input": "jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5",
        "output": "false"
      },
      {
        "input": "jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "366",
    "slug": "find-leaves-of-binary-tree",
    "title": "Find Leaves of Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, collect a tree's nodes as if you were doing this: *  Collect all the leaf nodes. *  Remove all the leaf nodes. *  Repeat until the tree is empty.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5\\]",
        "output": "\\[\\[4,5,3\\],\\[2\\],\\[1\\]\\]"
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[\\[1\\]\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 100]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "367",
    "slug": "valid-perfect-square",
    "title": "Valid Perfect Square",
    "difficulty": "Easy",
    "description": "Given a positive integer num, return `true` _if_ `num` _is a perfect square or_ `false` _otherwise_. A **perfect square** is an integer that is the square of an integer. In other words, it is the product of some integer with itself. You must not use any built-in library function, such as `sqrt`.",
    "examples": [
      {
        "input": "num = 16",
        "output": "true",
        "explanation": "We return true because 4 \\* 4 = 16 and 4 is an integer."
      },
      {
        "input": "num = 14",
        "output": "false",
        "explanation": "We return false because 3.742 \\* 3.742 = 14 and 3.742 is not an integer."
      }
    ],
    "constraints": [
      "`1 <= num <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "368",
    "slug": "largest-divisible-subset",
    "title": "Largest Divisible Subset",
    "difficulty": "Medium",
    "description": "Given a set of **distinct** positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies: *  `answer[i] % answer[j] == 0`, or *  `answer[j] % answer[i] == 0` If there are multiple solutions, return any of them.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "\\[1,2\\]",
        "explanation": "\\[1,3\\] is also accepted."
      },
      {
        "input": "nums = \\[1,2,4,8\\]",
        "output": "\\[1,2,4,8\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 2  109`",
      "All the integers in `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "369",
    "slug": "plus-one-linked-list",
    "title": "Plus One Linked List",
    "difficulty": "Medium",
    "description": "Given a non-negative integer represented as a linked list of digits, _plus one to the integer_. The digits are stored such that the most significant digit is at the `head` of the list.",
    "examples": [
      {
        "input": "head = \\[1,2,3\\]",
        "output": "\\[1,2,4\\]"
      },
      {
        "input": "head = \\[0\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the linked list is in the range `[1, 100]`.",
      "`0 <= Node.val <= 9`",
      "The number represented by the linked list does not contain leading zeros except for the zero itself."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "370",
    "slug": "range-addition",
    "title": "Range Addition",
    "difficulty": "Medium",
    "description": "You are given an integer `length` and an array `updates` where `updates[i] = [startIdxi, endIdxi, inci]`. You have an array `arr` of length `length` with all zeros, and you have some operation to apply on `arr`. In the `ith` operation, you should increment all the elements `arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi]` by `inci`. Return `arr` _after applying all the_ `updates`.",
    "examples": [
      {
        "input": "length = 5, updates = \\[\\[1,3,2\\],\\[2,4,3\\],\\[0,2,-2\\]\\]",
        "output": "\\[-2,0,3,5,3\\]"
      },
      {
        "input": "length = 10, updates = \\[\\[2,4,6\\],\\[5,6,8\\],\\[1,9,-4\\]\\]",
        "output": "\\[0,-4,2,2,2,4,4,-4,-4,-4\\]"
      }
    ],
    "constraints": [
      "`1 <= length <= 105`",
      "`0 <= updates.length <= 104`",
      "`0 <= startIdxi <= endIdxi < length`",
      "`-1000 <= inci <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "371",
    "slug": "sum-of-two-integers",
    "title": "Sum of Two Integers",
    "difficulty": "Medium",
    "description": "Given two integers `a` and `b`, return _the sum of the two integers without using the operators_ `+` _and_ `-`.",
    "examples": [
      {
        "input": "a = 1, b = 2",
        "output": "3"
      },
      {
        "input": "a = 2, b = 3",
        "output": "5"
      }
    ],
    "constraints": [
      "`-1000 <= a, b <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "372",
    "slug": "super-pow",
    "title": "Super Pow",
    "difficulty": "Medium",
    "description": "Your task is to calculate `ab` mod `1337` where `a` is a positive integer and `b` is an extremely large positive integer given in the form of an array.",
    "examples": [
      {
        "input": "a = 2, b = \\[3\\]",
        "output": "8"
      },
      {
        "input": "a = 2, b = \\[1,0\\]",
        "output": "1024"
      },
      {
        "input": "a = 1, b = \\[4,3,3,8,5,2\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= a <= 231 - 1`",
      "`1 <= b.length <= 2000`",
      "`0 <= b[i] <= 9`",
      "`b` does not contain leading zeros."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "373",
    "slug": "find-k-pairs-with-smallest-sums",
    "title": "Find K Pairs with Smallest Sums",
    "difficulty": "Medium",
    "description": "You are given two integer arrays `nums1` and `nums2` sorted in **ascending order** and an integer `k`. Define a pair `(u, v)` which consists of one element from the first array and one element from the second array. Return _the_ `k` _pairs_ `(u1, v1), (u2, v2), ..., (uk, vk)` _with the smallest sums_.",
    "examples": [
      {
        "input": "nums1 = \\[1,7,11\\], nums2 = \\[2,4,6\\], k = 3",
        "output": "\\[\\[1,2\\],\\[1,4\\],\\[1,6\\]\\]",
        "explanation": "The first 3 pairs are returned from the sequence: \\[1,2\\],\\[1,4\\],\\[1,6\\],\\[7,2\\],\\[7,4\\],\\[11,2\\],\\[7,6\\],\\[11,4\\],\\[11,6\\]"
      },
      {
        "input": "nums1 = \\[1,1,2\\], nums2 = \\[1,2,3\\], k = 2",
        "output": "\\[\\[1,1\\],\\[1,1\\]\\]",
        "explanation": "The first 2 pairs are returned from the sequence: \\[1,1\\],\\[1,1\\],\\[1,2\\],\\[2,1\\],\\[1,2\\],\\[2,2\\],\\[1,3\\],\\[1,3\\],\\[2,3\\]"
      },
      {
        "input": "nums1 = \\[1,2\\], nums2 = \\[3\\], k = 3",
        "output": "\\[\\[1,3\\],\\[2,3\\]\\]",
        "explanation": "All possible pairs are returned from the sequence: \\[1,3\\],\\[2,3\\]"
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 105`",
      "`-109 <= nums1[i], nums2[i] <= 109`",
      "`nums1` and `nums2` both are sorted in ascending order.",
      "`1 <= k <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "374",
    "slug": "guess-number-higher-or-lower",
    "title": "Guess Number Higher or Lower",
    "difficulty": "Easy",
    "description": "We are playing the Guess Game. The game is as follows: I pick a number from `1` to `n`. You have to guess which number I picked. Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess. You call a pre-defined API `int guess(int num)`, which returns three possible results: *  `-1`: Your guess is higher than the number I picked (i.e. `num > pick`). *  `1`: Your guess is lower than the number I picked (i.e. `num < pick`). *  `0`: your guess is equal to the number I picked (i.e. `num == pick`). Return _the number that I picked_.",
    "examples": [
      {
        "input": "n = 10, pick = 6",
        "output": "6"
      },
      {
        "input": "n = 1, pick = 1",
        "output": "1"
      },
      {
        "input": "n = 2, pick = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 231 - 1`",
      "`1 <= pick <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "375",
    "slug": "guess-number-higher-or-lower-ii",
    "title": "Guess Number Higher or Lower II",
    "difficulty": "Medium",
    "description": "We are playing the Guessing Game. The game will work as follows: 1. I pick a number between `1` and `n`. 2. You guess a number. 3. If you guess the right number, **you win the game**. 4. If you guess the wrong number, then I will tell you whether the number I picked is **higher or lower**, and you will continue guessing. 5. Every time you guess a wrong number `x`, you will pay `x` dollars. If you run out of money, **you lose the game**. Given a particular `n`, return _the minimum amount of money you need to **guarantee a win regardless of what number I pick**_.",
    "examples": [
      {
        "input": "n = 10",
        "output": "16",
        "explanation": "The winning strategy is as follows:"
      },
      {
        "input": "n = 1",
        "output": "0",
        "explanation": "There is only one possible number, so you can guess 1 and not have to pay anything."
      },
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "There are two possible numbers, 1 and 2."
      }
    ],
    "constraints": [
      "`1 <= n <= 200`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "376",
    "slug": "wiggle-subsequence",
    "title": "Wiggle Subsequence",
    "difficulty": "Medium",
    "description": "A **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences. *  For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative. *  In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero. A **subsequence** is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order. Given an integer array `nums`, return _the length of the longest **wiggle subsequence** of_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[1,7,4,9,2,5\\]",
        "output": "6",
        "explanation": "The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3)."
      },
      {
        "input": "nums = \\[1,17,5,10,13,15,10,5,16,8\\]",
        "output": "7",
        "explanation": "There are several subsequences that achieve this length."
      },
      {
        "input": "nums = \\[1,2,3,4,5,6,7,8,9\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] <= 1000`",
      "Follow up: Could you solve this in `O(n)` time?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "377",
    "slug": "combination-sum-iv",
    "title": "Combination Sum IV",
    "difficulty": "Medium",
    "description": "Given an array of **distinct** integers `nums` and a target integer `target`, return _the number of possible combinations that add up to_ `target`. The test cases are generated so that the answer can fit in a **32-bit** integer.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\], target = 4",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "nums = \\[9\\], target = 3",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 200`",
      "`1 <= nums[i] <= 1000`",
      "All the elements of `nums` are unique.",
      "`1 <= target <= 1000`",
      "Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "378",
    "slug": "kth-smallest-element-in-a-sorted-matrix",
    "title": "Kth Smallest Element in a Sorted Matrix",
    "difficulty": "Medium",
    "description": "Given an `n x n` `matrix` where each of the rows and columns is sorted in ascending order, return _the_ `kth` _smallest element in the matrix_. Note that it is the `kth` smallest element **in the sorted order**, not the `kth` **distinct** element. You must find a solution with a memory complexity better than `O(n2)`.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,5,9\\],\\[10,11,13\\],\\[12,13,15\\]\\], k = 8",
        "output": "13",
        "explanation": "The elements in the matrix are \\[1,5,9,10,11,12,13,**13**,15\\], and the 8th smallest number is 13"
      },
      {
        "input": "matrix = \\[\\[-5\\]\\], k = 1",
        "output": "-5"
      }
    ],
    "constraints": [
      "`n == matrix.length == matrix[i].length`",
      "`1 <= n <= 300`",
      "`-109 <= matrix[i][j] <= 109`",
      "All the rows and columns of `matrix` are guaranteed to be sorted in non-decreasing order.",
      "`1 <= k <= n2`",
      "Follow up:",
      "Could you solve the problem with a constant memory (i.e., `O(1)` memory complexity)?",
      "Could you solve the problem in `O(n)` time complexity? The solution may be too advanced for an interview but you may find reading [this paper](http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf) fun."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "379",
    "slug": "design-phone-directory",
    "title": "Design Phone Directory",
    "difficulty": "Medium",
    "description": "Design a phone directory that initially has `maxNumbers` empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot. Implement the `PhoneDirectory` class: *  `PhoneDirectory(int maxNumbers)` Initializes the phone directory with the number of available slots `maxNumbers`. *  `int get()` Provides a number that is not assigned to anyone. Returns `-1` if no number is available. *  `bool check(int number)` Returns `true` if the slot `number` is available and `false` otherwise. *  `void release(int number)` Recycles or releases the slot `number`.",
    "examples": [],
    "constraints": [
      "`1 <= maxNumbers <= 104`",
      "`0 <= number < maxNumbers`",
      "At most `2  104` calls will be made to `get`, `check`, and `release`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "380",
    "slug": "insert-delete-getrandom-o1",
    "title": "Insert Delete GetRandom O(1)",
    "difficulty": "Medium",
    "description": "Implement the `RandomizedSet` class: *  `RandomizedSet()` Initializes the `RandomizedSet` object. *  `bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise. *  `bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise. *  `int getRandom()` Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the **same probability** of being returned. You must implement the functions of the class such that each function works in **average** `O(1)` time complexity.",
    "examples": [],
    "constraints": [
      "`-231 <= val <= 231 - 1`",
      "At most `2 ` `105` calls will be made to `insert`, `remove`, and `getRandom`.",
      "There will be at least one element in the data structure when `getRandom` is called."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "381",
    "slug": "insert-delete-getrandom-o1-duplicates-allowed",
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "difficulty": "Hard",
    "description": "`RandomizedCollection` is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element. Implement the `RandomizedCollection` class: *  `RandomizedCollection()` Initializes the empty `RandomizedCollection` object. *  `bool insert(int val)` Inserts an item `val` into the multiset, even if the item is already present. Returns `true` if the item is not present, `false` otherwise. *  `bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item is present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them. *  `int getRandom()` Returns a random element from the current multiset of elements. The probability of each element being returned is **linearly related** to the number of the same values the multiset contains. You must implement the functions of the class such that each function works on **average** `O(1)` time complexity.",
    "examples": [],
    "constraints": [
      "`-231 <= val <= 231 - 1`",
      "At most `2  105` calls in total will be made to `insert`, `remove`, and `getRandom`.",
      "There will be at least one element in the data structure when `getRandom` is called."
    ],
    "note": "The test cases are generated such that `getRandom` will only be called if there is **at least one** item in the `RandomizedCollection`.",
    "follow_up": null
  },
  {
    "id": "382",
    "slug": "linked-list-random-node",
    "title": "Linked List Random Node",
    "difficulty": "Medium",
    "description": "Given a singly linked list, return a random node's value from the linked list. Each node must have the **same probability** of being chosen. Implement the `Solution` class: *  `Solution(ListNode head)` Initializes the object with the head of the singly-linked list `head`. *  `int getRandom()` Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.",
    "examples": [],
    "constraints": [
      "The number of nodes in the linked list will be in the range `[1, 104]`.",
      "`-104 <= Node.val <= 104`",
      "At most `104` calls will be made to `getRandom`.",
      "Follow up:",
      "What if the linked list is extremely large and its length is unknown to you?",
      "Could you solve this efficiently without using extra space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "383",
    "slug": "ransom-note",
    "title": "Ransom Note",
    "difficulty": "Easy",
    "description": "Given two strings `ransomNote` and `magazine`, return `true` _if_ `ransomNote` _can be constructed by using the letters from_ `magazine` _and_ `false` _otherwise_. Each letter in `magazine` can only be used once in `ransomNote`.",
    "examples": [
      {
        "input": "ransomNote = \"a\", magazine = \"b\"",
        "output": "false"
      },
      {
        "input": "ransomNote = \"aa\", magazine = \"ab\"",
        "output": "false"
      },
      {
        "input": "ransomNote = \"aa\", magazine = \"aab\"",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= ransomNote.length, magazine.length <= 105`",
      "`ransomNote` and `magazine` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "384",
    "slug": "shuffle-an-array",
    "title": "Shuffle an Array",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, design an algorithm to randomly shuffle the array. All permutations of the array should be **equally likely** as a result of the shuffling. Implement the `Solution` class: *  `Solution(int[] nums)` Initializes the object with the integer array `nums`. *  `int[] reset()` Resets the array to its original configuration and returns it. *  `int[] shuffle()` Returns a random shuffling of the array.",
    "examples": [],
    "constraints": [
      "`1 <= nums.length <= 50`",
      "`-106 <= nums[i] <= 106`",
      "All the elements of `nums` are unique.",
      "At most `104` calls in total will be made to `reset` and `shuffle`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "385",
    "slug": "mini-parser",
    "title": "Mini Parser",
    "difficulty": "Medium",
    "description": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return _the deserialized_ `NestedInteger`. Each element is either an integer or a list whose elements may also be integers or other lists.",
    "examples": [
      {
        "input": "s =  \"324 \"",
        "output": "324",
        "explanation": "You should return a NestedInteger object which contains a single integer 324."
      },
      {
        "input": "s =  \"\\[123,\\[456,\\[789\\]\\]\\] \"",
        "output": "\\[123,\\[456,\\[789\\]\\]\\]",
        "explanation": "Return a NestedInteger object containing a nested list with 2 elements:"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5  104`",
      "`s` consists of digits, square brackets `\"[] \"`, negative sign `'-'`, and commas `','`.",
      "`s` is the serialization of valid `NestedInteger`.",
      "All the values in the input are in the range `[-106, 106]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "386",
    "slug": "lexicographical-numbers",
    "title": "Lexicographical Numbers",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order. You must write an algorithm that runs in `O(n)` time and uses `O(1)` extra space.",
    "examples": [
      {
        "input": "n = 13",
        "output": "\\[1,10,11,12,13,2,3,4,5,6,7,8,9\\]"
      },
      {
        "input": "n = 2",
        "output": "\\[1,2\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 5  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "387",
    "slug": "first-unique-character-in-a-string",
    "title": "First Unique Character in a String",
    "difficulty": "Easy",
    "description": "Given a string `s`, _find the first non-repeating character in it and return its index_. If it does not exist, return `-1`.",
    "examples": [
      {
        "input": "s = \"leetcode\"",
        "output": "0"
      },
      {
        "input": "s = \"loveleetcode\"",
        "output": "2"
      },
      {
        "input": "s = \"aabb\"",
        "output": "-1"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "388",
    "slug": "longest-absolute-file-path",
    "title": "Longest Absolute File Path",
    "difficulty": "Medium",
    "description": "Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture: Here, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`. In text form, it looks like this (with \u27f6 representing the tab character): dir \u27f6 subdir1 \u27f6 \u27f6 file1.ext \u27f6 \u27f6 subsubdir1 \u27f6 subdir2 \u27f6 \u27f6 subsubdir2 \u27f6 \u27f6 \u27f6 file2.ext If we were to write this representation in code, it will look like this: `\"dir \\tsubdir1 \\t\\tfile1.ext \\t\\tsubsubdir1 \\tsubdir2 \\t\\tsubsubdir2 \\t\\t\\tfile2.ext \"`. Note that the `' '` and `'\\t'` are the new-line and tab characters. Every file and directory has a unique **absolute path** in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `'/'s`. Using the above example, the **absolute path** to `file2.ext` is `\"dir/subdir2/subsubdir2/file2.ext \"`. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces. Given a string `input` representing the file system in the explained format, return _the length of the **longest absolute path** to a **file** in the abstracted file system_. If there is no file in the system, return `0`. **Note** that the testcases are generated such that the file system is valid and no file or directory name has length 0.",
    "examples": [
      {
        "input": "input =  \"dir\\",
        "output": "20",
        "explanation": "We have only one file, and the absolute path is  \"dir/subdir2/file.ext \" of length 20."
      },
      {
        "input": "input =  \"dir\\",
        "output": "32",
        "explanation": "We have two files:"
      },
      {
        "input": "input =  \"a \"",
        "output": "0",
        "explanation": "We do not have any files, just a single directory named  \"a \"."
      }
    ],
    "constraints": [
      "`1 <= input.length <= 104`",
      "`input` may contain lowercase or uppercase English letters, a new line character `'",
      "All file and directory names have positive length."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "389",
    "slug": "find-the-difference",
    "title": "Find the Difference",
    "difficulty": "Easy",
    "description": "You are given two strings `s` and `t`. String `t` is generated by random shuffling string `s` and then add one more letter at a random position. Return the letter that was added to `t`.",
    "examples": [
      {
        "input": "s =  \"abcd \", t =  \"abcde \"",
        "output": "\"e \"",
        "explanation": "'e' is the letter that was added."
      },
      {
        "input": "s =  \" \", t =  \"y \"",
        "output": "\"y \""
      }
    ],
    "constraints": [
      "`0 <= s.length <= 1000`",
      "`t.length == s.length + 1`",
      "`s` and `t` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "390",
    "slug": "elimination-game",
    "title": "Elimination Game",
    "difficulty": "Medium",
    "description": "You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`: *  Starting from left to right, remove the first number and every other number afterward until you reach the end of the list. *  Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers. *  Keep repeating the steps again, alternating left to right and right to left, until a single number remains. Given the integer `n`, return _the last number that remains in_ `arr`.",
    "examples": [
      {
        "input": "n = 9",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "391",
    "slug": "perfect-rectangle",
    "title": "Perfect Rectangle",
    "difficulty": "Hard",
    "description": "Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. The bottom-left point of the rectangle is `(xi, yi)` and the top-right point of it is `(ai, bi)`. Return `true` _if all the rectangles together form an exact cover of a rectangular region_.",
    "examples": [
      {
        "input": "rectangles = \\[\\[1,1,3,3\\],\\[3,1,4,2\\],\\[3,2,4,4\\],\\[1,3,2,4\\],\\[2,3,3,4\\]\\]",
        "output": "true",
        "explanation": "All 5 rectangles together form an exact cover of a rectangular region."
      },
      {
        "input": "rectangles = \\[\\[1,1,2,3\\],\\[1,3,2,4\\],\\[3,1,4,2\\],\\[3,2,4,4\\]\\]",
        "output": "false",
        "explanation": "Because there is a gap between the two rectangular regions."
      },
      {
        "input": "rectangles = \\[\\[1,1,3,3\\],\\[3,1,4,2\\],\\[1,3,2,4\\],\\[2,2,4,4\\]\\]",
        "output": "false",
        "explanation": "Because two of the rectangles overlap with each other."
      }
    ],
    "constraints": [
      "`1 <= rectangles.length <= 2  104`",
      "`rectangles[i].length == 4`",
      "`-105 <= xi, yi, ai, bi <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "392",
    "slug": "is-subsequence",
    "title": "Is Subsequence",
    "difficulty": "Easy",
    "description": "Given two strings `s` and `t`, return `true` _if_ `s` _is a **subsequence** of_ `t`_, or_ `false` _otherwise_. A **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not).",
    "examples": [
      {
        "input": "s = \"abc\", t = \"ahbgdc\"",
        "output": "true"
      },
      {
        "input": "s = \"axc\", t = \"ahbgdc\"",
        "output": "false"
      }
    ],
    "constraints": [
      "`0 <= s.length <= 100`",
      "`0 <= t.length <= 104`",
      "`s` and `t` consist only of lowercase English letters.",
      "Follow up: Suppose there are lots of incoming `s`, say `s1, s2, ..., sk` where `k >= 109`, and you want to check one by one to see if `t` has its subsequence. In this scenario, how would you change your code?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "393",
    "slug": "utf-8-validation",
    "title": "UTF-8 Validation",
    "difficulty": "Medium",
    "description": "Given an integer array `data` representing the data, return whether it is a valid **UTF-8** encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters). A character in **UTF8** can be from **1 to 4 bytes** long, subjected to the following rules: 1. For a **1-byte** character, the first bit is a `0`, followed by its Unicode code. 2. For an **n-bytes** character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`. This is how the UTF-8 encoding would work: Number of Bytes  |    UTF-8 Octet Sequence |       (binary) --------------------+----------------------------------------- 1     |  0xxxxxxx 2     |  110xxxxx 10xxxxxx 3     |  1110xxxx 10xxxxxx 10xxxxxx 4     |  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx `x` denotes a bit in the binary form of a byte that may be either `0` or `1`.",
    "examples": [
      {
        "input": "data = \\[197,130,1\\]",
        "output": "true",
        "explanation": "data represents the octet sequence: 11000101 10000010 00000001."
      },
      {
        "input": "data = \\[235,140,4\\]",
        "output": "false",
        "explanation": "data represented the octet sequence: 11101011 10001100 00000100."
      }
    ],
    "constraints": [
      "`1 <= data.length <= 2  104`",
      "`0 <= data[i] <= 255`"
    ],
    "note": "The input is an array of integers. Only the **least significant 8 bits** of each integer is used to store the data. This means each integer represents only 1 byte of data.",
    "follow_up": null
  },
  {
    "id": "394",
    "slug": "decode-string",
    "title": "Decode String",
    "difficulty": "Medium",
    "description": "Given an encoded string, return its decoded string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer. You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there will not be input like `3a` or `2[4]`. The test cases are generated so that the length of the output will never exceed `105`.",
    "examples": [
      {
        "input": "s =  \"3\\[a\\]2\\[bc\\] \"",
        "output": "\"aaabcbc \""
      },
      {
        "input": "s =  \"3\\[a2\\[c\\]\\] \"",
        "output": "\"accaccacc \""
      },
      {
        "input": "s =  \"2\\[abc\\]3\\[cd\\]ef \"",
        "output": "\"abcabccdcdcdef \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 30`",
      "`s` consists of lowercase English letters, digits, and square brackets `'[]'`.",
      "`s` is guaranteed to be a valid input.",
      "All the integers in `s` are in the range `[1, 300]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "395",
    "slug": "longest-substring-with-at-least-k-repeating-characters",
    "title": "Longest Substring with At Least K Repeating Characters",
    "difficulty": "Medium",
    "description": "Given a string `s` and an integer `k`, return _the length of the longest substring of_ `s` _such that the frequency of each character in this substring is greater than or equal to_ `k`.",
    "examples": [
      {
        "input": "s =  \"aaabb \", k = 3",
        "output": "3",
        "explanation": "The longest substring is  \"aaa \", as 'a' is repeated 3 times."
      },
      {
        "input": "s =  \"ababbc \", k = 2",
        "output": "5",
        "explanation": "The longest substring is  \"ababb \", as 'a' is repeated 2 times and 'b' is repeated 3 times."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of only lowercase English letters.",
      "`1 <= k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "396",
    "slug": "rotate-function",
    "title": "Rotate Function",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` of length `n`. Assume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the **rotation function** `F` on `nums` as follow: *  `F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].` Return _the maximum value of_ `F(0), F(1), ..., F(n-1)`. The test cases are generated so that the answer fits in a **32-bit** integer.",
    "examples": [
      {
        "input": "nums = \\[4,3,2,6\\]",
        "output": "26",
        "explanation": ""
      },
      {
        "input": "nums = \\[100\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`-100 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "397",
    "slug": "integer-replacement",
    "title": "Integer Replacement",
    "difficulty": "Medium",
    "description": "Given a positive integer `n`, you can apply one of the following operations: 1. If `n` is even, replace `n` with `n / 2`. 2. If `n` is odd, replace `n` with either `n + 1` or `n - 1`. Return _the minimum number of operations needed for_ `n` _to become_ `1`.",
    "examples": [
      {
        "input": "n = 8",
        "output": "3",
        "explanation": "8 -> 4 -> 2 -> 1"
      },
      {
        "input": "n = 7",
        "output": "4",
        "explanation": "7 -> 8 -> 4 -> 2 -> 1"
      },
      {
        "input": "n = 4",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "398",
    "slug": "random-pick-index",
    "title": "Random Pick Index",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` with possible **duplicates**, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array. Implement the `Solution` class: *  `Solution(int[] nums)` Initializes the object with the array `nums`. *  `int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.",
    "examples": [],
    "constraints": [
      "`1 <= nums.length <= 2  104`",
      "`-231 <= nums[i] <= 231 - 1`",
      "`target` is an integer from `nums`.",
      "At most `104` calls will be made to `pick`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "399",
    "slug": "evaluate-division",
    "title": "Evaluate Division",
    "difficulty": "Medium",
    "description": "You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable. You are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`. Return _the answers to all queries_. If a single answer cannot be determined, return `-1.0`.",
    "examples": [
      {
        "input": "equations = \\[\\[ \"a \", \"b \"\\],\\[ \"b \", \"c \"\\]\\], values = \\[2.0,3.0\\], queries = \\[\\[ \"a \", \"c \"\\],\\[ \"b \", \"a \"\\],\\[ \"a \", \"e \"\\],\\[ \"a \", \"a \"\\],\\[ \"x \", \"x \"\\]\\]",
        "output": "\\[6.00000,0.50000,-1.00000,1.00000,-1.00000\\]",
        "explanation": ""
      },
      {
        "input": "equations = \\[\\[ \"a \", \"b \"\\],\\[ \"b \", \"c \"\\],\\[ \"bc \", \"cd \"\\]\\], values = \\[1.5,2.5,5.0\\], queries = \\[\\[ \"a \", \"c \"\\],\\[ \"c \", \"b \"\\],\\[ \"bc \", \"cd \"\\],\\[ \"cd \", \"bc \"\\]\\]",
        "output": "\\[3.75000,0.40000,5.00000,0.20000\\]"
      },
      {
        "input": "equations = \\[\\[ \"a \", \"b \"\\]\\], values = \\[0.5\\], queries = \\[\\[ \"a \", \"b \"\\],\\[ \"b \", \"a \"\\],\\[ \"a \", \"c \"\\],\\[ \"x \", \"y \"\\]\\]",
        "output": "\\[0.50000,2.00000,-1.00000,-1.00000\\]"
      }
    ],
    "constraints": [
      "`1 <= equations.length <= 20`",
      "`equations[i].length == 2`",
      "`1 <= Ai.length, Bi.length <= 5`",
      "`values.length == equations.length`",
      "`0.0 < values[i] <= 20.0`",
      "`1 <= queries.length <= 20`",
      "`queries[i].length == 2`",
      "`1 <= Cj.length, Dj.length <= 5`",
      "`Ai, Bi, Cj, Dj` consist of lower case English letters and digits."
    ],
    "note": "The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.",
    "follow_up": null
  },
  {
    "id": "400",
    "slug": "nth-digit",
    "title": "Nth Digit",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.",
    "examples": [
      {
        "input": "n = 3",
        "output": "3"
      },
      {
        "input": "n = 11",
        "output": "0",
        "explanation": "The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10."
      }
    ],
    "constraints": [
      "`1 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "401",
    "slug": "binary-watch",
    "title": "Binary Watch",
    "difficulty": "Easy",
    "description": "A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right. *  For example, the below binary watch reads `\"4:51 \"`. Given an integer `turnedOn` which represents the number of LEDs that are currently on (ignoring the PM), return _all possible times the watch could represent_. You may return the answer in **any order**. The hour must not contain a leading zero. *  For example, `\"01:00 \"` is not valid. It should be `\"1:00 \"`. The minute must be consist of two digits and may contain a leading zero. *  For example, `\"10:2 \"` is not valid. It should be `\"10:02 \"`.",
    "examples": [
      {
        "input": "turnedOn = 1",
        "output": "\\[\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"\\]"
      },
      {
        "input": "turnedOn = 9",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`0 <= turnedOn <= 10`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "402",
    "slug": "remove-k-digits",
    "title": "Remove K Digits",
    "difficulty": "Medium",
    "description": "Given string num representing a non-negative integer `num`, and an integer `k`, return _the smallest possible integer after removing_ `k` _digits from_ `num`.",
    "examples": [
      {
        "input": "num =  \"1432219 \", k = 3",
        "output": "\"1219 \"",
        "explanation": "Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest."
      },
      {
        "input": "num =  \"10200 \", k = 1",
        "output": "\"200 \"",
        "explanation": "Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes."
      },
      {
        "input": "num =  \"10 \", k = 2",
        "output": "\"0 \"",
        "explanation": "Remove all the digits from the number and it is left with nothing which is 0."
      }
    ],
    "constraints": [
      "`1 <= k <= num.length <= 105`",
      "`num` consists of only digits.",
      "`num` does not have any leading zeros except for the zero itself."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "403",
    "slug": "frog-jump",
    "title": "Frog Jump",
    "difficulty": "Hard",
    "description": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water. Given a list of `stones`' positions (in units) in sorted **ascending order**, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be `1` unit. If the frog's last jump was `k` units, its next jump must be either `k - 1`, `k`, or `k + 1` units. The frog can only jump in the forward direction.",
    "examples": [
      {
        "input": "stones = \\[0,1,3,5,6,8,12,17\\]",
        "output": "true",
        "explanation": "The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone."
      },
      {
        "input": "stones = \\[0,1,2,3,4,8,9,11\\]",
        "output": "false",
        "explanation": "There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large."
      }
    ],
    "constraints": [
      "`2 <= stones.length <= 2000`",
      "`0 <= stones[i] <= 231 - 1`",
      "`stones[0] == 0`",
      "`stones` is sorted in a strictly increasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "404",
    "slug": "sum-of-left-leaves",
    "title": "Sum of Left Leaves",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, return _the sum of all left leaves._ A **leaf** is a node with no children. A **left leaf** is a leaf that is the left child of another node.",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "24",
        "explanation": "There are two left leaves in the binary tree, with values 9 and 15 respectively."
      },
      {
        "input": "root = \\[1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 1000]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "405",
    "slug": "convert-a-number-to-hexadecimal",
    "title": "Convert a Number to Hexadecimal",
    "difficulty": "Easy",
    "description": "Given an integer `num`, return _a string representing its hexadecimal representation_. For negative integers, [two's complement](https://en.wikipedia.org/wiki/Two%27s_complement) method is used. All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.",
    "examples": [
      {
        "input": "num = 26",
        "output": "\"1a\""
      },
      {
        "input": "num = -1",
        "output": "\"ffffffff\""
      }
    ],
    "constraints": [
      "`-231 <= num <= 231 - 1`"
    ],
    "note": "You are not allowed to use any built-in library method to directly solve this problem.",
    "follow_up": null
  },
  {
    "id": "406",
    "slug": "queue-reconstruction-by-height",
    "title": "Queue Reconstruction by Height",
    "difficulty": "Medium",
    "description": "You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with **exactly** `ki` other people in front who have a height greater than or equal to `hi`. Reconstruct and return _the queue that is represented by the input array_ `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).",
    "examples": [
      {
        "input": "people = \\[\\[7,0\\],\\[4,4\\],\\[7,1\\],\\[5,0\\],\\[6,1\\],\\[5,2\\]\\]",
        "output": "\\[\\[5,0\\],\\[7,0\\],\\[5,2\\],\\[6,1\\],\\[4,4\\],\\[7,1\\]\\]",
        "explanation": ""
      },
      {
        "input": "people = \\[\\[6,0\\],\\[5,0\\],\\[4,0\\],\\[3,2\\],\\[2,2\\],\\[1,4\\]\\]",
        "output": "\\[\\[4,0\\],\\[5,0\\],\\[2,2\\],\\[3,2\\],\\[1,4\\],\\[6,0\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= people.length <= 2000`",
      "`0 <= hi <= 106`",
      "`0 <= ki < people.length`",
      "It is guaranteed that the queue can be reconstructed."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "407",
    "slug": "trapping-rain-water-ii",
    "title": "Trapping Rain Water II",
    "difficulty": "Hard",
    "description": "Given an `m x n` integer matrix `heightMap` representing the height of each unit cell in a 2D elevation map, return _the volume of water it can trap after raining_.",
    "examples": [
      {
        "input": "heightMap = \\[\\[1,4,3,1,3,2\\],\\[3,2,1,3,2,4\\],\\[2,3,3,2,3,1\\]\\]",
        "output": "4",
        "explanation": "After the rain, water is trapped between the blocks."
      },
      {
        "input": "heightMap = \\[\\[3,3,3,3,3\\],\\[3,2,2,2,3\\],\\[3,2,1,2,3\\],\\[3,2,2,2,3\\],\\[3,3,3,3,3\\]\\]",
        "output": "10"
      }
    ],
    "constraints": [
      "`m == heightMap.length`",
      "`n == heightMap[i].length`",
      "`1 <= m, n <= 200`",
      "`0 <= heightMap[i][j] <= 2  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "408",
    "slug": "valid-word-abbreviation",
    "title": "Valid Word Abbreviation",
    "difficulty": "Easy",
    "description": "A string can be **abbreviated** by replacing any number of **non-adjacent**, **non-empty** substrings with their lengths. The lengths **should not** have leading zeros. For example, a string such as `\"substitution \"` could be abbreviated as (but not limited to): *  `\"s10n \"` ( `\"s ubstitutio n \"`) *  `\"sub4u4 \"` ( `\"sub stit u tion \"`) *  `\"12 \"` ( `\"substitution \"`) *  `\"su3i1u2on \"` ( `\"su bst i t u ti on \"`) *  `\"substitution \"` (no substrings replaced) The following are **not valid** abbreviations: *  `\"s55n \"` ( `\"s ubsti tutio n \"`, the replaced substrings are adjacent) *  `\"s010n \"` (has leading zeros) *  `\"s0ubstitution \"` (replaces an empty substring) Given a string `word` and an abbreviation `abbr`, return _whether the string **matches** the given abbreviation_. A **substring** is a contiguous **non-empty** sequence of characters within a string.",
    "examples": [
      {
        "input": "word =  \"internationalization \", abbr =  \"i12iz4n \"",
        "output": "true",
        "explanation": "The word  \"internationalization \" can be abbreviated as  \"i12iz4n \" ( \"i nternational iz atio n \")."
      },
      {
        "input": "word =  \"apple \", abbr =  \"a2e \"",
        "output": "false",
        "explanation": "The word  \"apple \" cannot be abbreviated as  \"a2e \"."
      }
    ],
    "constraints": [
      "`1 <= word.length <= 20`",
      "`word` consists of only lowercase English letters.",
      "`1 <= abbr.length <= 10`",
      "`abbr` consists of lowercase English letters and digits.",
      "All the integers in `abbr` will fit in a 32-bit integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "409",
    "slug": "longest-palindrome",
    "title": "Longest Palindrome",
    "difficulty": "Easy",
    "description": "Given a string `s` which consists of lowercase or uppercase letters, return _the length of the **longest palindrome**_ that can be built with those letters. Letters are **case sensitive**, for example, `\"Aa \"` is not considered a palindrome here.",
    "examples": [
      {
        "input": "s =  \"abccccdd \"",
        "output": "7",
        "explanation": "One longest palindrome that can be built is  \"dccaccd \", whose length is 7."
      },
      {
        "input": "s =  \"a \"",
        "output": "1",
        "explanation": "The longest palindrome that can be built is  \"a \", whose length is 1."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 2000`",
      "`s` consists of lowercase and/or uppercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "410",
    "slug": "split-array-largest-sum",
    "title": "Split Array Largest Sum",
    "difficulty": "Hard",
    "description": "Given an integer array `nums` and an integer `k`, split `nums` into `k` non-empty subarrays such that the largest sum of any subarray is **minimized**. Return _the minimized largest sum of the split_. A **subarray** is a contiguous part of the array.",
    "examples": [
      {
        "input": "nums = \\[7,2,5,10,8\\], k = 2",
        "output": "18",
        "explanation": "There are four ways to split nums into two subarrays."
      },
      {
        "input": "nums = \\[1,2,3,4,5\\], k = 2",
        "output": "9",
        "explanation": "There are four ways to split nums into two subarrays."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] <= 106`",
      "`1 <= k <= min(50, nums.length)`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "411",
    "slug": "minimum-unique-word-abbreviation",
    "title": "Minimum Unique Word Abbreviation",
    "difficulty": "Hard",
    "description": "A string can be **abbreviated** by replacing any number of **non-adjacent** substrings with their lengths. For example, a string such as `\"substitution \"` could be abbreviated as (but not limited to): *  `\"s10n \"` ( `\"s ubstitutio n \"`) *  `\"sub4u4 \"` ( `\"sub stit u tion \"`) *  `\"12 \"` ( `\"substitution \"`) *  `\"su3i1u2on \"` ( `\"su bst i t u ti on \"`) *  `\"substitution \"` (no substrings replaced) Note that `\"s55n \"` ( `\"s ubsti tutio n \"`) is not a valid abbreviation of `\"substitution \"` because the replaced substrings are adjacent. The **length** of an abbreviation is the number of letters that were not replaced plus the number of substrings that were replaced. For example, the abbreviation `\"s10n \"` has a length of `3` (`2` letters + `1` substring) and `\"su3i1u2on \"` has a length of `9` (`6` letters + `3` substrings). Given a target string `target` and an array of strings `dictionary`, return _an **abbreviation** of_ `target` _with the **shortest possible length** such that it is **not an abbreviation** of **any** string in_ `dictionary`_. If there are multiple shortest abbreviations, return any of them_.",
    "examples": [
      {
        "input": "target =  \"apple \", dictionary = \\[ \"blade \"\\]",
        "output": "\"a4 \"",
        "explanation": "The shortest abbreviation of  \"apple \" is  \"5 \", but this is also an abbreviation of  \"blade \"."
      },
      {
        "input": "target =  \"apple \", dictionary = \\[ \"blade \", \"plain \", \"amber \"\\]",
        "output": "\"1p3 \"",
        "explanation": "\"5 \" is an abbreviation of both  \"apple \" but also every word in the dictionary."
      }
    ],
    "constraints": [
      "`m == target.length`",
      "`n == dictionary.length`",
      "`1 <= m <= 21`",
      "`0 <= n <= 1000`",
      "`1 <= dictionary[i].length <= 100`",
      "`log2(n) + m <= 21` if `n > 0`",
      "`target` and `dictionary[i]` consist of lowercase English letters.",
      "`dictionary` does not contain `target`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "412",
    "slug": "fizz-buzz",
    "title": "Fizz Buzz",
    "difficulty": "Easy",
    "description": "Given an integer `n`, return _a string array_ `answer` _(**1-indexed**) where_: *  `answer[i] == \"FizzBuzz \"` if `i` is divisible by `3` and `5`. *  `answer[i] == \"Fizz \"` if `i` is divisible by `3`. *  `answer[i] == \"Buzz \"` if `i` is divisible by `5`. *  `answer[i] == i` (as a string) if none of the above conditions are true.",
    "examples": [
      {
        "input": "n = 3",
        "output": "\\[\"1\",\"2\",\"Fizz\"\\]"
      },
      {
        "input": "n = 5",
        "output": "\\[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"\\]"
      },
      {
        "input": "n = 15",
        "output": "\\[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "413",
    "slug": "arithmetic-slices",
    "title": "Arithmetic Slices",
    "difficulty": "Medium",
    "description": "An integer array is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same. *  For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences. Given an integer array `nums`, return _the number of arithmetic **subarrays** of_ `nums`. A **subarray** is a contiguous subsequence of the array.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "3",
        "explanation": "We have 3 arithmetic slices in nums: \\[1, 2, 3\\], \\[2, 3, 4\\] and \\[1,2,3,4\\] itself."
      },
      {
        "input": "nums = \\[1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5000`",
      "`-1000 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "414",
    "slug": "third-maximum-number",
    "title": "Third Maximum Number",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, return _the **third distinct maximum** number in this array. If the third maximum does not exist, return the **maximum** number_.",
    "examples": [
      {
        "input": "nums = \\[3,2,1\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,2,3,1\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-231 <= nums[i] <= 231 - 1`",
      "Follow up: Can you find an `O(n)` solution?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "415",
    "slug": "add-strings",
    "title": "Add Strings",
    "difficulty": "Easy",
    "description": "Given two non-negative integers, `num1` and `num2` represented as string, return _the sum of_ `num1` _and_ `num2` _as a string_. You must solve the problem without using any built-in library for handling large integers (such as `BigInteger`). You must also not convert the inputs to integers directly.",
    "examples": [
      {
        "input": "num1 =  \"11 \", num2 =  \"123 \"",
        "output": "\"134 \""
      },
      {
        "input": "num1 =  \"456 \", num2 =  \"77 \"",
        "output": "\"533 \""
      },
      {
        "input": "num1 =  \"0 \", num2 =  \"0 \"",
        "output": "\"0 \""
      }
    ],
    "constraints": [
      "`1 <= num1.length, num2.length <= 104`",
      "`num1` and `num2` consist of only digits.",
      "`num1` and `num2` don't have any leading zeros except for the zero itself."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "416",
    "slug": "partition-equal-subset-sum",
    "title": "Partition Equal Subset Sum",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return `true` _if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "nums = \\[1,5,11,5\\]",
        "output": "true",
        "explanation": "The array can be partitioned as \\[1, 5, 5\\] and \\[11\\]."
      },
      {
        "input": "nums = \\[1,2,3,5\\]",
        "output": "false",
        "explanation": "The array cannot be partitioned into equal sum subsets."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 200`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "417",
    "slug": "pacific-atlantic-water-flow",
    "title": "Pacific Atlantic Water Flow",
    "difficulty": "Medium",
    "description": "There is an `m x n` rectangular island that borders both the **Pacific Ocean** and **Atlantic Ocean**. The **Pacific Ocean** touches the island's left and top edges, and the **Atlantic Ocean** touches the island's right and bottom edges. The island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the **height above sea level** of the cell at coordinate `(r, c)`. The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is **less than or equal to** the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean. Return _a **2D list** of grid coordinates_ `result` _where_ `result[i] = [ri, ci]` _denotes that rain water can flow from cell_ `(ri, ci)` _to **both** the Pacific and Atlantic oceans_.",
    "examples": [
      {
        "input": "heights = \\[\\[1,2,2,3,5\\],\\[3,2,3,4,4\\],\\[2,4,5,3,1\\],\\[6,7,1,4,5\\],\\[5,1,1,2,4\\]\\]",
        "output": "\\[\\[0,4\\],\\[1,3\\],\\[1,4\\],\\[2,2\\],\\[3,0\\],\\[3,1\\],\\[4,0\\]\\]",
        "explanation": "The following cells can flow to the Pacific and Atlantic oceans, as shown below:"
      },
      {
        "input": "heights = \\[\\[1\\]\\]",
        "output": "\\[\\[0,0\\]\\]",
        "explanation": "The water can flow from the only cell to the Pacific and Atlantic oceans."
      }
    ],
    "constraints": [
      "`m == heights.length`",
      "`n == heights[r].length`",
      "`1 <= m, n <= 200`",
      "`0 <= heights[r][c] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "418",
    "slug": "sentence-screen-fitting",
    "title": "Sentence Screen Fitting",
    "difficulty": "Medium",
    "description": "Given a `rows x cols` screen and a `sentence` represented as a list of strings, return _the number of times the given sentence can be fitted on the screen_. The order of words in the sentence must remain unchanged, and a word cannot be split into two lines. A single space must separate two consecutive words in a line.",
    "examples": [
      {
        "input": "sentence = \\[ \"hello \", \"world \"\\], rows = 2, cols = 8",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "sentence = \\[ \"a \",  \"bcd \",  \"e \"\\], rows = 3, cols = 6",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "sentence = \\[ \"i \", \"had \", \"apple \", \"pie \"\\], rows = 4, cols = 5",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= sentence.length <= 100`",
      "`1 <= sentence[i].length <= 10`",
      "`sentence[i]` consists of lowercase English letters.",
      "`1 <= rows, cols <= 2  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "419",
    "slug": "battleships-in-a-board",
    "title": "Battleships in a Board",
    "difficulty": "Medium",
    "description": "Given an `m x n` matrix `board` where each cell is a battleship `'X'` or empty `'.'`, return _the number of the **battleships** on_ `board`. **Battleships** can only be placed horizontally or vertically on `board`. In other words, they can only be made of the shape `1 x k` (`1` row, `k` columns) or `k x 1` (`k` rows, `1` column), where `k` can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).",
    "examples": [
      {
        "input": "board = \\[\\[ \"X \", \". \", \". \", \"X \"\\],\\[ \". \", \". \", \". \", \"X \"\\],\\[ \". \", \". \", \". \", \"X \"\\]\\]",
        "output": "2"
      },
      {
        "input": "board = \\[\\[ \". \"\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`m == board.length`",
      "`n == board[i].length`",
      "`1 <= m, n <= 200`",
      "`board[i][j]` is either `'.'` or `'X'`.",
      "Follow up: Could you do it in one-pass, using only `O(1)` extra memory and without modifying the values `board`?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "420",
    "slug": "strong-password-checker",
    "title": "Strong Password Checker",
    "difficulty": "Hard",
    "description": "A password is considered strong if the below conditions are all met: *  It has at least `6` characters and at most `20` characters. *  It contains at least **one lowercase** letter, at least **one uppercase** letter, and at least **one digit**. *  It does not contain three repeating characters in a row (i.e., `\"B**aaa**bb0 \"` is weak, but `\"B**aa**b**a**0 \"` is strong). Given a string `password`, return _the minimum number of steps required to make `password` strong. if `password` is already strong, return `0`._ In one step, you can: *  Insert one character to `password`, *  Delete one character from `password`, or *  Replace one character of `password` with another character.",
    "examples": [
      {
        "input": "password = \"a\"",
        "output": "5"
      },
      {
        "input": "password = \"aA1\"",
        "output": "3"
      },
      {
        "input": "password = \"1337C0d3\"",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= password.length <= 50`",
      "`password` consists of letters, digits, dot `'.'` or exclamation mark `'!'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "421",
    "slug": "maximum-xor-of-two-numbers-in-an-array",
    "title": "Maximum XOR of Two Numbers in an Array",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _the maximum result of_ `nums[i] XOR nums[j]`, where `0 <= i <= j < n`.",
    "examples": [
      {
        "input": "nums = \\[3,10,5,25,2,8\\]",
        "output": "28",
        "explanation": "The maximum result is 5 XOR 25 = 28."
      },
      {
        "input": "nums = \\[14,70,53,83,49,91,36,80,92,51,66,70\\]",
        "output": "127"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  105`",
      "`0 <= nums[i] <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "422",
    "slug": "valid-word-square",
    "title": "Valid Word Square",
    "difficulty": "Easy",
    "description": "Given an array of strings `words`, return `true` _if it forms a valid **word square**_. A sequence of strings forms a valid **word square** if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.",
    "examples": [
      {
        "input": "words = \\[ \"abcd \", \"bnrt \", \"crmy \", \"dtye \"\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"abcd \", \"bnrt \", \"crm \", \"dt \"\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"ball \", \"area \", \"read \", \"lady \"\\]",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 500`",
      "`1 <= words[i].length <= 500`",
      "`words[i]` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "423",
    "slug": "reconstruct-original-digits-from-english",
    "title": "Reconstruct Original Digits from English",
    "difficulty": "Medium",
    "description": "Given a string `s` containing an out-of-order English representation of digits `0-9`, return _the digits in **ascending** order_.",
    "examples": [
      {
        "input": "s = \"owoztneoer\"",
        "output": "\"012\""
      },
      {
        "input": "s = \"fviefuro\"",
        "output": "\"45\""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is one of the characters `[ \"e \", \"g \", \"f \", \"i \", \"h \", \"o \", \"n \", \"s \", \"r \", \"u \", \"t \", \"w \", \"v \", \"x \", \"z \"]`.",
      "`s` is guaranteed to be valid."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "424",
    "slug": "longest-repeating-character-replacement",
    "title": "Longest Repeating Character Replacement",
    "difficulty": "Medium",
    "description": "You are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times. Return _the length of the longest substring containing the same letter you can get after performing the above operations_.",
    "examples": [
      {
        "input": "s =  \"ABAB \", k = 2",
        "output": "4",
        "explanation": "Replace the two 'A's with two 'B's or vice versa."
      },
      {
        "input": "s =  \"AABABBA \", k = 1",
        "output": "4",
        "explanation": "Replace the one 'A' in the middle with 'B' and form  \"AABBBBA \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of only uppercase English letters.",
      "`0 <= k <= s.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "425",
    "slug": "word-squares",
    "title": "Word Squares",
    "difficulty": "Hard",
    "description": "Given an array of **unique** strings `words`, return _all the_ **[word squares](https://en.wikipedia.org/wiki/Word_square)** _you can build from_ `words`. The same word from `words` can be used **multiple times**. You can return the answer in **any order**. A sequence of strings forms a valid **word square** if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`. *  For example, the word sequence `[ \"ball \", \"area \", \"lead \", \"lady \"]` forms a word square because each word reads the same both horizontally and vertically.",
    "examples": [
      {
        "input": "words = \\[ \"area \", \"lead \", \"wall \", \"lady \", \"ball \"\\]",
        "output": "\\[\\[ \"ball \", \"area \", \"lead \", \"lady \"\\],\\[ \"wall \", \"area \", \"lead \", \"lady \"\\]\\]",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"abat \", \"baba \", \"atan \", \"atal \"\\]",
        "output": "\\[\\[ \"baba \", \"abat \", \"baba \", \"atal \"\\],\\[ \"baba \", \"abat \", \"baba \", \"atan \"\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length <= 4`",
      "All `words[i]` have the same length.",
      "`words[i]` consists of only lowercase English letters.",
      "All `words[i]` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "426",
    "slug": "convert-binary-search-tree-to-sorted-doubly-linked-list",
    "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
    "difficulty": "Medium",
    "description": "Convert a **Binary Search Tree** to a sorted **Circular Doubly-Linked List** in place. You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element. We want to do the transformation **in place**. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.",
    "examples": [
      {
        "input": "root = \\[4,2,5,1,3\\]",
        "output": "\\[1,2,3,4,5\\]",
        "explanation": "The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship."
      },
      {
        "input": "root = \\[2,1,3\\]",
        "output": "\\[1,2,3\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 2000]`.",
      "`-1000 <= Node.val <= 1000`",
      "All the values of the tree are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "427",
    "slug": "construct-quad-tree",
    "title": "Construct Quad Tree",
    "difficulty": "Medium",
    "description": "Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent `grid` with a Quad-Tree. Return _the root of the Quad-Tree representing_ `grid`. A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes: *  `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the `val` to True or False when `isLeaf` is False, and both are accepted in the answer. *  `isLeaf`: True if the node is a leaf node on the tree or False if the node has four children. class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; } We can construct a Quad-Tree from a two-dimensional area using the following steps: 1. If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop. 2. If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo. 3. Recurse for each of the children with the proper sub-grid. If you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree). **Quad-Tree format:** You don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below. It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`. If the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1\\],\\[1,0\\]\\]",
        "output": "\\[\\[0,1\\],\\[1,0\\],\\[1,1\\],\\[1,1\\],\\[1,0\\]\\]",
        "explanation": "The explanation of this example is shown below:"
      },
      {
        "input": "grid = \\[\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,1,1,1,1\\],\\[1,1,1,1,1,1,1,1\\],\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,0,0,0,0\\]\\]",
        "output": "\\[\\[0,1\\],\\[1,1\\],\\[0,1\\],\\[1,1\\],\\[1,0\\],null,null,null,null,\\[1,0\\],\\[1,0\\],\\[1,1\\],\\[1,1\\]\\]",
        "explanation": "All values in the grid are not the same. We divide the grid into four sub-grids."
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`n == 2x` where `0 <= x <= 6`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "428",
    "slug": "serialize-and-deserialize-n-ary-tree",
    "title": "Serialize and Deserialize N-ary Tree",
    "difficulty": "Hard",
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure. For example, you may serialize the following `3-ary` tree as `[1 [3[5 6] 2 4]]`. Note that this is just an example, you do not necessarily need to follow this format. Or you can follow LeetCode's level order traversal serialization format, where each group of children is separated by the null value. For example, the above tree may be serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`. You do not necessarily need to follow the above-suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.",
    "examples": [
      {
        "input": "root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]",
        "output": "\\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]"
      },
      {
        "input": "root = \\[1,null,3,2,4,null,5,6\\]",
        "output": "\\[1,null,3,2,4,null,5,6\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`0 <= Node.val <= 104`",
      "The height of the n-ary tree is less than or equal to `1000`",
      "Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "429",
    "slug": "n-ary-tree-level-order-traversal",
    "title": "N-ary Tree Level Order Traversal",
    "difficulty": "Medium",
    "description": "Given an n-ary tree, return the _level order_ traversal of its nodes' values. _Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._",
    "examples": [
      {
        "input": "root = \\[1,null,3,2,4,null,5,6\\]",
        "output": "\\[\\[1\\],\\[3,2,4\\],\\[5,6\\]\\]"
      },
      {
        "input": "root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]",
        "output": "\\[\\[1\\],\\[2,3,4,5\\],\\[6,7,8,9,10\\],\\[11,12,13\\],\\[14\\]\\]"
      }
    ],
    "constraints": [
      "The height of the n-ary tree is less than or equal to `1000`",
      "The total number of nodes is between `[0, 104]`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "430",
    "slug": "flatten-a-multilevel-doubly-linked-list",
    "title": "Flatten a Multilevel Doubly Linked List",
    "difficulty": "Medium",
    "description": "You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional **child pointer**. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a **multilevel data structure** as shown in the example below. Given the `head` of the first level of the list, **flatten** the list so that all the nodes appear in a single-level, doubly linked list. Let `curr` be a node with a child list. The nodes in the child list should appear **after** `curr` and **before** `curr.next` in the flattened list. Return _the_ `head` _of the flattened list. The nodes in the list must have **all** of their child pointers set to_ `null`.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12\\]",
        "output": "\\[1,2,3,7,8,11,12,9,10,4,5,6\\]",
        "explanation": "The multilevel linked list in the input is shown."
      },
      {
        "input": "head = \\[1,2,null,3\\]",
        "output": "\\[1,3,2\\]",
        "explanation": "The multilevel linked list in the input is shown."
      },
      {
        "input": "head = \\[\\]",
        "output": "\\[\\]",
        "explanation": "There could be empty list in the input."
      }
    ],
    "constraints": [
      "The number of Nodes will not exceed `1000`.",
      "`1 <= Node.val <= 105`",
      "How the multilevel linked list is represented in test cases:"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "431",
    "slug": "encode-n-ary-tree-to-binary-tree",
    "title": "Encode N-ary Tree to Binary Tree",
    "difficulty": "Hard",
    "description": "Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure. _Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See following example)._ For example, you may encode the following `3-ary` tree to a binary tree in this way: **Input:** root = \\[1,null,3,2,4,null,5,6\\] Note that the above is just an example which _might or might not_ work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.",
    "examples": [
      {
        "input": "root = \\[1,null,3,2,4,null,5,6\\]",
        "output": "\\[1,null,3,2,4,null,5,6\\]"
      },
      {
        "input": "root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]",
        "output": "\\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`0 <= Node.val <= 104`",
      "The height of the n-ary tree is less than or equal to `1000`",
      "Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "432",
    "slug": "all-oone-data-structure",
    "title": "All O`one Data Structure",
    "difficulty": "Hard",
    "description": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts. Implement the `AllOne` class: *  `AllOne()` Initializes the object of the data structure. *  `inc(String key)` Increments the count of the string `key` by `1`. If `key` does not exist in the data structure, insert it with count `1`. *  `dec(String key)` Decrements the count of the string `key` by `1`. If the count of `key` is `0` after the decrement, remove it from the data structure. It is guaranteed that `key` exists in the data structure before the decrement. *  `getMaxKey()` Returns one of the keys with the maximal count. If no element exists, return an empty string `\" \"`. *  `getMinKey()` Returns one of the keys with the minimum count. If no element exists, return an empty string `\" \"`. **Note** that each function must run in `O(1)` average time complexity.",
    "examples": [],
    "constraints": [
      "`1 <= key.length <= 10`",
      "`key` consists of lowercase English letters.",
      "It is guaranteed that for each call to `dec`, `key` is existing in the data structure.",
      "At most `5  104` calls will be made to `inc`, `dec`, `getMaxKey`, and `getMinKey`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "433",
    "slug": "minimum-genetic-mutation",
    "title": "Minimum Genetic Mutation",
    "difficulty": "Medium",
    "description": "A gene string can be represented by an 8-character long string, with choices from `'A'`, `'C'`, `'G'`, and `'T'`. Suppose we need to investigate a mutation from a gene string `startGene` to a gene string `endGene` where one mutation is defined as one single character changed in the gene string. *  For example, `\"AACCGGTT \" --> \"AACCGGTA \"` is one mutation. There is also a gene bank `bank` that records all the valid gene mutations. A gene must be in `bank` to make it a valid gene string. Given the two gene strings `startGene` and `endGene` and the gene bank `bank`, return _the minimum number of mutations needed to mutate from_ `startGene` _to_ `endGene`. If there is no such a mutation, return `-1`. Note that the starting point is assumed to be valid, so it might not be included in the bank.",
    "examples": [
      {
        "input": "startGene =  \"AACCGGTT \", endGene =  \"AACCGGTA \", bank = \\[ \"AACCGGTA \"\\]",
        "output": "1"
      },
      {
        "input": "startGene =  \"AACCGGTT \", endGene =  \"AAACGGTA \", bank = \\[ \"AACCGGTA \", \"AACCGCTA \", \"AAACGGTA \"\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`0 <= bank.length <= 10`",
      "`startGene.length == endGene.length == bank[i].length == 8`",
      "`startGene`, `endGene`, and `bank[i]` consist of only the characters `['A', 'C', 'G', 'T']`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "434",
    "slug": "number-of-segments-in-a-string",
    "title": "Number of Segments in a String",
    "difficulty": "Easy",
    "description": "Given a string `s`, return _the number of segments in the string_. A **segment** is defined to be a contiguous sequence of **non-space characters**.",
    "examples": [
      {
        "input": "s =  \"Hello, my name is John \"",
        "output": "5",
        "explanation": "The five segments are \\[ \"Hello, \",  \"my \",  \"name \",  \"is \",  \"John \"\\]"
      },
      {
        "input": "s =  \"Hello \"",
        "output": "1"
      }
    ],
    "constraints": [
      "`0 <= s.length <= 300`",
      "`s` consists of lowercase and uppercase English letters, digits, or one of the following characters `\"!@#$%^&()_+-=',.: \"`.",
      "The only space character in `s` is `' '`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "435",
    "slug": "non-overlapping-intervals",
    "title": "Non-overlapping Intervals",
    "difficulty": "Medium",
    "description": "Given an array of intervals `intervals` where `intervals[i] = [starti, endi]`, return _the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping_.",
    "examples": [
      {
        "input": "intervals = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[1,3\\]\\]",
        "output": "1",
        "explanation": "\\[1,3\\] can be removed and the rest of the intervals are non-overlapping."
      },
      {
        "input": "intervals = \\[\\[1,2\\],\\[1,2\\],\\[1,2\\]\\]",
        "output": "2",
        "explanation": "You need to remove two \\[1,2\\] to make the rest of the intervals non-overlapping."
      },
      {
        "input": "intervals = \\[\\[1,2\\],\\[2,3\\]\\]",
        "output": "0",
        "explanation": "You don't need to remove any of the intervals since they're already non-overlapping."
      }
    ],
    "constraints": [
      "`1 <= intervals.length <= 105`",
      "`intervals[i].length == 2`",
      "`-5  104 <= starti < endi <= 5  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "436",
    "slug": "find-right-interval",
    "title": "Find Right Interval",
    "difficulty": "Medium",
    "description": "You are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is **unique**. The **right interval** for an interval `i` is an interval `j` such that `startj >= endi` and `startj` is **minimized**. Note that `i` may equal `j`. Return _an array of **right interval** indices for each interval `i`_. If no **right interval** exists for interval `i`, then put `-1` at index `i`.",
    "examples": [
      {
        "input": "intervals = \\[\\[1,2\\]\\]",
        "output": "\\[-1\\]",
        "explanation": "There is only one interval in the collection, so it outputs -1."
      },
      {
        "input": "intervals = \\[\\[3,4\\],\\[2,3\\],\\[1,2\\]\\]",
        "output": "\\[-1,0,1\\]",
        "explanation": "There is no right interval for \\[3,4\\]."
      },
      {
        "input": "intervals = \\[\\[1,4\\],\\[2,3\\],\\[3,4\\]\\]",
        "output": "\\[-1,2,-1\\]",
        "explanation": "There is no right interval for \\[1,4\\] and \\[3,4\\]."
      }
    ],
    "constraints": [
      "`1 <= intervals.length <= 2  104`",
      "`intervals[i].length == 2`",
      "`-106 <= starti <= endi <= 106`",
      "The start point of each interval is unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "437",
    "slug": "path-sum-iii",
    "title": "Path Sum III",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree and an integer `targetSum`, return _the number of paths where the sum of the values along the path equals_ `targetSum`. The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).",
    "examples": [
      {
        "input": "root = \\[10,5,-3,3,2,null,11,3,-2,null,1\\], targetSum = 8",
        "output": "3",
        "explanation": "The paths that sum to 8 are shown."
      },
      {
        "input": "root = \\[5,4,8,11,null,13,4,7,2,null,null,5,1\\], targetSum = 22",
        "output": "3"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 1000]`.",
      "`-109 <= Node.val <= 109`",
      "`-1000 <= targetSum <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "438",
    "slug": "find-all-anagrams-in-a-string",
    "title": "Find All Anagrams in a String",
    "difficulty": "Medium",
    "description": "Given two strings `s` and `p`, return _an array of all the start indices of_ `p`_'s anagrams in_ `s`. You may return the answer in **any order**. An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "examples": [
      {
        "input": "s =  \"cbaebabacd \", p =  \"abc \"",
        "output": "\\[0,6\\]",
        "explanation": ""
      },
      {
        "input": "s =  \"abab \", p =  \"ab \"",
        "output": "\\[0,1,2\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length, p.length <= 3  104`",
      "`s` and `p` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "439",
    "slug": "ternary-expression-parser",
    "title": "Ternary Expression Parser",
    "difficulty": "Medium",
    "description": "Given a string `expression` representing arbitrarily nested ternary expressions, evaluate the expression, and return _the result of it_. You can always assume that the given expression is valid and only contains digits, `'?'`, `':'`, `'T'`, and `'F'` where `'T'` is true and `'F'` is false. All the numbers in the expression are **one-digit** numbers (i.e., in the range `[0, 9]`). The conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, `'T'` or `'F'`.",
    "examples": [
      {
        "input": "expression =  \"T?2:3 \"",
        "output": "\"2 \"",
        "explanation": "If true, then result is 2; otherwise result is 3."
      },
      {
        "input": "expression =  \"F?1:T?4:5 \"",
        "output": "\"4 \"",
        "explanation": "The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:"
      },
      {
        "input": "expression =  \"T?T?F:5:3 \"",
        "output": "\"F \"",
        "explanation": "The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:"
      }
    ],
    "constraints": [
      "`5 <= expression.length <= 104`",
      "`expression` consists of digits, `'T'`, `'F'`, `'?'`, and `':'`.",
      "It is guaranteed that `expression` is a valid ternary expression and that each number is a one-digit number."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "440",
    "slug": "k-th-smallest-in-lexicographical-order",
    "title": "K-th Smallest in Lexicographical Order",
    "difficulty": "Hard",
    "description": "Given two integers `n` and `k`, return _the_ `kth` _lexicographically smallest integer in the range_ `[1, n]`.",
    "examples": [
      {
        "input": "n = 13, k = 2",
        "output": "10",
        "explanation": "The lexicographical order is \\[1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9\\], so the second smallest number is 10."
      },
      {
        "input": "n = 1, k = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= k <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "441",
    "slug": "arranging-coins",
    "title": "Arranging Coins",
    "difficulty": "Easy",
    "description": "You have `n` coins and you want to build a staircase with these coins. The staircase consists of `k` rows where the `ith` row has exactly `i` coins. The last row of the staircase **may be** incomplete. Given the integer `n`, return _the number of **complete rows** of the staircase you will build_.",
    "examples": [
      {
        "input": "n = 5",
        "output": "2",
        "explanation": "Because the 3rd row is incomplete, we return 2."
      },
      {
        "input": "n = 8",
        "output": "3",
        "explanation": "Because the 4th row is incomplete, we return 3."
      }
    ],
    "constraints": [
      "`1 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "442",
    "slug": "find-all-duplicates-in-an-array",
    "title": "Find All Duplicates in an Array",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` of length `n` where all the integers of `nums` are in the range `[1, n]` and each integer appears **once** or **twice**, return _an array of all the integers that appears **twice**_. You must write an algorithm that runs in `O(n)` time and uses only constant extra space.",
    "examples": [
      {
        "input": "nums = \\[4,3,2,7,8,2,3,1\\]",
        "output": "\\[2,3\\]"
      },
      {
        "input": "nums = \\[1,1,2\\]",
        "output": "\\[1\\]"
      },
      {
        "input": "nums = \\[1\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`1 <= nums[i] <= n`",
      "Each element in `nums` appears once or twice."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "443",
    "slug": "string-compression",
    "title": "String Compression",
    "difficulty": "Medium",
    "description": "Given an array of characters `chars`, compress it using the following algorithm: Begin with an empty string `s`. For each group of **consecutive repeating characters** in `chars`: *  If the group's length is `1`, append the character to `s`. *  Otherwise, append the character followed by the group's length. The compressed string `s` **should not be returned separately**, but instead, be stored **in the input character array `chars`**. Note that group lengths that are `10` or longer will be split into multiple characters in `chars`. After you are done **modifying the input array,** return _the new length of the array_. You must write an algorithm that uses only constant extra space.",
    "examples": [
      {
        "input": "chars = \\[ \"a \", \"a \", \"b \", \"b \", \"c \", \"c \", \"c \"\\]",
        "output": "Return 6, and the first 6 characters of the input array should be: \\[ \"a \", \"2 \", \"b \", \"2 \", \"c \", \"3 \"\\]",
        "explanation": "The groups are  \"aa \",  \"bb \", and  \"ccc \". This compresses to  \"a2b2c3 \"."
      },
      {
        "input": "chars = \\[ \"a \"\\]",
        "output": "Return 1, and the first character of the input array should be: \\[ \"a \"\\]",
        "explanation": "The only group is  \"a \", which remains uncompressed since it's a single character."
      },
      {
        "input": "chars = \\[ \"a \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \"\\]",
        "output": "Return 4, and the first 4 characters of the input array should be: \\[ \"a \", \"b \", \"1 \", \"2 \"\\].",
        "explanation": "The groups are  \"a \" and  \"bbbbbbbbbbbb \". This compresses to  \"ab12 \"."
      }
    ],
    "constraints": [
      "`1 <= chars.length <= 2000`",
      "`chars[i]` is a lowercase English letter, uppercase English letter, digit, or symbol."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "444",
    "slug": "sequence-reconstruction",
    "title": "Sequence Reconstruction",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` of length `n` where `nums` is a permutation of the integers in the range `[1, n]`. You are also given a 2D integer array `sequences` where `sequences[i]` is a subsequence of `nums`. Check if `nums` is the shortest possible and the only **supersequence**. The shortest **supersequence** is a sequence **with the shortest length** and has all `sequences[i]` as subsequences. There could be multiple valid **supersequences** for the given array `sequences`. *  For example, for `sequences = [[1,2],[1,3]]`, there are two shortest **supersequences**, `[1,2,3]` and `[1,3,2]`. *  While for `sequences = [[1,2],[1,3],[1,2,3]]`, the only shortest **supersequence** possible is `[1,2,3]`. `[1,2,3,4]` is a possible supersequence but not the shortest. Return `true` _if_ `nums` _is the only shortest **supersequence** for_ `sequences`_, or_ `false` _otherwise_. A **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\], sequences = \\[\\[1,2\\],\\[1,3\\]\\]",
        "output": "false",
        "explanation": "There are two possible supersequences: \\[1,2,3\\] and \\[1,3,2\\]."
      },
      {
        "input": "nums = \\[1,2,3\\], sequences = \\[\\[1,2\\]\\]",
        "output": "false",
        "explanation": "The shortest possible supersequence is \\[1,2\\]."
      },
      {
        "input": "nums = \\[1,2,3\\], sequences = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]",
        "output": "true",
        "explanation": "The shortest possible supersequence is \\[1,2,3\\]."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 104`",
      "`nums` is a permutation of all the integers in the range `[1, n]`.",
      "`1 <= sequences.length <= 104`",
      "`1 <= sequences[i].length <= 104`",
      "`1 <= sum(sequences[i].length) <= 105`",
      "`1 <= sequences[i][j] <= n`",
      "All the arrays of `sequences` are unique.",
      "`sequences[i]` is a subsequence of `nums`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "445",
    "slug": "add-two-numbers-ii",
    "title": "Add Two Numbers II",
    "difficulty": "Medium",
    "description": "You are given two **non-empty** linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
    "examples": [
      {
        "input": "l1 = \\[7,2,4,3\\], l2 = \\[5,6,4\\]",
        "output": "\\[7,8,0,7\\]"
      },
      {
        "input": "l1 = \\[2,4,3\\], l2 = \\[5,6,4\\]",
        "output": "\\[8,0,7\\]"
      },
      {
        "input": "l1 = \\[0\\], l2 = \\[0\\]",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "The number of nodes in each linked list is in the range `[1, 100]`.",
      "`0 <= Node.val <= 9`",
      "It is guaranteed that the list represents a number that does not have leading zeros.",
      "Follow up: Could you solve it without reversing the input lists?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "446",
    "slug": "arithmetic-slices-ii-subsequence",
    "title": "Arithmetic Slices II - Subsequence",
    "difficulty": "Hard",
    "description": "Given an integer array `nums`, return _the number of all the **arithmetic subsequences** of_ `nums`. A sequence of numbers is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same. *  For example, `[1, 3, 5, 7, 9]`, `[7, 7, 7, 7]`, and `[3, -1, -5, -9]` are arithmetic sequences. *  For example, `[1, 1, 2, 5, 7]` is not an arithmetic sequence. A **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array. *  For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`. The test cases are generated so that the answer fits in **32-bit** integer.",
    "examples": [
      {
        "input": "nums = \\[2,4,6,8,10\\]",
        "output": "7",
        "explanation": "All arithmetic subsequence slices are:"
      },
      {
        "input": "nums = \\[7,7,7,7,7\\]",
        "output": "16",
        "explanation": "Any subsequence of this array is arithmetic."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`-231 <= nums[i] <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "447",
    "slug": "number-of-boomerangs",
    "title": "Number of Boomerangs",
    "difficulty": "Medium",
    "description": "You are given `n` `points` in the plane that are all **distinct**, where `points[i] = [xi, yi]`. A **boomerang** is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` **(the order of the tuple matters)**. Return _the number of boomerangs_.",
    "examples": [
      {
        "input": "points = \\[\\[0,0\\],\\[1,0\\],\\[2,0\\]\\]",
        "output": "2",
        "explanation": "The two boomerangs are \\[\\[1,0\\],\\[0,0\\],\\[2,0\\]\\] and \\[\\[1,0\\],\\[2,0\\],\\[0,0\\]\\]."
      },
      {
        "input": "points = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\]",
        "output": "2"
      },
      {
        "input": "points = \\[\\[1,1\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == points.length`",
      "`1 <= n <= 500`",
      "`points[i].length == 2`",
      "`-104 <= xi, yi <= 104`",
      "All the points are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "448",
    "slug": "find-all-numbers-disappeared-in-an-array",
    "title": "Find All Numbers Disappeared in an Array",
    "difficulty": "Easy",
    "description": "Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return _an array of all the integers in the range_ `[1, n]` _that do not appear in_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[4,3,2,7,8,2,3,1\\]",
        "output": "\\[5,6\\]"
      },
      {
        "input": "nums = \\[1,1\\]",
        "output": "\\[2\\]"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`1 <= nums[i] <= n`",
      "Follow up: Could you do it without extra space and in `O(n)` runtime? You may assume the returned list does not count as extra space."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "449",
    "slug": "serialize-and-deserialize-bst",
    "title": "Serialize and Deserialize BST",
    "difficulty": "Medium",
    "description": "Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a **binary search tree**. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure. **The encoded string should be as compact as possible.**",
    "examples": [
      {
        "input": "root = \\[2,1,3\\]",
        "output": "\\[2,1,3\\]"
      },
      {
        "input": "root = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`0 <= Node.val <= 104`",
      "The input tree is guaranteed to be a binary search tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "450",
    "slug": "delete-node-in-a-bst",
    "title": "Delete Node in a BST",
    "difficulty": "Medium",
    "description": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return _the **root node reference** (possibly updated) of the BST_. Basically, the deletion can be divided into two stages: 1. Search for a node to remove. 2. If the node is found, delete the node.",
    "examples": [
      {
        "input": "root = \\[5,3,6,2,4,null,7\\], key = 3",
        "output": "\\[5,4,6,2,null,null,7\\]",
        "explanation": "Given key to delete is 3. So we find the node with value 3 and delete it."
      },
      {
        "input": "root = \\[5,3,6,2,4,null,7\\], key = 0",
        "output": "\\[5,3,6,2,4,null,7\\]",
        "explanation": "The tree does not contain a node with value = 0."
      },
      {
        "input": "root = \\[\\], key = 0",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`-105 <= Node.val <= 105`",
      "Each node has a unique value.",
      "`root` is a valid binary search tree.",
      "`-105 <= key <= 105`",
      "Follow up: Could you solve it with time complexity `O(height of tree)`?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "451",
    "slug": "sort-characters-by-frequency",
    "title": "Sort Characters By Frequency",
    "difficulty": "Medium",
    "description": "Given a string `s`, sort it in **decreasing order** based on the **frequency** of the characters. The **frequency** of a character is the number of times it appears in the string. Return _the sorted string_. If there are multiple answers, return _any of them_.",
    "examples": [
      {
        "input": "s =  \"tree \"",
        "output": "\"eert \"",
        "explanation": "'e' appears twice while 'r' and 't' both appear once."
      },
      {
        "input": "s =  \"cccaaa \"",
        "output": "\"aaaccc \"",
        "explanation": "Both 'c' and 'a' appear three times, so both  \"cccaaa \" and  \"aaaccc \" are valid answers."
      },
      {
        "input": "s =  \"Aabb \"",
        "output": "\"bbAa \"",
        "explanation": "\"bbaA \" is also a valid answer, but  \"Aabb \" is incorrect."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5  105`",
      "`s` consists of uppercase and lowercase English letters and digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "452",
    "slug": "minimum-number-of-arrows-to-burst-balloons",
    "title": "Minimum Number of Arrows to Burst Balloons",
    "difficulty": "Medium",
    "description": "There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You do not know the exact y-coordinates of the balloons. Arrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is **burst** by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path. Given the array `points`, return _the **minimum** number of arrows that must be shot to burst all balloons_.",
    "examples": [
      {
        "input": "points = \\[\\[10,16\\],\\[2,8\\],\\[1,6\\],\\[7,12\\]\\]",
        "output": "2",
        "explanation": "The balloons can be burst by 2 arrows:"
      },
      {
        "input": "points = \\[\\[1,2\\],\\[3,4\\],\\[5,6\\],\\[7,8\\]\\]",
        "output": "4",
        "explanation": "One arrow needs to be shot for each balloon for a total of 4 arrows."
      },
      {
        "input": "points = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,5\\]\\]",
        "output": "2",
        "explanation": "The balloons can be burst by 2 arrows:"
      }
    ],
    "constraints": [
      "`1 <= points.length <= 105`",
      "`points[i].length == 2`",
      "`-231 <= xstart < xend <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "453",
    "slug": "minimum-moves-to-equal-array-elements",
    "title": "Minimum Moves to Equal Array Elements",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` of size `n`, return _the minimum number of moves required to make all array elements equal_. In one move, you can increment `n - 1` elements of the array by `1`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "3",
        "explanation": "Only three moves are needed (remember each move increments two elements):"
      },
      {
        "input": "nums = \\[1,1,1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`",
      "The answer is guaranteed to fit in a 32-bit integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "454",
    "slug": "4sum-ii",
    "title": "4Sum II",
    "difficulty": "Medium",
    "description": "Given four integer arrays `nums1`, `nums2`, `nums3`, and `nums4` all of length `n`, return the number of tuples `(i, j, k, l)` such that: *  `0 <= i, j, k, l < n` *  `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`",
    "examples": [
      {
        "input": "nums1 = \\[1,2\\], nums2 = \\[-2,-1\\], nums3 = \\[-1,2\\], nums4 = \\[0,2\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[0\\], nums2 = \\[0\\], nums3 = \\[0\\], nums4 = \\[0\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`n == nums1.length`",
      "`n == nums2.length`",
      "`n == nums3.length`",
      "`n == nums4.length`",
      "`1 <= n <= 200`",
      "`-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "455",
    "slug": "assign-cookies",
    "title": "Assign Cookies",
    "difficulty": "Easy",
    "description": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.",
    "examples": [
      {
        "input": "g = \\[1,2,3\\], s = \\[1,1\\]",
        "output": "1",
        "explanation": "You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3."
      },
      {
        "input": "g = \\[1,2\\], s = \\[1,2,3\\]",
        "output": "2",
        "explanation": "You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2."
      }
    ],
    "constraints": [
      "`1 <= g.length <= 3  104`",
      "`0 <= s.length <= 3  104`",
      "`1 <= g[i], s[j] <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "456",
    "slug": "132-pattern",
    "title": "132 Pattern",
    "difficulty": "Medium",
    "description": "Given an array of `n` integers `nums`, a **132 pattern** is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`. Return `true` _if there is a **132 pattern** in_ `nums`_, otherwise, return_ `false`_._",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "false",
        "explanation": "There is no 132 pattern in the sequence."
      },
      {
        "input": "nums = \\[3,1,4,2\\]",
        "output": "true",
        "explanation": "There is a 132 pattern in the sequence: \\[1, 4, 2\\]."
      },
      {
        "input": "nums = \\[-1,3,2,0\\]",
        "output": "true",
        "explanation": "There are three 132 patterns in the sequence: \\[-1, 3, 2\\], \\[-1, 3, 0\\] and \\[-1, 2, 0\\]."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 2  105`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "457",
    "slug": "circular-array-loop",
    "title": "Circular Array Loop",
    "difficulty": "Medium",
    "description": "You are playing a game involving a **circular** array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`: *  If `nums[i]` is positive, move `nums[i]` steps **forward**, and *  If `nums[i]` is negative, move `nums[i]` steps **backward**. Since the array is **circular**, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element. A **cycle** in the array consists of a sequence of indices `seq` of length `k` where: *  Following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...` *  Every `nums[seq[j]]` is either **all positive** or **all negative**. *  `k > 1` Return `true` _if there is a **cycle** in_ `nums`_, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "nums = \\[2,-1,1,2,2\\]",
        "output": "true",
        "explanation": "The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward."
      },
      {
        "input": "nums = \\[-1,-2,-3,-4,-5,6\\]",
        "output": "false",
        "explanation": "The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward."
      },
      {
        "input": "nums = \\[1,-1,5,1,4\\]",
        "output": "true",
        "explanation": "The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5000`",
      "`-1000 <= nums[i] <= 1000`",
      "`nums[i] != 0`",
      "Follow up: Could you solve it in `O(n)` time complexity and `O(1)` extra space complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "458",
    "slug": "poor-pigs",
    "title": "Poor Pigs",
    "difficulty": "Hard",
    "description": "There are `buckets` buckets of liquid, where **exactly one** of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have `minutesToTest` minutes to determine which bucket is poisonous. You can feed the pigs according to these steps: 1. Choose some live pigs to feed. 2. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs. 3. Wait for `minutesToDie` minutes. You may **not** feed any other pigs during this time. 4. After `minutesToDie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive. 5. Repeat this process until you run out of time. Given `buckets`, `minutesToDie`, and `minutesToTest`, return _the **minimum** number of pigs needed to figure out which bucket is poisonous within the allotted time_.",
    "examples": [
      {
        "input": "buckets = 4, minutesToDie = 15, minutesToTest = 15",
        "output": "2",
        "explanation": "We can determine the poisonous bucket as follows:"
      },
      {
        "input": "buckets = 4, minutesToDie = 15, minutesToTest = 30",
        "output": "2",
        "explanation": "We can determine the poisonous bucket as follows:"
      }
    ],
    "constraints": [
      "`1 <= buckets <= 1000`",
      "`1 <= minutesToDie <= minutesToTest <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "459",
    "slug": "repeated-substring-pattern",
    "title": "Repeated Substring Pattern",
    "difficulty": "Easy",
    "description": "Given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.",
    "examples": [
      {
        "input": "s =  \"abab \"",
        "output": "true",
        "explanation": "It is the substring  \"ab \" twice."
      },
      {
        "input": "s =  \"aba \"",
        "output": "false"
      },
      {
        "input": "s =  \"abcabcabcabc \"",
        "output": "true",
        "explanation": "It is the substring  \"abc \" four times or the substring  \"abcabc \" twice."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "460",
    "slug": "lfu-cache",
    "title": "LFU Cache",
    "difficulty": "Hard",
    "description": "Design and implement a data structure for a [Least Frequently Used (LFU)](https://en.wikipedia.org/wiki/Least_frequently_used) cache. Implement the `LFUCache` class: *  `LFUCache(int capacity)` Initializes the object with the `capacity` of the data structure. *  `int get(int key)` Gets the value of the `key` if the `key` exists in the cache. Otherwise, returns `-1`. *  `void put(int key, int value)` Update the value of the `key` if present, or inserts the `key` if not already present. When the cache reaches its `capacity`, it should invalidate and remove the **least frequently used** key before inserting a new item. For this problem, when there is a **tie** (i.e., two or more keys with the same frequency), the **least recently used** `key` would be invalidated. To determine the least frequently used key, a **use counter** is maintained for each key in the cache. The key with the smallest **use counter** is the least frequently used key. When a key is first inserted into the cache, its **use counter** is set to `1` (due to the `put` operation). The **use counter** for a key in the cache is incremented either a `get` or `put` operation is called on it. The functions `get` and `put` must each run in `O(1)` average time complexity.",
    "examples": [],
    "constraints": [
      "`1 <= capacity <= 104`",
      "`0 <= key <= 105`",
      "`0 <= value <= 109`",
      "At most `2  105` calls will be made to `get` and `put`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "461",
    "slug": "hamming-distance",
    "title": "Hamming Distance",
    "difficulty": "Easy",
    "description": "The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different. Given two integers `x` and `y`, return _the **Hamming distance** between them_.",
    "examples": [
      {
        "input": "x = 1, y = 4",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "x = 3, y = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`0 <= x, y <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "462",
    "slug": "minimum-moves-to-equal-array-elements-ii",
    "title": "Minimum Moves to Equal Array Elements II",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` of size `n`, return _the minimum number of moves required to make all array elements equal_. In one move, you can increment or decrement an element of the array by `1`. Test cases are designed so that the answer will fit in a **32-bit** integer.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,10,2,9\\]",
        "output": "16"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "463",
    "slug": "island-perimeter",
    "title": "Island Perimeter",
    "difficulty": "Easy",
    "description": "You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water. Grid cells are connected **horizontally/vertically** (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes \", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1,0,0\\],\\[1,1,1,0\\],\\[0,1,0,0\\],\\[1,1,0,0\\]\\]",
        "output": "16",
        "explanation": "The perimeter is the 16 yellow stripes in the image above."
      },
      {
        "input": "grid = \\[\\[1\\]\\]",
        "output": "4"
      },
      {
        "input": "grid = \\[\\[1,0\\]\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`row == grid.length`",
      "`col == grid[i].length`",
      "`1 <= row, col <= 100`",
      "`grid[i][j]` is `0` or `1`.",
      "There is exactly one island in `grid`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "464",
    "slug": "can-i-win",
    "title": "Can I Win",
    "difficulty": "Medium",
    "description": "In the \"100 game \" two players take turns adding, to a running total, any integer from `1` to `10`. The player who first causes the running total to **reach or exceed** 100 wins. What if we change the game so that players **cannot** re-use integers? For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100. Given two integers `maxChoosableInteger` and `desiredTotal`, return `true` if the first player to move can force a win, otherwise, return `false`. Assume both players play **optimally**.",
    "examples": [
      {
        "input": "maxChoosableInteger = 10, desiredTotal = 11",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "maxChoosableInteger = 10, desiredTotal = 0",
        "output": "true"
      },
      {
        "input": "maxChoosableInteger = 10, desiredTotal = 1",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= maxChoosableInteger <= 20`",
      "`0 <= desiredTotal <= 300`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "465",
    "slug": "optimal-account-balancing",
    "title": "Optimal Account Balancing",
    "difficulty": "Hard",
    "description": "You are given an array of transactions `transactions` where `transactions[i] = [fromi, toi, amounti]` indicates that the person with `ID = fromi` gave `amounti $` to the person with `ID = toi`. Return _the minimum number of transactions required to settle the debt_.",
    "examples": [
      {
        "input": "transactions = \\[\\[0,1,10\\],\\[2,0,5\\]\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "transactions = \\[\\[0,1,10\\],\\[1,0,1\\],\\[1,2,5\\],\\[2,0,5\\]\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= transactions.length <= 8`",
      "`transactions[i].length == 3`",
      "`0 <= fromi, toi < 12`",
      "`fromi != toi`",
      "`1 <= amounti <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "466",
    "slug": "count-the-repetitions",
    "title": "Count The Repetitions",
    "difficulty": "Hard",
    "description": "We define `str = [s, n]` as the string `str` which consists of the string `s` concatenated `n` times. *  For example, `str == [ \"abc \", 3] == \"abcabcabc \"`. We define that string `s1` can be obtained from string `s2` if we can remove some characters from `s2` such that it becomes `s1`. *  For example, `s1 = \"abc \"` can be obtained from `s2 = \"ab**dbe**c \"` based on our definition by removing the bolded underlined characters. You are given two strings `s1` and `s2` and two integers `n1` and `n2`. You have the two strings `str1 = [s1, n1]` and `str2 = [s2, n2]`. Return _the maximum integer_ `m` _such that_ `str = [str2, m]` _can be obtained from_ `str1`.",
    "examples": [
      {
        "input": "s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2",
        "output": "2"
      },
      {
        "input": "s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= s1.length, s2.length <= 100`",
      "`s1` and `s2` consist of lowercase English letters.",
      "`1 <= n1, n2 <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "467",
    "slug": "unique-substrings-in-wraparound-string",
    "title": "Unique Substrings in Wraparound String",
    "difficulty": "Medium",
    "description": "We define the string `base` to be the infinite wraparound string of `\"abcdefghijklmnopqrstuvwxyz \"`, so `base` will look like this: *  `\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd.... \"`. Given a string `s`, return _the number of **unique non-empty substrings** of_ `s` _are present in_ `base`.",
    "examples": [
      {
        "input": "s =  \"a \"",
        "output": "1",
        "explanation": "Only the substring  \"a \" of s is in base."
      },
      {
        "input": "s =  \"cac \"",
        "output": "2",
        "explanation": "There are two substrings ( \"a \",  \"c \") of s in base."
      },
      {
        "input": "s =  \"zab \"",
        "output": "6",
        "explanation": "There are six substrings ( \"z \",  \"a \",  \"b \",  \"za \",  \"ab \", and  \"zab \") of s in base."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "468",
    "slug": "validate-ip-address",
    "title": "Validate IP Address",
    "difficulty": "Medium",
    "description": "Given a string `queryIP`, return `\"IPv4 \"` if IP is a valid IPv4 address, `\"IPv6 \"` if IP is a valid IPv6 address or `\"Neither \"` if IP is not a correct IP of any type. **A valid IPv4** address is an IP in the form `\"x1.x2.x3.x4 \"` where `0 <= xi <= 255` and `xi` **cannot contain** leading zeros. For example, `\"192.168.1.1 \"` and `\"192.168.1.0 \"` are valid IPv4 addresses while `\"192.168.01.1 \"`, `\"192.168.1.00 \"`, and `\"192.168@1.1 \"` are invalid IPv4 addresses. **A valid IPv6** address is an IP in the form `\"x1:x2:x3:x4:x5:x6:x7:x8 \"` where: *  `1 <= xi.length <= 4` *  `xi` is a **hexadecimal string** which may contain digits, lowercase English letter (`'a'` to `'f'`) and upper-case English letters (`'A'` to `'F'`). *  Leading zeros are allowed in `xi`. For example, \"`2001:0db8:85a3:0000:0000:8a2e:0370:7334 \"` and \"`2001:db8:85a3:0:0:8A2E:0370:7334 \"` are valid IPv6 addresses, while \"`2001:0db8:85a3::8A2E:037j:7334 \"` and \"`02001:0db8:85a3:0000:0000:8a2e:0370:7334 \"` are invalid IPv6 addresses.",
    "examples": [
      {
        "input": "queryIP =  \"172.16.254.1 \"",
        "output": "\"IPv4 \"",
        "explanation": "This is a valid IPv4 address, return  \"IPv4 \"."
      },
      {
        "input": "queryIP =  \"2001:0db8:85a3:0:0:8A2E:0370:7334 \"",
        "output": "\"IPv6 \"",
        "explanation": "This is a valid IPv6 address, return  \"IPv6 \"."
      },
      {
        "input": "queryIP =  \"256.256.256.256 \"",
        "output": "\"Neither \"",
        "explanation": "This is neither a IPv4 address nor a IPv6 address."
      }
    ],
    "constraints": [
      "`queryIP` consists only of English letters, digits and the characters `'.'` and `':'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "469",
    "slug": "convex-polygon",
    "title": "Convex Polygon",
    "difficulty": "Medium",
    "description": "You are given an array of points on the **X-Y** plane `points` where `points[i] = [xi, yi]`. The points form a polygon when joined sequentially. Return `true` if this polygon is [convex](http://en.wikipedia.org/wiki/Convex_polygon) and `false` otherwise. You may assume the polygon formed by given points is always a [simple polygon](http://en.wikipedia.org/wiki/Simple_polygon). In other words, we ensure that exactly two edges intersect at each vertex and that edges otherwise don't intersect each other.",
    "examples": [
      {
        "input": "points = \\[\\[0,0\\],\\[0,5\\],\\[5,5\\],\\[5,0\\]\\]",
        "output": "true"
      },
      {
        "input": "points = \\[\\[0,0\\],\\[0,10\\],\\[10,10\\],\\[10,0\\],\\[5,5\\]\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`3 <= points.length <= 104`",
      "`points[i].length == 2`",
      "`-104 <= xi, yi <= 104`",
      "All the given points are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "470",
    "slug": "implement-rand10-using-rand7",
    "title": "Implement Rand10() Using Rand7()",
    "difficulty": "Medium",
    "description": "Given the **API** `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()`, and you shouldn't call any other API. Please **do not** use a language's built-in random API. Each test case will have one **internal** argument `n`, the number of times that your implemented function `rand10()` will be called while testing. Note that this is **not an argument** passed to `rand10()`.",
    "examples": [
      {
        "input": "n = 1",
        "output": "\\[2\\]"
      },
      {
        "input": "n = 2",
        "output": "\\[2,8\\]"
      },
      {
        "input": "n = 3",
        "output": "\\[3,8,10\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "Follow up:",
      "What is the [expected value](https://en.wikipedia.org/wiki/Expected_value) for the number of calls to `rand7()` function?",
      "Could you minimize the number of calls to `rand7()`?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "471",
    "slug": "encode-string-with-shortest-length",
    "title": "Encode String with Shortest Length",
    "difficulty": "Hard",
    "description": "Given a string `s`, encode the string such that its encoded length is the shortest. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. `k` should be a positive integer. If an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return **any of them**.",
    "examples": [
      {
        "input": "s =  \"aaa \"",
        "output": "\"aaa \"",
        "explanation": "There is no way to encode it such that it is shorter than the input string, so we do not encode it."
      },
      {
        "input": "s =  \"aaaaa \"",
        "output": "\"5\\[a\\] \"",
        "explanation": "\"5\\[a\\] \" is shorter than  \"aaaaa \" by 1 character."
      },
      {
        "input": "s =  \"aaaaaaaaaa \"",
        "output": "\"10\\[a\\] \"",
        "explanation": "\"a9\\[a\\] \" or  \"9\\[a\\]a \" are also valid solutions, both of them have the same length = 5, which is the same as  \"10\\[a\\] \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 150`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "472",
    "slug": "concatenated-words",
    "title": "Concatenated Words",
    "difficulty": "Hard",
    "description": "Given an array of strings `words` (**without duplicates**), return _all the **concatenated words** in the given list of_ `words`. A **concatenated word** is defined as a string that is comprised entirely of at least two shorter words (not necesssarily distinct) in the given array.",
    "examples": [
      {
        "input": "words = \\[ \"cat \", \"cats \", \"catsdogcats \", \"dog \", \"dogcatsdog \", \"hippopotamuses \", \"rat \", \"ratcatdogcat \"\\]",
        "output": "\\[ \"catsdogcats \", \"dogcatsdog \", \"ratcatdogcat \"\\]",
        "explanation": "\"catsdogcats \" can be concatenated by  \"cats \",  \"dog \" and  \"cats \";"
      },
      {
        "input": "words = \\[ \"cat \", \"dog \", \"catdog \"\\]",
        "output": "\\[ \"catdog \"\\]"
      }
    ],
    "constraints": [
      "`1 <= words.length <= 104`",
      "`1 <= words[i].length <= 30`",
      "`words[i]` consists of only lowercase English letters.",
      "All the strings of `words` are unique.",
      "`1 <= sum(words[i].length) <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "473",
    "slug": "matchsticks-to-square",
    "title": "Matchsticks to Square",
    "difficulty": "Medium",
    "description": "You are given an integer array `matchsticks` where `matchsticks[i]` is the length of the `ith` matchstick. You want to use **all the matchsticks** to make one square. You **should not break** any stick, but you can link them up, and each matchstick must be used **exactly one time**. Return `true` if you can make this square and `false` otherwise.",
    "examples": [
      {
        "input": "matchsticks = \\[1,1,2,2,2\\]",
        "output": "true",
        "explanation": "You can form a square with length 2, one side of the square came two sticks with length 1."
      },
      {
        "input": "matchsticks = \\[3,3,3,3,4\\]",
        "output": "false",
        "explanation": "You cannot find a way to form a square with all the matchsticks."
      }
    ],
    "constraints": [
      "`1 <= matchsticks.length <= 15`",
      "`1 <= matchsticks[i] <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "474",
    "slug": "ones-and-zeroes",
    "title": "Ones and Zeroes",
    "difficulty": "Medium",
    "description": "You are given an array of binary strings `strs` and two integers `m` and `n`. Return _the size of the largest subset of `strs` such that there are **at most**_ `m` `0`_'s and_ `n` `1`_'s in the subset_. A set `x` is a **subset** of a set `y` if all elements of `x` are also elements of `y`.",
    "examples": [
      {
        "input": "strs = \\[ \"10 \", \"0001 \", \"111001 \", \"1 \", \"0 \"\\], m = 5, n = 3",
        "output": "4",
        "explanation": "The largest subset with at most 5 0's and 3 1's is { \"10 \",  \"0001 \",  \"1 \",  \"0 \"}, so the answer is 4."
      },
      {
        "input": "strs = \\[ \"10 \", \"0 \", \"1 \"\\], m = 1, n = 1",
        "output": "2",
        "explanation": "The largest subset is { \"0 \",  \"1 \"}, so the answer is 2."
      }
    ],
    "constraints": [
      "`1 <= strs.length <= 600`",
      "`1 <= strs[i].length <= 100`",
      "`strs[i]` consists only of digits `'0'` and `'1'`.",
      "`1 <= m, n <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "475",
    "slug": "heaters",
    "title": "Heaters",
    "difficulty": "Medium",
    "description": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses. Every house can be warmed, as long as the house is within the heater's warm radius range. Given the positions of `houses` and `heaters` on a horizontal line, return _the minimum radius standard of heaters so that those heaters could cover all houses._ **Notice** that all the `heaters` follow your radius standard, and the warm radius will the same.",
    "examples": [
      {
        "input": "houses = \\[1,2,3\\], heaters = \\[2\\]",
        "output": "1",
        "explanation": "The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed."
      },
      {
        "input": "houses = \\[1,2,3,4\\], heaters = \\[1,4\\]",
        "output": "1",
        "explanation": "The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed."
      },
      {
        "input": "houses = \\[1,5\\], heaters = \\[2\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= houses.length, heaters.length <= 3  104`",
      "`1 <= houses[i], heaters[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "476",
    "slug": "number-complement",
    "title": "Number Complement",
    "difficulty": "Easy",
    "description": "The **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation. *  For example, The integer `5` is `\"101 \"` in binary and its **complement** is `\"010 \"` which is the integer `2`. Given an integer `num`, return _its complement_.",
    "examples": [
      {
        "input": "num = 5",
        "output": "2",
        "explanation": "The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2."
      },
      {
        "input": "num = 1",
        "output": "0",
        "explanation": "The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0."
      }
    ],
    "constraints": [
      "`1 <= num < 231`"
    ],
    "note": "This question is the same as 1009: [https://leetcode.com/problems/complement-of-base-10-integer/](https://leetcode.com/problems/complement-of-base-10-integer/)",
    "follow_up": null
  },
  {
    "id": "477",
    "slug": "total-hamming-distance",
    "title": "Total Hamming Distance",
    "difficulty": "Medium",
    "description": "The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different. Given an integer array `nums`, return _the sum of **Hamming distances** between all the pairs of the integers in_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[4,14,2\\]",
        "output": "6",
        "explanation": "In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just"
      },
      {
        "input": "nums = \\[4,14,4\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`0 <= nums[i] <= 109`",
      "The answer for the given input will fit in a 32-bit integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "478",
    "slug": "generate-random-point-in-a-circle",
    "title": "Generate Random Point in a Circle",
    "difficulty": "Medium",
    "description": "Given the radius and the position of the center of a circle, implement the function `randPoint` which generates a uniform random point inside the circle. Implement the `Solution` class: *  `Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`. *  `randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.",
    "examples": [],
    "constraints": [
      "`0 < radius <= 108`",
      "`-107 <= x_center, y_center <= 107`",
      "At most `3  104` calls will be made to `randPoint`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "479",
    "slug": "largest-palindrome-product",
    "title": "Largest Palindrome Product",
    "difficulty": "Hard",
    "description": "Given an integer n, return _the **largest palindromic integer** that can be represented as the product of two `n`\\-digits integers_. Since the answer can be very large, return it **modulo** `1337`.",
    "examples": [
      {
        "input": "n = 2",
        "output": "987"
      },
      {
        "input": "n = 1",
        "output": "9"
      }
    ],
    "constraints": [
      "`1 <= n <= 8`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "480",
    "slug": "sliding-window-median",
    "title": "Sliding Window Median",
    "difficulty": "Hard",
    "description": "The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values. *  For examples, if `arr = [2,3,4]`, the median is `3`. *  For examples, if `arr = [1,2,3,4]`, the median is `(2 + 3) / 2 = 2.5`. You are given an integer array `nums` and an integer `k`. There is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return _the median array for each window in the original array_. Answers within `10-5` of the actual value will be accepted.",
    "examples": [
      {
        "input": "nums = \\[1,3,-1,-3,5,3,6,7\\], k = 3",
        "output": "\\[1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4,2,3,1,4,2\\], k = 3",
        "output": "\\[2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000\\]"
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 105`",
      "`-231 <= nums[i] <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "481",
    "slug": "magical-string",
    "title": "Magical String",
    "difficulty": "Medium",
    "description": "A magical string `s` consists of only `'1'` and `'2'` and obeys the following rules: *  The string s is magical because concatenating the number of contiguous occurrences of characters `'1'` and `'2'` generates the string `s` itself. The first few elements of `s` is `s = \"1221121221221121122...... \"`. If we group the consecutive `1`'s and `2`'s in `s`, it will be `\"1 22 11 2 1 22 1 22 11 2 11 22 ...... \"` and the occurrences of `1`'s or `2`'s in each group are `\"1 2 2 1 1 2 1 2 2 1 2 2 ...... \"`. You can see that the occurrence sequence is `s` itself. Given an integer `n`, return the number of `1`'s in the first `n` number in the magical string `s`.",
    "examples": [
      {
        "input": "n = 6",
        "output": "3",
        "explanation": "The first 6 elements of magical string s is  \"122112 \" and it contains three 1's, so return 3."
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "482",
    "slug": "license-key-formatting",
    "title": "License Key Formatting",
    "difficulty": "Easy",
    "description": "You are given a license key represented as a string `s` that consists of only alphanumeric characters and dashes. The string is separated into `n + 1` groups by `n` dashes. You are also given an integer `k`. We want to reformat the string `s` such that each group contains exactly `k` characters, except for the first group, which could be shorter than `k` but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase. Return _the reformatted license key_.",
    "examples": [
      {
        "input": "s =  \"5F3Z-2e-9-w \", k = 4",
        "output": "\"5F3Z-2E9W \"",
        "explanation": "The string s has been split into two parts, each part has 4 characters."
      },
      {
        "input": "s =  \"2-5g-3-J \", k = 2",
        "output": "\"2-5G-3J \"",
        "explanation": "The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of English letters, digits, and dashes `'-'`.",
      "`1 <= k <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "483",
    "slug": "smallest-good-base",
    "title": "Smallest Good Base",
    "difficulty": "Hard",
    "description": "Given an integer `n` represented as a string, return _the smallest **good base** of_ `n`. We call `k >= 2` a **good base** of `n`, if all digits of `n` base `k` are `1`'s.",
    "examples": [
      {
        "input": "n =  \"13 \"",
        "output": "\"3 \"",
        "explanation": "13 base 3 is 111."
      },
      {
        "input": "n =  \"4681 \"",
        "output": "\"8 \"",
        "explanation": "4681 base 8 is 11111."
      },
      {
        "input": "n =  \"1000000000000000000 \"",
        "output": "\"999999999999999999 \"",
        "explanation": "1000000000000000000 base 999999999999999999 is 11."
      }
    ],
    "constraints": [
      "`n` is an integer in the range `[3, 1018]`.",
      "`n` does not contain any leading zeros."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "484",
    "slug": "find-permutation",
    "title": "Find Permutation",
    "difficulty": "Medium",
    "description": "A permutation `perm` of `n` integers of all the integers in the range `[1, n]` can be represented as a string `s` of length `n - 1` where: *  `s[i] == 'I'` if `perm[i] < perm[i + 1]`, and *  `s[i] == 'D'` if `perm[i] > perm[i + 1]`. Given a string `s`, reconstruct the lexicographically smallest permutation `perm` and return it.",
    "examples": [
      {
        "input": "s =  \"I \"",
        "output": "\\[1,2\\]",
        "explanation": "\\[1,2\\] is the only legal permutation that can represented by s, where the number 1 and 2 construct an increasing relationship."
      },
      {
        "input": "s =  \"DI \"",
        "output": "\\[2,1,3\\]",
        "explanation": "Both \\[2,1,3\\] and \\[3,1,2\\] can be represented as  \"DI \", but since we want to find the smallest lexicographical permutation, you should return \\[2,1,3\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is either `'I'` or `'D'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "485",
    "slug": "max-consecutive-ones",
    "title": "Max Consecutive Ones",
    "difficulty": "Easy",
    "description": "Given a binary array `nums`, return _the maximum number of consecutive_ `1`_'s in the array_.",
    "examples": [
      {
        "input": "nums = \\[1,1,0,1,1,1\\]",
        "output": "3",
        "explanation": "The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3."
      },
      {
        "input": "nums = \\[1,0,1,1,0,1\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`nums[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "486",
    "slug": "predict-the-winner",
    "title": "Predict the Winner",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. Two players are playing a game with this array: player 1 and player 2. Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of `0`. At each turn, the player takes one of the numbers from either end of the array (i.e., `nums[0]` or `nums[nums.length - 1]`) which reduces the size of the array by `1`. The player adds the chosen number to their score. The game ends when there are no more elements in the array. Return `true` if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return `true`. You may assume that both players are playing optimally.",
    "examples": [
      {
        "input": "nums = \\[1,5,2\\]",
        "output": "false",
        "explanation": "Initially, player 1 can choose between 1 and 2."
      },
      {
        "input": "nums = \\[1,5,233,7\\]",
        "output": "true",
        "explanation": "Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 20`",
      "`0 <= nums[i] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "487",
    "slug": "max-consecutive-ones-ii",
    "title": "Max Consecutive Ones II",
    "difficulty": "Medium",
    "description": "Given a binary array `nums`, return _the maximum number of consecutive_ `1`_'s in the array if you can flip at most one_ `0`.",
    "examples": [
      {
        "input": "nums = \\[1,0,1,1,0\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,0,1,1,0,1\\]",
        "output": "4",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`nums[i]` is either `0` or `1`.",
      "Follow up: What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "488",
    "slug": "zuma-game",
    "title": "Zuma Game",
    "difficulty": "Hard",
    "description": "You are playing a variation of the game Zuma. In this variation of Zuma, there is a **single row** of colored balls on a board, where each ball can be colored red `'R'`, yellow `'Y'`, blue `'B'`, green `'G'`, or white `'W'`. You also have several colored balls in your hand. Your goal is to **clear all** of the balls from the board. On each turn: *  Pick **any** ball from your hand and insert it in between two balls in the row or on either end of the row. *  If there is a group of **three or more consecutive balls** of the **same color**, remove the group of balls from the board. *  If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left. *  If there are no more balls on the board, then you win the game. *  Repeat this process until you either win or do not have any more balls in your hand. Given a string `board`, representing the row of balls on the board, and a string `hand`, representing the balls in your hand, return _the **minimum** number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return_ `-1`.",
    "examples": [
      {
        "input": "board =  \"WRRBBW \", hand =  \"RB \"",
        "output": "-1",
        "explanation": "It is impossible to clear all the balls. The best you can do is:"
      },
      {
        "input": "board =  \"WWRRBBWW \", hand =  \"WRBRW \"",
        "output": "2",
        "explanation": "To make the board empty:"
      },
      {
        "input": "board =  \"G \", hand =  \"GGGGG \"",
        "output": "2",
        "explanation": "To make the board empty:"
      }
    ],
    "constraints": [
      "`1 <= board.length <= 16`",
      "`1 <= hand.length <= 5`",
      "`board` and `hand` consist of the characters `'R'`, `'Y'`, `'B'`, `'G'`, and `'W'`.",
      "The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "489",
    "slug": "robot-room-cleaner",
    "title": "Robot Room Cleaner",
    "difficulty": "Hard",
    "description": "You are controlling a robot that is located somewhere in a room. The room is modeled as an `m x n` binary grid where `0` represents a wall and `1` represents an empty slot. The robot starts at an unknown location in the room that is guaranteed to be empty, and you do not have access to the grid, but you can move the robot using the given API `Robot`. You are tasked to use the robot to clean the entire room (i.e., clean every empty cell in the room). The robot with the four given APIs can move forward, turn left, or turn right. Each turn is `90` degrees. When the robot tries to move into a wall cell, its bumper sensor detects the obstacle, and it stays on the current cell. Design an algorithm to clean the entire room using the following APIs: interface Robot { // returns true if next cell is open and robot moves into the cell. // returns false if next cell is obstacle and robot stays on the current cell. boolean move(); // Robot will stay on the same cell after calling turnLeft/turnRight. // Each turn will be 90 degrees. void turnLeft(); void turnRight(); // Clean the current cell. void clean(); } **Note** that the initial direction of the robot will be facing up. You can assume all four edges of the grid are all surrounded by a wall. **Custom testing:** The input is only given to initialize the room and the robot's position internally. You must solve this problem \"blindfolded \". In other words, you must control the robot using only the four mentioned APIs without knowing the room layout and the initial robot's position.",
    "examples": [
      {
        "input": "room = \\[\\[1,1,1,1,1,0,1,1\\],\\[1,1,1,1,1,0,1,1\\],\\[1,0,1,1,1,1,1,1\\],\\[0,0,0,1,0,0,0,0\\],\\[1,1,1,1,1,1,1,1\\]\\], row = 1, col = 3",
        "output": "Robot cleaned all rooms.",
        "explanation": "All grids in the room are marked by either 0 or 1."
      },
      {
        "input": "room = \\[\\[1\\]\\], row = 0, col = 0",
        "output": "Robot cleaned all rooms."
      }
    ],
    "constraints": [
      "`m == room.length`",
      "`n == room[i].length`",
      "`1 <= m <= 100`",
      "`1 <= n <= 200`",
      "`room[i][j]` is either `0` or `1`.",
      "`0 <= row < m`",
      "`0 <= col < n`",
      "`room[row][col] == 1`",
      "All the empty cells can be visited from the starting position."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "490",
    "slug": "the-maze",
    "title": "The Maze",
    "difficulty": "Medium",
    "description": "There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. Given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return `true` if the ball can stop at the destination, otherwise return `false`. You may assume that **the borders of the maze are all walls** (see examples).",
    "examples": [
      {
        "input": "maze = \\[\\[0,0,1,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,1,0\\],\\[1,1,0,1,1\\],\\[0,0,0,0,0\\]\\], start = \\[0,4\\], destination = \\[4,4\\]",
        "output": "true",
        "explanation": "One possible way is : left -> down -> left -> down -> right -> down -> right."
      },
      {
        "input": "maze = \\[\\[0,0,1,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,1,0\\],\\[1,1,0,1,1\\],\\[0,0,0,0,0\\]\\], start = \\[0,4\\], destination = \\[3,2\\]",
        "output": "false",
        "explanation": "There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there."
      },
      {
        "input": "maze = \\[\\[0,0,0,0,0\\],\\[1,1,0,0,1\\],\\[0,0,0,0,0\\],\\[0,1,0,0,1\\],\\[0,1,0,0,0\\]\\], start = \\[4,3\\], destination = \\[0,1\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`m == maze.length`",
      "`n == maze[i].length`",
      "`1 <= m, n <= 100`",
      "`maze[i][j]` is `0` or `1`.",
      "`start.length == 2`",
      "`destination.length == 2`",
      "`0 <= startrow, destinationrow <= m`",
      "`0 <= startcol, destinationcol <= n`",
      "Both the ball and the destination exist in an empty space, and they will not be in the same position initially.",
      "The maze contains at least 2 empty spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "491",
    "slug": "non-decreasing-subsequences",
    "title": "Non-decreasing Subsequences",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _all the different possible non-decreasing subsequences of the given array with at least two elements_. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "nums = \\[4,6,7,7\\]",
        "output": "\\[\\[4,6\\],\\[4,6,7\\],\\[4,6,7,7\\],\\[4,7\\],\\[4,7,7\\],\\[6,7\\],\\[6,7,7\\],\\[7,7\\]\\]"
      },
      {
        "input": "nums = \\[4,4,3,2,1\\]",
        "output": "\\[\\[4,4\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 15`",
      "`-100 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "492",
    "slug": "construct-the-rectangle",
    "title": "Construct the Rectangle",
    "difficulty": "Easy",
    "description": "A web developer needs to know how to design a web page's size. So, given a specific rectangular web page's area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements: 1. The area of the rectangular web page you designed must equal to the given target area. 2. The width `W` should not be larger than the length `L`, which means `L >= W`. 3. The difference between length `L` and width `W` should be as small as possible. Return _an array `[L, W]` where `L` and `W` are the length and width of the web page you designed in sequence._",
    "examples": [
      {
        "input": "area = 4",
        "output": "\\[2,2\\]",
        "explanation": "The target area is 4, and all the possible ways to construct it are \\[1,4\\], \\[2,2\\], \\[4,1\\]."
      },
      {
        "input": "area = 37",
        "output": "\\[37,1\\]"
      },
      {
        "input": "area = 122122",
        "output": "\\[427,286\\]"
      }
    ],
    "constraints": [
      "`1 <= area <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "493",
    "slug": "reverse-pairs",
    "title": "Reverse Pairs",
    "difficulty": "Hard",
    "description": "Given an integer array `nums`, return _the number of **reverse pairs** in the array_. A **reverse pair** is a pair `(i, j)` where: *  `0 <= i < j < nums.length` and *  `nums[i] > 2 * nums[j]`.",
    "examples": [
      {
        "input": "nums = \\[1,3,2,3,1\\]",
        "output": "2",
        "explanation": "The reverse pairs are:"
      },
      {
        "input": "nums = \\[2,4,3,5,1\\]",
        "output": "3",
        "explanation": "The reverse pairs are:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  104`",
      "`-231 <= nums[i] <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "494",
    "slug": "target-sum",
    "title": "Target Sum",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an integer `target`. You want to build an **expression** out of nums by adding one of the symbols `'+'` and `'-'` before each integer in nums and then concatenate all the integers. *  For example, if `nums = [2, 1]`, you can add a `'+'` before `2` and a `'-'` before `1` and concatenate them to build the expression `\"+2-1 \"`. Return the number of different **expressions** that you can build, which evaluates to `target`.",
    "examples": [
      {
        "input": "nums = \\[1,1,1,1,1\\], target = 3",
        "output": "5",
        "explanation": "There are 5 ways to assign symbols to make the sum of nums be target 3."
      },
      {
        "input": "nums = \\[1\\], target = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 20`",
      "`0 <= nums[i] <= 1000`",
      "`0 <= sum(nums[i]) <= 1000`",
      "`-1000 <= target <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "495",
    "slug": "teemo-attacking",
    "title": "Teemo Attacking",
    "difficulty": "Easy",
    "description": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly `duration` seconds. More formally, an attack at second `t` will mean Ashe is poisoned during the **inclusive** time interval `[t, t + duration - 1]`. If Teemo attacks again **before** the poison effect ends, the timer for it is **reset**, and the poison effect will end `duration` seconds after the new attack. You are given a **non-decreasing** integer array `timeSeries`, where `timeSeries[i]` denotes that Teemo attacks Ashe at second `timeSeries[i]`, and an integer `duration`. Return _the **total** number of seconds that Ashe is poisoned_.",
    "examples": [
      {
        "input": "timeSeries = \\[1,4\\], duration = 2",
        "output": "4",
        "explanation": "Teemo's attacks on Ashe go as follows:"
      },
      {
        "input": "timeSeries = \\[1,2\\], duration = 2",
        "output": "3",
        "explanation": "Teemo's attacks on Ashe go as follows:"
      }
    ],
    "constraints": [
      "`1 <= timeSeries.length <= 104`",
      "`0 <= timeSeries[i], duration <= 107`",
      "`timeSeries` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "496",
    "slug": "next-greater-element-i",
    "title": "Next Greater Element I",
    "difficulty": "Easy",
    "description": "The **next greater element** of some element `x` in an array is the **first greater** element that is **to the right** of `x` in the same array. You are given two **distinct 0-indexed** integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`. For each `0 <= i < nums1.length`, find the index `j` such that `nums1[i] == nums2[j]` and determine the **next greater element** of `nums2[j]` in `nums2`. If there is no next greater element, then the answer for this query is `-1`. Return _an array_ `ans` _of length_ `nums1.length` _such that_ `ans[i]` _is the **next greater element** as described above._",
    "examples": [
      {
        "input": "nums1 = \\[4,1,2\\], nums2 = \\[1,3,4,2\\]",
        "output": "\\[-1,3,-1\\]",
        "explanation": "The next greater element for each value of nums1 is as follows:"
      },
      {
        "input": "nums1 = \\[2,4\\], nums2 = \\[1,2,3,4\\]",
        "output": "\\[3,-1\\]",
        "explanation": "The next greater element for each value of nums1 is as follows:"
      }
    ],
    "constraints": [
      "`1 <= nums1.length <= nums2.length <= 1000`",
      "`0 <= nums1[i], nums2[i] <= 104`",
      "All integers in `nums1` and `nums2` are unique.",
      "All the integers of `nums1` also appear in `nums2`.",
      "Follow up: Could you find an `O(nums1.length + nums2.length)` solution?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "497",
    "slug": "random-point-in-non-overlapping-rectangles",
    "title": "Random Point in Non-overlapping Rectangles",
    "difficulty": "Medium",
    "description": "You are given an array of non-overlapping axis-aligned rectangles `rects` where `rects[i] = [ai, bi, xi, yi]` indicates that `(ai, bi)` is the bottom-left corner point of the `ith` rectangle and `(xi, yi)` is the top-right corner point of the `ith` rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle. Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned. **Note** that an integer point is a point that has integer coordinates. Implement the `Solution` class: *  `Solution(int[][] rects)` Initializes the object with the given rectangles `rects`. *  `int[] pick()` Returns a random integer point `[u, v]` inside the space covered by one of the given rectangles.",
    "examples": [],
    "constraints": [
      "`1 <= rects.length <= 100`",
      "`rects[i].length == 4`",
      "`-109 <= ai < xi <= 109`",
      "`-109 <= bi < yi <= 109`",
      "`xi - ai <= 2000`",
      "`yi - bi <= 2000`",
      "All the rectangles do not overlap.",
      "At most `104` calls will be made to `pick`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "498",
    "slug": "diagonal-traverse",
    "title": "Diagonal Traverse",
    "difficulty": "Medium",
    "description": "Given an `m x n` matrix `mat`, return _an array of all the elements of the array in a diagonal order_.",
    "examples": [
      {
        "input": "mat = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]",
        "output": "\\[1,2,4,7,5,3,6,8,9\\]"
      },
      {
        "input": "mat = \\[\\[1,2\\],\\[3,4\\]\\]",
        "output": "\\[1,2,3,4\\]"
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 104`",
      "`1 <= m  n <= 104`",
      "`-105 <= mat[i][j] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "499",
    "slug": "the-maze-iii",
    "title": "The Maze III",
    "difficulty": "Hard",
    "description": "There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls onto the hole. Given the `m x n` `maze`, the ball's position `ball` and the hole's position `hole`, where `ball = [ballrow, ballcol]` and `hole = [holerow, holecol]`, return _a string_ `instructions` _of all the instructions that the ball should follow to drop in the hole with the **shortest distance** possible_. If there are multiple valid instructions, return the **lexicographically minimum** one. If the ball can't drop in the hole, return `\"impossible \"`. If there is a way for the ball to drop in the hole, the answer `instructions` should contain the characters `'u'` (i.e., up), `'d'` (i.e., down), `'l'` (i.e., left), and `'r'` (i.e., right). The **distance** is the number of **empty spaces** traveled by the ball from the start position (excluded) to the destination (included). You may assume that **the borders of the maze are all walls** (see examples).",
    "examples": [
      {
        "input": "maze = \\[\\[0,0,0,0,0\\],\\[1,1,0,0,1\\],\\[0,0,0,0,0\\],\\[0,1,0,0,1\\],\\[0,1,0,0,0\\]\\], ball = \\[4,3\\], hole = \\[0,1\\]",
        "output": "\"lul \"",
        "explanation": "There are two shortest ways for the ball to drop into the hole."
      },
      {
        "input": "maze = \\[\\[0,0,0,0,0\\],\\[1,1,0,0,1\\],\\[0,0,0,0,0\\],\\[0,1,0,0,1\\],\\[0,1,0,0,0\\]\\], ball = \\[4,3\\], hole = \\[3,0\\]",
        "output": "\"impossible \"",
        "explanation": "The ball cannot reach the hole."
      },
      {
        "input": "maze = \\[\\[0,0,0,0,0,0,0\\],\\[0,0,1,0,0,1,0\\],\\[0,0,0,0,1,0,0\\],\\[0,0,0,0,0,0,1\\]\\], ball = \\[0,4\\], hole = \\[3,5\\]",
        "output": "\"dldr \""
      }
    ],
    "constraints": [
      "`m == maze.length`",
      "`n == maze[i].length`",
      "`1 <= m, n <= 100`",
      "`maze[i][j]` is `0` or `1`.",
      "`ball.length == 2`",
      "`hole.length == 2`",
      "`0 <= ballrow, holerow <= m`",
      "`0 <= ballcol, holecol <= n`",
      "Both the ball and the hole exist in an empty space, and they will not be in the same position initially.",
      "The maze contains at least 2 empty spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "500",
    "slug": "keyboard-row",
    "title": "Keyboard Row",
    "difficulty": "Easy",
    "description": "Given an array of strings `words`, return _the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below_. In the **American keyboard**: *  the first row consists of the characters `\"qwertyuiop \"`, *  the second row consists of the characters `\"asdfghjkl \"`, and *  the third row consists of the characters `\"zxcvbnm \"`.",
    "examples": [
      {
        "input": "words = \\[ \"Hello \", \"Alaska \", \"Dad \", \"Peace \"\\]",
        "output": "\\[ \"Alaska \", \"Dad \"\\]"
      },
      {
        "input": "words = \\[ \"omk \"\\]",
        "output": "\\[\\]"
      },
      {
        "input": "words = \\[ \"adsdf \", \"sfd \"\\]",
        "output": "\\[ \"adsdf \", \"sfd \"\\]"
      }
    ],
    "constraints": [
      "`1 <= words.length <= 20`",
      "`1 <= words[i].length <= 100`",
      "`words[i]` consists of English letters (both lowercase and uppercase)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "501",
    "slug": "find-mode-in-binary-search-tree",
    "title": "Find Mode in Binary Search Tree",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary search tree (BST) with duplicates, return _all the [mode(s)](https://en.wikipedia.org/wiki/Mode_(statistics)) (i.e., the most frequently occurred element) in it_. If the tree has more than one mode, return them in **any order**. Assume a BST is defined as follows: *  The left subtree of a node contains only nodes with keys **less than or equal to** the node's key. *  The right subtree of a node contains only nodes with keys **greater than or equal to** the node's key. *  Both the left and right subtrees must also be binary search trees.",
    "examples": [
      {
        "input": "root = \\[1,null,2,2\\]",
        "output": "\\[2\\]"
      },
      {
        "input": "root = \\[0\\]",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-105 <= Node.val <= 105`",
      "Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "502",
    "slug": "ipo",
    "title": "IPO",
    "difficulty": "Hard",
    "description": "Suppose LeetCode will start its **IPO** soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the **IPO**. Since it has limited resources, it can only finish at most `k` distinct projects before the **IPO**. Help LeetCode design the best way to maximize its total capital after finishing at most `k` distinct projects. You are given `n` projects where the `ith` project has a pure profit `profits[i]` and a minimum capital of `capital[i]` is needed to start it. Initially, you have `w` capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital. Pick a list of **at most** `k` distinct projects from given projects to **maximize your final capital**, and return _the final maximized capital_. The answer is guaranteed to fit in a 32-bit signed integer.",
    "examples": [
      {
        "input": "k = 2, w = 0, profits = \\[1,2,3\\], capital = \\[0,1,1\\]",
        "output": "4",
        "explanation": "Since your initial capital is 0, you can only start the project indexed 0."
      },
      {
        "input": "k = 3, w = 0, profits = \\[1,2,3\\], capital = \\[0,1,2\\]",
        "output": "6"
      }
    ],
    "constraints": [
      "`1 <= k <= 105`",
      "`0 <= w <= 109`",
      "`n == profits.length`",
      "`n == capital.length`",
      "`1 <= n <= 105`",
      "`0 <= profits[i] <= 104`",
      "`0 <= capital[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "503",
    "slug": "next-greater-element-ii",
    "title": "Next Greater Element II",
    "difficulty": "Medium",
    "description": "Given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return _the **next greater number** for every element in_ `nums`. The **next greater number** of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return `-1` for this number.",
    "examples": [
      {
        "input": "nums = \\[1,2,1\\]",
        "output": "\\[2,-1,2\\]"
      },
      {
        "input": "nums = \\[1,2,3,4,3\\]",
        "output": "\\[2,3,4,-1,4\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "504",
    "slug": "base-7",
    "title": "Base 7",
    "difficulty": "Easy",
    "description": "Given an integer `num`, return _a string of its **base 7** representation_.",
    "examples": [
      {
        "input": "num = 100",
        "output": "\"202\""
      },
      {
        "input": "num = -7",
        "output": "\"-10\""
      }
    ],
    "constraints": [
      "`-107 <= num <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "505",
    "slug": "the-maze-ii",
    "title": "The Maze II",
    "difficulty": "Medium",
    "description": "There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. Given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return _the shortest **distance** for the ball to stop at the destination_. If the ball cannot stop at `destination`, return `-1`. The **distance** is the number of **empty spaces** traveled by the ball from the start position (excluded) to the destination (included). You may assume that **the borders of the maze are all walls** (see examples).",
    "examples": [
      {
        "input": "maze = \\[\\[0,0,1,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,1,0\\],\\[1,1,0,1,1\\],\\[0,0,0,0,0\\]\\], start = \\[0,4\\], destination = \\[4,4\\]",
        "output": "12",
        "explanation": "One possible way is : left -> down -> left -> down -> right -> down -> right."
      },
      {
        "input": "maze = \\[\\[0,0,1,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,1,0\\],\\[1,1,0,1,1\\],\\[0,0,0,0,0\\]\\], start = \\[0,4\\], destination = \\[3,2\\]",
        "output": "-1",
        "explanation": "There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there."
      },
      {
        "input": "maze = \\[\\[0,0,0,0,0\\],\\[1,1,0,0,1\\],\\[0,0,0,0,0\\],\\[0,1,0,0,1\\],\\[0,1,0,0,0\\]\\], start = \\[4,3\\], destination = \\[0,1\\]",
        "output": "-1"
      }
    ],
    "constraints": [
      "`m == maze.length`",
      "`n == maze[i].length`",
      "`1 <= m, n <= 100`",
      "`maze[i][j]` is `0` or `1`.",
      "`start.length == 2`",
      "`destination.length == 2`",
      "`0 <= startrow, destinationrow < m`",
      "`0 <= startcol, destinationcol < n`",
      "Both the ball and the destination exist in an empty space, and they will not be in the same position initially.",
      "The maze contains at least 2 empty spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "506",
    "slug": "relative-ranks",
    "title": "Relative Ranks",
    "difficulty": "Easy",
    "description": "You are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. All the scores are guaranteed to be **unique**. The athletes are **placed** based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. The placement of each athlete determines their rank: *  The `1st` place athlete's rank is `\"Gold Medal \"`. *  The `2nd` place athlete's rank is `\"Silver Medal \"`. *  The `3rd` place athlete's rank is `\"Bronze Medal \"`. *  For the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `\"x \"`). Return an array `answer` of size `n` where `answer[i]` is the **rank** of the `ith` athlete.",
    "examples": [
      {
        "input": "score = \\[5,4,3,2,1\\]",
        "output": "\\[ \"Gold Medal \", \"Silver Medal \", \"Bronze Medal \", \"4 \", \"5 \"\\]",
        "explanation": "The placements are \\[1st, 2nd, 3rd, 4th, 5th\\]."
      },
      {
        "input": "score = \\[10,3,8,9,4\\]",
        "output": "\\[ \"Gold Medal \", \"5 \", \"Bronze Medal \", \"Silver Medal \", \"4 \"\\]",
        "explanation": "The placements are \\[1st, 5th, 3rd, 2nd, 4th\\]."
      }
    ],
    "constraints": [
      "`n == score.length`",
      "`1 <= n <= 104`",
      "`0 <= score[i] <= 106`",
      "All the values in `score` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "507",
    "slug": "perfect-number",
    "title": "Perfect Number",
    "difficulty": "Easy",
    "description": "A [**perfect number**](https://en.wikipedia.org/wiki/Perfect_number) is a **positive integer** that is equal to the sum of its **positive divisors**, excluding the number itself. A **divisor** of an integer `x` is an integer that can divide `x` evenly. Given an integer `n`, return `true` _if_ `n` _is a perfect number, otherwise return_ `false`.",
    "examples": [
      {
        "input": "num = 28",
        "output": "true",
        "explanation": "28 = 1 + 2 + 4 + 7 + 14"
      },
      {
        "input": "num = 7",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= num <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "508",
    "slug": "most-frequent-subtree-sum",
    "title": "Most Frequent Subtree Sum",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return the most frequent **subtree sum**. If there is a tie, return all the values with the highest frequency in any order. The **subtree sum** of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).",
    "examples": [
      {
        "input": "root = \\[5,2,-3\\]",
        "output": "\\[2,-3,4\\]"
      },
      {
        "input": "root = \\[5,2,-5\\]",
        "output": "\\[2\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-105 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "509",
    "slug": "fibonacci-number",
    "title": "Fibonacci Number",
    "difficulty": "Easy",
    "description": "The **Fibonacci numbers**, commonly denoted `F(n)` form a sequence, called the **Fibonacci sequence**, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is, F(0) = 0, F(1) = 1 F(n) = F(n - 1) + F(n - 2), for n > 1. Given `n`, calculate `F(n)`.",
    "examples": [
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "F(2) = F(1) + F(0) = 1 + 0 = 1."
      },
      {
        "input": "n = 3",
        "output": "2",
        "explanation": "F(3) = F(2) + F(1) = 1 + 1 = 2."
      },
      {
        "input": "n = 4",
        "output": "3",
        "explanation": "F(4) = F(3) + F(2) = 2 + 1 = 3."
      }
    ],
    "constraints": [
      "`0 <= n <= 30`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "510",
    "slug": "inorder-successor-in-bst-ii",
    "title": "Inorder Successor in BST II",
    "difficulty": "Medium",
    "description": "Given a `node` in a binary search tree, return _the in-order successor of that node in the BST_. If that node has no in-order successor, return `null`. The successor of a `node` is the node with the smallest key greater than `node.val`. You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for `Node`: class Node { public int val; public Node left; public Node right; public Node parent; }",
    "examples": [
      {
        "input": "tree = \\[2,1,3\\], node = 1",
        "output": "2",
        "explanation": "1's in-order successor node is 2. Note that both the node and the return value is of Node type."
      },
      {
        "input": "tree = \\[5,3,6,2,4,null,null,1\\], node = 6",
        "output": "null",
        "explanation": "There is no in-order successor of the current node, so the answer is null."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-105 <= Node.val <= 105`",
      "All Nodes will have unique values.",
      "Follow up: Could you solve it without looking up any of the node's values?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "513",
    "slug": "find-bottom-left-tree-value",
    "title": "Find Bottom Left Tree Value",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return the leftmost value in the last row of the tree.",
    "examples": [
      {
        "input": "root = \\[2,1,3\\]",
        "output": "1"
      },
      {
        "input": "root = \\[1,2,3,4,null,5,6,null,null,7\\]",
        "output": "7"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-231 <= Node.val <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "514",
    "slug": "freedom-trail",
    "title": "Freedom Trail",
    "difficulty": "Hard",
    "description": "In the video game Fallout 4, the quest **\"Road to Freedom \"** requires players to reach a metal dial called the **\"Freedom Trail Ring \"** and use the dial to spell a specific keyword to open the door. Given a string `ring` that represents the code engraved on the outer ring and another string `key` that represents the keyword that needs to be spelled, return _the minimum number of steps to spell all the characters in the keyword_. Initially, the first character of the ring is aligned at the `\"12:00 \"` direction. You should spell all the characters in `key` one by one by rotating `ring` clockwise or anticlockwise to make each character of the string key aligned at the `\"12:00 \"` direction and then by pressing the center button. At the stage of rotating the ring to spell the key character `key[i]`: 1. You can rotate the ring clockwise or anticlockwise by one place, which counts as **one step**. The final purpose of the rotation is to align one of `ring`'s characters at the `\"12:00 \"` direction, where this character must equal `key[i]`. 2. If the character `key[i]` has been aligned at the `\"12:00 \"` direction, press the center button to spell, which also counts as **one step**. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.",
    "examples": [
      {
        "input": "ring =  \"godding \", key =  \"gd \"",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "ring =  \"godding \", key =  \"godding \"",
        "output": "13"
      }
    ],
    "constraints": [
      "`1 <= ring.length, key.length <= 100`",
      "`ring` and `key` consist of only lower case English letters.",
      "It is guaranteed that `key` could always be spelled by rotating `ring`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "515",
    "slug": "find-largest-value-in-each-tree-row",
    "title": "Find Largest Value in Each Tree Row",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _an array of the largest value in each row_ of the tree **(0-indexed)**.",
    "examples": [
      {
        "input": "root = \\[1,3,2,5,3,null,9\\]",
        "output": "\\[1,3,9\\]"
      },
      {
        "input": "root = \\[1,2,3\\]",
        "output": "\\[1,3\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range `[0, 104]`.",
      "`-231 <= Node.val <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "516",
    "slug": "longest-palindromic-subsequence",
    "title": "Longest Palindromic Subsequence",
    "difficulty": "Medium",
    "description": "Given a string `s`, find _the longest palindromic **subsequence**'s length in_ `s`. A **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "s =  \"bbbab \"",
        "output": "4",
        "explanation": "One possible longest palindromic subsequence is  \"bbbb \"."
      },
      {
        "input": "s =  \"cbbd \"",
        "output": "2",
        "explanation": "One possible longest palindromic subsequence is  \"bb \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "517",
    "slug": "super-washing-machines",
    "title": "Super Washing Machines",
    "difficulty": "Hard",
    "description": "You have `n` super washing machines on a line. Initially, each washing machine has some dresses or is empty. For each move, you could choose any `m` (`1 <= m <= n`) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time. Given an integer array `machines` representing the number of dresses in each washing machine from left to right on the line, return _the minimum number of moves to make all the washing machines have the same number of dresses_. If it is not possible to do it, return `-1`.",
    "examples": [
      {
        "input": "machines = \\[1,0,5\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "machines = \\[0,3,0\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "machines = \\[0,2,0\\]",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == machines.length`",
      "`1 <= n <= 104`",
      "`0 <= machines[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "518",
    "slug": "coin-change-ii",
    "title": "Coin Change II",
    "difficulty": "Medium",
    "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return _the number of combinations that make up that amount_. If that amount of money cannot be made up by any combination of the coins, return `0`. You may assume that you have an infinite number of each kind of coin. The answer is **guaranteed** to fit into a signed **32-bit** integer.",
    "examples": [
      {
        "input": "amount = 5, coins = \\[1,2,5\\]",
        "output": "4",
        "explanation": "there are four ways to make up the amount:"
      },
      {
        "input": "amount = 3, coins = \\[2\\]",
        "output": "0",
        "explanation": "the amount of 3 cannot be made up just with coins of 2."
      },
      {
        "input": "amount = 10, coins = \\[10\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= coins.length <= 300`",
      "`1 <= coins[i] <= 5000`",
      "All the values of `coins` are unique.",
      "`0 <= amount <= 5000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "519",
    "slug": "random-flip-matrix",
    "title": "Random Flip Matrix",
    "difficulty": "Medium",
    "description": "There is an `m x n` binary grid `matrix` with all the values set `0` initially. Design an algorithm to randomly pick an index `(i, j)` where `matrix[i][j] == 0` and flips it to `1`. All the indices `(i, j)` where `matrix[i][j] == 0` should be equally likely to be returned. Optimize your algorithm to minimize the number of calls made to the **built-in** random function of your language and optimize the time and space complexity. Implement the `Solution` class: *  `Solution(int m, int n)` Initializes the object with the size of the binary matrix `m` and `n`. *  `int[] flip()` Returns a random index `[i, j]` of the matrix where `matrix[i][j] == 0` and flips it to `1`. *  `void reset()` Resets all the values of the matrix to be `0`.",
    "examples": [],
    "constraints": [
      "`1 <= m, n <= 104`",
      "There will be at least one free cell for each call to `flip`.",
      "At most `1000` calls will be made to `flip` and `reset`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "520",
    "slug": "detect-capital",
    "title": "Detect Capital",
    "difficulty": "Easy",
    "description": "We define the usage of capitals in a word to be right when one of the following cases holds: *  All letters in this word are capitals, like `\"USA \"`. *  All letters in this word are not capitals, like `\"leetcode \"`. *  Only the first letter in this word is capital, like `\"Google \"`. Given a string `word`, return `true` if the usage of capitals in it is right.",
    "examples": [
      {
        "input": "word = \"USA\"",
        "output": "true"
      },
      {
        "input": "word = \"FlaG\"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= word.length <= 100`",
      "`word` consists of lowercase and uppercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "521",
    "slug": "longest-uncommon-subsequence-i",
    "title": "Longest Uncommon Subsequence I",
    "difficulty": "Easy",
    "description": "Given two strings `a` and `b`, return _the length of the **longest uncommon subsequence** between_ `a` _and_ `b`. If the longest uncommon subsequence does not exist, return `-1`. An **uncommon subsequence** between two strings is a string that is a **subsequence of one but not the other**. A **subsequence** of a string `s` is a string that can be obtained after deleting any number of characters from `s`. *  For example, `\"abc \"` is a subsequence of `\"aebdc \"` because you can delete the underlined characters in `\"aebdc \"` to get `\"abc \"`. Other subsequences of `\"aebdc \"` include `\"aebdc \"`, `\"aeb \"`, and `\" \"` (empty string).",
    "examples": [
      {
        "input": "a =  \"aba \", b =  \"cdc \"",
        "output": "3",
        "explanation": "One longest uncommon subsequence is  \"aba \" because  \"aba \" is a subsequence of  \"aba \" but not  \"cdc \"."
      },
      {
        "input": "a =  \"aaa \", b =  \"bbb \"",
        "output": "3",
        "explanation": "The longest uncommon subsequences are  \"aaa \" and  \"bbb \"."
      },
      {
        "input": "a =  \"aaa \", b =  \"aaa \"",
        "output": "-1",
        "explanation": "Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a."
      }
    ],
    "constraints": [
      "`1 <= a.length, b.length <= 100`",
      "`a` and `b` consist of lower-case English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "522",
    "slug": "longest-uncommon-subsequence-ii",
    "title": "Longest Uncommon Subsequence II",
    "difficulty": "Medium",
    "description": "Given an array of strings `strs`, return _the length of the **longest uncommon subsequence** between them_. If the longest uncommon subsequence does not exist, return `-1`. An **uncommon subsequence** between an array of strings is a string that is a **subsequence of one string but not the others**. A **subsequence** of a string `s` is a string that can be obtained after deleting any number of characters from `s`. *  For example, `\"abc \"` is a subsequence of `\"aebdc \"` because you can delete the underlined characters in `\"aebdc \"` to get `\"abc \"`. Other subsequences of `\"aebdc \"` include `\"aebdc \"`, `\"aeb \"`, and `\" \"` (empty string).",
    "examples": [
      {
        "input": "strs = \\[\"aba\",\"cdc\",\"eae\"\\]",
        "output": "3"
      },
      {
        "input": "strs = \\[\"aaa\",\"aaa\",\"aa\"\\]",
        "output": "-1"
      }
    ],
    "constraints": [
      "`2 <= strs.length <= 50`",
      "`1 <= strs[i].length <= 10`",
      "`strs[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "523",
    "slug": "continuous-subarray-sum",
    "title": "Continuous Subarray Sum",
    "difficulty": "Medium",
    "description": "Given an integer array nums and an integer k, return `true` _if_ `nums` _has a **good subarray** or_ `false` _otherwise_. A **good subarray** is a subarray where: *  its length is **at least two**, and *  the sum of the elements of the subarray is a multiple of `k`. **Note** that: *  A **subarray** is a contiguous part of the array. *  An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is **always** a multiple of `k`.",
    "examples": [
      {
        "input": "nums = \\[23,2,4,6,7\\], k = 6",
        "output": "true",
        "explanation": "\\[2, 4\\] is a continuous subarray of size 2 whose elements sum up to 6."
      },
      {
        "input": "nums = \\[23,2,6,4,7\\], k = 6",
        "output": "true",
        "explanation": "\\[23, 2, 6, 4, 7\\] is an continuous subarray of size 5 whose elements sum up to 42."
      },
      {
        "input": "nums = \\[23,2,6,4,7\\], k = 13",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 109`",
      "`0 <= sum(nums[i]) <= 231 - 1`",
      "`1 <= k <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "524",
    "slug": "longest-word-in-dictionary-through-deleting",
    "title": "Longest Word in Dictionary through Deleting",
    "difficulty": "Medium",
    "description": "Given a string `s` and a string array `dictionary`, return _the longest string in the dictionary that can be formed by deleting some of the given string characters_. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.",
    "examples": [
      {
        "input": "s =  \"abpcplea \", dictionary = \\[ \"ale \", \"apple \", \"monkey \", \"plea \"\\]",
        "output": "\"apple \""
      },
      {
        "input": "s =  \"abpcplea \", dictionary = \\[ \"a \", \"b \", \"c \"\\]",
        "output": "\"a \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`1 <= dictionary.length <= 1000`",
      "`1 <= dictionary[i].length <= 1000`",
      "`s` and `dictionary[i]` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "525",
    "slug": "contiguous-array",
    "title": "Contiguous Array",
    "difficulty": "Medium",
    "description": "Given a binary array `nums`, return _the maximum length of a contiguous subarray with an equal number of_ `0` _and_ `1`.",
    "examples": [
      {
        "input": "nums = \\[0,1\\]",
        "output": "2",
        "explanation": "\\[0, 1\\] is the longest contiguous subarray with an equal number of 0 and 1."
      },
      {
        "input": "nums = \\[0,1,0\\]",
        "output": "2",
        "explanation": "\\[0, 1\\] (or \\[1, 0\\]) is a longest contiguous subarray with equal number of 0 and 1."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`nums[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "526",
    "slug": "beautiful-arrangement",
    "title": "Beautiful Arrangement",
    "difficulty": "Medium",
    "description": "Suppose you have `n` integers labeled `1` through `n`. A permutation of those `n` integers `perm` (**1-indexed**) is considered a **beautiful arrangement** if for every `i` (`1 <= i <= n`), **either** of the following is true: *  `perm[i]` is divisible by `i`. *  `i` is divisible by `perm[i]`. Given an integer `n`, return _the **number** of the **beautiful arrangements** that you can construct_.",
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 15`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "527",
    "slug": "word-abbreviation",
    "title": "Word Abbreviation",
    "difficulty": "Hard",
    "description": "Given an array of **distinct** strings `words`, return _the minimal possible **abbreviations** for every word_. The following are the rules for a string abbreviation: 1. The **initial** abbreviation for each word is: the first character, then the number of characters in between, followed by the last character. 2. If more than one word shares the **same** abbreviation, then perform the following operation: *  **Increase** the prefix (characters in the first part) of each of their abbreviations by `1`. *  For example, say you start with the words `[ \"abcdef \", \"abndef \"]` both initially abbreviated as `\"a4f \"`. Then, a sequence of operations would be `[ \"a4f \", \"a4f \"]` -> `[ \"ab3f \", \"ab3f \"]` -> `[ \"abc2f \", \"abn2f \"]`. *  This operation is repeated until every abbreviation is **unique**. 3. At the end, if an abbreviation did not make a word shorter, then keep it as the original word.",
    "examples": [
      {
        "input": "words = \\[\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"\\]",
        "output": "\\[\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"\\]"
      },
      {
        "input": "words = \\[\"aa\",\"aaa\"\\]",
        "output": "\\[\"aa\",\"aaa\"\\]"
      }
    ],
    "constraints": [
      "`1 <= words.length <= 400`",
      "`2 <= words[i].length <= 400`",
      "`words[i]` consists of lowercase English letters.",
      "All the strings of `words` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "528",
    "slug": "random-pick-with-weight",
    "title": "Random Pick with Weight",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of positive integers `w` where `w[i]` describes the **weight** of the `ith` index. You need to implement the function `pickIndex()`, which **randomly** picks an index in the range `[0, w.length - 1]` (**inclusive**) and returns it. The **probability** of picking an index `i` is `w[i] / sum(w)`. *  For example, if `w = [1, 3]`, the probability of picking index `0` is `1 / (1 + 3) = 0.25` (i.e., `25%`), and the probability of picking index `1` is `3 / (1 + 3) = 0.75` (i.e., `75%`).",
    "examples": [],
    "constraints": [
      "`1 <= w.length <= 104`",
      "`1 <= w[i] <= 105`",
      "`pickIndex` will be called at most `104` times."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "529",
    "slug": "minesweeper",
    "title": "Minesweeper",
    "difficulty": "Medium",
    "description": "Let's play the minesweeper game ([Wikipedia](https://en.wikipedia.org/wiki/Minesweeper_(video_game)), [online game](http://minesweeperonline.com))! You are given an `m x n` char matrix `board` representing the game board where: *  `'M'` represents an unrevealed mine, *  `'E'` represents an unrevealed empty square, *  `'B'` represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals), *  digit (`'1'` to `'8'`) represents how many mines are adjacent to this revealed square, and *  `'X'` represents a revealed mine. You are also given an integer array `click` where `click = [clickr, clickc]` represents the next click position among all the unrevealed squares (`'M'` or `'E'`). Return _the board after revealing this position according to the following rules_: 1. If a mine `'M'` is revealed, then the game is over. You should change it to `'X'`. 2. If an empty square `'E'` with no adjacent mines is revealed, then change it to a revealed blank `'B'` and all of its adjacent unrevealed squares should be revealed recursively. 3. If an empty square `'E'` with at least one adjacent mine is revealed, then change it to a digit (`'1'` to `'8'`) representing the number of adjacent mines. 4. Return the board when no more squares will be revealed.",
    "examples": [
      {
        "input": "board = \\[\\[ \"E \", \"E \", \"E \", \"E \", \"E \"\\],\\[ \"E \", \"E \", \"M \", \"E \", \"E \"\\],\\[ \"E \", \"E \", \"E \", \"E \", \"E \"\\],\\[ \"E \", \"E \", \"E \", \"E \", \"E \"\\]\\], click = \\[3,0\\]",
        "output": "\\[\\[ \"B \", \"1 \", \"E \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"M \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"1 \", \"1 \", \"B \"\\],\\[ \"B \", \"B \", \"B \", \"B \", \"B \"\\]\\]"
      },
      {
        "input": "board = \\[\\[ \"B \", \"1 \", \"E \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"M \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"1 \", \"1 \", \"B \"\\],\\[ \"B \", \"B \", \"B \", \"B \", \"B \"\\]\\], click = \\[1,2\\]",
        "output": "\\[\\[ \"B \", \"1 \", \"E \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"X \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"1 \", \"1 \", \"B \"\\],\\[ \"B \", \"B \", \"B \", \"B \", \"B \"\\]\\]"
      }
    ],
    "constraints": [
      "`m == board.length`",
      "`n == board[i].length`",
      "`1 <= m, n <= 50`",
      "`board[i][j]` is either `'M'`, `'E'`, `'B'`, or a digit from `'1'` to `'8'`.",
      "`click.length == 2`",
      "`0 <= clickr < m`",
      "`0 <= clickc < n`",
      "`board[clickr][clickc]` is either `'M'` or `'E'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "530",
    "slug": "minimum-absolute-difference-in-bst",
    "title": "Minimum Absolute Difference in BST",
    "difficulty": "Easy",
    "description": "Given the `root` of a Binary Search Tree (BST), return _the minimum absolute difference between the values of any two different nodes in the tree_.",
    "examples": [
      {
        "input": "root = \\[4,2,6,1,3\\]",
        "output": "1"
      },
      {
        "input": "root = \\[1,0,48,null,null,12,49\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 104]`.",
      "`0 <= Node.val <= 105`"
    ],
    "note": "This question is the same as 783: [https://leetcode.com/problems/minimum-distance-between-bst-nodes/](https://leetcode.com/problems/minimum-distance-between-bst-nodes/)",
    "follow_up": null
  },
  {
    "id": "531",
    "slug": "lonely-pixel-i",
    "title": "Lonely Pixel I",
    "difficulty": "Medium",
    "description": "Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels, return _the number of **black** lonely pixels_. A black lonely pixel is a character `'B'` that located at a specific position where the same row and same column don't have **any other** black pixels.",
    "examples": [
      {
        "input": "picture = \\[\\[ \"W \", \"W \", \"B \"\\],\\[ \"W \", \"B \", \"W \"\\],\\[ \"B \", \"W \", \"W \"\\]\\]",
        "output": "3",
        "explanation": "All the three 'B's are black lonely pixels."
      },
      {
        "input": "picture = \\[\\[ \"B \", \"B \", \"B \"\\],\\[ \"B \", \"B \", \"W \"\\],\\[ \"B \", \"B \", \"B \"\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`m == picture.length`",
      "`n == picture[i].length`",
      "`1 <= m, n <= 500`",
      "`picture[i][j]` is `'W'` or `'B'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "532",
    "slug": "k-diff-pairs-in-an-array",
    "title": "K-diff Pairs in an Array",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums` and an integer `k`, return _the number of **unique** k-diff pairs in the array_. A **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true: *  `0 <= i, j < nums.length` *  `i != j` *  `nums[i] - nums[j] == k` **Notice** that `|val|` denotes the absolute value of `val`.",
    "examples": [
      {
        "input": "nums = \\[3,1,4,1,5\\], k = 2",
        "output": "2",
        "explanation": "There are two 2-diff pairs in the array, (1, 3) and (3, 5)."
      },
      {
        "input": "nums = \\[1,2,3,4,5\\], k = 1",
        "output": "4",
        "explanation": "There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5)."
      },
      {
        "input": "nums = \\[1,3,1,5,4\\], k = 0",
        "output": "1",
        "explanation": "There is one 0-diff pair in the array, (1, 1)."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-107 <= nums[i] <= 107`",
      "`0 <= k <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "533",
    "slug": "lonely-pixel-ii",
    "title": "Lonely Pixel II",
    "difficulty": "Medium",
    "description": "Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels and an integer target, return _the number of **black** lonely pixels_. A black lonely pixel is a character `'B'` that located at a specific position `(r, c)` where: *  Row `r` and column `c` both contain exactly `target` black pixels. *  For all rows that have a black pixel at column `c`, they should be exactly the same as row `r`.",
    "examples": [
      {
        "input": "picture = \\[\\[ \"W \", \"B \", \"W \", \"B \", \"B \", \"W \"\\],\\[ \"W \", \"B \", \"W \", \"B \", \"B \", \"W \"\\],\\[ \"W \", \"B \", \"W \", \"B \", \"B \", \"W \"\\],\\[ \"W \", \"W \", \"B \", \"W \", \"B \", \"W \"\\]\\], target = 3",
        "output": "6",
        "explanation": "All the green 'B' are the black pixels we need (all 'B's at column 1 and 3)."
      },
      {
        "input": "picture = \\[\\[ \"W \", \"W \", \"B \"\\],\\[ \"W \", \"W \", \"B \"\\],\\[ \"W \", \"W \", \"B \"\\]\\], target = 1",
        "output": "0"
      }
    ],
    "constraints": [
      "`m == picture.length`",
      "`n == picture[i].length`",
      "`1 <= m, n <= 200`",
      "`picture[i][j]` is `'W'` or `'B'`.",
      "`1 <= target <= min(m, n)`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "535",
    "slug": "encode-and-decode-tinyurl",
    "title": "Encode and Decode TinyURL",
    "difficulty": "Medium",
    "description": "> Note: This is a companion problem to the [System Design](https://leetcode.com/discuss/interview-question/system-design/) problem: [Design TinyURL](https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/). TinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`. Design a class to encode a URL and decode a tiny URL. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL. Implement the `Solution` class: *  `Solution()` Initializes the object of the system. *  `String encode(String longUrl)` Returns a tiny URL for the given `longUrl`. *  `String decode(String shortUrl)` Returns the original long URL for the given `shortUrl`. It is guaranteed that the given `shortUrl` was encoded by the same object.",
    "examples": [
      {
        "input": "url =  \"https://leetcode.com/problems/design-tinyurl \"",
        "output": "\"https://leetcode.com/problems/design-tinyurl \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= url.length <= 104`",
      "`url` is guranteed to be a valid URL."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "536",
    "slug": "construct-binary-tree-from-string",
    "title": "Construct Binary Tree from String",
    "difficulty": "Medium",
    "description": "You need to construct a binary tree from a string consisting of parenthesis and integers. The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure. You always start to construct the **left** child node of the parent first if it exists.",
    "examples": [
      {
        "input": "s =  \"4(2(3)(1))(6(5)) \"",
        "output": "\\[4,2,6,3,1,5\\]"
      },
      {
        "input": "s =  \"4(2(3)(1))(6(5)(7)) \"",
        "output": "\\[4,2,6,3,1,5,7\\]"
      },
      {
        "input": "s =  \"-4(2(3)(1))(6(5)(7)) \"",
        "output": "\\[-4,2,6,3,1,5,7\\]"
      }
    ],
    "constraints": [
      "`0 <= s.length <= 3  104`",
      "`s` consists of digits, `'('`, `')'`, and `'-'` only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "537",
    "slug": "complex-number-multiplication",
    "title": "Complex Number Multiplication",
    "difficulty": "Medium",
    "description": "A [complex number](https://en.wikipedia.org/wiki/Complex_number) can be represented as a string on the form `\"**real**+**imaginary**i \"` where: *  `real` is the real part and is an integer in the range `[-100, 100]`. *  `imaginary` is the imaginary part and is an integer in the range `[-100, 100]`. *  `i2 == -1`. Given two complex numbers `num1` and `num2` as strings, return _a string of the complex number that represents their multiplications_.",
    "examples": [
      {
        "input": "num1 =  \"1+1i \", num2 =  \"1+1i \"",
        "output": "\"0+2i \"",
        "explanation": "(1 + i) \\* (1 + i) = 1 + i2 + 2 \\* i = 2i, and you need convert it to the form of 0+2i."
      },
      {
        "input": "num1 =  \"1+-1i \", num2 =  \"1+-1i \"",
        "output": "\"0+-2i \"",
        "explanation": "(1 - i) \\* (1 - i) = 1 + i2 - 2 \\* i = -2i, and you need convert it to the form of 0+-2i."
      }
    ],
    "constraints": [
      "`num1` and `num2` are valid complex numbers."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "538",
    "slug": "convert-bst-to-greater-tree",
    "title": "Convert BST to Greater Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. As a reminder, a _binary search tree_ is a tree that satisfies these constraints: *  The left subtree of a node contains only nodes with keys **less than** the node's key. *  The right subtree of a node contains only nodes with keys **greater than** the node's key. *  Both the left and right subtrees must also be binary search trees.",
    "examples": [
      {
        "input": "root = \\[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8\\]",
        "output": "\\[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8\\]"
      },
      {
        "input": "root = \\[0,null,1\\]",
        "output": "\\[1,null,1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`-104 <= Node.val <= 104`",
      "All the values in the tree are unique.",
      "`root` is guaranteed to be a valid binary search tree."
    ],
    "note": "This question is the same as 1038: [https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/](https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/)",
    "follow_up": null
  },
  {
    "id": "539",
    "slug": "minimum-time-difference",
    "title": "Minimum Time Difference",
    "difficulty": "Medium",
    "description": "Given a list of 24-hour clock time points in **\"HH:MM \"** format, return _the minimum **minutes** difference between any two time-points in the list_.",
    "examples": [
      {
        "input": "timePoints = \\[\"23:59\",\"00:00\"\\]",
        "output": "1"
      },
      {
        "input": "timePoints = \\[\"00:00\",\"23:59\",\"00:00\"\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`2 <= timePoints.length <= 2  104`",
      "`timePoints[i]` is in the format \"HH:MM \"."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "540",
    "slug": "single-element-in-a-sorted-array",
    "title": "Single Element in a Sorted Array",
    "difficulty": "Medium",
    "description": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Return _the single element that appears only once_. Your solution must run in `O(log n)` time and `O(1)` space.",
    "examples": [
      {
        "input": "nums = \\[1,1,2,3,3,4,4,8,8\\]",
        "output": "2"
      },
      {
        "input": "nums = \\[3,3,7,7,10,11,11\\]",
        "output": "10"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "541",
    "slug": "reverse-string-ii",
    "title": "Reverse String II",
    "difficulty": "Easy",
    "description": "Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string. If there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and leave the other as original.",
    "examples": [
      {
        "input": "s = \"abcdefg\", k = 2",
        "output": "\"bacdfeg\""
      },
      {
        "input": "s = \"abcd\", k = 2",
        "output": "\"bacd\""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of only lowercase English letters.",
      "`1 <= k <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "542",
    "slug": "01-matrix",
    "title": "01 Matrix",
    "difficulty": "Medium",
    "description": "Given an `m x n` binary matrix `mat`, return _the distance of the nearest_ `0` _for each cell_. The distance between two adjacent cells is `1`.",
    "examples": [
      {
        "input": "mat = \\[\\[0,0,0\\],\\[0,1,0\\],\\[0,0,0\\]\\]",
        "output": "\\[\\[0,0,0\\],\\[0,1,0\\],\\[0,0,0\\]\\]"
      },
      {
        "input": "mat = \\[\\[0,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\]",
        "output": "\\[\\[0,0,0\\],\\[0,1,0\\],\\[1,2,1\\]\\]"
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 104`",
      "`1 <= m  n <= 104`",
      "`mat[i][j]` is either `0` or `1`.",
      "There is at least one `0` in `mat`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "543",
    "slug": "diameter-of-binary-tree",
    "title": "Diameter of Binary Tree",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, return _the length of the **diameter** of the tree_. The **diameter** of a binary tree is the **length** of the longest path between any two nodes in a tree. This path may or may not pass through the `root`. The **length** of a path between two nodes is represented by the number of edges between them.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5\\]",
        "output": "3",
        "explanation": "3 is the length of the path \\[4,2,1,3\\] or \\[5,2,1,3\\]."
      },
      {
        "input": "root = \\[1,2\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "544",
    "slug": "output-contest-matches",
    "title": "Output Contest Matches",
    "difficulty": "Medium",
    "description": "During the NBA playoffs, we always set the rather strong team to play with the rather weak team, like make the rank `1` team play with the rank `nth` team, which is a good strategy to make the contest more interesting. Given `n` teams, return _their final contest matches in the form of a string_. The `n` teams are labeled from `1` to `n`, which represents their initial rank (i.e., Rank `1` is the strongest team and Rank `n` is the weakest team). We will use parentheses `'('`, and `')'` and commas `','` to represent the contest team pairing. We use the parentheses for pairing and the commas for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.",
    "examples": [
      {
        "input": "n = 4",
        "output": "\"((1,4),(2,3)) \"",
        "explanation": ""
      },
      {
        "input": "n = 8",
        "output": "\"(((1,8),(4,5)),((2,7),(3,6))) \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == 2x` where `x` in in the range `[1, 12]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "545",
    "slug": "boundary-of-binary-tree",
    "title": "Boundary of Binary Tree",
    "difficulty": "Medium",
    "description": "The **boundary** of a binary tree is the concatenation of the **root**, the **left boundary**, the **leaves** ordered from left-to-right, and the **reverse order** of the **right boundary**. The **left boundary** is the set of nodes defined by the following: *  The root node's left child is in the left boundary. If the root does not have a left child, then the left boundary is **empty**. *  If a node in the left boundary and has a left child, then the left child is in the left boundary. *  If a node is in the left boundary, has **no** left child, but has a right child, then the right child is in the left boundary. *  The leftmost leaf is **not** in the left boundary. The **right boundary** is similar to the **left boundary**, except it is the right side of the root's right subtree. Again, the leaf is **not** part of the **right boundary**, and the **right boundary** is empty if the root does not have a right child. The **leaves** are nodes that do not have any children. For this problem, the root is **not** a leaf. Given the `root` of a binary tree, return _the values of its **boundary**_.",
    "examples": [
      {
        "input": "root = \\[1,null,2,3,4\\]",
        "output": "\\[1,3,4,2\\]",
        "explanation": ""
      },
      {
        "input": "root = \\[1,2,3,4,5,6,null,null,null,7,8,9,10\\]",
        "output": "\\[1,2,4,7,8,9,10,6,3\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "546",
    "slug": "remove-boxes",
    "title": "Remove Boxes",
    "difficulty": "Hard",
    "description": "You are given several `boxes` with different colors represented by different positive numbers. You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points. Return _the maximum points you can get_.",
    "examples": [
      {
        "input": "boxes = \\[1,3,2,2,2,3,4,3,1\\]",
        "output": "23",
        "explanation": ""
      },
      {
        "input": "boxes = \\[1,1,1\\]",
        "output": "9"
      },
      {
        "input": "boxes = \\[1\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= boxes.length <= 100`",
      "`1 <= boxes[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "547",
    "slug": "number-of-provinces",
    "title": "Number of Provinces",
    "difficulty": "Medium",
    "description": "There are `n` cities. Some of them are connected, while some are not. If city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`. A **province** is a group of directly or indirectly connected cities and no other cities outside of the group. You are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isConnected[i][j] = 0` otherwise. Return _the total number of **provinces**_.",
    "examples": [
      {
        "input": "isConnected = \\[\\[1,1,0\\],\\[1,1,0\\],\\[0,0,1\\]\\]",
        "output": "2"
      },
      {
        "input": "isConnected = \\[\\[1,0,0\\],\\[0,1,0\\],\\[0,0,1\\]\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= n <= 200`",
      "`n == isConnected.length`",
      "`n == isConnected[i].length`",
      "`isConnected[i][j]` is `1` or `0`.",
      "`isConnected[i][i] == 1`",
      "`isConnected[i][j] == isConnected[j][i]`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "548",
    "slug": "split-array-with-equal-sum",
    "title": "Split Array with Equal Sum",
    "difficulty": "Hard",
    "description": "Given an integer array `nums` of length `n`, return `true` if there is a triplet `(i, j, k)` which satisfies the following conditions: *  `0 < i, i + 1 < j, j + 1 < k < n - 1` *  The sum of subarrays `(0, i - 1)`, `(i + 1, j - 1)`, `(j + 1, k - 1)` and `(k + 1, n - 1)` is equal. A subarray `(l, r)` represents a slice of the original array starting from the element indexed `l` to the element indexed `r`.",
    "examples": [
      {
        "input": "nums = \\[1,2,1,2,1,2,1\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,1,2,1,2,1,2\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 2000`",
      "`-106 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "549",
    "slug": "binary-tree-longest-consecutive-sequence-ii",
    "title": "Binary Tree Longest Consecutive Sequence II",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the length of the longest consecutive path in the tree_. A consecutive path is a path where the values of the consecutive nodes in the path differ by one. This path can be either increasing or decreasing. *  For example, `[1,2,3,4]` and `[4,3,2,1]` are both considered valid, but the path `[1,2,4,3]` is not valid. On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.",
    "examples": [
      {
        "input": "root = \\[1,2,3\\]",
        "output": "2",
        "explanation": "The longest consecutive path is \\[1, 2\\] or \\[2, 1\\]."
      },
      {
        "input": "root = \\[2,1,3\\]",
        "output": "3",
        "explanation": "The longest consecutive path is \\[1, 2, 3\\] or \\[3, 2, 1\\]."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 3  104]`.",
      "`-3  104 <= Node.val <= 3  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "551",
    "slug": "student-attendance-record-i",
    "title": "Student Attendance Record I",
    "difficulty": "Easy",
    "description": "You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters: *  `'A'`: Absent. *  `'L'`: Late. *  `'P'`: Present. The student is eligible for an attendance award if they meet **both** of the following criteria: *  The student was absent (`'A'`) for **strictly** fewer than 2 days **total**. *  The student was **never** late (`'L'`) for 3 or more **consecutive** days. Return `true` _if the student is eligible for an attendance award, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "s =  \"PPALLP \"",
        "output": "true",
        "explanation": "The student has fewer than 2 absences and was never late 3 or more consecutive days."
      },
      {
        "input": "s =  \"PPALLL \"",
        "output": "false",
        "explanation": "The student was late 3 consecutive days in the last 3 days, so is not eligible for the award."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s[i]` is either `'A'`, `'L'`, or `'P'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "552",
    "slug": "student-attendance-record-ii",
    "title": "Student Attendance Record II",
    "difficulty": "Hard",
    "description": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters: *  `'A'`: Absent. *  `'L'`: Late. *  `'P'`: Present. Any student is eligible for an attendance award if they meet **both** of the following criteria: *  The student was absent (`'A'`) for **strictly** fewer than 2 days **total**. *  The student was **never** late (`'L'`) for 3 or more **consecutive** days. Given an integer `n`, return _the **number** of possible attendance records of length_ `n` _that make a student eligible for an attendance award. The answer may be very large, so return it **modulo**_ `109 + 7`.",
    "examples": [
      {
        "input": "n = 2",
        "output": "8",
        "explanation": "There are 8 records with length 2 that are eligible for an award:"
      },
      {
        "input": "n = 1",
        "output": "3"
      },
      {
        "input": "n = 10101",
        "output": "183236316"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "553",
    "slug": "optimal-division",
    "title": "Optimal Division",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. The adjacent integers in `nums` will perform the float division. *  For example, for `nums = [2,3,4]`, we will evaluate the expression `\"2/3/4 \"`. However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum. Return _the corresponding expression that has the maximum value in string format_.",
    "examples": [
      {
        "input": "nums = \\[1000,100,10,2\\]",
        "output": "\"1000/(100/10/2) \"",
        "explanation": "1000/(100/10/2) = 1000/((100/10)/2) = 200"
      },
      {
        "input": "nums = \\[2,3,4\\]",
        "output": "\"2/(3/4) \"",
        "explanation": "(2/(3/4)) = 8/3 = 2.667"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 10`",
      "`2 <= nums[i] <= 1000`",
      "There is only one optimal division for the given input."
    ],
    "note": "your expression should not contain redundant parenthesis.",
    "follow_up": null
  },
  {
    "id": "554",
    "slug": "brick-wall",
    "title": "Brick Wall",
    "difficulty": "Medium",
    "description": "There is a rectangular brick wall in front of you with `n` rows of bricks. The `ith` row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same. Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. Given the 2D array `wall` that contains the information about the wall, return _the minimum number of crossed bricks after drawing such a vertical line_.",
    "examples": [
      {
        "input": "wall = \\[\\[1,2,2,1\\],\\[3,1,2\\],\\[1,3,2\\],\\[2,4\\],\\[3,1,2\\],\\[1,3,1,1\\]\\]",
        "output": "2"
      },
      {
        "input": "wall = \\[\\[1\\],\\[1\\],\\[1\\]\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`n == wall.length`",
      "`1 <= n <= 104`",
      "`1 <= wall[i].length <= 104`",
      "`1 <= sum(wall[i].length) <= 2  104`",
      "`sum(wall[i])` is the same for each row `i`.",
      "`1 <= wall[i][j] <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "555",
    "slug": "split-concatenated-strings",
    "title": "Split Concatenated Strings",
    "difficulty": "Medium",
    "description": "You are given an array of strings `strs`. You could concatenate these strings together into a loop, where for each string, you could choose to reverse it or not. Among all the possible loops Return _the lexicographically largest string after cutting the loop, which will make the looped string into a regular one_. Specifically, to find the lexicographically largest string, you need to experience two phases: 1. Concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given. 2. Cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint. And your job is to find the lexicographically largest one among all the possible regular strings.",
    "examples": [
      {
        "input": "strs = \\[ \"abc \", \"xyz \"\\]",
        "output": "\"zyxcba \"",
        "explanation": "You can get the looped string  \"-abcxyz- \",  \"-abczyx- \",  \"-cbaxyz- \",  \"-cbazyx- \", where '-' represents the looped status."
      },
      {
        "input": "strs = \\[ \"abc \"\\]",
        "output": "\"cba \""
      }
    ],
    "constraints": [
      "`1 <= strs.length <= 1000`",
      "`1 <= strs[i].length <= 1000`",
      "`1 <= sum(strs[i].length) <= 1000`",
      "`strs[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "556",
    "slug": "next-greater-element-iii",
    "title": "Next Greater Element III",
    "difficulty": "Medium",
    "description": "Given a positive integer `n`, find _the smallest integer which has exactly the same digits existing in the integer_ `n` _and is greater in value than_ `n`. If no such positive integer exists, return `-1`. **Note** that the returned integer should fit in **32-bit integer**, if there is a valid answer but it does not fit in **32-bit integer**, return `-1`.",
    "examples": [
      {
        "input": "n = 12",
        "output": "21"
      },
      {
        "input": "n = 21",
        "output": "-1"
      }
    ],
    "constraints": [
      "`1 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "557",
    "slug": "reverse-words-in-a-string-iii",
    "title": "Reverse Words in a String III",
    "difficulty": "Easy",
    "description": "Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.",
    "examples": [
      {
        "input": "s = \"Let's take LeetCode contest\"",
        "output": "\"s'teL ekat edoCteeL tsetnoc\""
      },
      {
        "input": "s = \"God Ding\"",
        "output": "\"doG gniD\""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5  104`",
      "`s` contains printable ASCII characters.",
      "`s` does not contain any leading or trailing spaces.",
      "There is at least one word in `s`.",
      "All the words in `s` are separated by a single space."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "558",
    "slug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
    "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
    "difficulty": "Medium",
    "description": "A Binary Matrix is a matrix in which all the elements are either **0** or **1**. Given `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix. Return _a Quad-Tree_ representing the `n * n` binary matrix which is the result of **logical bitwise OR** of the two binary matrixes represented by `quadTree1` and `quadTree2`. Notice that you can assign the value of a node to **True** or **False** when `isLeaf` is **False**, and both are **accepted** in the answer. A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes: *  `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. *  `isLeaf`: True if the node is leaf node on the tree or False if the node has the four children. class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; } We can construct a Quad-Tree from a two-dimensional area using the following steps: 1. If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop. 2. If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo. 3. Recurse for each of the children with the proper sub-grid. If you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree). **Quad-Tree format:** The input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below. It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`. If the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.",
    "examples": [
      {
        "input": "quadTree1 = \\[\\[0,1\\],\\[1,1\\],\\[1,1\\],\\[1,0\\],\\[1,0\\]\\]",
        "output": "\\[\\[0,0\\],\\[1,1\\],\\[1,1\\],\\[1,1\\],\\[1,0\\]\\]",
        "explanation": "quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree."
      },
      {
        "input": "quadTree1 = \\[\\[1,0\\]\\], quadTree2 = \\[\\[1,0\\]\\]",
        "output": "\\[\\[1,0\\]\\]",
        "explanation": "Each tree represents a binary matrix of size 1\\*1. Each matrix contains only zero."
      }
    ],
    "constraints": [
      "`quadTree1` and `quadTree2` are both valid Quad-Trees each representing a `n  n` grid.",
      "`n == 2x` where `0 <= x <= 9`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "559",
    "slug": "maximum-depth-of-n-ary-tree",
    "title": "Maximum Depth of N-ary Tree",
    "difficulty": "Easy",
    "description": "Given a n-ary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. _Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._",
    "examples": [
      {
        "input": "root = \\[1,null,3,2,4,null,5,6\\]",
        "output": "3"
      },
      {
        "input": "root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]",
        "output": "5"
      }
    ],
    "constraints": [
      "The total number of nodes is in the range `[0, 104]`.",
      "The depth of the n-ary tree is less than or equal to `1000`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "560",
    "slug": "subarray-sum-equals-k",
    "title": "Subarray Sum Equals K",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums` and an integer `k`, return _the total number of subarrays whose sum equals to_ `k`. A subarray is a contiguous **non-empty** sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[1,1,1\\], k = 2",
        "output": "2"
      },
      {
        "input": "nums = \\[1,2,3\\], k = 3",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  104`",
      "`-1000 <= nums[i] <= 1000`",
      "`-107 <= k <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "561",
    "slug": "array-partition",
    "title": "Array Partition",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is **maximized**. Return _the maximized sum_.",
    "examples": [
      {
        "input": "nums = \\[1,4,3,2\\]",
        "output": "4",
        "explanation": "All possible pairings (ignoring the ordering of elements) are:"
      },
      {
        "input": "nums = \\[6,2,6,5,1,2\\]",
        "output": "9",
        "explanation": "The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9."
      }
    ],
    "constraints": [
      "`1 <= n <= 104`",
      "`nums.length == 2  n`",
      "`-104 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "562",
    "slug": "longest-line-of-consecutive-one-in-matrix",
    "title": "Longest Line of Consecutive One in Matrix",
    "difficulty": "Medium",
    "description": "Given an `m x n` binary matrix `mat`, return _the length of the longest line of consecutive one in the matrix_. The line could be horizontal, vertical, diagonal, or anti-diagonal.",
    "examples": [
      {
        "input": "mat = \\[\\[0,1,1,0\\],\\[0,1,1,0\\],\\[0,0,0,1\\]\\]",
        "output": "3"
      },
      {
        "input": "mat = \\[\\[1,1,1,1\\],\\[0,1,1,0\\],\\[0,0,0,1\\]\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 104`",
      "`1 <= m  n <= 104`",
      "`mat[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "563",
    "slug": "binary-tree-tilt",
    "title": "Binary Tree Tilt",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, return _the sum of every tree node's **tilt**._ The **tilt** of a tree node is the **absolute difference** between the sum of all left subtree node **values** and all right subtree node **values**. If a node does not have a left child, then the sum of the left subtree node **values** is treated as `0`. The rule is similar if the node does not have a right child.",
    "examples": [
      {
        "input": "root = \\[1,2,3\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "root = \\[4,2,9,3,5,null,7\\]",
        "output": "15",
        "explanation": ""
      },
      {
        "input": "root = \\[21,7,14,1,1,2,2,3,3\\]",
        "output": "9"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "564",
    "slug": "find-the-closest-palindrome",
    "title": "Find the Closest Palindrome",
    "difficulty": "Hard",
    "description": "Given a string `n` representing an integer, return _the closest integer (not including itself), which is a palindrome_. If there is a tie, return _**the smaller one**_. The closest is defined as the absolute difference minimized between two integers.",
    "examples": [
      {
        "input": "n =  \"123 \"",
        "output": "\"121 \""
      },
      {
        "input": "n =  \"1 \"",
        "output": "\"0 \"",
        "explanation": "0 and 2 are the closest palindromes but we return the smallest which is 0."
      }
    ],
    "constraints": [
      "`1 <= n.length <= 18`",
      "`n` consists of only digits.",
      "`n` does not have leading zeros.",
      "`n` is representing an integer in the range `[1, 1018 - 1]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "565",
    "slug": "array-nesting",
    "title": "Array Nesting",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` of length `n` where `nums` is a permutation of the numbers in the range `[0, n - 1]`. You should build a set `s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... }` subjected to the following rule: *  The first element in `s[k]` starts with the selection of the element `nums[k]` of `index = k`. *  The next element in `s[k]` should be `nums[nums[k]]`, and then `nums[nums[nums[k]]]`, and so on. *  We stop adding right before a duplicate element occurs in `s[k]`. Return _the longest length of a set_ `s[k]`.",
    "examples": [
      {
        "input": "nums = \\[5,4,0,3,1,6,2\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "nums = \\[0,1,2\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] < nums.length`",
      "All the values of `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "566",
    "slug": "reshape-the-matrix",
    "title": "Reshape the Matrix",
    "difficulty": "Easy",
    "description": "In MATLAB, there is a handy function called `reshape` which can reshape an `m x n` matrix into a new one with a different size `r x c` keeping its original data. You are given an `m x n` matrix `mat` and two integers `r` and `c` representing the number of rows and the number of columns of the wanted reshaped matrix. The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were. If the `reshape` operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.",
    "examples": [
      {
        "input": "mat = \\[\\[1,2\\],\\[3,4\\]\\], r = 1, c = 4",
        "output": "\\[\\[1,2,3,4\\]\\]"
      },
      {
        "input": "mat = \\[\\[1,2\\],\\[3,4\\]\\], r = 2, c = 4",
        "output": "\\[\\[1,2\\],\\[3,4\\]\\]"
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 100`",
      "`-1000 <= mat[i][j] <= 1000`",
      "`1 <= r, c <= 300`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "567",
    "slug": "permutation-in-string",
    "title": "Permutation in String",
    "difficulty": "Medium",
    "description": "Given two strings `s1` and `s2`, return `true` _if_ `s2` _contains a permutation of_ `s1`_, or_ `false` _otherwise_. In other words, return `true` if one of `s1`'s permutations is the substring of `s2`.",
    "examples": [
      {
        "input": "s1 =  \"ab \", s2 =  \"eidbaooo \"",
        "output": "true",
        "explanation": "s2 contains one permutation of s1 ( \"ba \")."
      },
      {
        "input": "s1 =  \"ab \", s2 =  \"eidboaoo \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= s1.length, s2.length <= 104`",
      "`s1` and `s2` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "568",
    "slug": "maximum-vacation-days",
    "title": "Maximum Vacation Days",
    "difficulty": "Hard",
    "description": "LeetCode wants to give one of its best employees the option to travel among `n` cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow. Rules and restrictions: 1. You can only travel among `n` cities, represented by indexes from `0` to `n - 1`. Initially, you are in the city indexed `0` on **Monday**. 2. The cities are connected by flights. The flights are represented as an `n x n` matrix (not necessarily symmetrical), called `flights` representing the airline status from the city `i` to the city `j`. If there is no flight from the city `i` to the city `j`, `flights[i][j] == 0`; Otherwise, `flights[i][j] == 1`. Also, `flights[i][i] == 0` for all `i`. 3. You totally have `k` weeks (each week has **seven days**) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we do not consider the impact of flight time. 4. For each city, you can only have restricted vacation days in different weeks, given an `n x k` matrix called `days` representing this relationship. For the value of `days[i][j]`, it represents the maximum days you could take a vacation in the city `i` in the week `j`. 5. You could stay in a city beyond the number of vacation days, but you should work on the extra days, which will not be counted as vacation days. 6. If you fly from city `A` to city `B` and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city `B` in that week. 7. We do not consider the impact of flight hours on the calculation of vacation days. Given the two matrices `flights` and `days`, return _the maximum vacation days you could take during_ `k` _weeks_.",
    "examples": [
      {
        "input": "flights = \\[\\[0,1,1\\],\\[1,0,1\\],\\[1,1,0\\]\\], days = \\[\\[1,3,1\\],\\[6,0,3\\],\\[3,3,3\\]\\]",
        "output": "12",
        "explanation": ""
      },
      {
        "input": "flights = \\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\], days = \\[\\[1,1,1\\],\\[7,7,7\\],\\[7,7,7\\]\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "flights = \\[\\[0,1,1\\],\\[1,0,1\\],\\[1,1,0\\]\\], days = \\[\\[7,0,0\\],\\[0,7,0\\],\\[0,0,7\\]\\]",
        "output": "21",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == flights.length`",
      "`n == flights[i].length`",
      "`n == days.length`",
      "`k == days[i].length`",
      "`1 <= n, k <= 100`",
      "`flights[i][j]` is either `0` or `1`.",
      "`0 <= days[i][j] <= 7`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "572",
    "slug": "subtree-of-another-tree",
    "title": "Subtree of Another Tree",
    "difficulty": "Easy",
    "description": "Given the roots of two binary trees `root` and `subRoot`, return `true` if there is a subtree of `root` with the same structure and node values of `subRoot` and `false` otherwise. A subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.",
    "examples": [
      {
        "input": "root = \\[3,4,5,1,2\\], subRoot = \\[4,1,2\\]",
        "output": "true"
      },
      {
        "input": "root = \\[3,4,5,1,2,null,null,null,null,0\\], subRoot = \\[4,1,2\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the `root` tree is in the range `[1, 2000]`.",
      "The number of nodes in the `subRoot` tree is in the range `[1, 1000]`.",
      "`-104 <= root.val <= 104`",
      "`-104 <= subRoot.val <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "573",
    "slug": "squirrel-simulation",
    "title": "Squirrel Simulation",
    "difficulty": "Medium",
    "description": "You are given two integers `height` and `width` representing a garden of size `height x width`. You are also given: *  an array `tree` where `tree = [treer, treec]` is the position of the tree in the garden, *  an array `squirrel` where `squirrel = [squirrelr, squirrelc]` is the position of the squirrel in the garden, *  and an array `nuts` where `nuts[i] = [nutir, nutic]` is the position of the `ith` nut in the garden. The squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell. Return _the **minimal distance** for the squirrel to collect all the nuts and put them under the tree one by one_. The **distance** is the number of moves.",
    "examples": [
      {
        "input": "height = 5, width = 7, tree = \\[2,2\\], squirrel = \\[4,4\\], nuts = \\[\\[3,0\\], \\[2,5\\]\\]",
        "output": "12",
        "explanation": "The squirrel should go to the nut at \\[2, 5\\] first to achieve a minimal distance."
      },
      {
        "input": "height = 1, width = 3, tree = \\[0,1\\], squirrel = \\[0,0\\], nuts = \\[\\[0,2\\]\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= height, width <= 100`",
      "`tree.length == 2`",
      "`squirrel.length == 2`",
      "`1 <= nuts.length <= 5000`",
      "`nuts[i].length == 2`",
      "`0 <= treer, squirrelr, nutir <= height`",
      "`0 <= treec, squirrelc, nutic <= width`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "575",
    "slug": "distribute-candies",
    "title": "Distribute Candies",
    "difficulty": "Easy",
    "description": "Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor. The doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. Given the integer array `candyType` of length `n`, return _the **maximum** number of different types of candies she can eat if she only eats_ `n / 2` _of them_.",
    "examples": [
      {
        "input": "candyType = \\[1,1,2,2,3,3\\]",
        "output": "3",
        "explanation": "Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type."
      },
      {
        "input": "candyType = \\[1,1,2,3\\]",
        "output": "2",
        "explanation": "Alice can only eat 4 / 2 = 2 candies. Whether she eats types \\[1,2\\], \\[1,3\\], or \\[2,3\\], she still can only eat 2 different types."
      },
      {
        "input": "candyType = \\[6,6,6,6\\]",
        "output": "1",
        "explanation": "Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type."
      }
    ],
    "constraints": [
      "`n == candyType.length`",
      "`2 <= n <= 104`",
      "`n` is even.",
      "`-105 <= candyType[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "576",
    "slug": "out-of-boundary-paths",
    "title": "Out of Boundary Paths",
    "difficulty": "Medium",
    "description": "There is an `m x n` grid with a ball. The ball is initially at the position `[startRow, startColumn]`. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply **at most** `maxMove` moves to the ball. Given the five integers `m`, `n`, `maxMove`, `startRow`, `startColumn`, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0",
        "output": "6"
      },
      {
        "input": "m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1",
        "output": "12"
      }
    ],
    "constraints": [
      "`1 <= m, n <= 50`",
      "`0 <= maxMove <= 50`",
      "`0 <= startRow < m`",
      "`0 <= startColumn < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "581",
    "slug": "shortest-unsorted-continuous-subarray",
    "title": "Shortest Unsorted Continuous Subarray",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, you need to find one **continuous subarray** that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order. Return _the shortest such subarray and output its length_.",
    "examples": [
      {
        "input": "nums = \\[2,6,4,8,10,9,15\\]",
        "output": "5",
        "explanation": "You need to sort \\[6, 4, 8, 10, 9\\] in ascending order to make the whole array sorted in ascending order."
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "0"
      },
      {
        "input": "nums = \\[1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-105 <= nums[i] <= 105`",
      "Follow up: Can you solve it in `O(n)` time complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "582",
    "slug": "kill-process",
    "title": "Kill Process",
    "difficulty": "Medium",
    "description": "You have `n` processes forming a rooted tree structure. You are given two integer arrays `pid` and `ppid`, where `pid[i]` is the ID of the `ith` process and `ppid[i]` is the ID of the `ith` process's parent process. Each process has only **one parent process** but may have multiple children processes. Only one process has `ppid[i] = 0`, which means this process has **no parent process** (the root of the tree). When a process is **killed**, all of its children processes will also be killed. Given an integer `kill` representing the ID of a process you want to kill, return _a list of the IDs of the processes that will be killed. You may return the answer in **any order**._",
    "examples": [
      {
        "input": "pid = \\[1,3,10,5\\], ppid = \\[3,0,5,3\\], kill = 5",
        "output": "\\[5,10\\]",
        "explanation": "The processes colored in red are the processes that should be killed."
      },
      {
        "input": "pid = \\[1\\], ppid = \\[0\\], kill = 1",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "`n == pid.length`",
      "`n == ppid.length`",
      "`1 <= n <= 5  104`",
      "`1 <= pid[i] <= 5  104`",
      "`0 <= ppid[i] <= 5  104`",
      "Only one process has no parent.",
      "All the values of `pid` are unique.",
      "`kill` is guaranteed to be in `pid`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "583",
    "slug": "delete-operation-for-two-strings",
    "title": "Delete Operation for Two Strings",
    "difficulty": "Medium",
    "description": "Given two strings `word1` and `word2`, return _the minimum number of **steps** required to make_ `word1` _and_ `word2` _the same_. In one **step**, you can delete exactly one character in either string.",
    "examples": [
      {
        "input": "word1 =  \"sea \", word2 =  \"eat \"",
        "output": "2",
        "explanation": "You need one step to make  \"sea \" to  \"ea \" and another step to make  \"eat \" to  \"ea \"."
      },
      {
        "input": "word1 =  \"leetcode \", word2 =  \"etco \"",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= word1.length, word2.length <= 500`",
      "`word1` and `word2` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "587",
    "slug": "erect-the-fence",
    "title": "Erect the Fence",
    "difficulty": "Hard",
    "description": "You are given an array `trees` where `trees[i] = [xi, yi]` represents the location of a tree in the garden. Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if **all the trees are enclosed**. Return _the coordinates of trees that are exactly located on the fence perimeter_. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "trees = \\[\\[1,1\\],\\[2,2\\],\\[2,0\\],\\[2,4\\],\\[3,3\\],\\[4,2\\]\\]",
        "output": "\\[\\[1,1\\],\\[2,0\\],\\[4,2\\],\\[3,3\\],\\[2,4\\]\\]",
        "explanation": "All the trees will be on the perimeter of the fence except the tree at \\[2, 2\\], which will be inside the fence."
      },
      {
        "input": "trees = \\[\\[1,2\\],\\[2,2\\],\\[4,2\\]\\]",
        "output": "\\[\\[4,2\\],\\[2,2\\],\\[1,2\\]\\]",
        "explanation": "The fence forms a line that passes through all the trees."
      }
    ],
    "constraints": [
      "`1 <= trees.length <= 3000`",
      "`trees[i].length == 2`",
      "`0 <= xi, yi <= 100`",
      "All the given positions are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "588",
    "slug": "design-in-memory-file-system",
    "title": "Design In-Memory File System",
    "difficulty": "Hard",
    "description": "Design a data structure that simulates an in-memory file system. Implement the FileSystem class: *  `FileSystem()` Initializes the object of the system. *  `List ls(String path)` *  If `path` is a file path, returns a list that only contains this file's name. *  If `path` is a directory path, returns the list of file and directory names **in this directory**. The answer should in **lexicographic order**. *  `void mkdir(String path)` Makes a new directory according to the given `path`. The given directory path does not exist. If the middle directories in the path do not exist, you should create them as well. *  `void addContentToFile(String filePath, String content)` *  If `filePath` does not exist, creates that file containing given `content`. *  If `filePath` already exists, appends the given `content` to original content. *  `String readContentFromFile(String filePath)` Returns the content in the file at `filePath`.",
    "examples": [],
    "constraints": [
      "`1 <= path.length, filePath.length <= 100`",
      "`path` and `filePath` are absolute paths which begin with `'/'` and do not end with `'/'` except that the path is just `\"/ \"`.",
      "You can assume that all directory names and file names only contain lowercase letters, and the same names will not exist in the same directory.",
      "You can assume that all operations will be passed valid parameters, and users will not attempt to retrieve file content or list a directory or file that does not exist.",
      "`1 <= content.length <= 50`",
      "At most `300` calls will be made to `ls`, `mkdir`, `addContentToFile`, and `readContentFromFile`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "589",
    "slug": "n-ary-tree-preorder-traversal",
    "title": "N-ary Tree Preorder Traversal",
    "difficulty": "Easy",
    "description": "Given the `root` of an n-ary tree, return _the preorder traversal of its nodes' values_. Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)",
    "examples": [
      {
        "input": "root = \\[1,null,3,2,4,null,5,6\\]",
        "output": "\\[1,3,5,6,2,4\\]"
      },
      {
        "input": "root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]",
        "output": "\\[1,2,3,6,7,11,14,4,8,12,5,9,13,10\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`0 <= Node.val <= 104`",
      "The height of the n-ary tree is less than or equal to `1000`.",
      "Follow up: Recursive solution is trivial, could you do it iteratively?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "590",
    "slug": "n-ary-tree-postorder-traversal",
    "title": "N-ary Tree Postorder Traversal",
    "difficulty": "Easy",
    "description": "Given the `root` of an n-ary tree, return _the postorder traversal of its nodes' values_. Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)",
    "examples": [
      {
        "input": "root = \\[1,null,3,2,4,null,5,6\\]",
        "output": "\\[5,6,3,2,4,1\\]"
      },
      {
        "input": "root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]",
        "output": "\\[2,6,14,11,7,3,12,8,4,13,9,10,5,1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`0 <= Node.val <= 104`",
      "The height of the n-ary tree is less than or equal to `1000`.",
      "Follow up: Recursive solution is trivial, could you do it iteratively?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "591",
    "slug": "tag-validator",
    "title": "Tag Validator",
    "difficulty": "Hard",
    "description": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold: 1. The code must be wrapped in a **valid closed tag**. Otherwise, the code is invalid. 2. A **closed tag** (not necessarily valid) has exactly the following format : `TAG_CONTENT`. Among them, is the start tag, and is the end tag. The TAG\\_NAME in start and end tags should be the same. A closed tag is **valid** if and only if the TAG\\_NAME and TAG\\_CONTENT are valid. 3. A **valid** `TAG_NAME` only contain **upper-case letters**, and has length in range \\[1,9\\]. Otherwise, the `TAG_NAME` is **invalid**. 4. A **valid** `TAG_CONTENT` may contain other **valid closed tags**, **cdata** and any characters (see note1) **EXCEPT** unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG\\_NAME. Otherwise, the `TAG_CONTENT` is **invalid**. 5. A start tag is unmatched if no end tag exists with the same TAG\\_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested. 6. A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or ``, all the subsequent characters until the next `>` should be parsed as TAG_NAME (not necessarily valid).`` ``` *  The cdata has the following format : . The range of `CDATA_CONTENT` is defined as the characters between ``and the **first subsequent** `]]>`.`` ``*  `CDATA_CONTENT` may contain **any characters**. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as **regular characters**.`` ```",
    "examples": [],
    "constraints": [],
    "note": null,
    "follow_up": null
  },
  {
    "id": "592",
    "slug": "fraction-addition-and-subtraction",
    "title": "Fraction Addition and Subtraction",
    "difficulty": "Medium",
    "description": "Given a string `expression` representing an expression of fraction addition and subtraction, return the calculation result in string format. The final result should be an [irreducible fraction](https://en.wikipedia.org/wiki/Irreducible_fraction). If your final result is an integer, change it to the format of a fraction that has a denominator `1`. So in this case, `2` should be converted to `2/1`.",
    "examples": [
      {
        "input": "expression =  \"-1/2+1/2 \"",
        "output": "\"0/1 \""
      },
      {
        "input": "expression =  \"-1/2+1/2+1/3 \"",
        "output": "\"1/3 \""
      },
      {
        "input": "expression =  \"1/3-1/2 \"",
        "output": "\"-1/6 \""
      }
    ],
    "constraints": [
      "The input string only contains `'0'` to `'9'`, `'/'`, `'+'` and `'-'`. So does the output.",
      "Each fraction (input and output) has the format `\u00b1numerator/denominator`. If the first input fraction or the output is positive, then `'+'` will be omitted.",
      "The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range `[1, 10]`. If the denominator is `1`, it means this fraction is actually an integer in a fraction format defined above.",
      "The number of given fractions will be in the range `[1, 10]`.",
      "The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "593",
    "slug": "valid-square",
    "title": "Valid Square",
    "difficulty": "Medium",
    "description": "Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`, return `true` _if the four points construct a square_. The coordinate of a point `pi` is represented as `[xi, yi]`. The input is **not** given in any order. A **valid square** has four equal sides with positive length and four equal angles (90-degree angles).",
    "examples": [
      {
        "input": "p1 = \\[0,0\\], p2 = \\[1,1\\], p3 = \\[1,0\\], p4 = \\[0,1\\]",
        "output": "true"
      },
      {
        "input": "p1 = \\[0,0\\], p2 = \\[1,1\\], p3 = \\[1,0\\], p4 = \\[0,12\\]",
        "output": "false"
      },
      {
        "input": "p1 = \\[1,0\\], p2 = \\[-1,0\\], p3 = \\[0,1\\], p4 = \\[0,-1\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`p1.length == p2.length == p3.length == p4.length == 2`",
      "`-104 <= xi, yi <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "594",
    "slug": "longest-harmonious-subsequence",
    "title": "Longest Harmonious Subsequence",
    "difficulty": "Easy",
    "description": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is **exactly** `1`. Given an integer array `nums`, return _the length of its longest harmonious subsequence among all its possible subsequences_. A **subsequence** of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "nums = \\[1,3,2,2,5,2,3,7\\]",
        "output": "5",
        "explanation": "The longest harmonious subsequence is \\[3,2,2,2,3\\]."
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "2"
      },
      {
        "input": "nums = \\[1,1,1,1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  104`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "598",
    "slug": "range-addition-ii",
    "title": "Range Addition II",
    "difficulty": "Easy",
    "description": "You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`. Count and return _the number of maximum integers in the matrix after performing all the operations_.",
    "examples": [
      {
        "input": "m = 3, n = 3, ops = \\[\\[2,2\\],\\[3,3\\]\\]",
        "output": "4",
        "explanation": "The maximum integer in M is 2, and there are four of it in M. So return 4."
      },
      {
        "input": "m = 3, n = 3, ops = \\[\\[2,2\\],\\[3,3\\],\\[3,3\\],\\[3,3\\],\\[2,2\\],\\[3,3\\],\\[3,3\\],\\[3,3\\],\\[2,2\\],\\[3,3\\],\\[3,3\\],\\[3,3\\]\\]",
        "output": "4"
      },
      {
        "input": "m = 3, n = 3, ops = \\[\\]",
        "output": "9"
      }
    ],
    "constraints": [
      "`1 <= m, n <= 4  104`",
      "`0 <= ops.length <= 104`",
      "`ops[i].length == 2`",
      "`1 <= ai <= m`",
      "`1 <= bi <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "599",
    "slug": "minimum-index-sum-of-two-lists",
    "title": "Minimum Index Sum of Two Lists",
    "difficulty": "Easy",
    "description": "Given two arrays of strings `list1` and `list2`, find the **common strings with the least index sum**. A **common string** is a string that appeared in both `list1` and `list2`. A **common string with the least index sum** is a common string such that if it appeared at `list1[i]` and `list2[j]` then `i + j` should be the minimum value among all the other **common strings**. Return _all the **common strings with the least index sum**_. Return the answer in **any order**.",
    "examples": [
      {
        "input": "list1 = \\[ \"Shogun \", \"Tapioca Express \", \"Burger King \", \"KFC \"\\], list2 = \\[ \"Piatti \", \"The Grill at Torrey Pines \", \"Hungry Hunter Steakhouse \", \"Shogun \"\\]",
        "output": "\\[ \"Shogun \"\\]",
        "explanation": "The only common string is  \"Shogun \"."
      },
      {
        "input": "list1 = \\[ \"Shogun \", \"Tapioca Express \", \"Burger King \", \"KFC \"\\], list2 = \\[ \"KFC \", \"Shogun \", \"Burger King \"\\]",
        "output": "\\[ \"Shogun \"\\]",
        "explanation": "The common string with the least index sum is  \"Shogun \" with index sum = (0 + 1) = 1."
      },
      {
        "input": "list1 = \\[ \"happy \", \"sad \", \"good \"\\], list2 = \\[ \"sad \", \"happy \", \"good \"\\]",
        "output": "\\[ \"sad \", \"happy \"\\]",
        "explanation": "There are three common strings:"
      }
    ],
    "constraints": [
      "`1 <= list1.length, list2.length <= 1000`",
      "`1 <= list1[i].length, list2[i].length <= 30`",
      "`list1[i]` and `list2[i]` consist of spaces `' '` and English letters.",
      "All the strings of `list1` are unique.",
      "All the strings of `list2` are unique.",
      "There is at least a common string between `list1` and `list2`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "600",
    "slug": "non-negative-integers-without-consecutive-ones",
    "title": "Non-negative Integers without Consecutive Ones",
    "difficulty": "Hard",
    "description": "Given a positive integer `n`, return the number of the integers in the range `[0, n]` whose binary representations **do not** contain consecutive ones.",
    "examples": [
      {
        "input": "n = 5",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "2"
      },
      {
        "input": "n = 2",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "604",
    "slug": "design-compressed-string-iterator",
    "title": "Design Compressed String Iterator",
    "difficulty": "Easy",
    "description": "Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string. Implement the StringIterator class: *  `next()` Returns **the next character** if the original string still has uncompressed characters, otherwise returns a **white space**. *  `hasNext()` Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns `false`.",
    "examples": [],
    "constraints": [
      "`1 <= compressedString.length <= 1000`",
      "`compressedString` consists of lower-case an upper-case English letters and digits.",
      "The number of a single character repetitions in `compressedString` is in the range `[1, 10^9]`",
      "At most `100` calls will be made to `next` and `hasNext`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "605",
    "slug": "can-place-flowers",
    "title": "Can Place Flowers",
    "difficulty": "Easy",
    "description": "You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in **adjacent** plots. Given an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return `true` _if_ `n` _new flowers can be planted in the_ `flowerbed` _without violating the no-adjacent-flowers rule and_ `false` _otherwise_.",
    "examples": [
      {
        "input": "flowerbed = \\[1,0,0,0,1\\], n = 1",
        "output": "true"
      },
      {
        "input": "flowerbed = \\[1,0,0,0,1\\], n = 2",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= flowerbed.length <= 2  104`",
      "`flowerbed[i]` is `0` or `1`.",
      "There are no two adjacent flowers in `flowerbed`.",
      "`0 <= n <= flowerbed.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "606",
    "slug": "construct-string-from-binary-tree",
    "title": "Construct String from Binary Tree",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it. Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4\\]",
        "output": "\"1(2(4))(3) \"",
        "explanation": "Originally, it needs to be  \"1(2(4)())(3()()) \", but you need to omit all the unnecessary empty parenthesis pairs. And it will be  \"1(2(4))(3) \""
      },
      {
        "input": "root = \\[1,2,3,null,4\\]",
        "output": "\"1(2()(4))(3) \"",
        "explanation": "Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-1000 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "609",
    "slug": "find-duplicate-file-in-system",
    "title": "Find Duplicate File in System",
    "difficulty": "Medium",
    "description": "Given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return _all the duplicate files in the file system in terms of their paths_. You may return the answer in **any order**. A group of duplicate files consists of at least two files that have the same content. A single directory info string in the input list has the following format: *  `\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content) \"` It means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory \"`root/d1/d2/.../dm \"`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means the directory is just the root directory. The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format: *  `\"directory_path/file_name.txt \"`",
    "examples": [
      {
        "input": "paths = \\[\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"\\]",
        "output": "\\[\\[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"\\],\\[\"root/a/1.txt\",\"root/c/3.txt\"\\]\\]"
      },
      {
        "input": "paths = \\[\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"\\]",
        "output": "\\[\\[\"root/a/2.txt\",\"root/c/d/4.txt\"\\],\\[\"root/a/1.txt\",\"root/c/3.txt\"\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= paths.length <= 2  104`",
      "`1 <= paths[i].length <= 3000`",
      "`1 <= sum(paths[i].length) <= 5  105`",
      "`paths[i]` consist of English letters, digits, `'/'`, `'.'`, `'('`, `')'`, and `' '`.",
      "You may assume no files or directories share the same name in the same directory.",
      "You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.",
      "Follow up:",
      "Imagine you are given a real file system, how will you search files? DFS or BFS?",
      "If the file content is very large (GB level), how will you modify your solution?",
      "If you can only read the file by 1kb each time, how will you modify your solution?",
      "What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?",
      "How to make sure the duplicated files you find are not false positive?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "611",
    "slug": "valid-triangle-number",
    "title": "Valid Triangle Number",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle_.",
    "examples": [
      {
        "input": "nums = \\[2,2,3,4\\]",
        "output": "3",
        "explanation": "Valid combinations are:"
      },
      {
        "input": "nums = \\[4,2,3,4\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "616",
    "slug": "add-bold-tag-in-string",
    "title": "Add Bold Tag in String",
    "difficulty": "Medium",
    "description": "You are given a string `s` and an array of strings `words`. You should add a closed pair of bold tag **and** to wrap the substrings in `s` that exist in `words`. *  If two such substrings overlap, you should wrap them together with only one pair of closed bold-tag. *  If two substrings wrapped by bold tags are consecutive, you should combine them. Return `s` _after adding the bold tags_.",
    "examples": [
      {
        "input": "s =  \"abcxyz123 \", words = \\[ \"abc \", \"123 \"\\]",
        "output": "\"**abc**xyz**123** \"",
        "explanation": "The two strings of words are substrings of s as following:  \"abcxyz123 \"."
      },
      {
        "input": "s =  \"aaabbb \", words = \\[ \"aa \", \"b \"\\]",
        "output": "\"**aaabbb** \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`0 <= words.length <= 100`",
      "`1 <= words[i].length <= 1000`",
      "`s` and `words[i]` consist of English letters and digits.",
      "All the values of `words` are unique."
    ],
    "note": "This question is the same as 758: [https://leetcode.com/problems/bold-words-in-string/](https://leetcode.com/problems/bold-words-in-string/)",
    "follow_up": null
  },
  {
    "id": "617",
    "slug": "merge-two-binary-trees",
    "title": "Merge Two Binary Trees",
    "difficulty": "Easy",
    "description": "You are given two binary trees `root1` and `root2`. Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree. Return _the merged tree_.",
    "examples": [
      {
        "input": "root1 = \\[1,3,2,5\\], root2 = \\[2,1,3,null,4,null,7\\]",
        "output": "\\[3,4,5,5,4,null,7\\]"
      },
      {
        "input": "root1 = \\[1\\], root2 = \\[1,2\\]",
        "output": "\\[2,2\\]"
      }
    ],
    "constraints": [
      "The number of nodes in both trees is in the range `[0, 2000]`.",
      "`-104 <= Node.val <= 104`"
    ],
    "note": "The merging process must start from the root nodes of both trees.",
    "follow_up": null
  },
  {
    "id": "621",
    "slug": "task-scheduler",
    "title": "Task Scheduler",
    "difficulty": "Medium",
    "description": "Given a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle. However, there is a non-negative integer `n` that represents the cooldown period between two **same tasks** (the same letter in the array), that is that there must be at least `n` units of time between any two same tasks. Return _the least number of units of times that the CPU will take to finish all the given tasks_.",
    "examples": [
      {
        "input": "tasks = \\[ \"A \", \"A \", \"A \", \"B \", \"B \", \"B \"\\], n = 2",
        "output": "8",
        "explanation": ""
      },
      {
        "input": "tasks = \\[ \"A \", \"A \", \"A \", \"B \", \"B \", \"B \"\\], n = 0",
        "output": "6",
        "explanation": "On this case any permutation of size 6 would work since n = 0."
      },
      {
        "input": "tasks = \\[ \"A \", \"A \", \"A \", \"A \", \"A \", \"A \", \"B \", \"C \", \"D \", \"E \", \"F \", \"G \"\\], n = 2",
        "output": "16",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= task.length <= 104`",
      "`tasks[i]` is upper-case English letter.",
      "The integer `n` is in the range `[0, 100]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "622",
    "slug": "design-circular-queue",
    "title": "Design Circular Queue",
    "difficulty": "Medium",
    "description": "Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer \". One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values. Implement the `MyCircularQueue` class: *  `MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`. *  `int Front()` Gets the front item from the queue. If the queue is empty, return `-1`. *  `int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`. *  `boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful. *  `boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful. *  `boolean isEmpty()` Checks whether the circular queue is empty or not. *  `boolean isFull()` Checks whether the circular queue is full or not. You must solve the problem without using the built-in queue data structure in your programming language.",
    "examples": [],
    "constraints": [
      "`1 <= k <= 1000`",
      "`0 <= value <= 1000`",
      "At most `3000` calls will be made to `enQueue`, `deQueue`, `Front`, `Rear`, `isEmpty`, and `isFull`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "623",
    "slug": "add-one-row-to-tree",
    "title": "Add One Row to Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`. Note that the `root` node is at depth `1`. The adding rule is: *  Given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root. *  `cur`'s original left subtree should be the left subtree of the new left subtree root. *  `cur`'s original right subtree should be the right subtree of the new right subtree root. *  If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.",
    "examples": [
      {
        "input": "root = \\[4,2,6,3,1,5\\], val = 1, depth = 2",
        "output": "\\[4,1,1,2,null,null,6,3,1,5\\]"
      },
      {
        "input": "root = \\[4,2,null,3,1\\], val = 1, depth = 3",
        "output": "\\[4,2,null,1,1,3,null,null,1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "The depth of the tree is in the range `[1, 104]`.",
      "`-100 <= Node.val <= 100`",
      "`-105 <= val <= 105`",
      "`1 <= depth <= the depth of tree + 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "624",
    "slug": "maximum-distance-in-arrays",
    "title": "Maximum Distance in Arrays",
    "difficulty": "Medium",
    "description": "You are given `m` `arrays`, where each array is sorted in **ascending order**. You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`. Return _the maximum distance_.",
    "examples": [
      {
        "input": "arrays = \\[\\[1,2,3\\],\\[4,5\\],\\[1,2,3\\]\\]",
        "output": "4",
        "explanation": "One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array."
      },
      {
        "input": "arrays = \\[\\[1\\],\\[1\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`m == arrays.length`",
      "`2 <= m <= 105`",
      "`1 <= arrays[i].length <= 500`",
      "`-104 <= arrays[i][j] <= 104`",
      "`arrays[i]` is sorted in ascending order.",
      "There will be at most `105` integers in all the arrays."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "625",
    "slug": "minimum-factorization",
    "title": "Minimum Factorization",
    "difficulty": "Medium",
    "description": "Given a positive integer num, return _the smallest positive integer_ `x` _whose multiplication of each digit equals_ `num`. If there is no answer or the answer is not fit in **32-bit** signed integer, return `0`.",
    "examples": [
      {
        "input": "num = 48",
        "output": "68"
      },
      {
        "input": "num = 15",
        "output": "35"
      }
    ],
    "constraints": [
      "`1 <= num <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "628",
    "slug": "maximum-product-of-three-numbers",
    "title": "Maximum Product of Three Numbers",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, _find three numbers whose product is maximum and return the maximum product_.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "6"
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "24"
      },
      {
        "input": "nums = \\[-1,-2,-3\\]",
        "output": "-6"
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 104`",
      "`-1000 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "629",
    "slug": "k-inverse-pairs-array",
    "title": "K Inverse Pairs Array",
    "difficulty": "Hard",
    "description": "For an integer array `nums`, an **inverse pair** is a pair of integers `[i, j]` where `0 <= i < j < nums.length` and `nums[i] > nums[j]`. Given two integers n and k, return the number of different arrays consist of numbers from `1` to `n` such that there are exactly `k` **inverse pairs**. Since the answer can be huge, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 3, k = 0",
        "output": "1",
        "explanation": "Only the array \\[1,2,3\\] which consists of numbers from 1 to 3 has exactly 0 inverse pairs."
      },
      {
        "input": "n = 3, k = 1",
        "output": "2",
        "explanation": "The array \\[1,3,2\\] and \\[2,1,3\\] have exactly 1 inverse pair."
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`",
      "`0 <= k <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "630",
    "slug": "course-schedule-iii",
    "title": "Course Schedule III",
    "difficulty": "Hard",
    "description": "There are `n` different online courses numbered from `1` to `n`. You are given an array `courses` where `courses[i] = [durationi, lastDayi]` indicate that the `ith` course should be taken **continuously** for `durationi` days and must be finished before or on `lastDayi`. You will start on the `1st` day and you cannot take two or more courses simultaneously. Return _the maximum number of courses that you can take_.",
    "examples": [
      {
        "input": "courses = \\[\\[100,200\\],\\[200,1300\\],\\[1000,1250\\],\\[2000,3200\\]\\]",
        "output": "3"
      },
      {
        "input": "courses = \\[\\[1,2\\]\\]",
        "output": "1"
      },
      {
        "input": "courses = \\[\\[3,2\\],\\[4,3\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= courses.length <= 104`",
      "`1 <= durationi, lastDayi <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "631",
    "slug": "design-excel-sum-formula",
    "title": "Design Excel Sum Formula",
    "difficulty": "Hard",
    "description": "Design the basic function of **Excel** and implement the function of the sum formula. Implement the `Excel` class: *  `Excel(int height, char width)` Initializes the object with the `height` and the `width` of the sheet. The sheet is an integer matrix `mat` of size `height x width` with the row index in the range `[1, height]` and the column index in the range `['A', width]`. All the values should be **zero** initially. *  `void set(int row, char column, int val)` Changes the value at `mat[row][column]` to be `val`. *  `int get(int row, char column)` Returns the value at `mat[row][column]`. *  `int sum(int row, char column, List numbers)` Sets the value at `mat[row][column]` to be the sum of cells represented by `numbers` and returns the value at `mat[row][column]`. This sum formula **should exist** until this cell is overlapped by another value or another sum formula. `numbers[i]` could be on the format: *  `\"ColRow \"` that represents a single cell. *  For example, `\"F7 \"` represents the cell `mat[7]['F']`. *  `\"ColRow1:ColRow2 \"` that represents a range of cells. The range will always be a rectangle where `\"ColRow1 \"` represent the position of the top-left cell, and `\"ColRow2 \"` represents the position of the bottom-right cell. *  For example, `\"B3:F7 \"` represents the cells `mat[i][j]` for `3 <= i <= 7` and `'B' <= j <= 'F'`.",
    "examples": [],
    "constraints": [
      "`1 <= height <= 26`",
      "`'A' <= width <= 'Z'`",
      "`1 <= row <= height`",
      "`'A' <= column <= width`",
      "`-100 <= val <= 100`",
      "`1 <= numbers.length <= 5`",
      "`numbers[i]` has the format `\"ColRow \"` or `\"ColRow1:ColRow2 \"`.",
      "At most `100` calls will be made to `set`, `get`, and `sum`."
    ],
    "note": "You could assume that there will not be any circular sum reference.",
    "follow_up": null
  },
  {
    "id": "632",
    "slug": "smallest-range-covering-elements-from-k-lists",
    "title": "Smallest Range Covering Elements from K Lists",
    "difficulty": "Hard",
    "description": "You have `k` lists of sorted integers in **non-decreasing order**. Find the **smallest** range that includes at least one number from each of the `k` lists. We define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` **or** `a < c` if `b - a == d - c`.",
    "examples": [
      {
        "input": "nums = \\[\\[4,10,15,24,26\\],\\[0,9,12,20\\],\\[5,18,22,30\\]\\]",
        "output": "\\[20,24\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[\\[1,2,3\\],\\[1,2,3\\],\\[1,2,3\\]\\]",
        "output": "\\[1,1\\]"
      }
    ],
    "constraints": [
      "`nums.length == k`",
      "`1 <= k <= 3500`",
      "`1 <= nums[i].length <= 50`",
      "`-105 <= nums[i][j] <= 105`",
      "`nums[i]` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "633",
    "slug": "sum-of-square-numbers",
    "title": "Sum of Square Numbers",
    "difficulty": "Medium",
    "description": "Given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`.",
    "examples": [
      {
        "input": "c = 5",
        "output": "true",
        "explanation": "1 \\* 1 + 2 \\* 2 = 5"
      },
      {
        "input": "c = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "`0 <= c <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "634",
    "slug": "find-the-derangement-of-an-array",
    "title": "Find the Derangement of An Array",
    "difficulty": "Medium",
    "description": "In combinatorial mathematics, a **derangement** is a permutation of the elements of a set, such that no element appears in its original position. You are given an integer `n`. There is originally an array consisting of `n` integers from `1` to `n` in ascending order, return _the number of **derangements** it can generate_. Since the answer may be huge, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 3",
        "output": "2",
        "explanation": "The original array is \\[1,2,3\\]. The two derangements are \\[2,3,1\\] and \\[3,1,2\\]."
      },
      {
        "input": "n = 2",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "635",
    "slug": "design-log-storage-system",
    "title": "Design Log Storage System",
    "difficulty": "Medium",
    "description": "You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: `Year:Month:Day:Hour:Minute:Second`, for example, `2017:01:01:23:59:59`. All domains are zero-padded decimal numbers. Implement the `LogSystem` class: *  `LogSystem()` Initializes the `LogSystem` object. *  `void put(int id, string timestamp)` Stores the given log `(id, timestamp)` in your storage system. *  `int[] retrieve(string start, string end, string granularity)` Returns the IDs of the logs whose timestamps are within the range from `start` to `end` inclusive. `start` and `end` all have the same format as `timestamp`, and `granularity` means how precise the range should be (i.e. to the exact `Day`, `Minute`, etc.). For example, `start = \"2017:01:01:23:59:59 \"`, `end = \"2017:01:02:23:59:59 \"`, and `granularity = \"Day \"` means that we need to find the logs within the inclusive range from **Jan. 1st 2017** to **Jan. 2nd 2017**, and the `Hour`, `Minute`, and `Second` for each log entry can be ignored.",
    "examples": [],
    "constraints": [
      "`1 <= id <= 500`",
      "`2000 <= Year <= 2017`",
      "`1 <= Month <= 12`",
      "`1 <= Day <= 31`",
      "`0 <= Hour <= 23`",
      "`0 <= Minute, Second <= 59`",
      "`granularity` is one of the values `[ \"Year \", \"Month \", \"Day \", \"Hour \", \"Minute \", \"Second \"]`.",
      "At most `500` calls will be made to `put` and `retrieve`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "636",
    "slug": "exclusive-time-of-functions",
    "title": "Exclusive Time of Functions",
    "difficulty": "Medium",
    "description": "On a **single-threaded** CPU, we execute a program containing `n` functions. Each function has a unique ID between `0` and `n-1`. Function calls are **stored in a [call stack](https://en.wikipedia.org/wiki/Call_stack)**: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is **the current function being executed**. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp. You are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `\"{function_id}:{ \"start \" | \"end \"}:{timestamp} \"`. For example, `\"0:start:3 \"` means a function call with function ID `0` **started at the beginning** of timestamp `3`, and `\"1:end:2 \"` means a function call with function ID `1` **ended at the end** of timestamp `2`. Note that a function can be called **multiple times, possibly recursively**. A function's **exclusive time** is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the **exclusive time** is `2 + 1 = 3`. Return _the **exclusive time** of each function in an array, where the value at the_ `ith` _index represents the exclusive time for the function with ID_ `i`.",
    "examples": [
      {
        "input": "n = 2, logs = \\[ \"0:start:0 \", \"1:start:2 \", \"1:end:5 \", \"0:end:6 \"\\]",
        "output": "\\[3,4\\]",
        "explanation": ""
      },
      {
        "input": "n = 1, logs = \\[ \"0:start:0 \", \"0:start:2 \", \"0:end:5 \", \"0:start:6 \", \"0:end:6 \", \"0:end:7 \"\\]",
        "output": "\\[8\\]",
        "explanation": ""
      },
      {
        "input": "n = 2, logs = \\[ \"0:start:0 \", \"0:start:2 \", \"0:end:5 \", \"1:start:6 \", \"1:end:6 \", \"0:end:7 \"\\]",
        "output": "\\[7,1\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 100`",
      "`1 <= logs.length <= 500`",
      "`0 <= function_id < n`",
      "`0 <= timestamp <= 109`",
      "No two start events will happen at the same timestamp.",
      "No two end events will happen at the same timestamp.",
      "Each function has an `\"end \"` log for each `\"start \"` log."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "637",
    "slug": "average-of-levels-in-binary-tree",
    "title": "Average of Levels in Binary Tree",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree, return _the average value of the nodes on each level in the form of an array_. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "\\[3.00000,14.50000,11.00000\\]"
      },
      {
        "input": "root = \\[3,9,20,15,7\\]",
        "output": "\\[3.00000,14.50000,11.00000\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-231 <= Node.val <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "638",
    "slug": "shopping-offers",
    "title": "Shopping Offers",
    "difficulty": "Medium",
    "description": "In LeetCode Store, there are `n` items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price. You are given an integer array `price` where `price[i]` is the price of the `ith` item, and an integer array `needs` where `needs[i]` is the number of pieces of the `ith` item you want to buy. You are also given an array `special` where `special[i]` is of size `n + 1` where `special[i][j]` is the number of pieces of the `jth` item in the `ith` offer and `special[i][n]` (i.e., the last integer in the array) is the price of the `ith` offer. Return _the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers_. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.",
    "examples": [
      {
        "input": "price = \\[2,5\\], special = \\[\\[3,0,5\\],\\[1,2,10\\]\\], needs = \\[3,2\\]",
        "output": "14",
        "explanation": "There are two kinds of items, A and B. Their prices are $2 and $5 respectively."
      },
      {
        "input": "price = \\[2,3,4\\], special = \\[\\[1,1,0,4\\],\\[2,2,1,9\\]\\], needs = \\[1,2,1\\]",
        "output": "11",
        "explanation": "The price of A is $2, and $3 for B, $4 for C."
      }
    ],
    "constraints": [
      "`n == price.length == needs.length`",
      "`1 <= n <= 6`",
      "`0 <= price[i], needs[i] <= 10`",
      "`1 <= special.length <= 100`",
      "`special[i].length == n + 1`",
      "`0 <= special[i][j] <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "639",
    "slug": "decode-ways-ii",
    "title": "Decode Ways II",
    "difficulty": "Hard",
    "description": "A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping: 'A' -> \"1 \" 'B' -> \"2 \" ... 'Z' -> \"26 \" To **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106 \"` can be mapped into: *  `\"AAJF \"` with the grouping `(1 1 10 6)` *  `\"KJF \"` with the grouping `(11 10 6)` Note that the grouping `(1 11 06)` is invalid because `\"06 \"` cannot be mapped into `'F'` since `\"6 \"` is different from `\"06 \"`. **In addition** to the mapping above, an encoded message may contain the `'*'` character, which can represent any digit from `'1'` to `'9'` (`'0'` is excluded). For example, the encoded message `\"1* \"` may represent any of the encoded messages `\"11 \"`, `\"12 \"`, `\"13 \"`, `\"14 \"`, `\"15 \"`, `\"16 \"`, `\"17 \"`, `\"18 \"`, or `\"19 \"`. Decoding `\"1* \"` is equivalent to decoding **any** of the encoded messages it can represent. Given a string `s` consisting of digits and `'*'` characters, return _the **number** of ways to **decode** it_. Since the answer may be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "s =  \"\\* \"",
        "output": "9",
        "explanation": "The encoded message can represent any of the encoded messages  \"1 \",  \"2 \",  \"3 \",  \"4 \",  \"5 \",  \"6 \",  \"7 \",  \"8 \", or  \"9 \"."
      },
      {
        "input": "s =  \"1\\* \"",
        "output": "18",
        "explanation": "The encoded message can represent any of the encoded messages  \"11 \",  \"12 \",  \"13 \",  \"14 \",  \"15 \",  \"16 \",  \"17 \",  \"18 \", or  \"19 \"."
      },
      {
        "input": "s =  \"2\\* \"",
        "output": "15",
        "explanation": "The encoded message can represent any of the encoded messages  \"21 \",  \"22 \",  \"23 \",  \"24 \",  \"25 \",  \"26 \",  \"27 \",  \"28 \", or  \"29 \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is a digit or `''`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "640",
    "slug": "solve-the-equation",
    "title": "Solve the Equation",
    "difficulty": "Medium",
    "description": "Solve a given equation and return the value of `'x'` in the form of a string `\"x=#value \"`. The equation contains only `'+'`, `'-'` operation, the variable `'x'` and its coefficient. You should return `\"No solution \"` if there is no solution for the equation, or `\"Infinite solutions \"` if there are infinite solutions for the equation. If there is exactly one solution for the equation, we ensure that the value of `'x'` is an integer.",
    "examples": [
      {
        "input": "equation =  \"x+5-3+x=6+x-2 \"",
        "output": "\"x=2 \""
      },
      {
        "input": "equation =  \"x=x \"",
        "output": "\"Infinite solutions \""
      },
      {
        "input": "equation =  \"2x=x \"",
        "output": "\"x=0 \""
      }
    ],
    "constraints": [
      "`3 <= equation.length <= 1000`",
      "`equation` has exactly one `'='`.",
      "`equation` consists of integers with an absolute value in the range `[0, 100]` without any leading zeros, and the variable `'x'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "641",
    "slug": "design-circular-deque",
    "title": "Design Circular Deque",
    "difficulty": "Medium",
    "description": "Design your implementation of the circular double-ended queue (deque). Implement the `MyCircularDeque` class: *  `MyCircularDeque(int k)` Initializes the deque with a maximum size of `k`. *  `boolean insertFront()` Adds an item at the front of Deque. Returns `true` if the operation is successful, or `false` otherwise. *  `boolean insertLast()` Adds an item at the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise. *  `boolean deleteFront()` Deletes an item from the front of Deque. Returns `true` if the operation is successful, or `false` otherwise. *  `boolean deleteLast()` Deletes an item from the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise. *  `int getFront()` Returns the front item from the Deque. Returns `-1` if the deque is empty. *  `int getRear()` Returns the last item from Deque. Returns `-1` if the deque is empty. *  `boolean isEmpty()` Returns `true` if the deque is empty, or `false` otherwise. *  `boolean isFull()` Returns `true` if the deque is full, or `false` otherwise.",
    "examples": [],
    "constraints": [
      "`1 <= k <= 1000`",
      "`0 <= value <= 1000`",
      "At most `2000` calls will be made to `insertFront`, `insertLast`, `deleteFront`, `deleteLast`, `getFront`, `getRear`, `isEmpty`, `isFull`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "642",
    "slug": "design-search-autocomplete-system",
    "title": "Design Search Autocomplete System",
    "difficulty": "Hard",
    "description": "Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character `'#'`). You are given a string array `sentences` and an integer array `times` both of length `n` where `sentences[i]` is a previously typed sentence and `times[i]` is the corresponding number of times the sentence was typed. For each input character except `'#'`, return the top `3` historical hot sentences that have the same prefix as the part of the sentence already typed. Here are the specific rules: *  The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before. *  The returned top `3` hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same hot degree, use ASCII-code order (smaller one appears first). *  If less than `3` hot sentences exist, return as many as you can. *  When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list. Implement the `AutocompleteSystem` class: *  `AutocompleteSystem(String[] sentences, int[] times)` Initializes the object with the `sentences` and `times` arrays. *  `List input(char c)` This indicates that the user typed the character `c`. *  Returns an empty array `[]` if `c == '#'` and stores the inputted sentence in the system. *  Returns the top `3` historical hot sentences that have the same prefix as the part of the sentence already typed. If there are fewer than `3` matches, return them all.",
    "examples": [],
    "constraints": [
      "`n == sentences.length`",
      "`n == times.length`",
      "`1 <= n <= 100`",
      "`1 <= sentences[i].length <= 100`",
      "`1 <= times[i] <= 50`",
      "`c` is a lowercase English letter, a hash `'#'`, or space `' '`.",
      "Each tested sentence will be a sequence of characters `c` that end with the character `'#'`.",
      "Each tested sentence will have a length in the range `[1, 200]`.",
      "The words in each input sentence are separated by single spaces.",
      "At most `5000` calls will be made to `input`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "643",
    "slug": "maximum-average-subarray-i",
    "title": "Maximum Average Subarray I",
    "difficulty": "Easy",
    "description": "You are given an integer array `nums` consisting of `n` elements, and an integer `k`. Find a contiguous subarray whose **length is equal to** `k` that has the maximum average value and return _this value_. Any answer with a calculation error less than `10-5` will be accepted.",
    "examples": [
      {
        "input": "nums = \\[1,12,-5,-6,50,3\\], k = 4",
        "output": "12.75000",
        "explanation": "Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75"
      },
      {
        "input": "nums = \\[5\\], k = 1",
        "output": "5.00000"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= k <= n <= 105`",
      "`-104 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "644",
    "slug": "maximum-average-subarray-ii",
    "title": "Maximum Average Subarray II",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` consisting of `n` elements, and an integer `k`. Find a contiguous subarray whose **length is greater than or equal to** `k` that has the maximum average value and return _this value_. Any answer with a calculation error less than `10-5` will be accepted.",
    "examples": [
      {
        "input": "nums = \\[1,12,-5,-6,50,3\\], k = 4",
        "output": "12.75000",
        "explanation": ""
      },
      {
        "input": "nums = \\[5\\], k = 1",
        "output": "5.00000"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= k <= n <= 104`",
      "`-104 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "645",
    "slug": "set-mismatch",
    "title": "Set Mismatch",
    "difficulty": "Easy",
    "description": "You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in **repetition of one** number and **loss of another** number. You are given an integer array `nums` representing the data status of this set after the error. Find the number that occurs twice and the number that is missing and return _them in the form of an array_.",
    "examples": [
      {
        "input": "nums = \\[1,2,2,4\\]",
        "output": "\\[2,3\\]"
      },
      {
        "input": "nums = \\[1,1\\]",
        "output": "\\[1,2\\]"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 104`",
      "`1 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "646",
    "slug": "maximum-length-of-pair-chain",
    "title": "Maximum Length of Pair Chain",
    "difficulty": "Medium",
    "description": "You are given an array of `n` pairs `pairs` where `pairs[i] = [lefti, righti]` and `lefti < righti`. A pair `p2 = [c, d]` **follows** a pair `p1 = [a, b]` if `b < c`. A **chain** of pairs can be formed in this fashion. Return _the length longest chain which can be formed_. You do not need to use up all the given intervals. You can select pairs in any order.",
    "examples": [
      {
        "input": "pairs = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\]\\]",
        "output": "2",
        "explanation": "The longest chain is \\[1,2\\] -> \\[3,4\\]."
      },
      {
        "input": "pairs = \\[\\[1,2\\],\\[7,8\\],\\[4,5\\]\\]",
        "output": "3",
        "explanation": "The longest chain is \\[1,2\\] -> \\[4,5\\] -> \\[7,8\\]."
      }
    ],
    "constraints": [
      "`n == pairs.length`",
      "`1 <= n <= 1000`",
      "`-1000 <= lefti < righti <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "647",
    "slug": "palindromic-substrings",
    "title": "Palindromic Substrings",
    "difficulty": "Medium",
    "description": "Given a string `s`, return _the number of **palindromic substrings** in it_. A string is a **palindrome** when it reads the same backward as forward. A **substring** is a contiguous sequence of characters within the string.",
    "examples": [
      {
        "input": "s =  \"abc \"",
        "output": "3",
        "explanation": "Three palindromic strings:  \"a \",  \"b \",  \"c \"."
      },
      {
        "input": "s =  \"aaa \"",
        "output": "6",
        "explanation": "Six palindromic strings:  \"a \",  \"a \",  \"a \",  \"aa \",  \"aa \",  \"aaa \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "648",
    "slug": "replace-words",
    "title": "Replace Words",
    "difficulty": "Medium",
    "description": "In English, we have a concept called **root**, which can be followed by some other word to form another longer word - let's call this word **successor**. For example, when the **root** `\"an \"` is followed by the **successor** word `\"other \"`, we can form a new word `\"another \"`. Given a `dictionary` consisting of many **roots** and a `sentence` consisting of words separated by spaces, replace all the **successors** in the sentence with the **root** forming it. If a **successor** can be replaced by more than one **root**, replace it with the **root** that has **the shortest length**. Return _the `sentence`_ after the replacement.",
    "examples": [
      {
        "input": "dictionary = \\[ \"cat \", \"bat \", \"rat \"\\], sentence =  \"the cattle was rattled by the battery \"",
        "output": "\"the cat was rat by the bat \""
      },
      {
        "input": "dictionary = \\[ \"a \", \"b \", \"c \"\\], sentence =  \"aadsfasf absbs bbab cadsfafs \"",
        "output": "\"a a b c \""
      }
    ],
    "constraints": [
      "`1 <= dictionary.length <= 1000`",
      "`1 <= dictionary[i].length <= 100`",
      "`dictionary[i]` consists of only lower-case letters.",
      "`1 <= sentence.length <= 106`",
      "`sentence` consists of only lower-case letters and spaces.",
      "The number of words in `sentence` is in the range `[1, 1000]`",
      "The length of each word in `sentence` is in the range `[1, 1000]`",
      "Every two consecutive words in `sentence` will be separated by exactly one space.",
      "`sentence` does not have leading or trailing spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "649",
    "slug": "dota2-senate",
    "title": "Dota2 Senate",
    "difficulty": "Medium",
    "description": "In the world of Dota2, there are two parties: the Radiant and the Dire. The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise **one** of the two rights: *  **Ban one senator's right:** A senator can make another senator lose all his rights in this and all the following rounds. *  **Announce the victory:** If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game. Given a string `senate` representing each senator's party belonging. The character `'R'` and `'D'` represent the Radiant party and the Dire party. Then if there are `n` senators, the size of the given string will be `n`. The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure. Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be `\"Radiant \"` or `\"Dire \"`.",
    "examples": [
      {
        "input": "senate =  \"RD \"",
        "output": "\"Radiant \"",
        "explanation": ""
      },
      {
        "input": "senate =  \"RDD \"",
        "output": "\"Dire \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == senate.length`",
      "`1 <= n <= 104`",
      "`senate[i]` is either `'R'` or `'D'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "650",
    "slug": "2-keys-keyboard",
    "title": "2 Keys Keyboard",
    "difficulty": "Medium",
    "description": "There is only one character `'A'` on the screen of a notepad. You can perform one of two operations on this notepad for each step: *  Copy All: You can copy all the characters present on the screen (a partial copy is not allowed). *  Paste: You can paste the characters which are copied last time. Given an integer `n`, return _the minimum number of operations to get the character_ `'A'` _exactly_ `n` _times on the screen_.",
    "examples": [
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "Initially, we have one character 'A'."
      },
      {
        "input": "n = 1",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "651",
    "slug": "4-keys-keyboard",
    "title": "4 Keys Keyboard",
    "difficulty": "Medium",
    "description": "Imagine you have a special keyboard with the following keys: *  A: Print one `'A'` on the screen. *  Ctrl-A: Select the whole screen. *  Ctrl-C: Copy selection to buffer. *  Ctrl-V: Print buffer on screen appending it after what has already been printed. Given an integer n, return _the maximum number of_ `'A'` _you can print on the screen with **at most**_ `n` _presses on the keys_.",
    "examples": [
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "We can at most get 3 A's on screen by pressing the following key sequence:"
      },
      {
        "input": "n = 7",
        "output": "9",
        "explanation": "We can at most get 9 A's on screen by pressing following key sequence:"
      }
    ],
    "constraints": [
      "`1 <= n <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "652",
    "slug": "find-duplicate-subtrees",
    "title": "Find Duplicate Subtrees",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return all **duplicate subtrees**. For each kind of duplicate subtrees, you only need to return the root node of any **one** of them. Two trees are **duplicate** if they have the **same structure** with the **same node values**.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,null,2,4,null,null,4\\]",
        "output": "\\[\\[2,4\\],\\[4\\]\\]"
      },
      {
        "input": "root = \\[2,1,1\\]",
        "output": "\\[\\[1\\]\\]"
      },
      {
        "input": "root = \\[2,2,2,3,null,3,null\\]",
        "output": "\\[\\[2,3\\],\\[3\\]\\]"
      }
    ],
    "constraints": [
      "The number of the nodes in the tree will be in the range `[1, 5000]`",
      "`-200 <= Node.val <= 200`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "653",
    "slug": "two-sum-iv-input-is-a-bst",
    "title": "Two Sum IV - Input is a BST",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary search tree and an integer `k`, return `true` _if there exist two elements in the BST such that their sum is equal to_ `k`, _or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "root = \\[5,3,6,2,4,null,7\\], k = 9",
        "output": "true"
      },
      {
        "input": "root = \\[5,3,6,2,4,null,7\\], k = 28",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-104 <= Node.val <= 104`",
      "`root` is guaranteed to be a valid binary search tree.",
      "`-105 <= k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "654",
    "slug": "maximum-binary-tree",
    "title": "Maximum Binary Tree",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` with no duplicates. A **maximum binary tree** can be built recursively from `nums` using the following algorithm: 1. Create a root node whose value is the maximum value in `nums`. 2. Recursively build the left subtree on the **subarray prefix** to the **left** of the maximum value. 3. Recursively build the right subtree on the **subarray suffix** to the **right** of the maximum value. Return _the **maximum binary tree** built from_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[3,2,1,6,0,5\\]",
        "output": "\\[6,3,5,null,2,0,null,null,1\\]",
        "explanation": "The recursive calls are as follow:"
      },
      {
        "input": "nums = \\[3,2,1\\]",
        "output": "\\[3,null,2,null,1\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] <= 1000`",
      "All integers in `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "655",
    "slug": "print-binary-tree",
    "title": "Print Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, construct a **0-indexed** `m x n` string matrix `res` that represents a **formatted layout** of the tree. The formatted layout matrix should be constructed using the following rules: *  The **height** of the tree is `height` and the number of rows `m` should be equal to `height + 1`. *  The number of columns `n` should be equal to `2height+1 - 1`. *  Place the **root node** in the **middle** of the **top row** (more formally, at location `res[0][(n-1)/2]`). *  For each node that has been placed in the matrix at position `res[r][c]`, place its **left child** at `res[r+1][c-2height-r-1]` and its **right child** at `res[r+1][c+2height-r-1]`. *  Continue this process until all the nodes in the tree have been placed. *  Any empty cells should contain the empty string `\" \"`. Return _the constructed matrix_ `res`.",
    "examples": [
      {
        "input": "root = \\[1,2\\]",
        "output": ""
      },
      {
        "input": "root = \\[1,2,3,null,4\\]",
        "output": ""
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 210]`.",
      "`-99 <= Node.val <= 99`",
      "The depth of the tree will be in the range `[1, 10]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "656",
    "slug": "coin-path",
    "title": "Coin Path",
    "difficulty": "Hard",
    "description": "You are given an integer array `coins` (**1-indexed**) of length `n` and an integer `maxJump`. You can jump to any index `i` of the array `coins` if `coins[i] != -1` and you have to pay `coins[i]` when you visit index `i`. In addition to that, if you are currently at index `i`, you can only jump to any index `i + k` where `i + k <= n` and `k` is a value in the range `[1, maxJump]`. You are initially positioned at index `1` (`coins[1]` is not `-1`). You want to find the path that reaches index n with the minimum cost. Return an integer array of the indices that you will visit in order so that you can reach index n with the minimum cost. If there are multiple paths with the same cost, return the **lexicographically smallest** such path. If it is not possible to reach index n, return an empty array. A path `p1 = [Pa1, Pa2, ..., Pax]` of length `x` is **lexicographically smaller** than `p2 = [Pb1, Pb2, ..., Pbx]` of length `y`, if and only if at the first `j` where `Paj` and `Pbj` differ, `Paj < Pbj`; when no such `j` exists, then `x < y`.",
    "examples": [
      {
        "input": "coins = \\[1,2,4,-1,2\\], maxJump = 2",
        "output": "\\[1,3,5\\]"
      },
      {
        "input": "coins = \\[1,2,4,-1,2\\], maxJump = 1",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`1 <= coins.length <= 1000`",
      "`-1 <= coins[i] <= 100`",
      "`coins[1] != -1`",
      "`1 <= maxJump <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "657",
    "slug": "robot-return-to-origin",
    "title": "Robot Return to Origin",
    "difficulty": "Easy",
    "description": "There is a robot starting at the position `(0, 0)`, the origin, on a 2D plane. Given a sequence of its moves, judge if this robot **ends up at** `(0, 0)` after it completes its moves. You are given a string `moves` that represents the move sequence of the robot where `moves[i]` represents its `ith` move. Valid moves are `'R'` (right), `'L'` (left), `'U'` (up), and `'D'` (down). Return `true` _if the robot returns to the origin after it finishes all of its moves, or_ `false` _otherwise_. **Note**: The way that the robot is \"facing \" is irrelevant. `'R'` will always make the robot move to the right once, `'L'` will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.",
    "examples": [
      {
        "input": "moves =  \"UD \"",
        "output": "true"
      },
      {
        "input": "moves =  \"LL \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= moves.length <= 2  104`",
      "`moves` only contains the characters `'U'`, `'D'`, `'L'` and `'R'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "658",
    "slug": "find-k-closest-elements",
    "title": "Find K Closest Elements",
    "difficulty": "Medium",
    "description": "Given a **sorted** integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order. An integer `a` is closer to `x` than an integer `b` if: *  `|a - x| < |b - x|`, or *  `|a - x| == |b - x|` and `a < b`",
    "examples": [
      {
        "input": "arr = \\[1,2,3,4,5\\], k = 4, x = 3",
        "output": "\\[1,2,3,4\\]"
      },
      {
        "input": "arr = \\[1,2,3,4,5\\], k = 4, x = -1",
        "output": "\\[1,2,3,4\\]"
      }
    ],
    "constraints": [
      "`1 <= k <= arr.length`",
      "`1 <= arr.length <= 104`",
      "`arr` is sorted in ascending order.",
      "`-104 <= arr[i], x <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "659",
    "slug": "split-array-into-consecutive-subsequences",
    "title": "Split Array into Consecutive Subsequences",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` that is **sorted in non-decreasing order**. Determine if it is possible to split `nums` into **one or more subsequences** such that **both** of the following conditions are true: *  Each subsequence is a **consecutive increasing sequence** (i.e. each integer is **exactly one** more than the previous integer). *  All subsequences have a length of `3` **or more**. Return `true` _if you can split_ `nums` _according to the above conditions, or_ `false` _otherwise_. A **subsequence** of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., `[1,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,3,2]` is not).",
    "examples": [
      {
        "input": "nums = \\[1,2,3,3,4,5\\]",
        "output": "true",
        "explanation": "nums can be split into the following subsequences:"
      },
      {
        "input": "nums = \\[1,2,3,3,4,4,5,5\\]",
        "output": "true",
        "explanation": "nums can be split into the following subsequences:"
      },
      {
        "input": "nums = \\[1,2,3,4,4,5\\]",
        "output": "false",
        "explanation": "It is impossible to split nums into consecutive increasing subsequences of length 3 or more."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-1000 <= nums[i] <= 1000`",
      "`nums` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "660",
    "slug": "remove-9",
    "title": "Remove 9",
    "difficulty": "Hard",
    "description": "Start from integer `1`, remove any integer that contains `9` such as `9`, `19`, `29`... Now, you will have a new integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...]`. Given an integer `n`, return _the_ `nth` (**1-indexed**) integer in the new sequence.",
    "examples": [
      {
        "input": "n = 9",
        "output": "10"
      },
      {
        "input": "n = 10",
        "output": "11"
      }
    ],
    "constraints": [
      "`1 <= n <= 8  108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "661",
    "slug": "image-smoother",
    "title": "Image Smoother",
    "difficulty": "Easy",
    "description": "An **image smoother** is a filter of the size `3 x 3` that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother). Given an `m x n` integer matrix `img` representing the grayscale of an image, return _the image after applying the smoother on each cell of it_.",
    "examples": [
      {
        "input": "img = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]",
        "output": "\\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]",
        "explanation": ""
      },
      {
        "input": "img = \\[\\[100,200,100\\],\\[200,50,200\\],\\[100,200,100\\]\\]",
        "output": "\\[\\[137,141,137\\],\\[141,138,141\\],\\[137,141,137\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`m == img.length`",
      "`n == img[i].length`",
      "`1 <= m, n <= 200`",
      "`0 <= img[i][j] <= 255`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "662",
    "slug": "maximum-width-of-binary-tree",
    "title": "Maximum Width of Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the **maximum width** of the given tree_. The **maximum width** of a tree is the maximum **width** among all levels. The **width** of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation. It is **guaranteed** that the answer will in the range of a **32-bit** signed integer.",
    "examples": [
      {
        "input": "root = \\[1,3,2,5,3,null,9\\]",
        "output": "4",
        "explanation": "The maximum width exists in the third level with length 4 (5,3,null,9)."
      },
      {
        "input": "root = \\[1,3,2,5,null,null,9,6,null,7\\]",
        "output": "7",
        "explanation": "The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7)."
      },
      {
        "input": "root = \\[1,3,2,5\\]",
        "output": "2",
        "explanation": "The maximum width exists in the second level with length 2 (3,2)."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 3000]`.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "663",
    "slug": "equal-tree-partition",
    "title": "Equal Tree Partition",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return `true` _if you can partition the tree into two trees with equal sums of values after removing exactly one edge on the original tree_.",
    "examples": [
      {
        "input": "root = \\[5,10,10,null,null,2,3\\]",
        "output": "true"
      },
      {
        "input": "root = \\[1,2,10,null,null,2,20\\]",
        "output": "false",
        "explanation": "You cannot split the tree into two trees with equal sums after removing exactly one edge on the tree."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-105 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "664",
    "slug": "strange-printer",
    "title": "Strange Printer",
    "difficulty": "Hard",
    "description": "There is a strange printer with the following two special properties: *  The printer can only print a sequence of **the same character** each time. *  At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters. Given a string `s`, return _the minimum number of turns the printer needed to print it_.",
    "examples": [
      {
        "input": "s =  \"aaabbb \"",
        "output": "2",
        "explanation": "Print  \"aaa \" first and then print  \"bbb \"."
      },
      {
        "input": "s =  \"aba \"",
        "output": "2",
        "explanation": "Print  \"aaa \" first and then print  \"b \" from the second place of the string, which will cover the existing character 'a'."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "665",
    "slug": "non-decreasing-array",
    "title": "Non-decreasing Array",
    "difficulty": "Medium",
    "description": "Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying **at most one element**. We define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (**0-based**) such that (`0 <= i <= n - 2`).",
    "examples": [
      {
        "input": "nums = \\[4,2,3\\]",
        "output": "true",
        "explanation": "You could modify the first 4 to 1 to get a non-decreasing array."
      },
      {
        "input": "nums = \\[4,2,1\\]",
        "output": "false",
        "explanation": "You cannot get a non-decreasing array by modifying at most one element."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 104`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "666",
    "slug": "path-sum-iv",
    "title": "Path Sum IV",
    "difficulty": "Medium",
    "description": "If the depth of a tree is smaller than `5`, then this tree can be represented by an array of three-digit integers. For each integer in this array: *  The hundreds digit represents the depth `d` of this node where `1 <= d <= 4`. *  The tens digit represents the position `p` of this node in the level it belongs to where `1 <= p <= 8`. The position is the same as that in a full binary tree. *  The units digit represents the value `v` of this node where `0 <= v <= 9`. Given an array of **ascending** three-digit integers `nums` representing a binary tree with a depth smaller than `5`, return _the sum of all paths from the root towards the leaves_. It is **guaranteed** that the given array represents a valid connected binary tree.",
    "examples": [
      {
        "input": "nums = \\[113,215,221\\]",
        "output": "12",
        "explanation": "The tree that the list represents is shown."
      },
      {
        "input": "nums = \\[113,221\\]",
        "output": "4",
        "explanation": "The tree that the list represents is shown."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 15`",
      "`110 <= nums[i] <= 489`",
      "`nums` represents a valid binary tree with depth less than `5`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "667",
    "slug": "beautiful-arrangement-ii",
    "title": "Beautiful Arrangement II",
    "difficulty": "Medium",
    "description": "Given two integers `n` and `k`, construct a list `answer` that contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement: *  Suppose this list is `answer = [a1, a2, a3, ... , an]`, then the list `[|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|]` has exactly `k` distinct integers. Return _the list_ `answer`. If there multiple valid answers, return **any of them**.",
    "examples": [
      {
        "input": "n = 3, k = 1",
        "output": "\\[1,2,3\\]"
      },
      {
        "input": "n = 3, k = 2",
        "output": "\\[1,3,2\\]"
      }
    ],
    "constraints": [
      "`1 <= k < n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "668",
    "slug": "kth-smallest-number-in-multiplication-table",
    "title": "Kth Smallest Number in Multiplication Table",
    "difficulty": "Hard",
    "description": "Nearly everyone has used the [Multiplication Table](https://en.wikipedia.org/wiki/Multiplication_table). The multiplication table of size `m x n` is an integer matrix `mat` where `mat[i][j] == i * j` (**1-indexed**). Given three integers `m`, `n`, and `k`, return _the_ `kth` _smallest element in the_ `m x n` _multiplication table_.",
    "examples": [
      {
        "input": "m = 3, n = 3, k = 5",
        "output": "3",
        "explanation": "The 5th smallest number is 3."
      },
      {
        "input": "m = 2, n = 3, k = 6",
        "output": "6",
        "explanation": "The 6th smallest number is 6."
      }
    ],
    "constraints": [
      "`1 <= m, n <= 3  104`",
      "`1 <= k <= m  n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "669",
    "slug": "trim-a-binary-search-tree",
    "title": "Trim a Binary Search Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should **not** change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a **unique answer**. Return _the root of the trimmed binary search tree_. Note that the root may change depending on the given bounds.",
    "examples": [
      {
        "input": "root = \\[1,0,2\\], low = 1, high = 2",
        "output": "\\[1,null,2\\]"
      },
      {
        "input": "root = \\[3,0,4,null,2,null,null,1\\], low = 1, high = 3",
        "output": "\\[3,2,null,1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`0 <= Node.val <= 104`",
      "The value of each node in the tree is unique.",
      "`root` is guaranteed to be a valid binary search tree.",
      "`0 <= low <= high <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "670",
    "slug": "maximum-swap",
    "title": "Maximum Swap",
    "difficulty": "Medium",
    "description": "You are given an integer `num`. You can swap two digits at most once to get the maximum valued number. Return _the maximum valued number you can get_.",
    "examples": [
      {
        "input": "num = 2736",
        "output": "7236",
        "explanation": "Swap the number 2 and the number 7."
      },
      {
        "input": "num = 9973",
        "output": "9973",
        "explanation": "No swap."
      }
    ],
    "constraints": [
      "`0 <= num <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "671",
    "slug": "second-minimum-node-in-a-binary-tree",
    "title": "Second Minimum Node In a Binary Tree",
    "difficulty": "Easy",
    "description": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property `root.val = min(root.left.val, root.right.val)` always holds. Given such a binary tree, you need to output the **second minimum** value in the set made of all the nodes' value in the whole tree. If no such second minimum value exists, output -1 instead.",
    "examples": [
      {
        "input": "root = \\[2,2,5,null,null,5,7\\]",
        "output": "5",
        "explanation": "The smallest value is 2, the second smallest value is 5."
      },
      {
        "input": "root = \\[2,2,2\\]",
        "output": "-1",
        "explanation": "The smallest value is 2, but there isn't any second smallest value."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 25]`.",
      "`1 <= Node.val <= 231 - 1`",
      "`root.val == min(root.left.val, root.right.val)` for each internal node of the tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "672",
    "slug": "bulb-switcher-ii",
    "title": "Bulb Switcher II",
    "difficulty": "Medium",
    "description": "There is a room with `n` bulbs labeled from `1` to `n` that all are turned on initially, and **four buttons** on the wall. Each of the four buttons has a different functionality where: *  **Button 1:** Flips the status of all the bulbs. *  **Button 2:** Flips the status of all the bulbs with even labels (i.e., `2, 4, ...`). *  **Button 3:** Flips the status of all the bulbs with odd labels (i.e., `1, 3, ...`). *  **Button 4:** Flips the status of all the bulbs with a label `j = 3k + 1` where `k = 0, 1, 2, ...` (i.e., `1, 4, 7, 10, ...`). You must make **exactly** `presses` button presses in total. For each press, you may pick **any** of the four buttons to press. Given the two integers `n` and `presses`, return _the number of **different possible statuses** after performing all_ `presses` _button presses_.",
    "examples": [
      {
        "input": "n = 1, presses = 1",
        "output": "2",
        "explanation": "Status can be:"
      },
      {
        "input": "n = 2, presses = 1",
        "output": "3",
        "explanation": "Status can be:"
      },
      {
        "input": "n = 3, presses = 1",
        "output": "4",
        "explanation": "Status can be:"
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`",
      "`0 <= presses <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "673",
    "slug": "number-of-longest-increasing-subsequence",
    "title": "Number of Longest Increasing Subsequence",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _the number of longest increasing subsequences._ **Notice** that the sequence has to be **strictly** increasing.",
    "examples": [
      {
        "input": "nums = \\[1,3,5,4,7\\]",
        "output": "2",
        "explanation": "The two longest increasing subsequences are \\[1, 3, 4, 7\\] and \\[1, 3, 5, 7\\]."
      },
      {
        "input": "nums = \\[2,2,2,2,2\\]",
        "output": "5",
        "explanation": "The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2000`",
      "`-106 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "674",
    "slug": "longest-continuous-increasing-subsequence",
    "title": "Longest Continuous Increasing Subsequence",
    "difficulty": "Easy",
    "description": "Given an unsorted array of integers `nums`, return _the length of the longest **continuous increasing subsequence** (i.e. subarray)_. The subsequence must be **strictly** increasing. A **continuous increasing subsequence** is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.",
    "examples": [
      {
        "input": "nums = \\[1,3,5,4,7\\]",
        "output": "3",
        "explanation": "The longest continuous increasing subsequence is \\[1,3,5\\] with length 3."
      },
      {
        "input": "nums = \\[2,2,2,2,2\\]",
        "output": "1",
        "explanation": "The longest continuous increasing subsequence is \\[2\\] with length 1. Note that it must be strictly"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "675",
    "slug": "cut-off-trees-for-golf-event",
    "title": "Cut Off Trees for Golf Event",
    "difficulty": "Hard",
    "description": "You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix: *  `0` means the cell cannot be walked through. *  `1` represents an empty cell that can be walked through. *  A number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height. In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off. You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes `1` (an empty cell). Starting from the point `(0, 0)`, return _the minimum steps you need to walk to cut off all the trees_. If you cannot cut off all the trees, return `-1`.",
    "examples": [
      {
        "input": "forest = \\[\\[1,2,3\\],\\[0,0,4\\],\\[7,6,5\\]\\]",
        "output": "6",
        "explanation": "Following the path above allows you to cut off the trees from shortest to tallest in 6 steps."
      },
      {
        "input": "forest = \\[\\[1,2,3\\],\\[0,0,0\\],\\[7,6,5\\]\\]",
        "output": "-1",
        "explanation": "The trees in the bottom row cannot be accessed as the middle row is blocked."
      },
      {
        "input": "forest = \\[\\[2,3,4\\],\\[0,0,5\\],\\[8,7,6\\]\\]",
        "output": "6",
        "explanation": "You can follow the same path as Example 1 to cut off all the trees."
      }
    ],
    "constraints": [
      "`m == forest.length`",
      "`n == forest[i].length`",
      "`1 <= m, n <= 50`",
      "`0 <= forest[i][j] <= 109`",
      "Heights of all trees are distinct."
    ],
    "note": "The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.",
    "follow_up": null
  },
  {
    "id": "676",
    "slug": "implement-magic-dictionary",
    "title": "Implement Magic Dictionary",
    "difficulty": "Medium",
    "description": "Design a data structure that is initialized with a list of **different** words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure. Implement the `MagicDictionary` class: *  `MagicDictionary()` Initializes the object. *  `void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`. *  `bool search(String searchWord)` Returns `true` if you can change **exactly one character** in `searchWord` to match any string in the data structure, otherwise returns `false`.",
    "examples": [],
    "constraints": [
      "`1 <= dictionary.length <= 100`",
      "`1 <= dictionary[i].length <= 100`",
      "`dictionary[i]` consists of only lower-case English letters.",
      "All the strings in `dictionary` are distinct.",
      "`1 <= searchWord.length <= 100`",
      "`searchWord` consists of only lower-case English letters.",
      "`buildDict` will be called only once before `search`.",
      "At most `100` calls will be made to `search`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "677",
    "slug": "map-sum-pairs",
    "title": "Map Sum Pairs",
    "difficulty": "Medium",
    "description": "Design a map that allows you to do the following: *  Maps a string key to a given value. *  Returns the sum of the values that have a key with a prefix equal to a given string. Implement the `MapSum` class: *  `MapSum()` Initializes the `MapSum` object. *  `void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one. *  `int sum(string prefix)` Returns the sum of all the pairs' value whose `key` starts with the `prefix`.",
    "examples": [],
    "constraints": [
      "`1 <= key.length, prefix.length <= 50`",
      "`key` and `prefix` consist of only lowercase English letters.",
      "`1 <= val <= 1000`",
      "At most `50` calls will be made to `insert` and `sum`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "678",
    "slug": "valid-parenthesis-string",
    "title": "Valid Parenthesis String",
    "difficulty": "Medium",
    "description": "Given a string `s` containing only three types of characters: `'('`, `')'` and `'*'`, return `true` _if_ `s` _is **valid**_. The following rules define a **valid** string: *  Any left parenthesis `'('` must have a corresponding right parenthesis `')'`. *  Any right parenthesis `')'` must have a corresponding left parenthesis `'('`. *  Left parenthesis `'('` must go before the corresponding right parenthesis `')'`. *  `'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `\" \"`.",
    "examples": [
      {
        "input": "s = \"()\"",
        "output": "true"
      },
      {
        "input": "s = \"(\\*)\"",
        "output": "true"
      },
      {
        "input": "s = \"(\\*))\"",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s[i]` is `'('`, `')'` or `''`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "679",
    "slug": "24-game",
    "title": "24 Game",
    "difficulty": "Hard",
    "description": "You are given an integer array `cards` of length `4`. You have four cards, each containing a number in the range `[1, 9]`. You should arrange the numbers on these cards in a mathematical expression using the operators `['+', '-', '*', '/']` and the parentheses `'('` and `')'` to get the value 24. You are restricted with the following rules: *  The division operator `'/'` represents real division, not integer division. *  For example, `4 / (1 - 2 / 3) = 4 / (1 / 3) = 12`. *  Every operation done is between two numbers. In particular, we cannot use `'-'` as a unary operator. *  For example, if `cards = [1, 1, 1, 1]`, the expression `\"-1 - 1 - 1 - 1 \"` is **not allowed**. *  You cannot concatenate numbers together *  For example, if `cards = [1, 2, 1, 2]`, the expression `\"12 + 12 \"` is not valid. Return `true` if you can get such expression that evaluates to `24`, and `false` otherwise.",
    "examples": [
      {
        "input": "cards = \\[4,1,8,7\\]",
        "output": "true",
        "explanation": "(8-4) \\* (7-1) = 24"
      },
      {
        "input": "cards = \\[1,2,1,2\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`cards.length == 4`",
      "`1 <= cards[i] <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "680",
    "slug": "valid-palindrome-ii",
    "title": "Valid Palindrome II",
    "difficulty": "Easy",
    "description": "Given a string `s`, return `true` _if the_ `s` _can be palindrome after deleting **at most one** character from it_.",
    "examples": [
      {
        "input": "s =  \"aba \"",
        "output": "true"
      },
      {
        "input": "s =  \"abca \"",
        "output": "true",
        "explanation": "You could delete the character 'c'."
      },
      {
        "input": "s =  \"abc \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "681",
    "slug": "next-closest-time",
    "title": "Next Closest Time",
    "difficulty": "Medium",
    "description": "Given a `time` represented in the format `\"HH:MM \"`, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused. You may assume the given input string is always valid. For example, `\"01:34 \"`, `\"12:09 \"` are all valid. `\"1:34 \"`, `\"12:9 \"` are all invalid.",
    "examples": [
      {
        "input": "time =  \"19:34 \"",
        "output": "\"19:39 \"",
        "explanation": "The next closest time choosing from digits **1**, **9**, **3**, **4**, is **19:39**, which occurs 5 minutes later."
      },
      {
        "input": "time =  \"23:59 \"",
        "output": "\"22:22 \"",
        "explanation": "The next closest time choosing from digits **2**, **3**, **5**, **9**, is **22:22**."
      }
    ],
    "constraints": [
      "`time.length == 5`",
      "`time` is a valid time in the form `\"HH:MM \"`.",
      "`0 <= HH < 24`",
      "`0 <= MM < 60`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "682",
    "slug": "baseball-game",
    "title": "Baseball Game",
    "difficulty": "Easy",
    "description": "You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record. You are given a list of strings `operations`, where `operations[i]` is the `ith` operation you must apply to the record and is one of the following: *  An integer `x`. *  Record a new score of `x`. *  `'+'`. *  Record a new score that is the sum of the previous two scores. *  `'D'`. *  Record a new score that is the double of the previous score. *  `'C'`. *  Invalidate the previous score, removing it from the record. Return _the sum of all the scores on the record after applying all the operations_. The test cases are generated such that the answer and all intermediate calculations fit in a **32-bit** integer and that all operations are valid.",
    "examples": [
      {
        "input": "ops = \\[ \"5 \", \"2 \", \"C \", \"D \", \"+ \"\\]",
        "output": "30",
        "explanation": ""
      },
      {
        "input": "ops = \\[ \"5 \", \"-2 \", \"4 \", \"C \", \"D \", \"9 \", \"+ \", \"+ \"\\]",
        "output": "27",
        "explanation": ""
      },
      {
        "input": "ops = \\[ \"1 \", \"C \"\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= operations.length <= 1000`",
      "`operations[i]` is `\"C \"`, `\"D \"`, `\"+ \"`, or a string representing an integer in the range `[-3  104, 3  104]`.",
      "For operation `\"+ \"`, there will always be at least two previous scores on the record.",
      "For operations `\"C \"` and `\"D \"`, there will always be at least one previous score on the record."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "683",
    "slug": "k-empty-slots",
    "title": "K Empty Slots",
    "difficulty": "Hard",
    "description": "You have `n` bulbs in a row numbered from `1` to `n`. Initially, all the bulbs are turned off. We turn on **exactly one** bulb every day until all bulbs are on after `n` days. You are given an array `bulbs` of length `n` where `bulbs[i] = x` means that on the `(i+1)th` day, we will turn on the bulb at position `x` where `i` is **0-indexed** and `x` is **1-indexed.** Given an integer `k`, return _the **minimum day number** such that there exists two **turned on** bulbs that have **exactly** `k` bulbs between them that are **all turned off**. If there isn't such day, return `-1`._",
    "examples": [
      {
        "input": "bulbs = \\[1,3,2\\], k = 1",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "bulbs = \\[1,2,3\\], k = 1",
        "output": "-1"
      }
    ],
    "constraints": [
      "`n == bulbs.length`",
      "`1 <= n <= 2  104`",
      "`1 <= bulbs[i] <= n`",
      "`bulbs` is a permutation of numbers from `1` to `n`.",
      "`0 <= k <= 2  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "684",
    "slug": "redundant-connection",
    "title": "Redundant Connection",
    "difficulty": "Medium",
    "description": "In this problem, a tree is an **undirected graph** that is connected and has no cycles. You are given a graph that started as a tree with `n` nodes labeled from `1` to `n`, with one additional edge added. The added edge has two **different** vertices chosen from `1` to `n`, and was not an edge that already existed. The graph is represented as an array `edges` of length `n` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the graph. Return _an edge that can be removed so that the resulting graph is a tree of_ `n` _nodes_. If there are multiple answers, return the answer that occurs last in the input.",
    "examples": [
      {
        "input": "edges = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]",
        "output": "\\[2,3\\]"
      },
      {
        "input": "edges = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[1,4\\],\\[1,5\\]\\]",
        "output": "\\[1,4\\]"
      }
    ],
    "constraints": [
      "`n == edges.length`",
      "`3 <= n <= 1000`",
      "`edges[i].length == 2`",
      "`1 <= ai < bi <= edges.length`",
      "`ai != bi`",
      "There are no repeated edges.",
      "The given graph is connected."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "685",
    "slug": "redundant-connection-ii",
    "title": "Redundant Connection II",
    "difficulty": "Hard",
    "description": "In this problem, a rooted tree is a **directed** graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents. The given input is a directed graph that started as a rooted tree with `n` nodes (with distinct values from `1` to `n`), with one additional directed edge added. The added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed. The resulting graph is given as a 2D-array of `edges`. Each element of `edges` is a pair `[ui, vi]` that represents a **directed** edge connecting nodes `ui` and `vi`, where `ui` is a parent of child `vi`. Return _an edge that can be removed so that the resulting graph is a rooted tree of_ `n` _nodes_. If there are multiple answers, return the answer that occurs last in the given 2D-array.",
    "examples": [
      {
        "input": "edges = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]",
        "output": "\\[2,3\\]"
      },
      {
        "input": "edges = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,1\\],\\[1,5\\]\\]",
        "output": "\\[4,1\\]"
      }
    ],
    "constraints": [
      "`n == edges.length`",
      "`3 <= n <= 1000`",
      "`edges[i].length == 2`",
      "`1 <= ui, vi <= n`",
      "`ui != vi`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "686",
    "slug": "repeated-string-match",
    "title": "Repeated String Match",
    "difficulty": "Medium",
    "description": "Given two strings `a` and `b`, return _the minimum number of times you should repeat string_ `a` _so that string_ `b` _is a substring of it_. If it is impossible for `b`\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of `a` after repeating it, return `-1`. **Notice:** string `\"abc \"` repeated 0 times is `\" \"`, repeated 1 time is `\"abc \"` and repeated 2 times is `\"abcabc \"`.",
    "examples": [
      {
        "input": "a =  \"abcd \", b =  \"cdabcdab \"",
        "output": "3",
        "explanation": "We return 3 because by repeating a three times  \"ab**cdabcdab**cd \", b is a substring of it."
      },
      {
        "input": "a =  \"a \", b =  \"aa \"",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= a.length, b.length <= 104`",
      "`a` and `b` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "687",
    "slug": "longest-univalue-path",
    "title": "Longest Univalue Path",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the length of the longest path, where each node in the path has the same value_. This path may or may not pass through the root. **The length of the path** between two nodes is represented by the number of edges between them.",
    "examples": [
      {
        "input": "root = \\[5,4,5,1,1,null,5\\]",
        "output": "2",
        "explanation": "The shown image shows that the longest path of the same value (i.e. 5)."
      },
      {
        "input": "root = \\[1,4,5,4,4,null,5\\]",
        "output": "2",
        "explanation": "The shown image shows that the longest path of the same value (i.e. 4)."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[0, 104]`.",
      "`-1000 <= Node.val <= 1000`",
      "The depth of the tree will not exceed `1000`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "688",
    "slug": "knight-probability-in-chessboard",
    "title": "Knight Probability in Chessboard",
    "difficulty": "Medium",
    "description": "On an `n x n` chessboard, a knight starts at the cell `(row, column)` and attempts to make exactly `k` moves. The rows and columns are **0-indexed**, so the top-left cell is `(0, 0)`, and the bottom-right cell is `(n - 1, n - 1)`. A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction. Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there. The knight continues moving until it has made exactly `k` moves or has moved off the chessboard. Return _the probability that the knight remains on the board after it has stopped moving_.",
    "examples": [
      {
        "input": "n = 3, k = 2, row = 0, column = 0",
        "output": "0.06250",
        "explanation": "There are two moves (to (1,2), (2,1)) that will keep the knight on the board."
      },
      {
        "input": "n = 1, k = 0, row = 0, column = 0",
        "output": "1.00000"
      }
    ],
    "constraints": [
      "`1 <= n <= 25`",
      "`0 <= k <= 100`",
      "`0 <= row, column <= n - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "689",
    "slug": "maximum-sum-of-3-non-overlapping-subarrays",
    "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
    "difficulty": "Hard",
    "description": "Given an integer array `nums` and an integer `k`, find three non-overlapping subarrays of length `k` with maximum sum and return them. Return the result as a list of indices representing the starting position of each interval (**0-indexed**). If there are multiple answers, return the lexicographically smallest one.",
    "examples": [
      {
        "input": "nums = \\[1,2,1,2,6,7,5,1\\], k = 2",
        "output": "\\[0,3,5\\]",
        "explanation": "Subarrays \\[1, 2\\], \\[2, 6\\], \\[7, 5\\] correspond to the starting indices \\[0, 3, 5\\]."
      },
      {
        "input": "nums = \\[1,2,1,2,1,2,1,2,1\\], k = 2",
        "output": "\\[0,2,4\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  104`",
      "`1 <= nums[i] < 216`",
      "`1 <= k <= floor(nums.length / 3)`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "690",
    "slug": "employee-importance",
    "title": "Employee Importance",
    "difficulty": "Medium",
    "description": "You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs. You are given an array of employees `employees` where: *  `employees[i].id` is the ID of the `ith` employee. *  `employees[i].importance` is the importance value of the `ith` employee. *  `employees[i].subordinates` is a list of the IDs of the direct subordinates of the `ith` employee. Given an integer `id` that represents an employee's ID, return _the **total** importance value of this employee and all their direct and indirect subordinates_.",
    "examples": [
      {
        "input": "employees = \\[\\[1,5,\\[2,3\\]\\],\\[2,3,\\[\\]\\],\\[3,3,\\[\\]\\]\\], id = 1",
        "output": "11",
        "explanation": "Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3."
      },
      {
        "input": "employees = \\[\\[1,2,\\[5\\]\\],\\[5,-3,\\[\\]\\]\\], id = 5",
        "output": "-3",
        "explanation": "Employee 5 has an importance value of -3 and has no direct subordinates."
      }
    ],
    "constraints": [
      "`1 <= employees.length <= 2000`",
      "`1 <= employees[i].id <= 2000`",
      "All `employees[i].id` are unique.",
      "`-100 <= employees[i].importance <= 100`",
      "One employee has at most one direct leader and may have several subordinates.",
      "The IDs in `employees[i].subordinates` are valid IDs."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "691",
    "slug": "stickers-to-spell-word",
    "title": "Stickers to Spell Word",
    "difficulty": "Hard",
    "description": "We are given `n` different types of `stickers`. Each sticker has a lowercase English word on it. You would like to spell out the given string `target` by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker. Return _the minimum number of stickers that you need to spell out_ `target`. If the task is impossible, return `-1`.",
    "examples": [
      {
        "input": "stickers = \\[ \"with \", \"example \", \"science \"\\], target =  \"thehat \"",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "stickers = \\[ \"notice \", \"possible \"\\], target =  \"basicbasic \"",
        "output": "-1"
      }
    ],
    "constraints": [
      "`n == stickers.length`",
      "`1 <= n <= 50`",
      "`1 <= stickers[i].length <= 10`",
      "`1 <= target.length <= 15`",
      "`stickers[i]` and `target` consist of lowercase English letters."
    ],
    "note": "In all test cases, all words were chosen randomly from the `1000` most common US English words, and `target` was chosen as a concatenation of two random words.",
    "follow_up": null
  },
  {
    "id": "692",
    "slug": "top-k-frequent-words",
    "title": "Top K Frequent Words",
    "difficulty": "Medium",
    "description": "Given an array of strings `words` and an integer `k`, return _the_ `k` _most frequent strings_. Return the answer **sorted** by **the frequency** from highest to lowest. Sort the words with the same frequency by their **lexicographical order**.",
    "examples": [
      {
        "input": "words = \\[ \"i \", \"love \", \"leetcode \", \"i \", \"love \", \"coding \"\\], k = 2",
        "output": "\\[ \"i \", \"love \"\\]",
        "explanation": "\"i \" and  \"love \" are the two most frequent words."
      },
      {
        "input": "words = \\[ \"the \", \"day \", \"is \", \"sunny \", \"the \", \"the \", \"the \", \"sunny \", \"is \", \"is \"\\], k = 4",
        "output": "\\[ \"the \", \"is \", \"sunny \", \"day \"\\]",
        "explanation": "\"the \",  \"is \",  \"sunny \" and  \"day \" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 500`",
      "`1 <= words[i].length <= 10`",
      "`words[i]` consists of lowercase English letters.",
      "`k` is in the range `[1, The number of unique words[i]]`"
    ],
    "note": null,
    "follow_up": "Could you solve it in `O(n log(k))` time and `O(n)` extra space?"
  },
  {
    "id": "693",
    "slug": "binary-number-with-alternating-bits",
    "title": "Binary Number with Alternating Bits",
    "difficulty": "Easy",
    "description": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.",
    "examples": [
      {
        "input": "n = 5",
        "output": "true",
        "explanation": "The binary representation of 5 is: 101"
      },
      {
        "input": "n = 7",
        "output": "false",
        "explanation": "The binary representation of 7 is: 111."
      },
      {
        "input": "n = 11",
        "output": "false",
        "explanation": "The binary representation of 11 is: 1011."
      }
    ],
    "constraints": [
      "`1 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "694",
    "slug": "number-of-distinct-islands",
    "title": "Number of Distinct Islands",
    "difficulty": "Medium",
    "description": "You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other. Return _the number of **distinct** islands_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,0,0,0\\],\\[1,1,0,0,0\\],\\[0,0,0,1,1\\],\\[0,0,0,1,1\\]\\]",
        "output": "1"
      },
      {
        "input": "grid = \\[\\[1,1,0,1,1\\],\\[1,0,0,0,0\\],\\[0,0,0,0,1\\],\\[1,1,0,1,1\\]\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 50`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "695",
    "slug": "max-area-of-island",
    "title": "Max Area of Island",
    "difficulty": "Medium",
    "description": "You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. The **area** of an island is the number of cells with a value `1` in the island. Return _the maximum **area** of an island in_ `grid`. If there is no island, return `0`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,0,1,0,0,0,0,1,0,0,0,0,0\\],\\[0,0,0,0,0,0,0,1,1,1,0,0,0\\],\\[0,1,1,0,1,0,0,0,0,0,0,0,0\\],\\[0,1,0,0,1,1,0,0,1,0,1,0,0\\],\\[0,1,0,0,1,1,0,0,1,1,1,0,0\\],\\[0,0,0,0,0,0,0,0,0,0,1,0,0\\],\\[0,0,0,0,0,0,0,1,1,1,0,0,0\\],\\[0,0,0,0,0,0,0,1,1,0,0,0,0\\]\\]",
        "output": "6",
        "explanation": "The answer is not 11, because the island must be connected 4-directionally."
      },
      {
        "input": "grid = \\[\\[0,0,0,0,0,0,0,0\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 50`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "696",
    "slug": "count-binary-substrings",
    "title": "Count Binary Substrings",
    "difficulty": "Easy",
    "description": "Given a binary string `s`, return the number of non-empty substrings that have the same number of `0`'s and `1`'s, and all the `0`'s and all the `1`'s in these substrings are grouped consecutively. Substrings that occur multiple times are counted the number of times they occur.",
    "examples": [
      {
        "input": "s =  \"00110011 \"",
        "output": "6",
        "explanation": "There are 6 substrings that have equal number of consecutive 1's and 0's:  \"0011 \",  \"01 \",  \"1100 \",  \"10 \",  \"0011 \", and  \"01 \"."
      },
      {
        "input": "s =  \"10101 \"",
        "output": "4",
        "explanation": "There are 4 substrings:  \"10 \",  \"01 \",  \"10 \",  \"01 \" that have equal number of consecutive 1's and 0's."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "697",
    "slug": "degree-of-an-array",
    "title": "Degree of an Array",
    "difficulty": "Easy",
    "description": "Given a non-empty array of non-negative integers `nums`, the **degree** of this array is defined as the maximum frequency of any one of its elements. Your task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.",
    "examples": [
      {
        "input": "nums = \\[1,2,2,3,1\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,2,3,1,4,2\\]",
        "output": "6",
        "explanation": ""
      }
    ],
    "constraints": [
      "`nums.length` will be between 1 and 50,000.",
      "`nums[i]` will be an integer between 0 and 49,999."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "698",
    "slug": "partition-to-k-equal-sum-subsets",
    "title": "Partition to K Equal Sum Subsets",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal.",
    "examples": [
      {
        "input": "nums = \\[4,3,2,3,5,2,1\\], k = 4",
        "output": "true",
        "explanation": "It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums."
      },
      {
        "input": "nums = \\[1,2,3,4\\], k = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 16`",
      "`1 <= nums[i] <= 104`",
      "The frequency of each element is in the range `[1, 4]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "699",
    "slug": "falling-squares",
    "title": "Falling Squares",
    "difficulty": "Hard",
    "description": "There are several squares being dropped onto the X-axis of a 2D plane. You are given a 2D integer array `positions` where `positions[i] = [lefti, sideLengthi]` represents the `ith` square with a side length of `sideLengthi` that is dropped with its left edge aligned with X-coordinate `lefti`. Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands **on the top side of another square** or **on the X-axis**. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved. After each square is dropped, you must record the **height of the current tallest stack of squares**. Return _an integer array_ `ans` _where_ `ans[i]` _represents the height described above after dropping the_ `ith` _square_.",
    "examples": [
      {
        "input": "positions = \\[\\[1,2\\],\\[2,3\\],\\[6,1\\]\\]",
        "output": "\\[2,5,5\\]",
        "explanation": ""
      },
      {
        "input": "positions = \\[\\[100,100\\],\\[200,100\\]\\]",
        "output": "\\[100,100\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= positions.length <= 1000`",
      "`1 <= lefti <= 108`",
      "`1 <= sideLengthi <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "700",
    "slug": "search-in-a-binary-search-tree",
    "title": "Search in a Binary Search Tree",
    "difficulty": "Easy",
    "description": "You are given the `root` of a binary search tree (BST) and an integer `val`. Find the node in the BST that the node's value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `null`.",
    "examples": [
      {
        "input": "root = \\[4,2,7,1,3\\], val = 2",
        "output": "\\[2,1,3\\]"
      },
      {
        "input": "root = \\[4,2,7,1,3\\], val = 5",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 5000]`.",
      "`1 <= Node.val <= 107`",
      "`root` is a binary search tree.",
      "`1 <= val <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "701",
    "slug": "insert-into-a-binary-search-tree",
    "title": "Insert into a Binary Search Tree",
    "difficulty": "Medium",
    "description": "You are given the `root` node of a binary search tree (BST) and a `value` to insert into the tree. Return _the root node of the BST after the insertion_. It is **guaranteed** that the new value does not exist in the original BST. **Notice** that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return **any of them**.",
    "examples": [
      {
        "input": "root = \\[4,2,7,1,3\\], val = 5",
        "output": "\\[4,2,7,1,3,5\\]",
        "explanation": "Another accepted tree is:"
      },
      {
        "input": "root = \\[40,20,60,10,30,50,70\\], val = 25",
        "output": "\\[40,20,60,10,30,50,70,null,null,25\\]"
      },
      {
        "input": "root = \\[4,2,7,1,3,null,null,null,null,null,null\\], val = 5",
        "output": "\\[4,2,7,1,3,5\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range `[0, 104]`.",
      "`-108 <= Node.val <= 108`",
      "All the values `Node.val` are unique.",
      "`-108 <= val <= 108`",
      "It's guaranteed that `val` does not exist in the original BST."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "702",
    "slug": "search-in-a-sorted-array-of-unknown-size",
    "title": "Search in a Sorted Array of Unknown Size",
    "difficulty": "Medium",
    "description": "This is an **_interactive problem_**. You have a sorted array of **unique** elements and an **unknown size**. You do not have an access to the array but you can use the `ArrayReader` interface to access it. You can call `ArrayReader.get(i)` that: *  returns the value at the `ith` index (**0-indexed**) of the secret array (i.e., `secret[i]`), or *  returns `231 - 1` if the `i` is out of the boundary of the array. You are also given an integer `target`. Return the index `k` of the hidden array where `secret[k] == target` or return `-1` otherwise. You must write an algorithm with `O(log n)` runtime complexity.",
    "examples": [
      {
        "input": "secret = \\[-1,0,3,5,9,12\\], target = 9",
        "output": "4",
        "explanation": "9 exists in secret and its index is 4."
      },
      {
        "input": "secret = \\[-1,0,3,5,9,12\\], target = 2",
        "output": "-1",
        "explanation": "2 does not exist in secret so return -1."
      }
    ],
    "constraints": [
      "`1 <= secret.length <= 104`",
      "`-104 <= secret[i], target <= 104`",
      "`secret` is sorted in a strictly increasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "703",
    "slug": "kth-largest-element-in-a-stream",
    "title": "Kth Largest Element in a Stream",
    "difficulty": "Easy",
    "description": "Design a class to find the `kth` largest element in a stream. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element. Implement `KthLargest` class: *  `KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of integers `nums`. *  `int add(int val)` Appends the integer `val` to the stream and returns the element representing the `kth` largest element in the stream.",
    "examples": [],
    "constraints": [
      "`1 <= k <= 104`",
      "`0 <= nums.length <= 104`",
      "`-104 <= nums[i] <= 104`",
      "`-104 <= val <= 104`",
      "At most `104` calls will be made to `add`.",
      "It is guaranteed that there will be at least `k` elements in the array when you search for the `kth` element."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "704",
    "slug": "binary-search",
    "title": "Binary Search",
    "difficulty": "Easy",
    "description": "Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`. You must write an algorithm with `O(log n)` runtime complexity.",
    "examples": [
      {
        "input": "nums = \\[-1,0,3,5,9,12\\], target = 9",
        "output": "4",
        "explanation": "9 exists in nums and its index is 4"
      },
      {
        "input": "nums = \\[-1,0,3,5,9,12\\], target = 2",
        "output": "-1",
        "explanation": "2 does not exist in nums so return -1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-104 < nums[i], target < 104`",
      "All the integers in `nums` are unique.",
      "`nums` is sorted in ascending order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "705",
    "slug": "design-hashset",
    "title": "Design HashSet",
    "difficulty": "Easy",
    "description": "Design a HashSet without using any built-in hash table libraries. Implement `MyHashSet` class: *  `void add(key)` Inserts the value `key` into the HashSet. *  `bool contains(key)` Returns whether the value `key` exists in the HashSet or not. *  `void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing.",
    "examples": [],
    "constraints": [
      "`0 <= key <= 106`",
      "At most `104` calls will be made to `add`, `remove`, and `contains`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "706",
    "slug": "design-hashmap",
    "title": "Design HashMap",
    "difficulty": "Easy",
    "description": "Design a HashMap without using any built-in hash table libraries. Implement the `MyHashMap` class: *  `MyHashMap()` initializes the object with an empty map. *  `void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`. *  `int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`. *  `void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.",
    "examples": [],
    "constraints": [
      "`0 <= key, value <= 106`",
      "At most `104` calls will be made to `put`, `get`, and `remove`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "707",
    "slug": "design-linked-list",
    "title": "Design Linked List",
    "difficulty": "Medium",
    "description": "Design your implementation of the linked list. You can choose to use a singly or doubly linked list. A node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are **0-indexed**. Implement the `MyLinkedList` class: *  `MyLinkedList()` Initializes the `MyLinkedList` object. *  `int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`. *  `void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. *  `void addAtTail(int val)` Append a node of value `val` as the last element of the linked list. *  `void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node **will not be inserted**. *  `void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid.",
    "examples": [],
    "constraints": [
      "`0 <= index, val <= 1000`",
      "Please do not use the built-in LinkedList library.",
      "At most `2000` calls will be made to `get`, `addAtHead`, `addAtTail`, `addAtIndex` and `deleteAtIndex`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "708",
    "slug": "insert-into-a-sorted-circular-linked-list",
    "title": "Insert into a Sorted Circular Linked List",
    "difficulty": "Medium",
    "description": "Given a Circular Linked List node, which is sorted in non-descending order, write a function to insert a value `insertVal` into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list and may not necessarily be the smallest value in the circular list. If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted. If the list is empty (i.e., the given node is `null`), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the originally given node.",
    "examples": [
      {
        "input": "head = \\[3,4,1\\], insertVal = 2",
        "output": "\\[3,4,1,2\\]",
        "explanation": "In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3."
      },
      {
        "input": "head = \\[\\], insertVal = 1",
        "output": "\\[1\\]",
        "explanation": "The list is empty (given head is `null`). We create a new single circular list and return the reference to that single node."
      },
      {
        "input": "head = \\[1\\], insertVal = 0",
        "output": "\\[1,0\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[0, 5  104]`.",
      "`-106 <= Node.val, insertVal <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "709",
    "slug": "to-lower-case",
    "title": "To Lower Case",
    "difficulty": "Easy",
    "description": "Given a string `s`, return _the string after replacing every uppercase letter with the same lowercase letter_.",
    "examples": [
      {
        "input": "s =  \"Hello \"",
        "output": "\"hello \""
      },
      {
        "input": "s =  \"here \"",
        "output": "\"here \""
      },
      {
        "input": "s =  \"LOVELY \"",
        "output": "\"lovely \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consists of printable ASCII characters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "710",
    "slug": "random-pick-with-blacklist",
    "title": "Random Pick with Blacklist",
    "difficulty": "Hard",
    "description": "You are given an integer `n` and an array of **unique** integers `blacklist`. Design an algorithm to pick a random integer in the range `[0, n - 1]` that is **not** in `blacklist`. Any integer that is in the mentioned range and not in `blacklist` should be **equally likely** to be returned. Optimize your algorithm such that it minimizes the number of calls to the **built-in** random function of your language. Implement the `Solution` class: *  `Solution(int n, int[] blacklist)` Initializes the object with the integer `n` and the blacklisted integers `blacklist`. *  `int pick()` Returns a random integer in the range `[0, n - 1]` and not in `blacklist`.",
    "examples": [],
    "constraints": [
      "`1 <= n <= 109`",
      "`0 <= blacklist.length <= min(105, n - 1)`",
      "`0 <= blacklist[i] < n`",
      "All the values of `blacklist` are unique.",
      "At most `2  104` calls will be made to `pick`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "711",
    "slug": "number-of-distinct-islands-ii",
    "title": "Number of Distinct Islands II",
    "difficulty": "Hard",
    "description": "You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. An island is considered to be the same as another if they have the same shape, or have the same shape after **rotation** (90, 180, or 270 degrees only) or **reflection** (left/right direction or up/down direction). Return _the number of **distinct** islands_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,0,0,0\\],\\[1,0,0,0,0\\],\\[0,0,0,0,1\\],\\[0,0,0,1,1\\]\\]",
        "output": "1",
        "explanation": "The two islands are considered the same because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes."
      },
      {
        "input": "grid = \\[\\[1,1,0,0,0\\],\\[1,1,0,0,0\\],\\[0,0,0,1,1\\],\\[0,0,0,1,1\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 50`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "712",
    "slug": "minimum-ascii-delete-sum-for-two-strings",
    "title": "Minimum ASCII Delete Sum for Two Strings",
    "difficulty": "Medium",
    "description": "Given two strings `s1` and `s2`, return _the lowest **ASCII** sum of deleted characters to make two strings equal_.",
    "examples": [
      {
        "input": "s1 =  \"sea \", s2 =  \"eat \"",
        "output": "231",
        "explanation": "Deleting  \"s \" from  \"sea \" adds the ASCII value of  \"s \" (115) to the sum."
      },
      {
        "input": "s1 =  \"delete \", s2 =  \"leet \"",
        "output": "403",
        "explanation": "Deleting  \"dee \" from  \"delete \" to turn the string into  \"let \","
      }
    ],
    "constraints": [
      "`1 <= s1.length, s2.length <= 1000`",
      "`s1` and `s2` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "713",
    "slug": "subarray-product-less-than-k",
    "title": "Subarray Product Less Than K",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums` and an integer `k`, return _the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than_ `k`.",
    "examples": [
      {
        "input": "nums = \\[10,5,2,6\\], k = 100",
        "output": "8",
        "explanation": "The 8 subarrays that have product less than 100 are:"
      },
      {
        "input": "nums = \\[1,2,3\\], k = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`1 <= nums[i] <= 1000`",
      "`0 <= k <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "714",
    "slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "difficulty": "Medium",
    "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee. Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.",
    "examples": [
      {
        "input": "prices = \\[1,3,2,8,4,9\\], fee = 2",
        "output": "8",
        "explanation": "The maximum profit can be achieved by:"
      },
      {
        "input": "prices = \\[1,3,7,5,10,3\\], fee = 3",
        "output": "6"
      }
    ],
    "constraints": [
      "`1 <= prices.length <= 5  104`",
      "`1 <= prices[i] < 5  104`",
      "`0 <= fee < 5  104`"
    ],
    "note": "You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "follow_up": null
  },
  {
    "id": "716",
    "slug": "max-stack",
    "title": "Max Stack",
    "difficulty": "Hard",
    "description": "Design a max stack data structure that supports the stack operations and supports finding the stack's maximum element. Implement the `MaxStack` class: *  `MaxStack()` Initializes the stack object. *  `void push(int x)` Pushes element `x` onto the stack. *  `int pop()` Removes the element on top of the stack and returns it. *  `int top()` Gets the element on the top of the stack without removing it. *  `int peekMax()` Retrieves the maximum element in the stack without removing it. *  `int popMax()` Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the **top-most** one. You must come up with a solution that supports `O(1)` for each `top` call and `O(logn)` for each other call.",
    "examples": [],
    "constraints": [
      "`-107 <= x <= 107`",
      "At most `105` calls will be made to `push`, `pop`, `top`, `peekMax`, and `popMax`.",
      "There will be at least one element in the stack when `pop`, `top`, `peekMax`, or `popMax` is called."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "717",
    "slug": "1-bit-and-2-bit-characters",
    "title": "1-bit and 2-bit Characters",
    "difficulty": "Easy",
    "description": "We have two special characters: *  The first character can be represented by one bit `0`. *  The second character can be represented by two bits (`10` or `11`). Given a binary array `bits` that ends with `0`, return `true` if the last character must be a one-bit character.",
    "examples": [
      {
        "input": "bits = \\[1,0,0\\]",
        "output": "true",
        "explanation": "The only way to decode it is two-bit character and one-bit character."
      },
      {
        "input": "bits = \\[1,1,1,0\\]",
        "output": "false",
        "explanation": "The only way to decode it is two-bit character and two-bit character."
      }
    ],
    "constraints": [
      "`1 <= bits.length <= 1000`",
      "`bits[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "718",
    "slug": "maximum-length-of-repeated-subarray",
    "title": "Maximum Length of Repeated Subarray",
    "difficulty": "Medium",
    "description": "Given two integer arrays `nums1` and `nums2`, return _the maximum length of a subarray that appears in **both** arrays_.",
    "examples": [
      {
        "input": "nums1 = \\[1,2,3,2,1\\], nums2 = \\[3,2,1,4,7\\]",
        "output": "3",
        "explanation": "The repeated subarray with maximum length is \\[3,2,1\\]."
      },
      {
        "input": "nums1 = \\[0,0,0,0,0\\], nums2 = \\[0,0,0,0,0\\]",
        "output": "5",
        "explanation": "The repeated subarray with maximum length is \\[0,0,0,0,0\\]."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 1000`",
      "`0 <= nums1[i], nums2[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "719",
    "slug": "find-k-th-smallest-pair-distance",
    "title": "Find K-th Smallest Pair Distance",
    "difficulty": "Hard",
    "description": "The **distance of a pair** of integers `a` and `b` is defined as the absolute difference between `a` and `b`. Given an integer array `nums` and an integer `k`, return _the_ `kth` _smallest **distance among all the pairs**_ `nums[i]` _and_ `nums[j]` _where_ `0 <= i < j < nums.length`.",
    "examples": [
      {
        "input": "nums = \\[1,3,1\\], k = 1",
        "output": "0",
        "explanation": "Here are all the pairs:"
      },
      {
        "input": "nums = \\[1,1,1\\], k = 2",
        "output": "0"
      },
      {
        "input": "nums = \\[1,6,1\\], k = 3",
        "output": "5"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`2 <= n <= 104`",
      "`0 <= nums[i] <= 106`",
      "`1 <= k <= n  (n - 1) / 2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "720",
    "slug": "longest-word-in-dictionary",
    "title": "Longest Word in Dictionary",
    "difficulty": "Medium",
    "description": "Given an array of strings `words` representing an English Dictionary, return _the longest word in_ `words` _that can be built one character at a time by other words in_ `words`. If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string. Note that the word should be built from left to right with each additional character being added to the end of a previous word.",
    "examples": [
      {
        "input": "words = \\[ \"w \", \"wo \", \"wor \", \"worl \", \"world \"\\]",
        "output": "\"world \"",
        "explanation": "The word  \"world \" can be built one character at a time by  \"w \",  \"wo \",  \"wor \", and  \"worl \"."
      },
      {
        "input": "words = \\[ \"a \", \"banana \", \"app \", \"appl \", \"ap \", \"apply \", \"apple \"\\]",
        "output": "\"apple \"",
        "explanation": "Both  \"apply \" and  \"apple \" can be built from other words in the dictionary. However,  \"apple \" is lexicographically smaller than  \"apply \"."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length <= 30`",
      "`words[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "721",
    "slug": "accounts-merge",
    "title": "Accounts Merge",
    "difficulty": "Medium",
    "description": "Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are **emails** representing emails of the account. Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name. After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails **in sorted order**. The accounts themselves can be returned in **any order**.",
    "examples": [
      {
        "input": "accounts = \\[\\[ \"John \", \"johnsmith@mail.com \", \"john\\_newyork@mail.com \"\\],\\[ \"John \", \"johnsmith@mail.com \", \"john00@mail.com \"\\],\\[ \"Mary \", \"mary@mail.com \"\\],\\[ \"John \", \"johnnybravo@mail.com \"\\]\\]",
        "output": "\\[\\[ \"John \", \"john00@mail.com \", \"john\\_newyork@mail.com \", \"johnsmith@mail.com \"\\],\\[ \"Mary \", \"mary@mail.com \"\\],\\[ \"John \", \"johnnybravo@mail.com \"\\]\\]",
        "explanation": ""
      },
      {
        "input": "accounts = \\[\\[ \"Gabe \", \"Gabe0@m.co \", \"Gabe3@m.co \", \"Gabe1@m.co \"\\],\\[ \"Kevin \", \"Kevin3@m.co \", \"Kevin5@m.co \", \"Kevin0@m.co \"\\],\\[ \"Ethan \", \"Ethan5@m.co \", \"Ethan4@m.co \", \"Ethan0@m.co \"\\],\\[ \"Hanzo \", \"Hanzo3@m.co \", \"Hanzo1@m.co \", \"Hanzo0@m.co \"\\],\\[ \"Fern \", \"Fern5@m.co \", \"Fern1@m.co \", \"Fern0@m.co \"\\]\\]",
        "output": "\\[\\[ \"Ethan \", \"Ethan0@m.co \", \"Ethan4@m.co \", \"Ethan5@m.co \"\\],\\[ \"Gabe \", \"Gabe0@m.co \", \"Gabe1@m.co \", \"Gabe3@m.co \"\\],\\[ \"Hanzo \", \"Hanzo0@m.co \", \"Hanzo1@m.co \", \"Hanzo3@m.co \"\\],\\[ \"Kevin \", \"Kevin0@m.co \", \"Kevin3@m.co \", \"Kevin5@m.co \"\\],\\[ \"Fern \", \"Fern0@m.co \", \"Fern1@m.co \", \"Fern5@m.co \"\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= accounts.length <= 1000`",
      "`2 <= accounts[i].length <= 10`",
      "`1 <= accounts[i][j].length <= 30`",
      "`accounts[i][0]` consists of English letters.",
      "`accounts[i][j] (for j > 0)` is a valid email."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "722",
    "slug": "remove-comments",
    "title": "Remove Comments",
    "difficulty": "Medium",
    "description": "Given a C++ program, remove comments from it. The program source is an array of strings `source` where `source[i]` is the `ith` line of the source code. This represents the result of splitting the original source code string by the newline character `' '`. In C++, there are two types of comments, line comments, and block comments. *  The string `\"// \"` denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored. *  The string `\"/* \"` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `\"*/ \"` should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string `\"/*/ \"` does not yet end the block comment, as the ending would be overlapping the beginning. The first effective comment takes precedence over others. *  For example, if the string `\"// \"` occurs in a block comment, it is ignored. *  Similarly, if the string `\"/* \"` occurs in a line or block comment, it is also ignored. If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty. There will be no control characters, single quote, or double quote characters. *  For example, `source = \"string s = \"/* Not a comment. */ \"; \"` will not be a test case. Also, nothing else such as defines or macros will interfere with the comments. It is guaranteed that every open block comment will eventually be closed, so `\"/* \"` outside of a line or block comment always starts a new comment. Finally, implicit newline characters can be deleted by block comments. Please see the examples below for details. After removing the comments from the source code, return _the source code in the same format_.",
    "examples": [
      {
        "input": "source = \\[ \"/\\*Test program \\*/ \",  \"int main() \",  \"{  \",  \"  // variable declaration  \",  \"int a, b, c; \",  \"/\\* This is a test \",  \"   multiline   \",  \"   comment for  \",  \"   testing \\*/ \",  \"a = b + c; \",  \"} \"\\]",
        "output": "\\[ \"int main() \", \"{  \", \"   \", \"int a, b, c; \", \"a = b + c; \", \"} \"\\]",
        "explanation": "The line by line code is visualized as below:"
      },
      {
        "input": "source = \\[ \"a/\\*comment \",  \"line \",  \"more\\_comment\\*/b \"\\]",
        "output": "\\[ \"ab \"\\]",
        "explanation": "The original source string is  \"a/\\*comment\\"
      }
    ],
    "constraints": [
      "`1 <= source.length <= 100`",
      "`0 <= source[i].length <= 80`",
      "`source[i]` consists of printable ASCII characters.",
      "Every open block comment is eventually closed.",
      "There are no single-quote or double-quote in the input."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "723",
    "slug": "candy-crush",
    "title": "Candy Crush",
    "difficulty": "Medium",
    "description": "This question is about implementing a basic elimination algorithm for Candy Crush. Given an `m x n` integer array `board` representing the grid of candy where `board[i][j]` represents the type of candy. A value of `board[i][j] == 0` represents that the cell is empty. The given board represents the state of the game following the player's move. Now, you need to restore the board to a stable state by crushing candies according to the following rules: *  If three or more candies of the same type are adjacent vertically or horizontally, crush them all at the same time - these positions become empty. *  After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. No new candies will drop outside the top boundary. *  After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps. *  If there does not exist more candies that can be crushed (i.e., the board is stable), then return the current board. You need to perform the above rules until the board becomes stable, then return _the stable board_.",
    "examples": [
      {
        "input": "board = \\[\\[110,5,112,113,114\\],\\[210,211,5,213,214\\],\\[310,311,3,313,314\\],\\[410,411,412,5,414\\],\\[5,1,512,3,3\\],\\[610,4,1,613,614\\],\\[710,1,2,713,714\\],\\[810,1,2,1,1\\],\\[1,1,2,2,2\\],\\[4,1,4,4,1014\\]\\]",
        "output": "\\[\\[0,0,0,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,0,0\\],\\[110,0,0,0,114\\],\\[210,0,0,0,214\\],\\[310,0,0,113,314\\],\\[410,0,0,213,414\\],\\[610,211,112,313,614\\],\\[710,311,412,613,714\\],\\[810,411,512,713,1014\\]\\]"
      },
      {
        "input": "board = \\[\\[1,3,5,5,2\\],\\[3,4,3,3,1\\],\\[3,2,4,5,2\\],\\[2,4,4,5,5\\],\\[1,4,4,1,1\\]\\]",
        "output": "\\[\\[1,3,0,0,0\\],\\[3,4,0,5,2\\],\\[3,2,0,3,1\\],\\[2,4,0,5,2\\],\\[1,4,3,1,1\\]\\]"
      }
    ],
    "constraints": [
      "`m == board.length`",
      "`n == board[i].length`",
      "`3 <= m, n <= 50`",
      "`1 <= board[i][j] <= 2000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "724",
    "slug": "find-pivot-index",
    "title": "Find Pivot Index",
    "difficulty": "Easy",
    "description": "Given an array of integers `nums`, calculate the **pivot index** of this array. The **pivot index** is the index where the sum of all the numbers **strictly** to the left of the index is equal to the sum of all the numbers **strictly** to the index's right. If the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array. Return _the **leftmost pivot index**_. If no such index exists, return `-1`.",
    "examples": [
      {
        "input": "nums = \\[1,7,3,6,5,6\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "-1",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,1,-1\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-1000 <= nums[i] <= 1000`"
    ],
    "note": "This question is the same as 1991: [https://leetcode.com/problems/find-the-middle-index-in-array/](https://leetcode.com/problems/find-the-middle-index-in-array/)",
    "follow_up": null
  },
  {
    "id": "725",
    "slug": "split-linked-list-in-parts",
    "title": "Split Linked List in Parts",
    "difficulty": "Medium",
    "description": "Given the `head` of a singly linked list and an integer `k`, split the linked list into `k` consecutive linked list parts. The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null. The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later. Return _an array of the_ `k` _parts_.",
    "examples": [
      {
        "input": "head = \\[1,2,3\\], k = 5",
        "output": "\\[\\[1\\],\\[2\\],\\[3\\],\\[\\],\\[\\]\\]",
        "explanation": ""
      },
      {
        "input": "head = \\[1,2,3,4,5,6,7,8,9,10\\], k = 3",
        "output": "\\[\\[1,2,3,4\\],\\[5,6,7\\],\\[8,9,10\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[0, 1000]`.",
      "`0 <= Node.val <= 1000`",
      "`1 <= k <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "726",
    "slug": "number-of-atoms",
    "title": "Number of Atoms",
    "difficulty": "Hard",
    "description": "Given a string `formula` representing a chemical formula, return _the count of each atom_. The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name. One or more digits representing that element's count may follow if the count is greater than `1`. If the count is `1`, no digits will follow. *  For example, `\"H2O \"` and `\"H2O2 \"` are possible, but `\"H1O2 \"` is impossible. Two formulas are concatenated together to produce another formula. *  For example, `\"H2O2He3Mg4 \"` is also a formula. A formula placed in parentheses, and a count (optionally added) is also a formula. *  For example, `\"(H2O2) \"` and `\"(H2O2)3 \"` are formulas. Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than `1`), followed by the second name (in sorted order), followed by its count (if that count is more than `1`), and so on. The test cases are generated so that all the values in the output fit in a **32-bit** integer.",
    "examples": [
      {
        "input": "formula =  \"H2O \"",
        "output": "\"H2O \"",
        "explanation": "The count of elements are {'H': 2, 'O': 1}."
      },
      {
        "input": "formula =  \"Mg(OH)2 \"",
        "output": "\"H2MgO2 \"",
        "explanation": "The count of elements are {'H': 2, 'Mg': 1, 'O': 2}."
      },
      {
        "input": "formula =  \"K4(ON(SO3)2)2 \"",
        "output": "\"K4N2O14S4 \"",
        "explanation": "The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}."
      }
    ],
    "constraints": [
      "`1 <= formula.length <= 1000`",
      "`formula` consists of English letters, digits, `'('`, and `')'`.",
      "`formula` is always valid."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "727",
    "slug": "minimum-window-subsequence",
    "title": "Minimum Window Subsequence",
    "difficulty": "Hard",
    "description": "Given strings `s1` and `s2`, return _the minimum contiguous substring part of_ `s1`_, so that_ `s2` _is a subsequence of the part_. If there is no such window in `s1` that covers all characters in `s2`, return the empty string `\" \"`. If there are multiple such minimum-length windows, return the one with the **left-most starting index**.",
    "examples": [
      {
        "input": "s1 =  \"abcdebdde \", s2 =  \"bde \"",
        "output": "\"bcde \"",
        "explanation": ""
      },
      {
        "input": "s1 =  \"jmeqksfrsdcmsiwvaovztaqenprpvnbstl \", s2 =  \"u \"",
        "output": "\" \""
      }
    ],
    "constraints": [
      "`1 <= s1.length <= 2  104`",
      "`1 <= s2.length <= 100`",
      "`s1` and `s2` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "728",
    "slug": "self-dividing-numbers",
    "title": "Self Dividing Numbers",
    "difficulty": "Easy",
    "description": "A **self-dividing number** is a number that is divisible by every digit it contains. *  For example, `128` is **a self-dividing number** because `128 % 1 == 0`, `128 % 2 == 0`, and `128 % 8 == 0`. A **self-dividing number** is not allowed to contain the digit zero. Given two integers `left` and `right`, return _a list of all the **self-dividing numbers** in the range_ `[left, right]`.",
    "examples": [
      {
        "input": "left = 1, right = 22",
        "output": "\\[1,2,3,4,5,6,7,8,9,11,12,15,22\\]"
      },
      {
        "input": "left = 47, right = 85",
        "output": "\\[48,55,66,77\\]"
      }
    ],
    "constraints": [
      "`1 <= left <= right <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "729",
    "slug": "my-calendar-i",
    "title": "My Calendar I",
    "difficulty": "Medium",
    "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **double booking**. A **double booking** happens when two events have some non-empty intersection (i.e., some moment is common to both events.). The event can be represented as a pair of integers `start` and `end` that represents a booking on the half-open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`. Implement the `MyCalendar` class: *  `MyCalendar()` Initializes the calendar object. *  `boolean book(int start, int end)` Returns `true` if the event can be added to the calendar successfully without causing a **double booking**. Otherwise, return `false` and do not add the event to the calendar.",
    "examples": [],
    "constraints": [
      "`0 <= start < end <= 109`",
      "At most `1000` calls will be made to `book`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "730",
    "slug": "count-different-palindromic-subsequences",
    "title": "Count Different Palindromic Subsequences",
    "difficulty": "Hard",
    "description": "Given a string s, return _the number of different non-empty palindromic subsequences in_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`. A subsequence of a string is obtained by deleting zero or more characters from the string. A sequence is palindromic if it is equal to the sequence reversed. Two sequences `a1, a2, ...` and `b1, b2, ...` are different if there is some `i` for which `ai != bi`.",
    "examples": [
      {
        "input": "s =  \"bccb \"",
        "output": "6",
        "explanation": "The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'."
      },
      {
        "input": "s =  \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba \"",
        "output": "104860361",
        "explanation": "There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s[i]` is either `'a'`, `'b'`, `'c'`, or `'d'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "731",
    "slug": "my-calendar-ii",
    "title": "My Calendar II",
    "difficulty": "Medium",
    "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **triple booking**. A **triple booking** happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.). The event can be represented as a pair of integers `start` and `end` that represents a booking on the half-open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`. Implement the `MyCalendarTwo` class: *  `MyCalendarTwo()` Initializes the calendar object. *  `boolean book(int start, int end)` Returns `true` if the event can be added to the calendar successfully without causing a **triple booking**. Otherwise, return `false` and do not add the event to the calendar.",
    "examples": [],
    "constraints": [
      "`0 <= start < end <= 109`",
      "At most `1000` calls will be made to `book`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "732",
    "slug": "my-calendar-iii",
    "title": "My Calendar III",
    "difficulty": "Hard",
    "description": "A `k`\\-booking happens when `k` events have some non-empty intersection (i.e., there is some time that is common to all `k` events.) You are given some events `[startTime, endTime)`, after each given event, return an integer `k` representing the maximum `k`\\-booking between all the previous events. Implement the `MyCalendarThree` class: *  `MyCalendarThree()` Initializes the object. *  `int book(int startTime, int endTime)` Returns an integer `k` representing the largest integer such that there exists a `k`\\-booking in the calendar.",
    "examples": [],
    "constraints": [
      "`0 <= startTime < endTime <= 109`",
      "At most `400` calls will be made to `book`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "733",
    "slug": "flood-fill",
    "title": "Flood Fill",
    "difficulty": "Easy",
    "description": "An image is represented by an `m x n` integer grid `image` where `image[i][j]` represents the pixel value of the image. You are also given three integers `sr`, `sc`, and `color`. You should perform a **flood fill** on the image starting from the pixel `image[sr][sc]`. To perform a **flood fill**, consider the starting pixel, plus any pixels connected **4-directionally** to the starting pixel of the same color as the starting pixel, plus any pixels connected **4-directionally** to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with `color`. Return _the modified image after performing the flood fill_.",
    "examples": [
      {
        "input": "image = \\[\\[1,1,1\\],\\[1,1,0\\],\\[1,0,1\\]\\], sr = 1, sc = 1, color = 2",
        "output": "\\[\\[2,2,2\\],\\[2,2,0\\],\\[2,0,1\\]\\]",
        "explanation": "From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color."
      },
      {
        "input": "image = \\[\\[0,0,0\\],\\[0,0,0\\]\\], sr = 0, sc = 0, color = 0",
        "output": "\\[\\[0,0,0\\],\\[0,0,0\\]\\]",
        "explanation": "The starting pixel is already colored 0, so no changes are made to the image."
      }
    ],
    "constraints": [
      "`m == image.length`",
      "`n == image[i].length`",
      "`1 <= m, n <= 50`",
      "`0 <= image[i][j], color < 216`",
      "`0 <= sr < m`",
      "`0 <= sc < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "734",
    "slug": "sentence-similarity",
    "title": "Sentence Similarity",
    "difficulty": "Easy",
    "description": "We can represent a sentence as an array of words, for example, the sentence `\"I am happy with leetcode \"` can be represented as `arr = [ \"I \", \"am \",happy \", \"with \", \"leetcode \"]`. Given two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar. Return _`true` if `sentence1` and `sentence2` are similar, or `false` if they are not similar_. Two sentences are similar if: *  They have **the same length** (i.e., the same number of words) *  `sentence1[i]` and `sentence2[i]` are similar. Notice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words `a` and `b` are similar, and the words `b` and `c` are similar, `a` and `c` are **not necessarily similar**.",
    "examples": [
      {
        "input": "sentence1 = \\[ \"great \", \"acting \", \"skills \"\\], sentence2 = \\[ \"fine \", \"drama \", \"talent \"\\], similarPairs = \\[\\[ \"great \", \"fine \"\\],\\[ \"drama \", \"acting \"\\],\\[ \"skills \", \"talent \"\\]\\]",
        "output": "true",
        "explanation": "The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2."
      },
      {
        "input": "sentence1 = \\[ \"great \"\\], sentence2 = \\[ \"great \"\\], similarPairs = \\[\\]",
        "output": "true",
        "explanation": "A word is similar to itself."
      },
      {
        "input": "sentence1 = \\[ \"great \"\\], sentence2 = \\[ \"doubleplus \", \"good \"\\], similarPairs = \\[\\[ \"great \", \"doubleplus \"\\]\\]",
        "output": "false",
        "explanation": "As they don't have the same length, we return false."
      }
    ],
    "constraints": [
      "`1 <= sentence1.length, sentence2.length <= 1000`",
      "`1 <= sentence1[i].length, sentence2[i].length <= 20`",
      "`sentence1[i]` and `sentence2[i]` consist of English letters.",
      "`0 <= similarPairs.length <= 1000`",
      "`similarPairs[i].length == 2`",
      "`1 <= xi.length, yi.length <= 20`",
      "`xi` and `yi` consist of lower-case and upper-case English letters.",
      "All the pairs `(xi, yi)` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "735",
    "slug": "asteroid-collision",
    "title": "Asteroid Collision",
    "difficulty": "Medium",
    "description": "We are given an array `asteroids` of integers representing asteroids in a row. For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed. Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.",
    "examples": [
      {
        "input": "asteroids = \\[5,10,-5\\]",
        "output": "\\[5,10\\]",
        "explanation": "The 10 and -5 collide resulting in 10. The 5 and 10 never collide."
      },
      {
        "input": "asteroids = \\[8,-8\\]",
        "output": "\\[\\]",
        "explanation": "The 8 and -8 collide exploding each other."
      },
      {
        "input": "asteroids = \\[10,2,-5\\]",
        "output": "\\[10\\]",
        "explanation": "The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10."
      }
    ],
    "constraints": [
      "`2 <= asteroids.length <= 104`",
      "`-1000 <= asteroids[i] <= 1000`",
      "`asteroids[i] != 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "736",
    "slug": "parse-lisp-expression",
    "title": "Parse Lisp Expression",
    "difficulty": "Hard",
    "description": "You are given a string expression representing a Lisp-like expression to return the integer value of. The syntax for these expressions is given as follows. *  An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer. *  (An integer could be positive or negative.) *  A let expression takes the form `\"(let v1 e1 v2 e2 ... vn en expr) \"`, where let is always the string `\"let \"`, then there are one or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on sequentially; and then the value of this let expression is the value of the expression `expr`. *  An add expression takes the form `\"(add e1 e2) \"` where add is always the string `\"add \"`, there are always two expressions `e1`, `e2` and the result is the addition of the evaluation of `e1` and the evaluation of `e2`. *  A mult expression takes the form `\"(mult e1 e2) \"` where mult is always the string `\"mult \"`, there are always two expressions `e1`, `e2` and the result is the multiplication of the evaluation of e1 and the evaluation of e2. *  For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names `\"add \"`, `\"let \"`, and `\"mult \"` are protected and will never be used as variable names. *  Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.",
    "examples": [
      {
        "input": "expression =  \"(let x 2 (mult x (let x 3 y 4 (add x y)))) \"",
        "output": "14",
        "explanation": "In the expression (add x y), when checking for the value of the variable x,"
      },
      {
        "input": "expression =  \"(let x 3 x 2 x) \"",
        "output": "2",
        "explanation": "Assignment in let statements is processed sequentially."
      },
      {
        "input": "expression =  \"(let x 1 y 2 x (add x y) (add x y)) \"",
        "output": "5",
        "explanation": "The first (add x y) evaluates as 3, and is assigned to x."
      }
    ],
    "constraints": [
      "`1 <= expression.length <= 2000`",
      "There are no leading or trailing spaces in `expression`.",
      "All tokens are separated by a single space in `expression`.",
      "The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.",
      "The expression is guaranteed to be legal and evaluate to an integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "737",
    "slug": "sentence-similarity-ii",
    "title": "Sentence Similarity II",
    "difficulty": "Medium",
    "description": "We can represent a sentence as an array of words, for example, the sentence `\"I am happy with leetcode \"` can be represented as `arr = [ \"I \", \"am \",happy \", \"with \", \"leetcode \"]`. Given two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar. Return `true` _if `sentence1` and `sentence2` are similar, or_ `false` _if they are not similar_. Two sentences are similar if: *  They have **the same length** (i.e., the same number of words) *  `sentence1[i]` and `sentence2[i]` are similar. Notice that a word is always similar to itself, also notice that the similarity relation is transitive. For example, if the words `a` and `b` are similar, and the words `b` and `c` are similar, then `a` and `c` are **similar**.",
    "examples": [
      {
        "input": "sentence1 = \\[ \"great \", \"acting \", \"skills \"\\], sentence2 = \\[ \"fine \", \"drama \", \"talent \"\\], similarPairs = \\[\\[ \"great \", \"good \"\\],\\[ \"fine \", \"good \"\\],\\[ \"drama \", \"acting \"\\],\\[ \"skills \", \"talent \"\\]\\]",
        "output": "true",
        "explanation": "The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2."
      },
      {
        "input": "sentence1 = \\[ \"I \", \"love \", \"leetcode \"\\], sentence2 = \\[ \"I \", \"love \", \"onepiece \"\\], similarPairs = \\[\\[ \"manga \", \"onepiece \"\\],\\[ \"platform \", \"anime \"\\],\\[ \"leetcode \", \"platform \"\\],\\[ \"anime \", \"manga \"\\]\\]",
        "output": "true",
        "explanation": "\"leetcode \" -->  \"platform \" -->  \"anime \" -->  \"manga \" -->  \"onepiece \"."
      },
      {
        "input": "sentence1 = \\[ \"I \", \"love \", \"leetcode \"\\], sentence2 = \\[ \"I \", \"love \", \"onepiece \"\\], similarPairs = \\[\\[ \"manga \", \"hunterXhunter \"\\],\\[ \"platform \", \"anime \"\\],\\[ \"leetcode \", \"platform \"\\],\\[ \"anime \", \"manga \"\\]\\]",
        "output": "false",
        "explanation": "\"leetcode \" is not similar to  \"onepiece \"."
      }
    ],
    "constraints": [
      "`1 <= sentence1.length, sentence2.length <= 1000`",
      "`1 <= sentence1[i].length, sentence2[i].length <= 20`",
      "`sentence1[i]` and `sentence2[i]` consist of lower-case and upper-case English letters.",
      "`0 <= similarPairs.length <= 2000`",
      "`similarPairs[i].length == 2`",
      "`1 <= xi.length, yi.length <= 20`",
      "`xi` and `yi` consist of English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "738",
    "slug": "monotone-increasing-digits",
    "title": "Monotone Increasing Digits",
    "difficulty": "Medium",
    "description": "An integer has **monotone increasing digits** if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`. Given an integer `n`, return _the largest number that is less than or equal to_ `n` _with **monotone increasing digits**_.",
    "examples": [
      {
        "input": "n = 10",
        "output": "9"
      },
      {
        "input": "n = 1234",
        "output": "1234"
      },
      {
        "input": "n = 332",
        "output": "299"
      }
    ],
    "constraints": [
      "`0 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "739",
    "slug": "daily-temperatures",
    "title": "Daily Temperatures",
    "difficulty": "Medium",
    "description": "Given an array of integers `temperatures` represents the daily temperatures, return _an array_ `answer` _such that_ `answer[i]` _is the number of days you have to wait after the_ `ith` _day to get a warmer temperature_. If there is no future day for which this is possible, keep `answer[i] == 0` instead.",
    "examples": [
      {
        "input": "temperatures = \\[73,74,75,71,69,72,76,73\\]",
        "output": "\\[1,1,4,2,1,1,0,0\\]"
      },
      {
        "input": "temperatures = \\[30,40,50,60\\]",
        "output": "\\[1,1,1,0\\]"
      },
      {
        "input": "temperatures = \\[30,60,90\\]",
        "output": "\\[1,1,0\\]"
      }
    ],
    "constraints": [
      "`1 <= temperatures.length <= 105`",
      "`30 <= temperatures[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "740",
    "slug": "delete-and-earn",
    "title": "Delete and Earn",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. You want to maximize the number of points you get by performing the following operation any number of times: *  Pick any `nums[i]` and delete it to earn `nums[i]` points. Afterwards, you must delete **every** element equal to `nums[i] - 1` and **every** element equal to `nums[i] + 1`. Return _the **maximum number of points** you can earn by applying the above operation some number of times_.",
    "examples": [
      {
        "input": "nums = \\[3,4,2\\]",
        "output": "6",
        "explanation": "You can perform the following operations:"
      },
      {
        "input": "nums = \\[2,2,3,3,3,4\\]",
        "output": "9",
        "explanation": "You can perform the following operations:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  104`",
      "`1 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "741",
    "slug": "cherry-pickup",
    "title": "Cherry Pickup",
    "difficulty": "Hard",
    "description": "You are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers. *  `0` means the cell is empty, so you can pass through, *  `1` means the cell contains a cherry that you can pick up and pass through, or *  `-1` means the cell contains a thorn that blocks your way. Return _the maximum number of cherries you can collect by following the rules below_: *  Starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`). *  After reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells. *  When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`. *  If there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1,-1\\],\\[1,0,-1\\],\\[1,1,1\\]\\]",
        "output": "5",
        "explanation": "The player started at (0, 0) and went down, down, right right to reach (2, 2)."
      },
      {
        "input": "grid = \\[\\[1,1,-1\\],\\[1,-1,1\\],\\[-1,1,1\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == grid.length`",
      "`n == grid[i].length`",
      "`1 <= n <= 50`",
      "`grid[i][j]` is `-1`, `0`, or `1`.",
      "`grid[0][0] != -1`",
      "`grid[n - 1][n - 1] != -1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "742",
    "slug": "closest-leaf-in-a-binary-tree",
    "title": "Closest Leaf in a Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree where every node has **a unique value** and a target integer `k`, return _the value of the **nearest leaf node** to the target_ `k` _in the tree_. **Nearest to a leaf** means the least number of edges traveled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.",
    "examples": [
      {
        "input": "root = \\[1,3,2\\], k = 1",
        "output": "2",
        "explanation": "Either 2 or 3 is the nearest leaf node to the target of 1."
      },
      {
        "input": "root = \\[1\\], k = 1",
        "output": "1",
        "explanation": "The nearest leaf node is the root node itself."
      },
      {
        "input": "root = \\[1,2,3,4,null,null,null,5,null,6\\], k = 2",
        "output": "3",
        "explanation": "The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 1000]`.",
      "`1 <= Node.val <= 1000`",
      "All the values of the tree are unique.",
      "There exist some node in the tree where `Node.val == k`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "743",
    "slug": "network-delay-time",
    "title": "Network Delay Time",
    "difficulty": "Medium",
    "description": "You are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target. We will send a signal from a given node `k`. Return _the **minimum** time it takes for all the_ `n` _nodes to receive the signal_. If it is impossible for all the `n` nodes to receive the signal, return `-1`.",
    "examples": [
      {
        "input": "times = \\[\\[2,1,1\\],\\[2,3,1\\],\\[3,4,1\\]\\], n = 4, k = 2",
        "output": "2"
      },
      {
        "input": "times = \\[\\[1,2,1\\]\\], n = 2, k = 1",
        "output": "1"
      },
      {
        "input": "times = \\[\\[1,2,1\\]\\], n = 2, k = 2",
        "output": "-1"
      }
    ],
    "constraints": [
      "`1 <= k <= n <= 100`",
      "`1 <= times.length <= 6000`",
      "`times[i].length == 3`",
      "`1 <= ui, vi <= n`",
      "`ui != vi`",
      "`0 <= wi <= 100`",
      "All the pairs `(ui, vi)` are unique. (i.e., no multiple edges.)"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "744",
    "slug": "find-smallest-letter-greater-than-target",
    "title": "Find Smallest Letter Greater Than Target",
    "difficulty": "Easy",
    "description": "You are given an array of characters `letters` that is sorted in **non-decreasing order**, and a character `target`. There are **at least two different** characters in `letters`. Return _the smallest character in_ `letters` _that is lexicographically greater than_ `target`. If such a character does not exist, return the first character in `letters`.",
    "examples": [
      {
        "input": "letters = \\[ \"c \", \"f \", \"j \"\\], target =  \"a \"",
        "output": "\"c \"",
        "explanation": "The smallest character that is lexicographically greater than 'a' in letters is 'c'."
      },
      {
        "input": "letters = \\[ \"c \", \"f \", \"j \"\\], target =  \"c \"",
        "output": "\"f \"",
        "explanation": "The smallest character that is lexicographically greater than 'c' in letters is 'f'."
      },
      {
        "input": "letters = \\[ \"x \", \"x \", \"y \", \"y \"\\], target =  \"z \"",
        "output": "\"x \"",
        "explanation": "There are no characters in letters that is lexicographically greater than 'z' so we return letters\\[0\\]."
      }
    ],
    "constraints": [
      "`2 <= letters.length <= 104`",
      "`letters[i]` is a lowercase English letter.",
      "`letters` is sorted in non-decreasing order.",
      "`letters` contains at least two different characters.",
      "`target` is a lowercase English letter."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "745",
    "slug": "prefix-and-suffix-search",
    "title": "Prefix and Suffix Search",
    "difficulty": "Hard",
    "description": "Design a special dictionary that searches the words in it by a prefix and a suffix. Implement the `WordFilter` class: *  `WordFilter(string[] words)` Initializes the object with the `words` in the dictionary. *  `f(string pref, string suff)` Returns _the index of the word in the dictionary,_ which has the prefix `pref` and the suffix `suff`. If there is more than one valid index, return **the largest** of them. If there is no such word in the dictionary, return `-1`.",
    "examples": [],
    "constraints": [
      "`1 <= words.length <= 104`",
      "`1 <= words[i].length <= 7`",
      "`1 <= pref.length, suff.length <= 7`",
      "`words[i]`, `pref` and `suff` consist of lowercase English letters only.",
      "At most `104` calls will be made to the function `f`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "746",
    "slug": "min-cost-climbing-stairs",
    "title": "Min Cost Climbing Stairs",
    "difficulty": "Easy",
    "description": "You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps. You can either start from the step with index `0`, or the step with index `1`. Return _the minimum cost to reach the top of the floor_.",
    "examples": [
      {
        "input": "cost = \\[10,15,20\\]",
        "output": "15",
        "explanation": "You will start at index 1."
      },
      {
        "input": "cost = \\[1,100,1,1,1,100,1,1,100,1\\]",
        "output": "6",
        "explanation": "You will start at index 0."
      }
    ],
    "constraints": [
      "`2 <= cost.length <= 1000`",
      "`0 <= cost[i] <= 999`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "747",
    "slug": "largest-number-at-least-twice-of-others",
    "title": "Largest Number At Least Twice of Others",
    "difficulty": "Easy",
    "description": "You are given an integer array `nums` where the largest integer is **unique**. Determine whether the largest element in the array is **at least twice** as much as every other number in the array. If it is, return _the **index** of the largest element, or return_ `-1` _otherwise_.",
    "examples": [
      {
        "input": "nums = \\[3,6,1,0\\]",
        "output": "1",
        "explanation": "6 is the largest integer."
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "-1",
        "explanation": "4 is less than twice the value of 3, so we return -1."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 50`",
      "`0 <= nums[i] <= 100`",
      "The largest element in `nums` is unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "748",
    "slug": "shortest-completing-word",
    "title": "Shortest Completing Word",
    "difficulty": "Easy",
    "description": "Given a string `licensePlate` and an array of strings `words`, find the **shortest completing** word in `words`. A **completing** word is a word that **contains all the letters** in `licensePlate`. **Ignore numbers and spaces** in `licensePlate`, and treat letters as **case insensitive**. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more. For example, if `licensePlate` `= \"aBc 12c \"`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. Possible **completing** words are `\"abccdef \"`, `\"caaacab \"`, and `\"cbca \"`. Return _the shortest **completing** word in_ `words`_._ It is guaranteed an answer exists. If there are multiple shortest **completing** words, return the **first** one that occurs in `words`.",
    "examples": [
      {
        "input": "licensePlate =  \"1s3 PSt \", words = \\[ \"step \", \"steps \", \"stripe \", \"stepple \"\\]",
        "output": "\"steps \"",
        "explanation": "licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'."
      },
      {
        "input": "licensePlate =  \"1s3 456 \", words = \\[ \"looks \", \"pest \", \"stew \", \"show \"\\]",
        "output": "\"pest \"",
        "explanation": "licensePlate only contains the letter 's'. All the words contain 's', but among these  \"pest \",  \"stew \", and  \"show \" are shortest. The answer is  \"pest \" because it is the word that appears earliest of the 3."
      }
    ],
    "constraints": [
      "`1 <= licensePlate.length <= 7`",
      "`licensePlate` contains digits, letters (uppercase or lowercase), or space `' '`.",
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length <= 15`",
      "`words[i]` consists of lower case English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "749",
    "slug": "contain-virus",
    "title": "Contain Virus",
    "difficulty": "Hard",
    "description": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls. The world is modeled as an `m x n` binary grid `isInfected`, where `isInfected[i][j] == 0` represents uninfected cells, and `isInfected[i][j] == 1` represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two **4-directionally** adjacent cells, on the shared boundary. Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There **will never be a tie**. Return _the number of walls used to quarantine all the infected regions_. If the world will become fully infected, return the number of walls used.",
    "examples": [
      {
        "input": "isInfected = \\[\\[0,1,0,0,0,0,0,1\\],\\[0,1,0,0,0,0,0,1\\],\\[0,0,0,0,0,0,0,1\\],\\[0,0,0,0,0,0,0,0\\]\\]",
        "output": "10",
        "explanation": "There are 2 contaminated regions."
      },
      {
        "input": "isInfected = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]",
        "output": "4",
        "explanation": "Even though there is only one cell saved, there are 4 walls built."
      },
      {
        "input": "isInfected = \\[\\[1,1,1,0,0,0,0,0,0\\],\\[1,0,1,0,1,1,1,1,1\\],\\[1,1,1,0,0,0,0,0,0\\]\\]",
        "output": "13",
        "explanation": "The region on the left only builds two new walls."
      }
    ],
    "constraints": [
      "`m == isInfected.length`",
      "`n == isInfected[i].length`",
      "`1 <= m, n <= 50`",
      "`isInfected[i][j]` is either `0` or `1`.",
      "There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "750",
    "slug": "number-of-corner-rectangles",
    "title": "Number Of Corner Rectangles",
    "difficulty": "Medium",
    "description": "Given an `m x n` integer matrix `grid` where each entry is only `0` or `1`, return _the number of **corner rectangles**_. A **corner rectangle** is four distinct `1`'s on the grid that forms an axis-aligned rectangle. Note that only the corners need to have the value `1`. Also, all four `1`'s used must be distinct.",
    "examples": [
      {
        "input": "grid = \\[\\[1,0,0,1,0\\],\\[0,0,1,0,1\\],\\[0,0,0,1,0\\],\\[1,0,1,0,1\\]\\]",
        "output": "1",
        "explanation": "There is only one corner rectangle, with corners grid\\[1\\]\\[2\\], grid\\[1\\]\\[4\\], grid\\[3\\]\\[2\\], grid\\[3\\]\\[4\\]."
      },
      {
        "input": "grid = \\[\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\]\\]",
        "output": "9",
        "explanation": "There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle."
      },
      {
        "input": "grid = \\[\\[1,1,1,1\\]\\]",
        "output": "0",
        "explanation": "Rectangles must have four distinct corners."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 200`",
      "`grid[i][j]` is either `0` or `1`.",
      "The number of `1`'s in the grid is in the range `[1, 6000]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "751",
    "slug": "ip-to-cidr",
    "title": "IP to CIDR",
    "difficulty": "Medium",
    "description": "An **IP address** is a formatted 32-bit unsigned integer where each group of 8 bits is printed as a decimal number and the dot character `'.'` splits the groups. *  For example, the binary number `00001111 10001000 11111111 01101011` (spaces added for clarity) formatted as an IP address would be `\"15.136.255.107 \"`. A **CIDR block** is a format used to denote a specific set of IP addresses. It is a string consisting of a base IP address, followed by a slash, followed by a prefix length `k`. The addresses it covers are all the IPs whose **first `k` bits** are the same as the base IP address. *  For example, `\"123.45.67.89/20 \"` is a CIDR block with a prefix length of `20`. Any IP address whose binary representation matches `01111011 00101101 0100xxxx xxxxxxxx`, where `x` can be either `0` or `1`, is in the set covered by the CIDR block. You are given a start IP address `ip` and the number of IP addresses we need to cover `n`. Your goal is to use **as few CIDR blocks as possible** to cover all the IP addresses in the **inclusive** range `[ip, ip + n - 1]` **exactly**. No other IP addresses outside of the range should be covered. Return _the **shortest** list of **CIDR blocks** that covers the range of IP addresses. If there are multiple answers, return **any** of them_.",
    "examples": [
      {
        "input": "ip =  \"255.0.0.7 \", n = 10",
        "output": "\\[ \"255.0.0.7/32 \", \"255.0.0.8/29 \", \"255.0.0.16/32 \"\\]",
        "explanation": ""
      },
      {
        "input": "ip =  \"117.145.102.62 \", n = 8",
        "output": "\\[ \"117.145.102.62/31 \", \"117.145.102.64/30 \", \"117.145.102.68/31 \"\\]"
      }
    ],
    "constraints": [
      "`7 <= ip.length <= 15`",
      "`ip` is a valid IPv4 on the form `\"a.b.c.d \"` where `a`, `b`, `c`, and `d` are integers in the range `[0, 255]`.",
      "`1 <= n <= 1000`",
      "Every implied address `ip + x` (for `x < n`) will be a valid IPv4 address."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "752",
    "slug": "open-the-lock",
    "title": "Open the Lock",
    "difficulty": "Medium",
    "description": "You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot. The lock initially starts at `'0000'`, a string representing the state of the 4 wheels. You are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it. Given a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.",
    "examples": [
      {
        "input": "deadends = \\[ \"0201 \", \"0101 \", \"0102 \", \"1212 \", \"2002 \"\\], target =  \"0202 \"",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "deadends = \\[ \"8888 \"\\], target =  \"0009 \"",
        "output": "1",
        "explanation": "We can turn the last wheel in reverse to move from  \"0000 \" ->  \"0009 \"."
      },
      {
        "input": "deadends = \\[ \"8887 \", \"8889 \", \"8878 \", \"8898 \", \"8788 \", \"8988 \", \"7888 \", \"9888 \"\\], target =  \"8888 \"",
        "output": "-1",
        "explanation": "We cannot reach the target without getting stuck."
      }
    ],
    "constraints": [
      "`1 <= deadends.length <= 500`",
      "`deadends[i].length == 4`",
      "`target.length == 4`",
      "target will not be in the list `deadends`.",
      "`target` and `deadends[i]` consist of digits only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "753",
    "slug": "cracking-the-safe",
    "title": "Cracking the Safe",
    "difficulty": "Hard",
    "description": "There is a safe protected by a password. The password is a sequence of `n` digits where each digit can be in the range `[0, k - 1]`. The safe has a peculiar way of checking the password. When you enter in a sequence, it checks the **most recent** `n` **digits** that were entered each time you type a digit. *  For example, the correct password is `\"345 \"` and you enter in `\"012345 \"`: *  After typing `0`, the most recent `3` digits is `\"0 \"`, which is incorrect. *  After typing `1`, the most recent `3` digits is `\"01 \"`, which is incorrect. *  After typing `2`, the most recent `3` digits is `\"012 \"`, which is incorrect. *  After typing `3`, the most recent `3` digits is `\"123 \"`, which is incorrect. *  After typing `4`, the most recent `3` digits is `\"234 \"`, which is incorrect. *  After typing `5`, the most recent `3` digits is `\"345 \"`, which is correct and the safe unlocks. Return _any string of **minimum length** that will unlock the safe **at some point** of entering it_.",
    "examples": [
      {
        "input": "n = 1, k = 2",
        "output": "\"10 \"",
        "explanation": "The password is a single digit, so enter each digit.  \"01 \" would also unlock the safe."
      },
      {
        "input": "n = 2, k = 2",
        "output": "\"01100 \"",
        "explanation": "For each possible password:"
      }
    ],
    "constraints": [
      "`1 <= n <= 4`",
      "`1 <= k <= 10`",
      "`1 <= kn <= 4096`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "754",
    "slug": "reach-a-number",
    "title": "Reach a Number",
    "difficulty": "Medium",
    "description": "You are standing at position `0` on an infinite number line. There is a destination at position `target`. You can make some number of moves `numMoves` so that: *  On each move, you can either go left or right. *  During the `ith` move (starting from `i == 1` to `i == numMoves`), you take `i` steps in the chosen direction. Given the integer `target`, return _the **minimum** number of moves required (i.e., the minimum_ `numMoves`_) to reach the destination_.",
    "examples": [
      {
        "input": "target = 2",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "target = 3",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`-109 <= target <= 109`",
      "`target != 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "755",
    "slug": "pour-water",
    "title": "Pour Water",
    "difficulty": "Medium",
    "description": "You are given an elevation map represents as an integer array `heights` where `heights[i]` representing the height of the terrain at index `i`. The width at each index is `1`. You are also given two integers `volume` and `k`. `volume` units of water will fall at index `k`. Water first drops at the index `k` and rests on top of the highest terrain or water at that index. Then, it flows according to the following rules: *  If the droplet would eventually fall by moving left, then move left. *  Otherwise, if the droplet would eventually fall by moving right, then move right. *  Otherwise, rise to its current position. Here, **\"eventually fall \"** means that the droplet will eventually be at a lower level if it moves in that direction. Also, level means the height of the terrain plus any water in that column. We can assume there is infinitely high terrain on the two sides out of bounds of the array. Also, there could not be partial water being spread out evenly on more than one grid block, and each unit of water has to be in exactly one block.",
    "examples": [
      {
        "input": "heights = \\[2,1,1,2,1,2,2\\], volume = 4, k = 3",
        "output": "\\[2,2,2,3,2,2,2\\]",
        "explanation": ""
      },
      {
        "input": "heights = \\[1,2,3,4\\], volume = 2, k = 2",
        "output": "\\[2,3,3,4\\]",
        "explanation": "The last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height."
      },
      {
        "input": "heights = \\[3,1,3\\], volume = 5, k = 1",
        "output": "\\[4,4,4\\]"
      }
    ],
    "constraints": [
      "`1 <= heights.length <= 100`",
      "`0 <= heights[i] <= 99`",
      "`0 <= volume <= 2000`",
      "`0 <= k < heights.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "756",
    "slug": "pyramid-transition-matrix",
    "title": "Pyramid Transition Matrix",
    "difficulty": "Medium",
    "description": "You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains **one less block** than the row beneath it and is centered on top. To make the pyramid aesthetically pleasing, there are only specific **triangular patterns** that are allowed. A triangular pattern consists of a **single block** stacked on top of **two blocks**. The patterns are given as a list of three-letter strings `allowed`, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block. *  For example, `\"ABC \"` represents a triangular pattern with a `'C'` block stacked on top of an `'A'` (left) and `'B'` (right) block. Note that this is different from `\"BAC \"` where `'B'` is on the left bottom and `'A'` is on the right bottom. You start with a bottom row of blocks `bottom`, given as a single string, that you **must** use as the base of the pyramid. Given `bottom` and `allowed`, return `true` _if you can build the pyramid all the way to the top such that **every triangular pattern** in the pyramid is in_ `allowed`_, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "bottom =  \"BCD \", allowed = \\[ \"BCC \", \"CDE \", \"CEA \", \"FFF \"\\]",
        "output": "true",
        "explanation": "The allowed triangular patterns are shown on the right."
      },
      {
        "input": "bottom =  \"AAAA \", allowed = \\[ \"AAB \", \"AAC \", \"BCD \", \"BBE \", \"DEF \"\\]",
        "output": "false",
        "explanation": "The allowed triangular patterns are shown on the right."
      }
    ],
    "constraints": [
      "`2 <= bottom.length <= 6`",
      "`0 <= allowed.length <= 216`",
      "`allowed[i].length == 3`",
      "The letters in all input strings are from the set `{'A', 'B', 'C', 'D', 'E', 'F'}`.",
      "All the values of `allowed` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "757",
    "slug": "set-intersection-size-at-least-two",
    "title": "Set Intersection Size At Least Two",
    "difficulty": "Hard",
    "description": "You are given a 2D integer array `intervals` where `intervals[i] = [starti, endi]` represents all the integers from `starti` to `endi` inclusively. A **containing set** is an array `nums` where each interval from `intervals` has **at least two** integers in `nums`. *  For example, if `intervals = [[1,3], [3,7], [8,9]]`, then `[1,2,4,7,8,9]` and `[2,3,4,8,9]` are **containing sets**. Return _the minimum possible size of a containing set_.",
    "examples": [
      {
        "input": "intervals = \\[\\[1,3\\],\\[3,7\\],\\[8,9\\]\\]",
        "output": "5",
        "explanation": "let nums = \\[2, 3, 4, 8, 9\\]."
      },
      {
        "input": "intervals = \\[\\[1,3\\],\\[1,4\\],\\[2,5\\],\\[3,5\\]\\]",
        "output": "3",
        "explanation": "let nums = \\[2, 3, 4\\]."
      },
      {
        "input": "intervals = \\[\\[1,2\\],\\[2,3\\],\\[2,4\\],\\[4,5\\]\\]",
        "output": "5",
        "explanation": "let nums = \\[1, 2, 3, 4, 5\\]."
      }
    ],
    "constraints": [
      "`1 <= intervals.length <= 3000`",
      "`intervals[i].length == 2`",
      "`0 <= starti < endi <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "758",
    "slug": "bold-words-in-string",
    "title": "Bold Words in String",
    "difficulty": "Medium",
    "description": "Given an array of keywords `words` and a string `s`, make all appearances of all keywords `words[i]` in `s` bold. Any letters between **and** tags become bold. Return `s` _after adding the bold tags_. The returned string should use the least number of tags possible, and the tags should form a valid combination.",
    "examples": [
      {
        "input": "words = \\[ \"ab \", \"bc \"\\], s =  \"aabcd \"",
        "output": "\"a**abc**d \"",
        "explanation": "Note that returning ` \"a**a**b**c**d \"` would use more tags, so it is incorrect."
      },
      {
        "input": "words = \\[ \"ab \", \"cb \"\\], s =  \"aabcd \"",
        "output": "\"a**ab**cd \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`0 <= words.length <= 50`",
      "`1 <= words[i].length <= 10`",
      "`s` and `words[i]` consist of lowercase English letters."
    ],
    "note": "This question is the same as 616: [https://leetcode.com/problems/add-bold-tag-in-string/](https://leetcode.com/problems/add-bold-tag-in-string/)",
    "follow_up": null
  },
  {
    "id": "759",
    "slug": "employee-free-time",
    "title": "Employee Free Time",
    "difficulty": "Hard",
    "description": "We are given a list `schedule` of employees, which represents the working time for each employee. Each employee has a list of non-overlapping `Intervals`, and these intervals are in sorted order. Return the list of finite intervals representing **common, positive-length free time** for _all_ employees, also in sorted order. (Even though we are representing `Intervals` in the form `[x, y]`, the objects inside are `Intervals`, not lists or arrays. For example, `schedule[0][0].start = 1`, `schedule[0][0].end = 2`, and `schedule[0][0][0]` is not defined). Also, we wouldn't include intervals like \\[5, 5\\] in our answer, as they have zero length.",
    "examples": [
      {
        "input": "schedule = \\[\\[\\[1,2\\],\\[5,6\\]\\],\\[\\[1,3\\]\\],\\[\\[4,10\\]\\]\\]",
        "output": "\\[\\[3,4\\]\\]",
        "explanation": "There are a total of three employees, and all common"
      },
      {
        "input": "schedule = \\[\\[\\[1,3\\],\\[6,7\\]\\],\\[\\[2,4\\]\\],\\[\\[2,5\\],\\[9,12\\]\\]\\]",
        "output": "\\[\\[5,6\\],\\[7,9\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= schedule.length , schedule[i].length <= 50`",
      "`0 <= schedule[i].start < schedule[i].end <= 10^8`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "760",
    "slug": "find-anagram-mappings",
    "title": "Find Anagram Mappings",
    "difficulty": "Easy",
    "description": "You are given two integer arrays `nums1` and `nums2` where `nums2` is **an anagram** of `nums1`. Both arrays may contain duplicates. Return _an index mapping array_ `mapping` _from_ `nums1` _to_ `nums2` _where_ `mapping[i] = j` _means the_ `ith` _element in_ `nums1` _appears in_ `nums2` _at index_ `j`. If there are multiple answers, return **any of them**. An array `a` is **an anagram** of an array `b` means `b` is made by randomizing the order of the elements in `a`.",
    "examples": [
      {
        "input": "nums1 = \\[12,28,46,32,50\\], nums2 = \\[50,12,32,46,28\\]",
        "output": "\\[1,4,3,2,0\\]",
        "explanation": "As mapping\\[0\\] = 1 because the 0th element of nums1 appears at nums2\\[1\\], and mapping\\[1\\] = 4 because the 1st element of nums1 appears at nums2\\[4\\], and so on."
      },
      {
        "input": "nums1 = \\[84,46\\], nums2 = \\[84,46\\]",
        "output": "\\[0,1\\]"
      }
    ],
    "constraints": [
      "`1 <= nums1.length <= 100`",
      "`nums2.length == nums1.length`",
      "`0 <= nums1[i], nums2[i] <= 105`",
      "`nums2` is an anagram of `nums1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "761",
    "slug": "special-binary-string",
    "title": "Special Binary String",
    "difficulty": "Hard",
    "description": "**Special binary strings** are binary strings with the following two properties: *  The number of `0`'s is equal to the number of `1`'s. *  Every prefix of the binary string has at least as many `1`'s as `0`'s. You are given a **special binary** string `s`. A move consists of choosing two consecutive, non-empty, special substrings of `s`, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string. Return _the lexicographically largest resulting string possible after applying the mentioned operations on the string_.",
    "examples": [
      {
        "input": "s =  \"11011000 \"",
        "output": "\"11100100 \"",
        "explanation": "The strings  \"10 \" \\[occuring at s\\[1\\]\\] and  \"1100 \" \\[at s\\[3\\]\\] are swapped."
      },
      {
        "input": "s =  \"10 \"",
        "output": "\"10 \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 50`",
      "`s[i]` is either `'0'` or `'1'`.",
      "`s` is a special binary string."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "762",
    "slug": "prime-number-of-set-bits-in-binary-representation",
    "title": "Prime Number of Set Bits in Binary Representation",
    "difficulty": "Easy",
    "description": "Given two integers `left` and `right`, return _the **count** of numbers in the **inclusive** range_ `[left, right]` _having a **prime number of set bits** in their binary representation_. Recall that the **number of set bits** an integer has is the number of `1`'s present when written in binary. *  For example, `21` written in binary is `10101`, which has `3` set bits.",
    "examples": [
      {
        "input": "left = 6, right = 10",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "left = 10, right = 15",
        "output": "5",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= left <= right <= 106`",
      "`0 <= right - left <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "763",
    "slug": "partition-labels",
    "title": "Partition Labels",
    "difficulty": "Medium",
    "description": "You are given a string `s`. We want to partition the string into as many parts as possible so that each letter appears in at most one part. Note that the partition is done so that after concatenating all the parts in order, the resultant string should be `s`. Return _a list of integers representing the size of these parts_.",
    "examples": [
      {
        "input": "s =  \"ababcbacadefegdehijhklij \"",
        "output": "\\[9,7,8\\]",
        "explanation": ""
      },
      {
        "input": "s =  \"eccbbbbdec \"",
        "output": "\\[10\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "764",
    "slug": "largest-plus-sign",
    "title": "Largest Plus Sign",
    "difficulty": "Medium",
    "description": "You are given an integer `n`. You have an `n x n` binary grid `grid` with all values initially `1`'s except for some indices given in the array `mines`. The `ith` element of the array `mines` is defined as `mines[i] = [xi, yi]` where `grid[xi][yi] == 0`. Return _the order of the largest **axis-aligned** plus sign of_ 1_'s contained in_ `grid`. If there is none, return `0`. An **axis-aligned plus sign** of `1`'s of order `k` has some center `grid[r][c] == 1` along with four arms of length `k - 1` going up, down, left, and right, and made of `1`'s. Note that there could be `0`'s or `1`'s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for `1`'s.",
    "examples": [
      {
        "input": "n = 5, mines = \\[\\[4,2\\]\\]",
        "output": "2",
        "explanation": "In the above grid, the largest plus sign can only be of order 2. One of them is shown."
      },
      {
        "input": "n = 1, mines = \\[\\[0,0\\]\\]",
        "output": "0",
        "explanation": "There is no plus sign, so return 0."
      }
    ],
    "constraints": [
      "`1 <= n <= 500`",
      "`1 <= mines.length <= 5000`",
      "`0 <= xi, yi < n`",
      "All the pairs `(xi, yi)` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "765",
    "slug": "couples-holding-hands",
    "title": "Couples Holding Hands",
    "difficulty": "Hard",
    "description": "There are `n` couples sitting in `2n` seats arranged in a row and want to hold hands. The people and seats are represented by an integer array `row` where `row[i]` is the ID of the person sitting in the `ith` seat. The couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2n - 2, 2n - 1)`. Return _the minimum number of swaps so that every couple is sitting side by side_. A swap consists of choosing any two people, then they stand up and switch seats.",
    "examples": [
      {
        "input": "row = \\[0,2,1,3\\]",
        "output": "1",
        "explanation": "We only need to swap the second (row\\[1\\]) and third (row\\[2\\]) person."
      },
      {
        "input": "row = \\[3,2,0,1\\]",
        "output": "0",
        "explanation": "All couples are already seated side by side."
      }
    ],
    "constraints": [
      "`2n == row.length`",
      "`2 <= n <= 30`",
      "`n` is even.",
      "`0 <= row[i] < 2n`",
      "All the elements of `row` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "766",
    "slug": "toeplitz-matrix",
    "title": "Toeplitz Matrix",
    "difficulty": "Easy",
    "description": "Given an `m x n` `matrix`, return _`true` if the matrix is Toeplitz. Otherwise, return `false`._ A matrix is **Toeplitz** if every diagonal from top-left to bottom-right has the same elements.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,2,3,4\\],\\[5,1,2,3\\],\\[9,5,1,2\\]\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "matrix = \\[\\[1,2\\],\\[2,2\\]\\]",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 20`",
      "`0 <= matrix[i][j] <= 99`",
      "Follow up:",
      "What if the `matrix` is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?",
      "What if the `matrix` is so large that you can only load up a partial row into the memory at once?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "767",
    "slug": "reorganize-string",
    "title": "Reorganize String",
    "difficulty": "Medium",
    "description": "Given a string `s`, rearrange the characters of `s` so that any two adjacent characters are not the same. Return _any possible rearrangement of_ `s` _or return_ `\" \"` _if not possible_.",
    "examples": [
      {
        "input": "s = \"aab\"",
        "output": "\"aba\""
      },
      {
        "input": "s = \"aaab\"",
        "output": "\"\""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "768",
    "slug": "max-chunks-to-make-sorted-ii",
    "title": "Max Chunks To Make Sorted II",
    "difficulty": "Hard",
    "description": "You are given an integer array `arr`. We split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array. Return _the largest number of chunks we can make to sort the array_.",
    "examples": [
      {
        "input": "arr = \\[5,4,3,2,1\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "arr = \\[2,1,3,4,4\\]",
        "output": "4",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 2000`",
      "`0 <= arr[i] <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "769",
    "slug": "max-chunks-to-make-sorted",
    "title": "Max Chunks To Make Sorted",
    "difficulty": "Medium",
    "description": "You are given an integer array `arr` of length `n` that represents a permutation of the integers in the range `[0, n - 1]`. We split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array. Return _the largest number of chunks we can make to sort the array_.",
    "examples": [
      {
        "input": "arr = \\[4,3,2,1,0\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "arr = \\[1,0,2,3,4\\]",
        "output": "4",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == arr.length`",
      "`1 <= n <= 10`",
      "`0 <= arr[i] < n`",
      "All the elements of `arr` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "770",
    "slug": "basic-calculator-iv",
    "title": "Basic Calculator IV",
    "difficulty": "Hard",
    "description": "Given an expression such as `expression = \"e + 8 - a + 5 \"` and an evaluation map such as `{ \"e \": 1}` (given in terms of `evalvars = [ \"e \"]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[ \"-1*a \", \"14 \"]` *  An expression alternates chunks and symbols, with a space separating each chunk and symbol. *  A chunk is either an expression in parentheses, a variable, or a non-negative integer. *  A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `\"2x \"` or `\"-x \"`. Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. *  For example, `expression = \"1 + 2 * 3 \"` has an answer of `[ \"7 \"]`. The format of the output is as follows: *  For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically. *  For example, we would never write a term like `\"b*a*c \"`, only `\"a*b*c \"`. *  Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term. *  For example, `\"a*a*b*c \"` has degree `4`. *  The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed. *  An example of a well-formatted answer is `[ \"-2*a*a*a \", \"3*a*a*b \", \"3*b*b \", \"4*a \", \"5*c \", \"-6 \"]`. *  Terms (including constant terms) with coefficient `0` are not included. *  For example, an expression of `\"0 \"` has an output of `[]`.",
    "examples": [
      {
        "input": "expression =  \"e + 8 - a + 5 \", evalvars = \\[ \"e \"\\], evalints = \\[1\\]",
        "output": "\\[ \"-1\\*a \", \"14 \"\\]"
      },
      {
        "input": "expression =  \"e - 8 + temperature - pressure \", evalvars = \\[ \"e \",  \"temperature \"\\], evalints = \\[1, 12\\]",
        "output": "\\[ \"-1\\*pressure \", \"5 \"\\]"
      },
      {
        "input": "expression =  \"(e + 8) \\* (e - 8) \", evalvars = \\[\\], evalints = \\[\\]",
        "output": "\\[ \"1\\*e\\*e \", \"-64 \"\\]"
      }
    ],
    "constraints": [
      "`1 <= expression.length <= 250`",
      "`expression` consists of lowercase English letters, digits, `'+'`, `'-'`, `''`, `'('`, `')'`, `' '`.",
      "`expression` does not contain any leading or trailing spaces.",
      "All the tokens in `expression` are separated by a single space.",
      "`0 <= evalvars.length <= 100`",
      "`1 <= evalvars[i].length <= 20`",
      "`evalvars[i]` consists of lowercase English letters.",
      "`evalints.length == evalvars.length`",
      "`-100 <= evalints[i] <= 100`"
    ],
    "note": "You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.",
    "follow_up": null
  },
  {
    "id": "771",
    "slug": "jewels-and-stones",
    "title": "Jewels and Stones",
    "difficulty": "Easy",
    "description": "You're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels. Letters are case sensitive, so `\"a \"` is considered a different type of stone from `\"A \"`.",
    "examples": [
      {
        "input": "jewels = \"aA\", stones = \"aAAbbbb\"",
        "output": "3"
      },
      {
        "input": "jewels = \"z\", stones = \"ZZ\"",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= jewels.length, stones.length <= 50`",
      "`jewels` and `stones` consist of only English letters.",
      "All the characters of `jewels` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "772",
    "slug": "basic-calculator-iii",
    "title": "Basic Calculator III",
    "difficulty": "Hard",
    "description": "Implement a basic calculator to evaluate a simple expression string. The expression string contains only non-negative integers, `'+'`, `'-'`, `'*'`, `'/'` operators, and open `'('` and closing parentheses `')'`. The integer division should **truncate toward zero**. You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.",
    "examples": [
      {
        "input": "s =  \"1+1 \"",
        "output": "2"
      },
      {
        "input": "s =  \"6-4/2 \"",
        "output": "4"
      },
      {
        "input": "s =  \"2\\*(5+5\\*2)/3+(6/2+8) \"",
        "output": "21"
      }
    ],
    "constraints": [
      "`1 <= s <= 104`",
      "`s` consists of digits, `'+'`, `'-'`, `''`, `'/'`, `'('`, and `')'`.",
      "`s` is a valid expression."
    ],
    "note": "You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.",
    "follow_up": null
  },
  {
    "id": "773",
    "slug": "sliding-puzzle",
    "title": "Sliding Puzzle",
    "difficulty": "Hard",
    "description": "On an `2 x 3` board, there are five tiles labeled from `1` to `5`, and an empty square represented by `0`. A **move** consists of choosing `0` and a 4-directionally adjacent number and swapping it. The state of the board is solved if and only if the board is `[[1,2,3],[4,5,0]]`. Given the puzzle board `board`, return _the least number of moves required so that the state of the board is solved_. If it is impossible for the state of the board to be solved, return `-1`.",
    "examples": [
      {
        "input": "board = \\[\\[1,2,3\\],\\[4,0,5\\]\\]",
        "output": "1",
        "explanation": "Swap the 0 and the 5 in one move."
      },
      {
        "input": "board = \\[\\[1,2,3\\],\\[5,4,0\\]\\]",
        "output": "-1",
        "explanation": "No number of moves will make the board solved."
      },
      {
        "input": "board = \\[\\[4,1,2\\],\\[5,0,3\\]\\]",
        "output": "5",
        "explanation": "5 is the smallest number of moves that solves the board."
      }
    ],
    "constraints": [
      "`board.length == 2`",
      "`board[i].length == 3`",
      "`0 <= board[i][j] <= 5`",
      "Each value `board[i][j]` is unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "774",
    "slug": "minimize-max-distance-to-gas-station",
    "title": "Minimize Max Distance to Gas Station",
    "difficulty": "Hard",
    "description": "You are given an integer array `stations` that represents the positions of the gas stations on the **x-axis**. You are also given an integer `k`. You should add `k` new gas stations. You can add the stations anywhere on the **x-axis**, and not necessarily on an integer position. Let `penalty()` be the maximum distance between **adjacent** gas stations after adding the `k` new stations. Return _the smallest possible value of_ `penalty()`. Answers within `10-6` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "stations = \\[1,2,3,4,5,6,7,8,9,10\\], k = 9",
        "output": "0.50000"
      },
      {
        "input": "stations = \\[23,24,36,39,46,56,57,65,84,98\\], k = 1",
        "output": "14.00000"
      }
    ],
    "constraints": [
      "`10 <= stations.length <= 2000`",
      "`0 <= stations[i] <= 108`",
      "`stations` is sorted in a strictly increasing order.",
      "`1 <= k <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "775",
    "slug": "global-and-local-inversions",
    "title": "Global and Local Inversions",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` of length `n` which represents a permutation of all the integers in the range `[0, n - 1]`. The number of **global inversions** is the number of the different pairs `(i, j)` where: *  `0 <= i < j < n` *  `nums[i] > nums[j]` The number of **local inversions** is the number of indices `i` where: *  `0 <= i < n - 1` *  `nums[i] > nums[i + 1]` Return `true` _if the number of **global inversions** is equal to the number of **local inversions**_.",
    "examples": [
      {
        "input": "nums = \\[1,0,2\\]",
        "output": "true",
        "explanation": "There is 1 global inversion and 1 local inversion."
      },
      {
        "input": "nums = \\[1,2,0\\]",
        "output": "false",
        "explanation": "There are 2 global inversions and 1 local inversion."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`0 <= nums[i] < n`",
      "All the integers of `nums` are unique.",
      "`nums` is a permutation of all the numbers in the range `[0, n - 1]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "776",
    "slug": "split-bst",
    "title": "Split BST",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary search tree (BST) and an integer `target`, split the tree into two subtrees where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value. It Is not necessarily the case that the tree contains a node with the value `target`. Additionally, most of the structure of the original tree should remain. Formally, for any child `c` with parent `p` in the original tree, if they are both in the same subtree after the split, then node `c` should still have the parent `p`. Return _an array of the two roots of the two subtrees_.",
    "examples": [
      {
        "input": "root = \\[4,2,6,1,3,5,7\\], target = 2",
        "output": "\\[\\[2,1\\],\\[4,3,6,null,null,5,7\\]\\]"
      },
      {
        "input": "root = \\[1\\], target = 1",
        "output": "\\[\\[1\\],\\[\\]\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 50]`.",
      "`0 <= Node.val, target <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "777",
    "slug": "swap-adjacent-in-lr-string",
    "title": "Swap Adjacent in LR String",
    "difficulty": "Medium",
    "description": "In a string composed of `'L'`, `'R'`, and `'X'` characters, like `\"RXXLRXRXL \"`, a move consists of either replacing one occurrence of `\"XL \"` with `\"LX \"`, or replacing one occurrence of `\"RX \"` with `\"XR \"`. Given the starting string `start` and the ending string `end`, return `True` if and only if there exists a sequence of moves to transform one string to the other.",
    "examples": [
      {
        "input": "start =  \"RXXLRXRXL \", end =  \"XRLXXRRLX \"",
        "output": "true",
        "explanation": "We can transform start to end following these steps:"
      },
      {
        "input": "start =  \"X \", end =  \"L \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= start.length <= 104`",
      "`start.length == end.length`",
      "Both `start` and `end` will only consist of characters in `'L'`, `'R'`, and `'X'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "778",
    "slug": "swim-in-rising-water",
    "title": "Swim in Rising Water",
    "difficulty": "Hard",
    "description": "You are given an `n x n` integer matrix `grid` where each value `grid[i][j]` represents the elevation at that point `(i, j)`. The rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim. Return _the least time until you can reach the bottom right square_ `(n - 1, n - 1)` _if you start at the top left square_ `(0, 0)`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,2\\],\\[1,3\\]\\]",
        "output": "3"
      },
      {
        "input": "grid = \\[\\[0,1,2,3,4\\],\\[24,23,22,21,5\\],\\[12,13,14,15,16\\],\\[11,17,18,19,20\\],\\[10,9,8,7,6\\]\\]",
        "output": "16",
        "explanation": "The final route is shown."
      }
    ],
    "constraints": [
      "`n == grid.length`",
      "`n == grid[i].length`",
      "`1 <= n <= 50`",
      "`0 <= grid[i][j] < n2`",
      "Each value `grid[i][j]` is unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "779",
    "slug": "k-th-symbol-in-grammar",
    "title": "K-th Symbol in Grammar",
    "difficulty": "Medium",
    "description": "We build a table of `n` rows (**1-indexed**). We start by writing `0` in the `1st` row. Now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`. *  For example, for `n = 3`, the `1st` row is `0`, the `2nd` row is `01`, and the `3rd` row is `0110`. Given two integer `n` and `k`, return the `kth` (**1-indexed**) symbol in the `nth` row of a table of `n` rows.",
    "examples": [
      {
        "input": "n = 1, k = 1",
        "output": "0",
        "explanation": "row 1: 0"
      },
      {
        "input": "n = 2, k = 1",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "n = 2, k = 2",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 30`",
      "`1 <= k <= 2n - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "780",
    "slug": "reaching-points",
    "title": "Reaching Points",
    "difficulty": "Hard",
    "description": "Given four integers `sx`, `sy`, `tx`, and `ty`, return `true` _if it is possible to convert the point_ `(sx, sy)` _to the point_ `(tx, ty)` _through some operations__, or_ `false` _otherwise_. The allowed operation on some point `(x, y)` is to convert it to either `(x, x + y)` or `(x + y, y)`.",
    "examples": [
      {
        "input": "sx = 1, sy = 1, tx = 3, ty = 5",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "sx = 1, sy = 1, tx = 2, ty = 2",
        "output": "false"
      },
      {
        "input": "sx = 1, sy = 1, tx = 1, ty = 1",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= sx, sy, tx, ty <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "781",
    "slug": "rabbits-in-forest",
    "title": "Rabbits in Forest",
    "difficulty": "Medium",
    "description": "There is a forest with an unknown number of rabbits. We asked n rabbits **\"How many rabbits have the same color as you? \"** and collected the answers in an integer array `answers` where `answers[i]` is the answer of the `ith` rabbit. Given the array `answers`, return _the minimum number of rabbits that could be in the forest_.",
    "examples": [
      {
        "input": "answers = \\[1,1,2\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "answers = \\[10,10,10\\]",
        "output": "11"
      }
    ],
    "constraints": [
      "`1 <= answers.length <= 1000`",
      "`0 <= answers[i] < 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "782",
    "slug": "transform-to-chessboard",
    "title": "Transform to Chessboard",
    "difficulty": "Hard",
    "description": "You are given an `n x n` binary grid `board`. In each move, you can swap any two rows with each other, or any two columns with each other. Return _the minimum number of moves to transform the board into a **chessboard board**_. If the task is impossible, return `-1`. A **chessboard board** is a board where no `0`'s and no `1`'s are 4-directionally adjacent.",
    "examples": [
      {
        "input": "board = \\[\\[0,1,1,0\\],\\[0,1,1,0\\],\\[1,0,0,1\\],\\[1,0,0,1\\]\\]",
        "output": "2",
        "explanation": "One potential sequence of moves is shown."
      },
      {
        "input": "board = \\[\\[0,1\\],\\[1,0\\]\\]",
        "output": "0",
        "explanation": "Also note that the board with 0 in the top left corner, is also a valid chessboard."
      },
      {
        "input": "board = \\[\\[1,0\\],\\[1,0\\]\\]",
        "output": "-1",
        "explanation": "No matter what sequence of moves you make, you cannot end with a valid chessboard."
      }
    ],
    "constraints": [
      "`n == board.length`",
      "`n == board[i].length`",
      "`2 <= n <= 30`",
      "`board[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "783",
    "slug": "minimum-distance-between-bst-nodes",
    "title": "Minimum Distance Between BST Nodes",
    "difficulty": "Easy",
    "description": "Given the `root` of a Binary Search Tree (BST), return _the minimum difference between the values of any two different nodes in the tree_.",
    "examples": [
      {
        "input": "root = \\[4,2,6,1,3\\]",
        "output": "1"
      },
      {
        "input": "root = \\[1,0,48,null,null,12,49\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 100]`.",
      "`0 <= Node.val <= 105`"
    ],
    "note": "This question is the same as 530: [https://leetcode.com/problems/minimum-absolute-difference-in-bst/](https://leetcode.com/problems/minimum-absolute-difference-in-bst/)",
    "follow_up": null
  },
  {
    "id": "784",
    "slug": "letter-case-permutation",
    "title": "Letter Case Permutation",
    "difficulty": "Medium",
    "description": "Given a string `s`, you can transform every letter individually to be lowercase or uppercase to create another string. Return _a list of all possible strings we could create_. Return the output in **any order**.",
    "examples": [
      {
        "input": "s =  \"a1b2 \"",
        "output": "\\[ \"a1b2 \", \"a1B2 \", \"A1b2 \", \"A1B2 \"\\]"
      },
      {
        "input": "s =  \"3z4 \"",
        "output": "\\[ \"3z4 \", \"3Z4 \"\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 12`",
      "`s` consists of lowercase English letters, uppercase English letters, and digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "785",
    "slug": "is-graph-bipartite",
    "title": "Is Graph Bipartite?",
    "difficulty": "Medium",
    "description": "There is an **undirected** graph with `n` nodes, where each node is numbered between `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties: *  There are no self-edges (`graph[u]` does not contain `u`). *  There are no parallel edges (`graph[u]` does not contain duplicate values). *  If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected). *  The graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them. A graph is **bipartite** if the nodes can be partitioned into two independent sets `A` and `B` such that **every** edge in the graph connects a node in set `A` and a node in set `B`. Return `true` _if and only if it is **bipartite**_.",
    "examples": [
      {
        "input": "graph = \\[\\[1,2,3\\],\\[0,2\\],\\[0,1,3\\],\\[0,2\\]\\]",
        "output": "false",
        "explanation": "There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other."
      },
      {
        "input": "graph = \\[\\[1,3\\],\\[0,2\\],\\[1,3\\],\\[0,2\\]\\]",
        "output": "true",
        "explanation": "We can partition the nodes into two sets: {0, 2} and {1, 3}."
      }
    ],
    "constraints": [
      "`graph.length == n`",
      "`1 <= n <= 100`",
      "`0 <= graph[u].length < n`",
      "`0 <= graph[u][i] <= n - 1`",
      "`graph[u]` does not contain `u`.",
      "All the values of `graph[u]` are unique.",
      "If `graph[u]` contains `v`, then `graph[v]` contains `u`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "786",
    "slug": "k-th-smallest-prime-fraction",
    "title": "K-th Smallest Prime Fraction",
    "difficulty": "Medium",
    "description": "You are given a sorted integer array `arr` containing `1` and **prime** numbers, where all the integers of `arr` are unique. You are also given an integer `k`. For every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`. Return _the_ `kth` _smallest fraction considered_. Return your answer as an array of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] == arr[j]`.",
    "examples": [
      {
        "input": "arr = \\[1,2,3,5\\], k = 3",
        "output": "\\[2,5\\]",
        "explanation": "The fractions to be considered in sorted order are:"
      },
      {
        "input": "arr = \\[1,7\\], k = 1",
        "output": "\\[1,7\\]"
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 1000`",
      "`1 <= arr[i] <= 3  104`",
      "`arr[0] == 1`",
      "`arr[i]` is a prime number for `i > 0`.",
      "All the numbers of `arr` are unique and sorted in strictly increasing order.",
      "`1 <= k <= arr.length  (arr.length - 1) / 2`",
      "Follow up: Can you solve the problem with better than `O(n2)` complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "787",
    "slug": "cheapest-flights-within-k-stops",
    "title": "Cheapest Flights Within K Stops",
    "difficulty": "Medium",
    "description": "There are `n` cities connected by some number of flights. You are given an array `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there is a flight from city `fromi` to city `toi` with cost `pricei`. You are also given three integers `src`, `dst`, and `k`, return _**the cheapest price** from_ `src` _to_ `dst` _with at most_ `k` _stops._ If there is no such route, return `-1`.",
    "examples": [
      {
        "input": "n = 4, flights = \\[\\[0,1,100\\],\\[1,2,100\\],\\[2,0,100\\],\\[1,3,600\\],\\[2,3,200\\]\\], src = 0, dst = 3, k = 1",
        "output": "700",
        "explanation": ""
      },
      {
        "input": "n = 3, flights = \\[\\[0,1,100\\],\\[1,2,100\\],\\[0,2,500\\]\\], src = 0, dst = 2, k = 1",
        "output": "200",
        "explanation": ""
      },
      {
        "input": "n = 3, flights = \\[\\[0,1,100\\],\\[1,2,100\\],\\[0,2,500\\]\\], src = 0, dst = 2, k = 0",
        "output": "500",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 100`",
      "`0 <= flights.length <= (n  (n - 1) / 2)`",
      "`flights[i].length == 3`",
      "`0 <= fromi, toi < n`",
      "`fromi != toi`",
      "`1 <= pricei <= 104`",
      "There will not be any multiple flights between two cities.",
      "`0 <= src, dst, k < n`",
      "`src != dst`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "788",
    "slug": "rotated-digits",
    "title": "Rotated Digits",
    "difficulty": "Medium",
    "description": "An integer `x` is a **good** if after rotating each digit individually by 180 degrees, we get a valid number that is different from `x`. Each digit must be rotated - we cannot choose to leave it alone. A number is valid if each digit remains a digit after rotation. For example: *  `0`, `1`, and `8` rotate to themselves, *  `2` and `5` rotate to each other (in this case they are rotated in a different direction, in other words, `2` or `5` gets mirrored), *  `6` and `9` rotate to each other, and *  the rest of the numbers do not rotate to any other number and become invalid. Given an integer `n`, return _the number of **good** integers in the range_ `[1, n]`.",
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "There are four good numbers in the range \\[1, 10\\] : 2, 5, 6, 9."
      },
      {
        "input": "n = 1",
        "output": "0"
      },
      {
        "input": "n = 2",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "789",
    "slug": "escape-the-ghosts",
    "title": "Escape The Ghosts",
    "difficulty": "Medium",
    "description": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]` that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. All inputs are **integral coordinates**. Each turn, you and all the ghosts may independently choose to either **move 1 unit** in any of the four cardinal directions: north, east, south, or west, or **stay still**. All actions happen **simultaneously**. You escape if and only if you can reach the target **before** any ghost reaches you. If you reach any square (including the target) at the **same time** as a ghost, it **does not** count as an escape. Return `true` _if it is possible to escape regardless of how the ghosts move, otherwise return_ `false`_._",
    "examples": [
      {
        "input": "ghosts = \\[\\[1,0\\],\\[0,3\\]\\], target = \\[0,1\\]",
        "output": "true",
        "explanation": "You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you."
      },
      {
        "input": "ghosts = \\[\\[1,0\\]\\], target = \\[2,0\\]",
        "output": "false",
        "explanation": "You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination."
      },
      {
        "input": "ghosts = \\[\\[2,0\\]\\], target = \\[1,0\\]",
        "output": "false",
        "explanation": "The ghost can reach the target at the same time as you."
      }
    ],
    "constraints": [
      "`1 <= ghosts.length <= 100`",
      "`ghosts[i].length == 2`",
      "`-104 <= xi, yi <= 104`",
      "There can be multiple ghosts in the same location.",
      "`target.length == 2`",
      "`-104 <= xtarget, ytarget <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "790",
    "slug": "domino-and-tromino-tiling",
    "title": "Domino and Tromino Tiling",
    "difficulty": "Medium",
    "description": "You have two types of tiles: a `2 x 1` domino shape and a tromino shape. You may rotate these shapes. Given an integer n, return _the number of ways to tile an_ `2 x n` _board_. Since the answer may be very large, return it **modulo** `109 + 7`. In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.",
    "examples": [
      {
        "input": "n = 3",
        "output": "5",
        "explanation": "The five different ways are show above."
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "791",
    "slug": "custom-sort-string",
    "title": "Custom Sort String",
    "difficulty": "Medium",
    "description": "You are given two strings order and s. All the characters of `order` are **unique** and were sorted in some custom order previously. Permute the characters of `s` so that they match the order that `order` was sorted. More specifically, if a character `x` occurs before a character `y` in `order`, then `x` should occur before `y` in the permuted string. Return _any permutation of_ `s` _that satisfies this property_.",
    "examples": [
      {
        "input": "order =  \"cba \", s =  \"abcd \"",
        "output": "\"cbad \"",
        "explanation": ""
      },
      {
        "input": "order =  \"cbafg \", s =  \"abcd \"",
        "output": "\"cbad \""
      }
    ],
    "constraints": [
      "`1 <= order.length <= 26`",
      "`1 <= s.length <= 200`",
      "`order` and `s` consist of lowercase English letters.",
      "All the characters of `order` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "792",
    "slug": "number-of-matching-subsequences",
    "title": "Number of Matching Subsequences",
    "difficulty": "Medium",
    "description": "Given a string `s` and an array of strings `words`, return _the number of_ `words[i]` _that is a subsequence of_ `s`. A **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. *  For example, `\"ace \"` is a subsequence of `\"abcde \"`.",
    "examples": [
      {
        "input": "s =  \"abcde \", words = \\[ \"a \", \"bb \", \"acd \", \"ace \"\\]",
        "output": "3",
        "explanation": "There are three strings in words that are a subsequence of s:  \"a \",  \"acd \",  \"ace \"."
      },
      {
        "input": "s =  \"dsahjpjauf \", words = \\[ \"ahjpjau \", \"ja \", \"ahbwzgqnuk \", \"tnmlanowax \"\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5  104`",
      "`1 <= words.length <= 5000`",
      "`1 <= words[i].length <= 50`",
      "`s` and `words[i]` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "793",
    "slug": "preimage-size-of-factorial-zeroes-function",
    "title": "Preimage Size of Factorial Zeroes Function",
    "difficulty": "Hard",
    "description": "Let `f(x)` be the number of zeroes at the end of `x!`. Recall that `x! = 1 * 2 * 3 * ... * x` and by convention, `0! = 1`. *  For example, `f(3) = 0` because `3! = 6` has no zeroes at the end, while `f(11) = 2` because `11! = 39916800` has two zeroes at the end. Given an integer `k`, return the number of non-negative integers `x` have the property that `f(x) = k`.",
    "examples": [
      {
        "input": "k = 0",
        "output": "5",
        "explanation": "0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes."
      },
      {
        "input": "k = 5",
        "output": "0",
        "explanation": "There is no x such that x! ends in k = 5 zeroes."
      },
      {
        "input": "k = 3",
        "output": "5"
      }
    ],
    "constraints": [
      "`0 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "794",
    "slug": "valid-tic-tac-toe-state",
    "title": "Valid Tic-Tac-Toe State",
    "difficulty": "Medium",
    "description": "Given a Tic-Tac-Toe board as a string array `board`, return `true` if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game. The board is a `3 x 3` array that consists of characters `' '`, `'X'`, and `'O'`. The `' '` character represents an empty square. Here are the rules of Tic-Tac-Toe: *  Players take turns placing characters into empty squares `' '`. *  The first player always places `'X'` characters, while the second player always places `'O'` characters. *  `'X'` and `'O'` characters are always placed into empty squares, never filled ones. *  The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. *  The game also ends if all squares are non-empty. *  No more moves can be played if the game is over.",
    "examples": [
      {
        "input": "board = \\[ \"O   \", \"    \", \"    \"\\]",
        "output": "false",
        "explanation": "The first player always plays  \"X \"."
      },
      {
        "input": "board = \\[ \"XOX \", \" X  \", \"    \"\\]",
        "output": "false",
        "explanation": "Players take turns making moves."
      },
      {
        "input": "board = \\[ \"XOX \", \"O O \", \"XOX \"\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`board.length == 3`",
      "`board[i].length == 3`",
      "`board[i][j]` is either `'X'`, `'O'`, or `' '`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "795",
    "slug": "number-of-subarrays-with-bounded-maximum",
    "title": "Number of Subarrays with Bounded Maximum",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and two integers `left` and `right`, return _the number of contiguous non-empty **subarrays** such that the value of the maximum array element in that subarray is in the range_ `[left, right]`. The test cases are generated so that the answer will fit in a **32-bit** integer.",
    "examples": [
      {
        "input": "nums = \\[2,1,4,3\\], left = 2, right = 3",
        "output": "3",
        "explanation": "There are three subarrays that meet the requirements: \\[2\\], \\[2, 1\\], \\[3\\]."
      },
      {
        "input": "nums = \\[2,9,2,5,6\\], left = 2, right = 8",
        "output": "7"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 109`",
      "`0 <= left <= right <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "796",
    "slug": "rotate-string",
    "title": "Rotate String",
    "difficulty": "Easy",
    "description": "Given two strings `s` and `goal`, return `true` _if and only if_ `s` _can become_ `goal` _after some number of **shifts** on_ `s`. A **shift** on `s` consists of moving the leftmost character of `s` to the rightmost position. *  For example, if `s = \"abcde \"`, then it will be `\"bcdea \"` after one shift.",
    "examples": [
      {
        "input": "s = \"abcde\", goal = \"cdeab\"",
        "output": "true"
      },
      {
        "input": "s = \"abcde\", goal = \"abced\"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= s.length, goal.length <= 100`",
      "`s` and `goal` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "797",
    "slug": "all-paths-from-source-to-target",
    "title": "All Paths From Source to Target",
    "difficulty": "Medium",
    "description": "Given a directed acyclic graph (**DAG**) of `n` nodes labeled from `0` to `n - 1`, find all possible paths from node `0` to node `n - 1` and return them in **any order**. The graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).",
    "examples": [
      {
        "input": "graph = \\[\\[1,2\\],\\[3\\],\\[3\\],\\[\\]\\]",
        "output": "\\[\\[0,1,3\\],\\[0,2,3\\]\\]",
        "explanation": "There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3."
      },
      {
        "input": "graph = \\[\\[4,3,1\\],\\[3,2,4\\],\\[3\\],\\[4\\],\\[\\]\\]",
        "output": "\\[\\[0,4\\],\\[0,3,4\\],\\[0,1,3,4\\],\\[0,1,2,3,4\\],\\[0,1,4\\]\\]"
      }
    ],
    "constraints": [
      "`n == graph.length`",
      "`2 <= n <= 15`",
      "`0 <= graph[i][j] < n`",
      "`graph[i][j] != i` (i.e., there will be no self-loops).",
      "All the elements of `graph[i]` are unique.",
      "The input graph is guaranteed to be a DAG."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "798",
    "slug": "smallest-rotation-with-highest-score",
    "title": "Smallest Rotation with Highest Score",
    "difficulty": "Hard",
    "description": "You are given an array `nums`. You can rotate it by a non-negative integer `k` so that the array becomes `[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]`. Afterward, any entries that are less than or equal to their index are worth one point. *  For example, if we have `nums = [2,4,1,3,0]`, and we rotate by `k = 2`, it becomes `[1,3,0,2,4]`. This is worth `3` points because `1 > 0` \\[no points\\], `3 > 1` \\[no points\\], `0 <= 2` \\[one point\\], `2 <= 3` \\[one point\\], `4 <= 4` \\[one point\\]. Return _the rotation index_ `k` _that corresponds to the highest score we can achieve if we rotated_ `nums` _by it_. If there are multiple answers, return the smallest such index `k`.",
    "examples": [
      {
        "input": "nums = \\[2,3,1,4,0\\]",
        "output": "3",
        "explanation": "Scores for each k are listed below:"
      },
      {
        "input": "nums = \\[1,3,0,2,4\\]",
        "output": "0",
        "explanation": "nums will always have 3 points no matter how it shifts."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] < nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "799",
    "slug": "champagne-tower",
    "title": "Champagne Tower",
    "difficulty": "Medium",
    "description": "We stack glasses in a pyramid, where the **first** row has `1` glass, the **second** row has `2` glasses, and so on until the 100th row. Each glass holds one cup of champagne. Then, some champagne is poured into the first glass at the top. When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (A glass at the bottom row has its excess champagne fall on the floor.) For example, after one cup of champagne is poured, the top most glass is full. After two cups of champagne are poured, the two glasses on the second row are half full. After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below. Now after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)",
    "examples": [
      {
        "input": "poured = 1, query\\_row = 1, query\\_glass = 1",
        "output": "0.00000",
        "explanation": "We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty."
      },
      {
        "input": "poured = 2, query\\_row = 1, query\\_glass = 1",
        "output": "0.50000",
        "explanation": "We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange."
      },
      {
        "input": "poured = 100000009, query\\_row = 33, query\\_glass = 17",
        "output": "1.00000"
      }
    ],
    "constraints": [
      "`0 <= poured <= 109`",
      "`0 <= query_glass <= query_row < 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "800",
    "slug": "similar-rgb-color",
    "title": "Similar RGB Color",
    "difficulty": "Easy",
    "description": "The red-green-blue color `\"#AABBCC \"` can be written as `\"#ABC \"` in shorthand. *  For example, `\"#15c \"` is shorthand for the color `\"#1155cc \"`. The similarity between the two colors `\"#ABCDEF \"` and `\"#UVWXYZ \"` is `-(AB - UV)2 - (CD - WX)2 - (EF - YZ)2`. Given a string `color` that follows the format `\"#ABCDEF \"`, return a string represents the color that is most similar to the given color and has a shorthand (i.e., it can be represented as some `\"#XYZ \"`). **Any answer** which has the same highest similarity as the best answer will be accepted.",
    "examples": [
      {
        "input": "color =  \"#09f166 \"",
        "output": "\"#11ee66 \"",
        "explanation": ""
      },
      {
        "input": "color =  \"#4e3fe1 \"",
        "output": "\"#5544dd \""
      }
    ],
    "constraints": [
      "`color.length == 7`",
      "`color[0] == '#'`",
      "`color[i]` is either digit or character in the range `['a', 'f']` for `i > 0`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "801",
    "slug": "minimum-swaps-to-make-sequences-increasing",
    "title": "Minimum Swaps To Make Sequences Increasing",
    "difficulty": "Hard",
    "description": "You are given two integer arrays of the same length `nums1` and `nums2`. In one operation, you are allowed to swap `nums1[i]` with `nums2[i]`. *  For example, if `nums1 = [1,2,3,8]`, and `nums2 = [5,6,7,4]`, you can swap the element at `i = 3` to obtain `nums1 = [1,2,3,4]` and `nums2 = [5,6,7,8]`. Return _the minimum number of needed operations to make_ `nums1` _and_ `nums2` _**strictly increasing**_. The test cases are generated so that the given input always makes it possible. An array `arr` is **strictly increasing** if and only if `arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1]`.",
    "examples": [
      {
        "input": "nums1 = \\[1,3,5,4\\], nums2 = \\[1,2,3,7\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[0,3,5,8,9\\], nums2 = \\[2,1,4,6,9\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`2 <= nums1.length <= 105`",
      "`nums2.length == nums1.length`",
      "`0 <= nums1[i], nums2[i] <= 2  105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "802",
    "slug": "find-eventual-safe-states",
    "title": "Find Eventual Safe States",
    "difficulty": "Medium",
    "description": "There is a directed graph of `n` nodes with each node labeled from `0` to `n - 1`. The graph is represented by a **0-indexed** 2D integer array `graph` where `graph[i]` is an integer array of nodes adjacent to node `i`, meaning there is an edge from node `i` to each node in `graph[i]`. A node is a **terminal node** if there are no outgoing edges. A node is a **safe node** if every possible path starting from that node leads to a **terminal node** (or another safe node). Return _an array containing all the **safe nodes** of the graph_. The answer should be sorted in **ascending** order.",
    "examples": [
      {
        "input": "graph = \\[\\[1,2\\],\\[2,3\\],\\[5\\],\\[0\\],\\[5\\],\\[\\],\\[\\]\\]",
        "output": "\\[2,4,5,6\\]",
        "explanation": "The given graph is shown above."
      },
      {
        "input": "graph = \\[\\[1,2,3,4\\],\\[1,2\\],\\[3,4\\],\\[0,4\\],\\[\\]\\]",
        "output": "\\[4\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == graph.length`",
      "`1 <= n <= 104`",
      "`0 <= graph[i].length <= n`",
      "`0 <= graph[i][j] <= n - 1`",
      "`graph[i]` is sorted in a strictly increasing order.",
      "The graph may contain self-loops.",
      "The number of edges in the graph will be in the range `[1, 4  104]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "803",
    "slug": "bricks-falling-when-hit",
    "title": "Bricks Falling When Hit",
    "difficulty": "Hard",
    "description": "You are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. A brick is **stable** if: *  It is directly connected to the top of the grid, or *  At least one other brick in its four adjacent cells is **stable**. You are also given an array `hits`, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will **fall**. Once a brick falls, it is **immediately** erased from the `grid` (i.e., it does not land on other stable bricks). Return _an array_ `result`_, where each_ `result[i]` _is the number of bricks that will **fall** after the_ `ith` _erasure is applied._ **Note** that an erasure may refer to a location with no brick, and if it does, no bricks drop.",
    "examples": [
      {
        "input": "grid = \\[\\[1,0,0,0\\],\\[1,1,1,0\\]\\], hits = \\[\\[1,0\\]\\]",
        "output": "\\[2\\]",
        "explanation": "Starting with the grid:"
      },
      {
        "input": "grid = \\[\\[1,0,0,0\\],\\[1,1,0,0\\]\\], hits = \\[\\[1,1\\],\\[1,0\\]\\]",
        "output": "\\[0,0\\]",
        "explanation": "Starting with the grid:"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 200`",
      "`grid[i][j]` is `0` or `1`.",
      "`1 <= hits.length <= 4  104`",
      "`hits[i].length == 2`",
      "`0 <= xi <= m - 1`",
      "`0 <= yi <= n - 1`",
      "All `(xi, yi)` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "804",
    "slug": "unique-morse-code-words",
    "title": "Unique Morse Code Words",
    "difficulty": "Easy",
    "description": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: *  `'a'` maps to `\".- \"`, *  `'b'` maps to `\"-... \"`, *  `'c'` maps to `\"-.-. \"`, and so on. For convenience, the full table for the `26` letters of the English alphabet is given below: \\[ \".- \", \"-... \", \"-.-. \", \"-.. \", \". \", \"..-. \", \"--. \", \".... \", \".. \", \".--- \", \"-.- \", \".-.. \", \"-- \", \"-. \", \"--- \", \".--. \", \"--.- \", \".-. \", \"... \", \"- \", \"..- \", \"...- \", \".-- \", \"-..- \", \"-.-- \", \"--.. \"\\] Given an array of strings `words` where each word can be written as a concatenation of the Morse code of each letter. *  For example, `\"cab \"` can be written as `\"-.-..--... \"`, which is the concatenation of `\"-.-. \"`, `\".- \"`, and `\"-... \"`. We will call such a concatenation the **transformation** of a word. Return _the number of different **transformations** among all words we have_.",
    "examples": [
      {
        "input": "words = \\[ \"gin \", \"zen \", \"gig \", \"msg \"\\]",
        "output": "2",
        "explanation": "The transformation of each word is:"
      },
      {
        "input": "words = \\[ \"a \"\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 12`",
      "`words[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "805",
    "slug": "split-array-with-same-average",
    "title": "Split Array With Same Average",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums`. You should move each element of `nums` into one of the two arrays `A` and `B` such that `A` and `B` are non-empty, and `average(A) == average(B)`. Return `true` if it is possible to achieve that and `false` otherwise. **Note** that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4,5,6,7,8\\]",
        "output": "true",
        "explanation": "We can split the array into \\[1,4,5,8\\] and \\[2,3,6,7\\], and both of them have an average of 4.5."
      },
      {
        "input": "nums = \\[3,1\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 30`",
      "`0 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "806",
    "slug": "number-of-lines-to-write-string",
    "title": "Number of Lines To Write String",
    "difficulty": "Easy",
    "description": "You are given a string `s` of lowercase English letters and an array `widths` denoting **how many pixels wide** each lowercase English letter is. Specifically, `widths[0]` is the width of `'a'`, `widths[1]` is the width of `'b'`, and so on. You are trying to write `s` across several lines, where **each line is no longer than** `100` **pixels**. Starting at the beginning of `s`, write as many letters on the first line such that the total width does not exceed `100` pixels. Then, from where you stopped in `s`, continue writing as many letters as you can on the second line. Continue this process until you have written all of `s`. Return _an array_ `result` _of length 2 where:_ *  `result[0]` _is the total number of lines._ *  `result[1]` _is the width of the last line in pixels._",
    "examples": [
      {
        "input": "widths = \\[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10\\], s =  \"abcdefghijklmnopqrstuvwxyz \"",
        "output": "\\[3,60\\]",
        "explanation": "You can write s as follows:"
      },
      {
        "input": "widths = \\[4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10\\], s =  \"bbbcccdddaaa \"",
        "output": "\\[2,4\\]",
        "explanation": "You can write s as follows:"
      }
    ],
    "constraints": [
      "`widths.length == 26`",
      "`2 <= widths[i] <= 10`",
      "`1 <= s.length <= 1000`",
      "`s` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "807",
    "slug": "max-increase-to-keep-city-skyline",
    "title": "Max Increase to Keep City Skyline",
    "difficulty": "Medium",
    "description": "There is a city composed of `n x n` blocks, where each block contains a single building shaped like a vertical square prism. You are given a **0-indexed** `n x n` integer matrix `grid` where `grid[r][c]` represents the **height** of the building located in the block at row `r` and column `c`. A city's **skyline** is the outer contour formed by all the building when viewing the side of the city from a distance. The **skyline** from each cardinal direction north, east, south, and west may be different. We are allowed to increase the height of **any number of buildings by any amount** (the amount can be different per building). The height of a `0`\\-height building can also be increased. However, increasing the height of a building should **not** affect the city's **skyline** from any cardinal direction. Return _the **maximum total sum** that the height of the buildings can be increased by **without** changing the city's **skyline** from any cardinal direction_.",
    "examples": [
      {
        "input": "grid = \\[\\[3,0,8,4\\],\\[2,4,5,7\\],\\[9,2,6,3\\],\\[0,3,1,0\\]\\]",
        "output": "35",
        "explanation": "The building heights are shown in the center of the above image."
      },
      {
        "input": "grid = \\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]",
        "output": "0",
        "explanation": "Increasing the height of any building will result in the skyline changing."
      }
    ],
    "constraints": [
      "`n == grid.length`",
      "`n == grid[r].length`",
      "`2 <= n <= 50`",
      "`0 <= grid[r][c] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "808",
    "slug": "soup-servings",
    "title": "Soup Servings",
    "difficulty": "Medium",
    "description": "There are two types of soup: **type A** and **type B**. Initially, we have `n` ml of each type of soup. There are four kinds of operations: 1. Serve `100` ml of **soup A** and `0` ml of **soup B**, 2. Serve `75` ml of **soup A** and `25` ml of **soup B**, 3. Serve `50` ml of **soup A** and `50` ml of **soup B**, and 4. Serve `25` ml of **soup A** and `75` ml of **soup B**. When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability `0.25`. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup. **Note** that we do not have an operation where all `100` ml's of **soup B** are used first. Return _the probability that **soup A** will be empty first, plus half the probability that **A** and **B** become empty at the same time_. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "n = 50",
        "output": "0.62500",
        "explanation": "If we choose the first two operations, A will become empty first."
      },
      {
        "input": "n = 100",
        "output": "0.71875"
      }
    ],
    "constraints": [
      "`0 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "809",
    "slug": "expressive-words",
    "title": "Expressive Words",
    "difficulty": "Medium",
    "description": "Sometimes people repeat letters to represent extra feeling. For example: *  `\"hello \" -> \"heeellooo \"` *  `\"hi \" -> \"hiiii \"` In these strings like `\"heeellooo \"`, we have groups of adjacent letters that are all the same: `\"h \"`, `\"eee \"`, `\"ll \"`, `\"ooo \"`. You are given a string `s` and an array of query strings `words`. A query word is **stretchy** if it can be made to be equal to `s` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is **three or more**. *  For example, starting with `\"hello \"`, we could do an extension on the group `\"o \"` to get `\"hellooo \"`, but we cannot get `\"helloo \"` since the group `\"oo \"` has a size less than three. Also, we could do another extension like `\"ll \" -> \"lllll \"` to get `\"helllllooo \"`. If `s = \"helllllooo \"`, then the query word `\"hello \"` would be **stretchy** because of these two extension operations: `query = \"hello \" -> \"hellooo \" -> \"helllllooo \" = s`. Return _the number of query strings that are **stretchy**_.",
    "examples": [
      {
        "input": "s =  \"heeellooo \", words = \\[ \"hello \",  \"hi \",  \"helo \"\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "s =  \"zzzzzyyyyy \", words = \\[ \"zzyy \", \"zy \", \"zyy \"\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= s.length, words.length <= 100`",
      "`1 <= words[i].length <= 100`",
      "`s` and `words[i]` consist of lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "810",
    "slug": "chalkboard-xor-game",
    "title": "Chalkboard XOR Game",
    "difficulty": "Hard",
    "description": "You are given an array of integers `nums` represents the numbers written on a chalkboard. Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become `0`, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is `0`. Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to `0`, then that player wins. Return `true` _if and only if Alice wins the game, assuming both players play optimally_.",
    "examples": [
      {
        "input": "nums = \\[1,1,2\\]",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "nums = \\[0,1\\]",
        "output": "true"
      },
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] < 216`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "811",
    "slug": "subdomain-visit-count",
    "title": "Subdomain Visit Count",
    "difficulty": "Medium",
    "description": "A website domain `\"discuss.leetcode.com \"` consists of various subdomains. At the top level, we have `\"com \"`, at the next level, we have `\"leetcode.com \"` and at the lowest level, `\"discuss.leetcode.com \"`. When we visit a domain like `\"discuss.leetcode.com \"`, we will also visit the parent domains `\"leetcode.com \"` and `\"com \"` implicitly. A **count-paired domain** is a domain that has one of the two formats `\"rep d1.d2.d3 \"` or `\"rep d1.d2 \"` where `rep` is the number of visits to the domain and `d1.d2.d3` is the domain itself. *  For example, `\"9001 discuss.leetcode.com \"` is a **count-paired domain** that indicates that `discuss.leetcode.com` was visited `9001` times. Given an array of **count-paired domains** `cpdomains`, return _an array of the **count-paired domains** of each subdomain in the input_. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "cpdomains = \\[ \"9001 discuss.leetcode.com \"\\]",
        "output": "\\[ \"9001 leetcode.com \", \"9001 discuss.leetcode.com \", \"9001 com \"\\]",
        "explanation": "We only have one website domain:  \"discuss.leetcode.com \"."
      },
      {
        "input": "cpdomains = \\[ \"900 google.mail.com \",  \"50 yahoo.com \",  \"1 intel.mail.com \",  \"5 wiki.org \"\\]",
        "output": "\\[ \"901 mail.com \", \"50 yahoo.com \", \"900 google.mail.com \", \"5 wiki.org \", \"5 org \", \"1 intel.mail.com \", \"951 com \"\\]",
        "explanation": "We will visit  \"google.mail.com \" 900 times,  \"yahoo.com \" 50 times,  \"intel.mail.com \" once and  \"wiki.org \" 5 times."
      }
    ],
    "constraints": [
      "`1 <= cpdomain.length <= 100`",
      "`1 <= cpdomain[i].length <= 100`",
      "`cpdomain[i]` follows either the `\"repi d1i.d2i.d3i \"` format or the `\"repi d1i.d2i \"` format.",
      "`repi` is an integer in the range `[1, 104]`.",
      "`d1i`, `d2i`, and `d3i` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "812",
    "slug": "largest-triangle-area",
    "title": "Largest Triangle Area",
    "difficulty": "Easy",
    "description": "Given an array of points on the **X-Y** plane `points` where `points[i] = [xi, yi]`, return _the area of the largest triangle that can be formed by any three different points_. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "points = \\[\\[0,0\\],\\[0,1\\],\\[1,0\\],\\[0,2\\],\\[2,0\\]\\]",
        "output": "2.00000",
        "explanation": "The five points are shown in the above figure. The red triangle is the largest."
      },
      {
        "input": "points = \\[\\[1,0\\],\\[0,0\\],\\[0,1\\]\\]",
        "output": "0.50000"
      }
    ],
    "constraints": [
      "`3 <= points.length <= 50`",
      "`-50 <= xi, yi <= 50`",
      "All the given points are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "813",
    "slug": "largest-sum-of-averages",
    "title": "Largest Sum of Averages",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an integer `k`. You can partition the array into **at most** `k` non-empty adjacent subarrays. The **score** of a partition is the sum of the averages of each subarray. Note that the partition must use every integer in `nums`, and that the score is not necessarily an integer. Return _the maximum **score** you can achieve of all the possible partitions_. Answers within `10-6` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "nums = \\[9,1,2,3,9\\], k = 3",
        "output": "20.00000",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4,5,6,7\\], k = 4",
        "output": "20.50000"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i] <= 104`",
      "`1 <= k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "814",
    "slug": "binary-tree-pruning",
    "title": "Binary Tree Pruning",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the same tree where every subtree (of the given tree) not containing a_ `1` _has been removed_. A subtree of a node `node` is `node` plus every node that is a descendant of `node`.",
    "examples": [
      {
        "input": "root = \\[1,null,0,0,1\\]",
        "output": "\\[1,null,0,null,1\\]",
        "explanation": ""
      },
      {
        "input": "root = \\[1,0,1,0,0,0,1\\]",
        "output": "\\[1,null,1,null,1\\]"
      },
      {
        "input": "root = \\[1,1,0,1,1,0,1,0\\]",
        "output": "\\[1,1,0,1,1,null,1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 200]`.",
      "`Node.val` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "815",
    "slug": "bus-routes",
    "title": "Bus Routes",
    "difficulty": "Hard",
    "description": "You are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever. *  For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever. You will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only. Return _the least number of buses you must take to travel from_ `source` _to_ `target`. Return `-1` if it is not possible.",
    "examples": [
      {
        "input": "routes = \\[\\[1,2,7\\],\\[3,6,7\\]\\], source = 1, target = 6",
        "output": "2",
        "explanation": "The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6."
      },
      {
        "input": "routes = \\[\\[7,12\\],\\[4,5,15\\],\\[6\\],\\[15,19\\],\\[9,12,13\\]\\], source = 15, target = 12",
        "output": "-1"
      }
    ],
    "constraints": [
      "`1 <= routes.length <= 500`.",
      "`1 <= routes[i].length <= 105`",
      "All the values of `routes[i]` are unique.",
      "`sum(routes[i].length) <= 105`",
      "`0 <= routes[i][j] < 106`",
      "`0 <= source, target < 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "816",
    "slug": "ambiguous-coordinates",
    "title": "Ambiguous Coordinates",
    "difficulty": "Medium",
    "description": "We had some 2-dimensional coordinates, like `\"(1, 3) \"` or `\"(2, 0.5) \"`. Then, we removed all commas, decimal points, and spaces and ended up with the string s. *  For example, `\"(1, 3) \"` becomes `s = \"(13) \"` and `\"(2, 0.5) \"` becomes `s = \"(205) \"`. Return _a list of strings representing all possibilities for what our original coordinates could have been_. Our original representation never had extraneous zeroes, so we never started with numbers like `\"00 \"`, `\"0.0 \"`, `\"0.00 \"`, `\"1.0 \"`, `\"001 \"`, `\"00.01 \"`, or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like `\".1 \"`. The final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)",
    "examples": [
      {
        "input": "s =  \"(123) \"",
        "output": "\\[ \"(1, 2.3) \", \"(1, 23) \", \"(1.2, 3) \", \"(12, 3) \"\\]"
      },
      {
        "input": "s =  \"(0123) \"",
        "output": "\\[ \"(0, 1.23) \", \"(0, 12.3) \", \"(0, 123) \", \"(0.1, 2.3) \", \"(0.1, 23) \", \"(0.12, 3) \"\\]",
        "explanation": "0.0, 00, 0001 or 00.01 are not allowed."
      },
      {
        "input": "s =  \"(00011) \"",
        "output": "\\[ \"(0, 0.011) \", \"(0.001, 1) \"\\]"
      }
    ],
    "constraints": [
      "`4 <= s.length <= 12`",
      "`s[0] == '('` and `s[s.length - 1] == ')'`.",
      "The rest of `s` are digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "817",
    "slug": "linked-list-components",
    "title": "Linked List Components",
    "difficulty": "Medium",
    "description": "You are given the `head` of a linked list containing unique integer values and an integer array `nums` that is a subset of the linked list values. Return _the number of connected components in_ `nums` _where two values are connected if they appear **consecutively** in the linked list_.",
    "examples": [
      {
        "input": "head = \\[0,1,2,3\\], nums = \\[0,1,3\\]",
        "output": "2",
        "explanation": "0 and 1 are connected, so \\[0, 1\\] and \\[3\\] are the two connected components."
      },
      {
        "input": "head = \\[0,1,2,3,4\\], nums = \\[0,3,1,4\\]",
        "output": "2",
        "explanation": "0 and 1 are connected, 3 and 4 are connected, so \\[0, 1\\] and \\[3, 4\\] are the two connected components."
      }
    ],
    "constraints": [
      "The number of nodes in the linked list is `n`.",
      "`1 <= n <= 104`",
      "`0 <= Node.val < n`",
      "All the values `Node.val` are unique.",
      "`1 <= nums.length <= n`",
      "`0 <= nums[i] < n`",
      "All the values of `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "818",
    "slug": "race-car",
    "title": "Race Car",
    "difficulty": "Hard",
    "description": "Your car starts at position `0` and speed `+1` on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions `'A'` (accelerate) and `'R'` (reverse): *  When you get an instruction `'A'`, your car does the following: *  `position += speed` *  `speed *= 2` *  When you get an instruction `'R'`, your car does the following: *  If your speed is positive then `speed = -1` *  otherwise `speed = 1`Your position stays the same. For example, after commands `\"AAR \"`, your car goes to positions `0 --> 1 --> 3 --> 3`, and your speed goes to `1 --> 2 --> 4 --> -1`. Given a target position `target`, return _the length of the shortest sequence of instructions to get there_.",
    "examples": [
      {
        "input": "target = 3",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "target = 6",
        "output": "5",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= target <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "819",
    "slug": "most-common-word",
    "title": "Most Common Word",
    "difficulty": "Easy",
    "description": "Given a string `paragraph` and a string array of the banned words `banned`, return _the most frequent word that is not banned_. It is **guaranteed** there is **at least one word** that is not banned, and that the answer is **unique**. The words in `paragraph` are **case-insensitive** and the answer should be returned in **lowercase**.",
    "examples": [
      {
        "input": "paragraph =  \"Bob hit a ball, the hit BALL flew far after it was hit. \", banned = \\[ \"hit \"\\]",
        "output": "\"ball \"",
        "explanation": ""
      },
      {
        "input": "paragraph =  \"a. \", banned = \\[\\]",
        "output": "\"a \""
      }
    ],
    "constraints": [
      "`1 <= paragraph.length <= 1000`",
      "paragraph consists of English letters, space `' '`, or one of the symbols: `\"!?',;. \"`.",
      "`0 <= banned.length <= 100`",
      "`1 <= banned[i].length <= 10`",
      "`banned[i]` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "820",
    "slug": "short-encoding-of-words",
    "title": "Short Encoding of Words",
    "difficulty": "Medium",
    "description": "A **valid encoding** of an array of `words` is any reference string `s` and array of indices `indices` such that: *  `words.length == indices.length` *  The reference string `s` ends with the `'#'` character. *  For each index `indices[i]`, the **substring** of `s` starting from `indices[i]` and up to (but not including) the next `'#'` character is equal to `words[i]`. Given an array of `words`, return _the **length of the shortest reference string**_ `s` _possible of any **valid encoding** of_ `words`_._",
    "examples": [
      {
        "input": "words = \\[ \"time \",  \"me \",  \"bell \"\\]",
        "output": "10",
        "explanation": "A valid encoding would be s = ` \"time#bell# \" and indices = [0, 2, 5`\\]."
      },
      {
        "input": "words = \\[ \"t \"\\]",
        "output": "2",
        "explanation": "A valid encoding would be s =  \"t# \" and indices = \\[0\\]."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 2000`",
      "`1 <= words[i].length <= 7`",
      "`words[i]` consists of only lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "821",
    "slug": "shortest-distance-to-a-character",
    "title": "Shortest Distance to a Character",
    "difficulty": "Easy",
    "description": "Given a string `s` and a character `c` that occurs in `s`, return _an array of integers_ `answer` _where_ `answer.length == s.length` _and_ `answer[i]` _is the **distance** from index_ `i` _to the **closest** occurrence of character_ `c` _in_ `s`. The **distance** between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.",
    "examples": [
      {
        "input": "s =  \"loveleetcode \", c =  \"e \"",
        "output": "\\[3,2,1,0,1,0,0,1,2,2,1,0\\]",
        "explanation": "The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed)."
      },
      {
        "input": "s =  \"aaab \", c =  \"b \"",
        "output": "\\[3,2,1,0\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s[i]` and `c` are lowercase English letters.",
      "It is guaranteed that `c` occurs at least once in `s`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "822",
    "slug": "card-flipping-game",
    "title": "Card Flipping Game",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed** integer arrays `fronts` and `backs` of length `n`, where the `ith` card has the positive integer `fronts[i]` printed on the front and `backs[i]` printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero). After flipping the cards, an integer is considered **good** if it is facing down on some card and **not** facing up on any card. Return _the minimum possible good integer after flipping the cards_. If there are no good integers, return `0`.",
    "examples": [
      {
        "input": "fronts = \\[1,2,4,4,7\\], backs = \\[1,3,4,1,3\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "fronts = \\[1\\], backs = \\[1\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == fronts.length == backs.length`",
      "`1 <= n <= 1000`",
      "`1 <= fronts[i], backs[i] <= 2000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "823",
    "slug": "binary-trees-with-factors",
    "title": "Binary Trees With Factors",
    "difficulty": "Medium",
    "description": "Given an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`. We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children. Return _the number of binary trees we can make_. The answer may be too large so return the answer **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "arr = \\[2,4\\]",
        "output": "3",
        "explanation": "We can make these trees: `[2], [4], [4, 2, 2]`"
      },
      {
        "input": "arr = \\[2,4,5,10\\]",
        "output": "7",
        "explanation": "We can make these trees: `[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]`."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 1000`",
      "`2 <= arr[i] <= 109`",
      "All the values of `arr` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "824",
    "slug": "goat-latin",
    "title": "Goat Latin",
    "difficulty": "Easy",
    "description": "You are given a string `sentence` that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only. We would like to convert the sentence to \"Goat Latin \" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows: *  If a word begins with a vowel (`'a'`, `'e'`, `'i'`, `'o'`, or `'u'`), append `\"ma \"` to the end of the word. *  For example, the word `\"apple \"` becomes `\"applema \"`. *  If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add `\"ma \"`. *  For example, the word `\"goat \"` becomes `\"oatgma \"`. *  Add one letter `'a'` to the end of each word per its word index in the sentence, starting with `1`. *  For example, the first word gets `\"a \"` added to the end, the second word gets `\"aa \"` added to the end, and so on. Return _the final sentence representing the conversion from sentence to Goat Latin_.",
    "examples": [
      {
        "input": "sentence = \"I speak Goat Latin\"",
        "output": "\"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\""
      },
      {
        "input": "sentence = \"The quick brown fox jumped over the lazy dog\"",
        "output": "\"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\""
      }
    ],
    "constraints": [
      "`1 <= sentence.length <= 150`",
      "`sentence` consists of English letters and spaces.",
      "`sentence` has no leading or trailing spaces.",
      "All the words in `sentence` are separated by a single space."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "825",
    "slug": "friends-of-appropriate-ages",
    "title": "Friends Of Appropriate Ages",
    "difficulty": "Medium",
    "description": "There are `n` persons on a social media website. You are given an integer array `ages` where `ages[i]` is the age of the `ith` person. A Person `x` will not send a friend request to a person `y` (`x != y`) if any of the following conditions is true: *  `age[y] <= 0.5 * age[x] + 7` *  `age[y] > age[x]` *  `age[y] > 100 && age[x] < 100` Otherwise, `x` will send a friend request to `y`. Note that if `x` sends a request to `y`, `y` will not necessarily send a request to `x`. Also, a person will not send a friend request to themself. Return _the total number of friend requests made_.",
    "examples": [
      {
        "input": "ages = \\[16,16\\]",
        "output": "2",
        "explanation": "2 people friend request each other."
      },
      {
        "input": "ages = \\[16,17,18\\]",
        "output": "2",
        "explanation": "Friend requests are made 17 -> 16, 18 -> 17."
      },
      {
        "input": "ages = \\[20,30,100,110,120\\]",
        "output": "3",
        "explanation": "Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100."
      }
    ],
    "constraints": [
      "`n == ages.length`",
      "`1 <= n <= 2  104`",
      "`1 <= ages[i] <= 120`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "826",
    "slug": "most-profit-assigning-work",
    "title": "Most Profit Assigning Work",
    "difficulty": "Medium",
    "description": "You have `n` jobs and `m` workers. You are given three arrays: `difficulty`, `profit`, and `worker` where: *  `difficulty[i]` and `profit[i]` are the difficulty and the profit of the `ith` job, and *  `worker[j]` is the ability of `jth` worker (i.e., the `jth` worker can only complete a job with difficulty at most `worker[j]`). Every worker can be assigned **at most one job**, but one job can be **completed multiple times**. *  For example, if three workers attempt the same job that pays `$1`, then the total profit will be `$3`. If a worker cannot complete any job, their profit is `$0`. Return the maximum profit we can achieve after assigning the workers to the jobs.",
    "examples": [
      {
        "input": "difficulty = \\[2,4,6,8,10\\], profit = \\[10,20,30,40,50\\], worker = \\[4,5,6,7\\]",
        "output": "100",
        "explanation": "Workers are assigned jobs of difficulty \\[4,4,6,6\\] and they get a profit of \\[20,20,30,30\\] separately."
      },
      {
        "input": "difficulty = \\[85,47,57\\], profit = \\[24,66,99\\], worker = \\[40,25,25\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == difficulty.length`",
      "`n == profit.length`",
      "`m == worker.length`",
      "`1 <= n, m <= 104`",
      "`1 <= difficulty[i], profit[i], worker[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "827",
    "slug": "making-a-large-island",
    "title": "Making A Large Island",
    "difficulty": "Hard",
    "description": "You are given an `n x n` binary matrix `grid`. You are allowed to change **at most one** `0` to be `1`. Return _the size of the largest **island** in_ `grid` _after applying this operation_. An **island** is a 4-directionally connected group of `1`s.",
    "examples": [
      {
        "input": "grid = \\[\\[1,0\\],\\[0,1\\]\\]",
        "output": "3",
        "explanation": "Change one 0 to 1 and connect two 1s, then we get an island with area = 3."
      },
      {
        "input": "grid = \\[\\[1,1\\],\\[1,0\\]\\]",
        "output": "4",
        "explanation": "Change the 0 to 1 and make the island bigger, only one island with area = 4."
      },
      {
        "input": "grid = \\[\\[1,1\\],\\[1,1\\]\\]",
        "output": "4",
        "explanation": "Can't change any 0 to 1, only one island with area = 4."
      }
    ],
    "constraints": [
      "`n == grid.length`",
      "`n == grid[i].length`",
      "`1 <= n <= 500`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "828",
    "slug": "count-unique-characters-of-all-substrings-of-a-given-string",
    "title": "Count Unique Characters of All Substrings of a Given String",
    "difficulty": "Hard",
    "description": "Let's define a function `countUniqueChars(s)` that returns the number of unique characters on `s`. *  For example, calling `countUniqueChars(s)` if `s = \"LEETCODE \"` then `\"L \"`, `\"T \"`, `\"C \"`, `\"O \"`, `\"D \"` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`. Given a string `s`, return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. The test cases are generated such that the answer fits in a 32-bit integer. Notice that some substrings can be repeated so in this case you have to count the repeated ones too.",
    "examples": [
      {
        "input": "s =  \"ABC \"",
        "output": "10",
        "explanation": "All possible substrings are:  \"A \", \"B \", \"C \", \"AB \", \"BC \" and  \"ABC \"."
      },
      {
        "input": "s =  \"ABA \"",
        "output": "8",
        "explanation": "The same as example 1, except `countUniqueChars`( \"ABA \") = 1."
      },
      {
        "input": "s =  \"LEETCODE \"",
        "output": "92"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of uppercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "829",
    "slug": "consecutive-numbers-sum",
    "title": "Consecutive Numbers Sum",
    "difficulty": "Hard",
    "description": "Given an integer `n`, return _the number of ways you can write_ `n` _as the sum of consecutive positive integers._",
    "examples": [
      {
        "input": "n = 5",
        "output": "2",
        "explanation": "5 = 2 + 3"
      },
      {
        "input": "n = 9",
        "output": "3",
        "explanation": "9 = 4 + 5 = 2 + 3 + 4"
      },
      {
        "input": "n = 15",
        "output": "4",
        "explanation": "15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5"
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "830",
    "slug": "positions-of-large-groups",
    "title": "Positions of Large Groups",
    "difficulty": "Easy",
    "description": "In a string `s` of lowercase letters, these letters form consecutive groups of the same character. For example, a string like `s = \"abbxxxxzyy \"` has the groups `\"a \"`, `\"bb \"`, `\"xxxx \"`, `\"z \"`, and `\"yy \"`. A group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. In the above example, `\"xxxx \"` has the interval `[3,6]`. A group is considered **large** if it has 3 or more characters. Return _the intervals of every **large** group sorted in **increasing order by start index**_.",
    "examples": [
      {
        "input": "s =  \"abbxxxxzzy \"",
        "output": "\\[\\[3,6\\]\\]",
        "explanation": "`\"xxxx \" is the only` large group with start index 3 and end index 6."
      },
      {
        "input": "s =  \"abc \"",
        "output": "\\[\\]",
        "explanation": "We have groups  \"a \",  \"b \", and  \"c \", none of which are large groups."
      },
      {
        "input": "s =  \"abcdddeeeeaabbbcd \"",
        "output": "\\[\\[3,5\\],\\[6,9\\],\\[12,14\\]\\]",
        "explanation": "The large groups are  \"ddd \",  \"eeee \", and  \"bbb \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` contains lowercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "831",
    "slug": "masking-personal-information",
    "title": "Masking Personal Information",
    "difficulty": "Medium",
    "description": "You are given a personal information string `s`, representing either an **email address** or a **phone number**. Return _the **masked** personal information using the below rules_. **Email address:** An email address is: *  A **name** consisting of uppercase and lowercase English letters, followed by *  The `'@'` symbol, followed by *  The **domain** consisting of uppercase and lowercase English letters with a dot `'.'` somewhere in the middle (not the first or last character). To mask an email: *  The uppercase letters in the **name** and **domain** must be converted to lowercase letters. *  The middle letters of the **name** (i.e., all but the first and last letters) must be replaced by 5 asterisks `\"***** \"`. **Phone number:** A phone number is formatted as follows: *  The phone number contains 10-13 digits. *  The last 10 digits make up the **local number**. *  The remaining 0-3 digits, in the beginning, make up the **country code**. *  **Separation characters** from the set `{'+', '-', '(', ')', ' '}` separate the above digits in some way. To mask a phone number: *  Remove all **separation characters**. *  The masked phone number should have the form: *  `\"***-***-XXXX \"` if the country code has 0 digits. *  `\"+*-***-***-XXXX \"` if the country code has 1 digit. *  `\"+**-***-***-XXXX \"` if the country code has 2 digits. *  `\"+***-***-***-XXXX \"` if the country code has 3 digits. *  `\"XXXX \"` is the last 4 digits of the **local number**.",
    "examples": [
      {
        "input": "s =  \"LeetCode@LeetCode.com \"",
        "output": "\"l\\*\\*\\*\\*\\*e@leetcode.com \"",
        "explanation": "s is an email address."
      },
      {
        "input": "s =  \"AB@qq.com \"",
        "output": "\"a\\*\\*\\*\\*\\*b@qq.com \"",
        "explanation": "s is an email address."
      },
      {
        "input": "s =  \"1(234)567-890 \"",
        "output": "\"\\*\\*\\*-\\*\\*\\*-7890 \"",
        "explanation": "s is a phone number."
      }
    ],
    "constraints": [
      "`s` is either a valid email or a phone number.",
      "If `s` is an email:",
      "`8 <= s.length <= 40`",
      "`s` consists of uppercase and lowercase English letters and exactly one `'@'` symbol and `'.'` symbol.",
      "If `s` is a phone number:",
      "`10 <= s.length <= 20`",
      "`s` consists of digits, spaces, and the symbols `'('`, `')'`, `'-'`, and `'+'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "832",
    "slug": "flipping-an-image",
    "title": "Flipping an Image",
    "difficulty": "Easy",
    "description": "Given an `n x n` binary matrix `image`, flip the image **horizontally**, then invert it, and return _the resulting image_. To flip an image horizontally means that each row of the image is reversed. *  For example, flipping `[1,1,0]` horizontally results in `[0,1,1]`. To invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`. *  For example, inverting `[0,1,1]` results in `[1,0,0]`.",
    "examples": [
      {
        "input": "image = \\[\\[1,1,0\\],\\[1,0,1\\],\\[0,0,0\\]\\]",
        "output": "\\[\\[1,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\]",
        "explanation": "First reverse each row: \\[\\[0,1,1\\],\\[1,0,1\\],\\[0,0,0\\]\\]."
      },
      {
        "input": "image = \\[\\[1,1,0,0\\],\\[1,0,0,1\\],\\[0,1,1,1\\],\\[1,0,1,0\\]\\]",
        "output": "\\[\\[1,1,0,0\\],\\[0,1,1,0\\],\\[0,0,0,1\\],\\[1,0,1,0\\]\\]",
        "explanation": "First reverse each row: \\[\\[0,0,1,1\\],\\[1,0,0,1\\],\\[1,1,1,0\\],\\[0,1,0,1\\]\\]."
      }
    ],
    "constraints": [
      "`n == image.length`",
      "`n == image[i].length`",
      "`1 <= n <= 20`",
      "`images[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "833",
    "slug": "find-and-replace-in-string",
    "title": "Find And Replace in String",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `s` that you must perform `k` replacement operations on. The replacement operations are given as three **0-indexed** parallel arrays, `indices`, `sources`, and `targets`, all of length `k`. To complete the `ith` replacement operation: 1. Check if the **substring** `sources[i]` occurs at index `indices[i]` in the **original string** `s`. 2. If it does not occur, **do nothing**. 3. Otherwise if it does occur, **replace** that substring with `targets[i]`. For example, if `s = \"abcd \"`, `indices[i] = 0`, `sources[i] = \"ab \"`, and `targets[i] = \"eee \"`, then the result of this replacement will be `\"eeecd \"`. All replacement operations must occur **simultaneously**, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will **not overlap**. *  For example, a testcase with `s = \"abc \"`, `indices = [0, 1]`, and `sources = [ \"ab \", \"bc \"]` will not be generated because the `\"ab \"` and `\"bc \"` replacements overlap. Return _the **resulting string** after performing all replacement operations on_ `s`. A **substring** is a contiguous sequence of characters in a string.",
    "examples": [
      {
        "input": "s =  \"abcd \", indices = \\[0, 2\\], sources = \\[ \"a \",  \"cd \"\\], targets = \\[ \"eee \",  \"ffff \"\\]",
        "output": "\"eeebffff \"",
        "explanation": ""
      },
      {
        "input": "s =  \"abcd \", indices = \\[0, 2\\], sources = \\[ \"ab \", \"ec \"\\], targets = \\[ \"eee \", \"ffff \"\\]",
        "output": "\"eeecd \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`k == indices.length == sources.length == targets.length`",
      "`1 <= k <= 100`",
      "`0 <= indexes[i] < s.length`",
      "`1 <= sources[i].length, targets[i].length <= 50`",
      "`s` consists of only lowercase English letters.",
      "`sources[i]` and `targets[i]` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "834",
    "slug": "sum-of-distances-in-tree",
    "title": "Sum of Distances in Tree",
    "difficulty": "Hard",
    "description": "There is an undirected connected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges. You are given the integer `n` and the array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. Return an array `answer` of length `n` where `answer[i]` is the sum of the distances between the `ith` node in the tree and all other nodes.",
    "examples": [
      {
        "input": "n = 6, edges = \\[\\[0,1\\],\\[0,2\\],\\[2,3\\],\\[2,4\\],\\[2,5\\]\\]",
        "output": "\\[8,12,6,10,10,10\\]",
        "explanation": "The tree is shown above."
      },
      {
        "input": "n = 1, edges = \\[\\]",
        "output": "\\[0\\]"
      },
      {
        "input": "n = 2, edges = \\[\\[1,0\\]\\]",
        "output": "\\[1,1\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 3  104`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "The given input represents a valid tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "835",
    "slug": "image-overlap",
    "title": "Image Overlap",
    "difficulty": "Medium",
    "description": "You are given two images, `img1` and `img2`, represented as binary, square matrices of size `n x n`. A binary matrix has only `0`s and `1`s as values. We **translate** one image however we choose by sliding all the `1` bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the **overlap** by counting the number of positions that have a `1` in **both** images. Note also that a translation does **not** include any kind of rotation. Any `1` bits that are translated outside of the matrix borders are erased. Return _the largest possible overlap_.",
    "examples": [
      {
        "input": "img1 = \\[\\[1,1,0\\],\\[0,1,0\\],\\[0,1,0\\]\\], img2 = \\[\\[0,0,0\\],\\[0,1,1\\],\\[0,0,1\\]\\]",
        "output": "3",
        "explanation": "We translate img1 to right by 1 unit and down by 1 unit."
      },
      {
        "input": "img1 = \\[\\[1\\]\\], img2 = \\[\\[1\\]\\]",
        "output": "1"
      },
      {
        "input": "img1 = \\[\\[0\\]\\], img2 = \\[\\[0\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == img1.length == img1[i].length`",
      "`n == img2.length == img2[i].length`",
      "`1 <= n <= 30`",
      "`img1[i][j]` is either `0` or `1`.",
      "`img2[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "836",
    "slug": "rectangle-overlap",
    "title": "Rectangle Overlap",
    "difficulty": "Easy",
    "description": "An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis. Two rectangles overlap if the area of their intersection is **positive**. To be clear, two rectangles that only touch at the corner or edges do not overlap. Given two axis-aligned rectangles `rec1` and `rec2`, return `true` _if they overlap, otherwise return_ `false`.",
    "examples": [
      {
        "input": "rec1 = \\[0,0,2,2\\], rec2 = \\[1,1,3,3\\]",
        "output": "true"
      },
      {
        "input": "rec1 = \\[0,0,1,1\\], rec2 = \\[1,0,2,1\\]",
        "output": "false"
      },
      {
        "input": "rec1 = \\[0,0,1,1\\], rec2 = \\[2,2,3,3\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`rec1.length == 4`",
      "`rec2.length == 4`",
      "`-109 <= rec1[i], rec2[i] <= 109`",
      "`rec1` and `rec2` represent a valid rectangle with a non-zero area."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "837",
    "slug": "new-21-game",
    "title": "New 21 Game",
    "difficulty": "Medium",
    "description": "Alice plays the following game, loosely based on the card game **\"21 \"**. Alice starts with `0` points and draws numbers while she has less than `k` points. During each draw, she gains an integer number of points randomly from the range `[1, maxPts]`, where `maxPts` is an integer. Each draw is independent and the outcomes have equal probabilities. Alice stops drawing numbers when she gets `k` **or more points**. Return the probability that Alice has `n` or fewer points. Answers within `10-5` of the actual answer are considered accepted.",
    "examples": [
      {
        "input": "n = 10, k = 1, maxPts = 10",
        "output": "1.00000",
        "explanation": "Alice gets a single card, then stops."
      },
      {
        "input": "n = 6, k = 1, maxPts = 10",
        "output": "0.60000",
        "explanation": "Alice gets a single card, then stops."
      },
      {
        "input": "n = 21, k = 17, maxPts = 10",
        "output": "0.73278"
      }
    ],
    "constraints": [
      "`0 <= k <= n <= 104`",
      "`1 <= maxPts <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "838",
    "slug": "push-dominoes",
    "title": "Push Dominoes",
    "difficulty": "Medium",
    "description": "There are `n` dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right. After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino. You are given a string `dominoes` representing the initial state where: *  `dominoes[i] = 'L'`, if the `ith` domino has been pushed to the left, *  `dominoes[i] = 'R'`, if the `ith` domino has been pushed to the right, and *  `dominoes[i] = '.'`, if the `ith` domino has not been pushed. Return _a string representing the final state_.",
    "examples": [
      {
        "input": "dominoes =  \"RR.L \"",
        "output": "\"RR.L \"",
        "explanation": "The first domino expends no additional force on the second domino."
      },
      {
        "input": "dominoes =  \".L.R...LR..L.. \"",
        "output": "\"LL.RR.LLRRLL.. \""
      }
    ],
    "constraints": [
      "`n == dominoes.length`",
      "`1 <= n <= 105`",
      "`dominoes[i]` is either `'L'`, `'R'`, or `'.'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "839",
    "slug": "similar-string-groups",
    "title": "Similar String Groups",
    "difficulty": "Hard",
    "description": "Two strings `X` and `Y` are similar if we can swap two letters (in different positions) of `X`, so that it equals `Y`. Also two strings `X` and `Y` are similar if they are equal. For example, `\"tars \"` and `\"rats \"` are similar (swapping at positions `0` and `2`), and `\"rats \"` and `\"arts \"` are similar, but `\"star \"` is not similar to `\"tars \"`, `\"rats \"`, or `\"arts \"`. Together, these form two connected groups by similarity: `{ \"tars \", \"rats \", \"arts \"}` and `{ \"star \"}`. Notice that `\"tars \"` and `\"arts \"` are in the same group even though they are not similar. Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group. We are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. How many groups are there?",
    "examples": [
      {
        "input": "strs = \\[ \"tars \", \"rats \", \"arts \", \"star \"\\]",
        "output": "2"
      },
      {
        "input": "strs = \\[ \"omv \", \"ovm \"\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= strs.length <= 300`",
      "`1 <= strs[i].length <= 300`",
      "`strs[i]` consists of lowercase letters only.",
      "All words in `strs` have the same length and are anagrams of each other."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "840",
    "slug": "magic-squares-in-grid",
    "title": "Magic Squares In Grid",
    "difficulty": "Medium",
    "description": "A `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers **from** `1` **to** `9` such that each row, column, and both diagonals all have the same sum. Given a `row x col` `grid` of integers, how many `3 x 3` \"magic square \" subgrids are there? (Each subgrid is contiguous).",
    "examples": [
      {
        "input": "grid = \\[\\[4,3,8,4\\],\\[9,5,1,9\\],\\[2,7,6,2\\]\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "grid = \\[\\[8\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`row == grid.length`",
      "`col == grid[i].length`",
      "`1 <= row, col <= 10`",
      "`0 <= grid[i][j] <= 15`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "841",
    "slug": "keys-and-rooms",
    "title": "Keys and Rooms",
    "difficulty": "Medium",
    "description": "There are `n` rooms labeled from `0` to `n - 1` and all the rooms are locked except for room `0`. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key. When you visit a room, you may find a set of **distinct keys** in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms. Given an array `rooms` where `rooms[i]` is the set of keys that you can obtain if you visited room `i`, return `true` _if you can visit **all** the rooms, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "rooms = \\[\\[1\\],\\[2\\],\\[3\\],\\[\\]\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "rooms = \\[\\[1,3\\],\\[3,0,1\\],\\[2\\],\\[0\\]\\]",
        "output": "false",
        "explanation": "We can not enter room number 2 since the only key that unlocks it is in that room."
      }
    ],
    "constraints": [
      "`n == rooms.length`",
      "`2 <= n <= 1000`",
      "`0 <= rooms[i].length <= 1000`",
      "`1 <= sum(rooms[i].length) <= 3000`",
      "`0 <= rooms[i][j] < n`",
      "All the values of `rooms[i]` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "842",
    "slug": "split-array-into-fibonacci-sequence",
    "title": "Split Array into Fibonacci Sequence",
    "difficulty": "Medium",
    "description": "You are given a string of digits `num`, such as `\"123456579 \"`. We can split it into a Fibonacci-like sequence `[123, 456, 579]`. Formally, a **Fibonacci-like** sequence is a list `f` of non-negative integers such that: *  `0 <= f[i] < 231`, (that is, each integer fits in a **32-bit** signed integer type), *  `f.length >= 3`, and *  `f[i] + f[i + 1] == f[i + 2]` for all `0 <= i < f.length - 2`. Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number `0` itself. Return any Fibonacci-like sequence split from `num`, or return `[]` if it cannot be done.",
    "examples": [
      {
        "input": "num =  \"1101111 \"",
        "output": "\\[11,0,11,11\\]",
        "explanation": "The output \\[110, 1, 111\\] would also be accepted."
      },
      {
        "input": "num =  \"112358130 \"",
        "output": "\\[\\]",
        "explanation": "The task is impossible."
      },
      {
        "input": "num =  \"0123 \"",
        "output": "\\[\\]",
        "explanation": "Leading zeroes are not allowed, so  \"01 \",  \"2 \",  \"3 \" is not valid."
      }
    ],
    "constraints": [
      "`1 <= num.length <= 200`",
      "`num` contains only digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "843",
    "slug": "guess-the-word",
    "title": "Guess the Word",
    "difficulty": "Hard",
    "description": "You are given an array of unique strings `words` where `words[i]` is six letters long. One word of `words` was chosen as a secret word. You are also given the helper object `Master`. You may call `Master.guess(word)` where `word` is a six-letter-long string, and it must be from `words`. `Master.guess(word)` returns: *  `-1` if `word` is not from `words`, or *  an integer representing the number of exact matches (value and position) of your guess to the secret word. There is a parameter `allowedGuesses` for each test case where `allowedGuesses` is the maximum number of times you can call `Master.guess(word)`. For each test case, you should call `Master.guess` with the secret word without exceeding the maximum number of allowed guesses. You will get: *  **`\"Either you took too many guesses, or you did not find the secret word. \"`** if you called `Master.guess` more than `allowedGuesses` times or if you did not call `Master.guess` with the secret word, or *  **`\"You guessed the secret word correctly. \"`** if you called `Master.guess` with the secret word with the number of calls to `Master.guess` less than or equal to `allowedGuesses`. The test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).",
    "examples": [
      {
        "input": "secret =  \"acckzz \", words = \\[ \"acckzz \", \"ccbazz \", \"eiowzz \", \"abcczz \"\\], allowedGuesses = 10",
        "output": "You guessed the secret word correctly.",
        "explanation": ""
      },
      {
        "input": "secret =  \"hamada \", words = \\[ \"hamada \", \"khaled \"\\], allowedGuesses = 10",
        "output": "You guessed the secret word correctly.",
        "explanation": "Since there are two words, you can guess both."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`words[i].length == 6`",
      "`words[i]` consist of lowercase English letters.",
      "All the strings of `wordlist` are unique.",
      "`secret` exists in `words`.",
      "`10 <= allowedGuesses <= 30`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "844",
    "slug": "backspace-string-compare",
    "title": "Backspace String Compare",
    "difficulty": "Easy",
    "description": "Given two strings `s` and `t`, return `true` _if they are equal when both are typed into empty text editors_. `'#'` means a backspace character. Note that after backspacing an empty text, the text will continue empty.",
    "examples": [
      {
        "input": "s =  \"ab#c \", t =  \"ad#c \"",
        "output": "true",
        "explanation": "Both s and t become  \"ac \"."
      },
      {
        "input": "s =  \"ab## \", t =  \"c#d# \"",
        "output": "true",
        "explanation": "Both s and t become  \" \"."
      },
      {
        "input": "s =  \"a#c \", t =  \"b \"",
        "output": "false",
        "explanation": "s becomes  \"c \" while t becomes  \"b \"."
      }
    ],
    "constraints": [
      "`1 <= s.length, t.length <= 200`",
      "`s` and `t` only contain lowercase letters and `'#'` characters.",
      "Follow up: Can you solve it in `O(n)` time and `O(1)` space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "845",
    "slug": "longest-mountain-in-array",
    "title": "Longest Mountain in Array",
    "difficulty": "Medium",
    "description": "You may recall that an array `arr` is a **mountain array** if and only if: *  `arr.length >= 3` *  There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that: *  `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` *  `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` Given an integer array `arr`, return _the length of the longest subarray, which is a mountain_. Return `0` if there is no mountain subarray.",
    "examples": [
      {
        "input": "arr = \\[2,1,4,7,3,2,5\\]",
        "output": "5",
        "explanation": "The largest mountain is \\[1,4,7,3,2\\] which has length 5."
      },
      {
        "input": "arr = \\[2,2,2\\]",
        "output": "0",
        "explanation": "There is no mountain."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 104`",
      "`0 <= arr[i] <= 104`",
      "Follow up:",
      "Can you solve it using only one pass?",
      "Can you solve it in `O(1)` space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "846",
    "slug": "hand-of-straights",
    "title": "Hand of Straights",
    "difficulty": "Medium",
    "description": "Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size `groupSize`, and consists of `groupSize` consecutive cards. Given an integer array `hand` where `hand[i]` is the value written on the `ith` card and an integer `groupSize`, return `true` if she can rearrange the cards, or `false` otherwise.",
    "examples": [
      {
        "input": "hand = \\[1,2,3,6,2,3,4,7,8\\], groupSize = 3",
        "output": "true",
        "explanation": "Alice's hand can be rearranged as \\[1,2,3\\],\\[2,3,4\\],\\[6,7,8\\]"
      },
      {
        "input": "hand = \\[1,2,3,4,5\\], groupSize = 4",
        "output": "false",
        "explanation": "Alice's hand can not be rearranged into groups of 4."
      }
    ],
    "constraints": [
      "`1 <= hand.length <= 104`",
      "`0 <= hand[i] <= 109`",
      "`1 <= groupSize <= hand.length`"
    ],
    "note": "This question is the same as 1296: [https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/](https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/)",
    "follow_up": null
  },
  {
    "id": "847",
    "slug": "shortest-path-visiting-all-nodes",
    "title": "Shortest Path Visiting All Nodes",
    "difficulty": "Hard",
    "description": "You have an undirected, connected graph of `n` nodes labeled from `0` to `n - 1`. You are given an array `graph` where `graph[i]` is a list of all the nodes connected with node `i` by an edge. Return _the length of the shortest path that visits every node_. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.",
    "examples": [
      {
        "input": "graph = \\[\\[1,2,3\\],\\[0\\],\\[0\\],\\[0\\]\\]",
        "output": "4",
        "explanation": "One possible path is \\[1,0,2,0,3\\]"
      },
      {
        "input": "graph = \\[\\[1\\],\\[0,2,4\\],\\[1,3,4\\],\\[2\\],\\[1,2\\]\\]",
        "output": "4",
        "explanation": "One possible path is \\[0,1,4,2,3\\]"
      }
    ],
    "constraints": [
      "`n == graph.length`",
      "`1 <= n <= 12`",
      "`0 <= graph[i].length < n`",
      "`graph[i]` does not contain `i`.",
      "If `graph[a]` contains `b`, then `graph[b]` contains `a`.",
      "The input graph is always connected."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "848",
    "slug": "shifting-letters",
    "title": "Shifting Letters",
    "difficulty": "Medium",
    "description": "You are given a string `s` of lowercase English letters and an integer array `shifts` of the same length. Call the `shift()` of a letter, the next letter in the alphabet, (wrapping around so that `'z'` becomes `'a'`). *  For example, `shift('a') = 'b'`, `shift('t') = 'u'`, and `shift('z') = 'a'`. Now for each `shifts[i] = x`, we want to shift the first `i + 1` letters of `s`, `x` times. Return _the final string after all such shifts to s are applied_.",
    "examples": [
      {
        "input": "s =  \"abc \", shifts = \\[3,5,9\\]",
        "output": "\"rpl \"",
        "explanation": "We start with  \"abc \"."
      },
      {
        "input": "s =  \"aaa \", shifts = \\[1,2,3\\]",
        "output": "\"gfd \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters.",
      "`shifts.length == s.length`",
      "`0 <= shifts[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "849",
    "slug": "maximize-distance-to-closest-person",
    "title": "Maximize Distance to Closest Person",
    "difficulty": "Medium",
    "description": "You are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty **(0-indexed)**. There is at least one empty seat, and at least one person sitting. Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. Return _that maximum distance to the closest person_.",
    "examples": [
      {
        "input": "seats = \\[1,0,0,0,1,0,1\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "seats = \\[1,0,0,0\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "seats = \\[0,1\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`2 <= seats.length <= 2  104`",
      "`seats[i]` is `0` or `1`.",
      "At least one seat is empty.",
      "At least one seat is occupied."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "850",
    "slug": "rectangle-area-ii",
    "title": "Rectangle Area II",
    "difficulty": "Hard",
    "description": "You are given a 2D array of axis-aligned `rectangles`. Each `rectangle[i] = [xi1, yi1, xi2, yi2]` denotes the `ith` rectangle where `(xi1, yi1)` are the coordinates of the **bottom-left corner**, and `(xi2, yi2)` are the coordinates of the **top-right corner**. Calculate the **total area** covered by all `rectangles` in the plane. Any area covered by two or more rectangles should only be counted **once**. Return _the **total area**_. Since the answer may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "rectangles = \\[\\[0,0,2,2\\],\\[1,0,2,3\\],\\[1,0,3,1\\]\\]",
        "output": "6",
        "explanation": "A total area of 6 is covered by all three rectangles, as illustrated in the picture."
      },
      {
        "input": "rectangles = \\[\\[0,0,1000000000,1000000000\\]\\]",
        "output": "49",
        "explanation": "The answer is 1018 modulo (109 + 7), which is 49."
      }
    ],
    "constraints": [
      "`1 <= rectangles.length <= 200`",
      "`rectanges[i].length == 4`",
      "`0 <= xi1, yi1, xi2, yi2 <= 109`",
      "`xi1 <= xi2`",
      "`yi1 <= yi2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "851",
    "slug": "loud-and-rich",
    "title": "Loud and Rich",
    "difficulty": "Medium",
    "description": "There is a group of `n` people labeled from `0` to `n - 1` where each person has a different amount of money and a different level of quietness. You are given an array `richer` where `richer[i] = [ai, bi]` indicates that `ai` has more money than `bi` and an integer array `quiet` where `quiet[i]` is the quietness of the `ith` person. All the given data in richer are **logically correct** (i.e., the data will not lead you to a situation where `x` is richer than `y` and `y` is richer than `x` at the same time). Return _an integer array_ `answer` _where_ `answer[x] = y` _if_ `y` _is the least quiet person (that is, the person_ `y` _with the smallest value of_ `quiet[y]`_) among all people who definitely have equal to or more money than the person_ `x`.",
    "examples": [
      {
        "input": "richer = \\[\\[1,0\\],\\[2,1\\],\\[3,1\\],\\[3,7\\],\\[4,3\\],\\[5,3\\],\\[6,3\\]\\], quiet = \\[3,2,5,4,6,1,7,0\\]",
        "output": "\\[5,5,2,5,4,5,6,7\\]",
        "explanation": ""
      },
      {
        "input": "richer = \\[\\], quiet = \\[0\\]",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "`n == quiet.length`",
      "`1 <= n <= 500`",
      "`0 <= quiet[i] < n`",
      "All the values of `quiet` are unique.",
      "`0 <= richer.length <= n  (n - 1) / 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "All the pairs of `richer` are unique.",
      "The observations in `richer` are all logically consistent."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "852",
    "slug": "peak-index-in-a-mountain-array",
    "title": "Peak Index in a Mountain Array",
    "difficulty": "Medium",
    "description": "An array `arr` a **mountain** if the following properties hold: *  `arr.length >= 3` *  There exists some `i` with `0 < i < arr.length - 1` such that: *  `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` *  `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` Given a mountain array `arr`, return the index `i` such that `arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`. You must solve it in `O(log(arr.length))` time complexity.",
    "examples": [
      {
        "input": "arr = \\[0,1,0\\]",
        "output": "1"
      },
      {
        "input": "arr = \\[0,2,1,0\\]",
        "output": "1"
      },
      {
        "input": "arr = \\[0,10,5,2\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`3 <= arr.length <= 105`",
      "`0 <= arr[i] <= 106`",
      "`arr` is guaranteed to be a mountain array."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "853",
    "slug": "car-fleet",
    "title": "Car Fleet",
    "difficulty": "Medium",
    "description": "There are `n` cars going to the same destination along a one-lane road. The destination is `target` miles away. You are given two integer array `position` and `speed`, both of length `n`, where `position[i]` is the position of the `ith` car and `speed[i]` is the speed of the `ith` car (in miles per hour). A car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper **at the same speed**. The faster car will **slow down** to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position). A **car fleet** is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet. If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet. Return _the **number of car fleets** that will arrive at the destination_.",
    "examples": [
      {
        "input": "target = 12, position = \\[10,8,0,5,3\\], speed = \\[2,4,1,1,3\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "target = 10, position = \\[3\\], speed = \\[3\\]",
        "output": "1",
        "explanation": "There is only one car, hence there is only one fleet."
      },
      {
        "input": "target = 100, position = \\[0,2,4\\], speed = \\[4,2,1\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == position.length == speed.length`",
      "`1 <= n <= 105`",
      "`0 < target <= 106`",
      "`0 <= position[i] < target`",
      "All the values of `position` are unique.",
      "`0 < speed[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "854",
    "slug": "k-similar-strings",
    "title": "K-Similar Strings",
    "difficulty": "Hard",
    "description": "Strings `s1` and `s2` are `k`**\\-similar** (for some non-negative integer `k`) if we can swap the positions of two letters in `s1` exactly `k` times so that the resulting string equals `s2`. Given two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and `s2` are `k`**\\-similar**.",
    "examples": [
      {
        "input": "s1 =  \"ab \", s2 =  \"ba \"",
        "output": "1",
        "explanation": "The two string are 1-similar because we can use one swap to change s1 to s2:  \"ab \" -->  \"ba \"."
      },
      {
        "input": "s1 =  \"abc \", s2 =  \"bca \"",
        "output": "2",
        "explanation": "The two strings are 2-similar because we can use two swaps to change s1 to s2:  \"abc \" -->  \"bac \" -->  \"bca \"."
      }
    ],
    "constraints": [
      "`1 <= s1.length <= 20`",
      "`s2.length == s1.length`",
      "`s1` and `s2` contain only lowercase letters from the set `{'a', 'b', 'c', 'd', 'e', 'f'}`.",
      "`s2` is an anagram of `s1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "855",
    "slug": "exam-room",
    "title": "Exam Room",
    "difficulty": "Medium",
    "description": "There is an exam room with `n` seats in a single row labeled from `0` to `n - 1`. When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number `0`. Design a class that simulates the mentioned exam room. Implement the `ExamRoom` class: *  `ExamRoom(int n)` Initializes the object of the exam room with the number of the seats `n`. *  `int seat()` Returns the label of the seat at which the next student will set. *  `void leave(int p)` Indicates that the student sitting at seat `p` will leave the room. It is guaranteed that there will be a student sitting at seat `p`.",
    "examples": [],
    "constraints": [
      "`1 <= n <= 109`",
      "It is guaranteed that there is a student sitting at seat `p`.",
      "At most `104` calls will be made to `seat` and `leave`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "856",
    "slug": "score-of-parentheses",
    "title": "Score of Parentheses",
    "difficulty": "Medium",
    "description": "Given a balanced parentheses string `s`, return _the **score** of the string_. The **score** of a balanced parentheses string is based on the following rule: *  `\"() \"` has score `1`. *  `AB` has score `A + B`, where `A` and `B` are balanced parentheses strings. *  `(A)` has score `2 * A`, where `A` is a balanced parentheses string.",
    "examples": [
      {
        "input": "s =  \"() \"",
        "output": "1"
      },
      {
        "input": "s =  \"(()) \"",
        "output": "2"
      },
      {
        "input": "s =  \"()() \"",
        "output": "2"
      }
    ],
    "constraints": [
      "`2 <= s.length <= 50`",
      "`s` consists of only `'('` and `')'`.",
      "`s` is a balanced parentheses string."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "857",
    "slug": "minimum-cost-to-hire-k-workers",
    "title": "Minimum Cost to Hire K Workers",
    "difficulty": "Hard",
    "description": "There are `n` workers. You are given two integer arrays `quality` and `wage` where `quality[i]` is the quality of the `ith` worker and `wage[i]` is the minimum wage expectation for the `ith` worker. We want to hire exactly `k` workers to form a paid group. To hire a group of `k` workers, we must pay them according to the following rules: 1. Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group. 2. Every worker in the paid group must be paid at least their minimum wage expectation. Given the integer `k`, return _the least amount of money needed to form a paid group satisfying the above conditions_. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "quality = \\[10,20,5\\], wage = \\[70,50,30\\], k = 2",
        "output": "105.00000",
        "explanation": "We pay 70 to 0th worker and 35 to 2nd worker."
      },
      {
        "input": "quality = \\[3,1,10,10,1\\], wage = \\[4,8,2,2,7\\], k = 3",
        "output": "30.66667",
        "explanation": "We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately."
      }
    ],
    "constraints": [
      "`n == quality.length == wage.length`",
      "`1 <= k <= n <= 104`",
      "`1 <= quality[i], wage[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "858",
    "slug": "mirror-reflection",
    "title": "Mirror Reflection",
    "difficulty": "Medium",
    "description": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered `0`, `1`, and `2`. The square room has walls of length `p` and a laser ray from the southwest corner first meets the east wall at a distance `q` from the `0th` receptor. Given the two integers `p` and `q`, return _the number of the receptor that the ray meets first_. The test cases are guaranteed so that the ray will meet a receptor eventually.",
    "examples": [
      {
        "input": "p = 2, q = 1",
        "output": "2",
        "explanation": "The ray meets receptor 2 the first time it gets reflected back to the left wall."
      },
      {
        "input": "p = 3, q = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= q <= p <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "859",
    "slug": "buddy-strings",
    "title": "Buddy Strings",
    "difficulty": "Easy",
    "description": "Given two strings `s` and `goal`, return `true` _if you can swap two letters in_ `s` _so the result is equal to_ `goal`_, otherwise, return_ `false`_._ Swapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `s[i]` and `s[j]`. *  For example, swapping at indices `0` and `2` in `\"abcd \"` results in `\"cbad \"`.",
    "examples": [
      {
        "input": "s =  \"ab \", goal =  \"ba \"",
        "output": "true",
        "explanation": "You can swap s\\[0\\] = 'a' and s\\[1\\] = 'b' to get  \"ba \", which is equal to goal."
      },
      {
        "input": "s =  \"ab \", goal =  \"ab \"",
        "output": "false",
        "explanation": "The only letters you can swap are s\\[0\\] = 'a' and s\\[1\\] = 'b', which results in  \"ba \" != goal."
      },
      {
        "input": "s =  \"aa \", goal =  \"aa \"",
        "output": "true",
        "explanation": "You can swap s\\[0\\] = 'a' and s\\[1\\] = 'a' to get  \"aa \", which is equal to goal."
      }
    ],
    "constraints": [
      "`1 <= s.length, goal.length <= 2  104`",
      "`s` and `goal` consist of lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "860",
    "slug": "lemonade-change",
    "title": "Lemonade Change",
    "difficulty": "Easy",
    "description": "At a lemonade stand, each lemonade costs `$5`. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill. You must provide the correct change to each customer so that the net transaction is that the customer pays `$5`. Note that you do not have any change in hand at first. Given an integer array `bills` where `bills[i]` is the bill the `ith` customer pays, return `true` _if you can provide every customer with the correct change, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "bills = \\[5,5,5,10,20\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "bills = \\[5,5,10,10,20\\]",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= bills.length <= 105`",
      "`bills[i]` is either `5`, `10`, or `20`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "861",
    "slug": "score-after-flipping-matrix",
    "title": "Score After Flipping Matrix",
    "difficulty": "Medium",
    "description": "You are given an `m x n` binary matrix `grid`. A **move** consists of choosing any row or column and toggling each value in that row or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s). Every row of the matrix is interpreted as a binary number, and the **score** of the matrix is the sum of these numbers. Return _the highest possible **score** after making any number of **moves** (including zero moves)_.",
    "examples": [
      {
        "input": "grid = \\[\\[0,0,1,1\\],\\[1,0,1,0\\],\\[1,1,0,0\\]\\]",
        "output": "39",
        "explanation": "0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39"
      },
      {
        "input": "grid = \\[\\[0\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 20`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "862",
    "slug": "shortest-subarray-with-sum-at-least-k",
    "title": "Shortest Subarray with Sum at Least K",
    "difficulty": "Hard",
    "description": "Given an integer array `nums` and an integer `k`, return _the length of the shortest non-empty **subarray** of_ `nums` _with a sum of at least_ `k`. If there is no such **subarray**, return `-1`. A **subarray** is a **contiguous** part of an array.",
    "examples": [
      {
        "input": "nums = \\[1\\], k = 1",
        "output": "1"
      },
      {
        "input": "nums = \\[1,2\\], k = 4",
        "output": "-1"
      },
      {
        "input": "nums = \\[2,-1,2\\], k = 3",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-105 <= nums[i] <= 105`",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "863",
    "slug": "all-nodes-distance-k-in-binary-tree",
    "title": "All Nodes Distance K in Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, the value of a target node `target`, and an integer `k`, return _an array of the values of all nodes that have a distance_ `k` _from the target node._ You can return the answer in **any order**.",
    "examples": [
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], target = 5, k = 2",
        "output": "\\[7,4,1\\]"
      },
      {
        "input": "root = \\[1\\], target = 1, k = 3",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 500]`.",
      "`0 <= Node.val <= 500`",
      "All the values `Node.val` are unique.",
      "`target` is the value of one of the nodes in the tree.",
      "`0 <= k <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "864",
    "slug": "shortest-path-to-get-all-keys",
    "title": "Shortest Path to Get All Keys",
    "difficulty": "Hard",
    "description": "You are given an `m x n` grid `grid` where: *  `'.'` is an empty cell. *  `'#'` is a wall. *  `'@'` is the starting point. *  Lowercase letters represent keys. *  Uppercase letters represent locks. You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall. If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key. For some `1 <= k <= 6`, there is exactly one lowercase and one uppercase letter of the first `k` letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet. Return _the lowest number of moves to acquire all keys_. If it is impossible, return `-1`.",
    "examples": [
      {
        "input": "grid = \\[ \"@.a.. \", \"###.# \", \"b.A.B \"\\]",
        "output": "8",
        "explanation": "Note that the goal is to obtain all the keys not to open all the locks."
      },
      {
        "input": "grid = \\[ \"@..aA \", \"..B#. \", \"....b \"\\]",
        "output": "6"
      },
      {
        "input": "grid = \\[ \"@Aa \"\\]",
        "output": "-1"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 30`",
      "`grid[i][j]` is either an English letter, `'.'`, `'#'`, or `'@'`.",
      "The number of keys in the grid is in the range `[1, 6]`.",
      "Each key in the grid is unique.",
      "Each key in the grid has a matching lock."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "865",
    "slug": "smallest-subtree-with-all-the-deepest-nodes",
    "title": "Smallest Subtree with all the Deepest Nodes",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, the depth of each node is **the shortest distance to the root**. Return _the smallest subtree_ such that it contains **all the deepest nodes** in the original tree. A node is called **the deepest** if it has the largest depth possible among any node in the entire tree. The **subtree** of a node is a tree consisting of that node, plus the set of all descendants of that node.",
    "examples": [
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\]",
        "output": "\\[2,7,4\\]",
        "explanation": "We return the node with value 2, colored in yellow in the diagram."
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[1\\]",
        "explanation": "The root is the deepest node in the tree."
      },
      {
        "input": "root = \\[0,1,3,null,2\\]",
        "output": "\\[2\\]",
        "explanation": "The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest."
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range `[1, 500]`.",
      "`0 <= Node.val <= 500`",
      "The values of the nodes in the tree are unique."
    ],
    "note": "This question is the same as 1123: [https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/](https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/)",
    "follow_up": null
  },
  {
    "id": "866",
    "slug": "prime-palindrome",
    "title": "Prime Palindrome",
    "difficulty": "Medium",
    "description": "Given an integer n, return _the smallest **prime palindrome** greater than or equal to_ `n`. An integer is **prime** if it has exactly two divisors: `1` and itself. Note that `1` is not a prime number. *  For example, `2`, `3`, `5`, `7`, `11`, and `13` are all primes. An integer is a **palindrome** if it reads the same from left to right as it does from right to left. *  For example, `101` and `12321` are palindromes. The test cases are generated so that the answer always exists and is in the range `[2, 2 * 108]`.",
    "examples": [
      {
        "input": "n = 6",
        "output": "7"
      },
      {
        "input": "n = 8",
        "output": "11"
      },
      {
        "input": "n = 13",
        "output": "101"
      }
    ],
    "constraints": [
      "`1 <= n <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "867",
    "slug": "transpose-matrix",
    "title": "Transpose Matrix",
    "difficulty": "Easy",
    "description": "Given a 2D integer array `matrix`, return _the **transpose** of_ `matrix`. The **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]",
        "output": "\\[\\[1,4,7\\],\\[2,5,8\\],\\[3,6,9\\]\\]"
      },
      {
        "input": "matrix = \\[\\[1,2,3\\],\\[4,5,6\\]\\]",
        "output": "\\[\\[1,4\\],\\[2,5\\],\\[3,6\\]\\]"
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 1000`",
      "`1 <= m  n <= 105`",
      "`-109 <= matrix[i][j] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "868",
    "slug": "binary-gap",
    "title": "Binary Gap",
    "difficulty": "Easy",
    "description": "Given a positive integer `n`, find and return _the **longest distance** between any two **adjacent**_ `1`_'s in the binary representation of_ `n`_. If there are no two adjacent_ `1`_'s, return_ `0`_._ Two `1`'s are **adjacent** if there are only `0`'s separating them (possibly no `0`'s). The **distance** between two `1`'s is the absolute difference between their bit positions. For example, the two `1`'s in `\"1001 \"` have a distance of 3.",
    "examples": [
      {
        "input": "n = 22",
        "output": "2",
        "explanation": "22 in binary is  \"10110 \"."
      },
      {
        "input": "n = 8",
        "output": "0",
        "explanation": "8 in binary is  \"1000 \"."
      },
      {
        "input": "n = 5",
        "output": "2",
        "explanation": "5 in binary is  \"101 \"."
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "869",
    "slug": "reordered-power-of-2",
    "title": "Reordered Power of 2",
    "difficulty": "Medium",
    "description": "You are given an integer `n`. We reorder the digits in any order (including the original order) such that the leading digit is not zero. Return `true` _if and only if we can do this so that the resulting number is a power of two_.",
    "examples": [
      {
        "input": "n = 1",
        "output": "true"
      },
      {
        "input": "n = 10",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "870",
    "slug": "advantage-shuffle",
    "title": "Advantage Shuffle",
    "difficulty": "Medium",
    "description": "You are given two integer arrays `nums1` and `nums2` both of the same length. The **advantage** of `nums1` with respect to `nums2` is the number of indices `i` for which `nums1[i] > nums2[i]`. Return _any permutation of_ `nums1` _that maximizes its **advantage** with respect to_ `nums2`.",
    "examples": [
      {
        "input": "nums1 = \\[2,7,11,15\\], nums2 = \\[1,10,4,11\\]",
        "output": "\\[2,11,7,15\\]"
      },
      {
        "input": "nums1 = \\[12,24,8,32\\], nums2 = \\[13,25,32,11\\]",
        "output": "\\[24,32,8,12\\]"
      }
    ],
    "constraints": [
      "`1 <= nums1.length <= 105`",
      "`nums2.length == nums1.length`",
      "`0 <= nums1[i], nums2[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "871",
    "slug": "minimum-number-of-refueling-stops",
    "title": "Minimum Number of Refueling Stops",
    "difficulty": "Hard",
    "description": "A car travels from a starting position to a destination which is `target` miles east of the starting position. There are gas stations along the way. The gas stations are represented as an array `stations` where `stations[i] = [positioni, fueli]` indicates that the `ith` gas station is `positioni` miles east of the starting position and has `fueli` liters of gas. The car starts with an infinite tank of gas, which initially has `startFuel` liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car. Return _the minimum number of refueling stops the car must make in order to reach its destination_. If it cannot reach the destination, return `-1`. Note that if the car reaches a gas station with `0` fuel left, the car can still refuel there. If the car reaches the destination with `0` fuel left, it is still considered to have arrived.",
    "examples": [
      {
        "input": "target = 1, startFuel = 1, stations = \\[\\]",
        "output": "0",
        "explanation": "We can reach the target without refueling."
      },
      {
        "input": "target = 100, startFuel = 1, stations = \\[\\[10,100\\]\\]",
        "output": "-1",
        "explanation": "We can not reach the target (or even the first gas station)."
      },
      {
        "input": "target = 100, startFuel = 10, stations = \\[\\[10,60\\],\\[20,30\\],\\[30,30\\],\\[60,40\\]\\]",
        "output": "2",
        "explanation": "We start with 10 liters of fuel."
      }
    ],
    "constraints": [
      "`1 <= target, startFuel <= 109`",
      "`0 <= stations.length <= 500`",
      "`1 <= positioni < positioni+1 < target`",
      "`1 <= fueli < 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "872",
    "slug": "leaf-similar-trees",
    "title": "Leaf-Similar Trees",
    "difficulty": "Easy",
    "description": "Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a **leaf value sequence**_._ For example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`. Two binary trees are considered _leaf-similar_ if their leaf value sequence is the same. Return `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar.",
    "examples": [
      {
        "input": "root1 = \\[3,5,1,6,2,9,8,null,null,7,4\\], root2 = \\[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8\\]",
        "output": "true"
      },
      {
        "input": "root1 = \\[1,2,3\\], root2 = \\[1,3,2\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in each tree will be in the range `[1, 200]`.",
      "Both of the given trees will have values in the range `[0, 200]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "873",
    "slug": "length-of-longest-fibonacci-subsequence",
    "title": "Length of Longest Fibonacci Subsequence",
    "difficulty": "Medium",
    "description": "A sequence `x1, x2, ..., xn` is _Fibonacci-like_ if: *  `n >= 3` *  `xi + xi+1 == xi+2` for all `i + 2 <= n` Given a **strictly increasing** array `arr` of positive integers forming a sequence, return _the **length** of the longest Fibonacci-like subsequence of_ `arr`. If one does not exist, return `0`. A **subsequence** is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.",
    "examples": [
      {
        "input": "arr = \\[1,2,3,4,5,6,7,8\\]",
        "output": "5",
        "explanation": "The longest subsequence that is fibonacci-like: \\[1,2,3,5,8\\]."
      },
      {
        "input": "arr = \\[1,3,7,11,12,14,18\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`3 <= arr.length <= 1000`",
      "`1 <= arr[i] < arr[i + 1] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "874",
    "slug": "walking-robot-simulation",
    "title": "Walking Robot Simulation",
    "difficulty": "Medium",
    "description": "A robot on an infinite XY-plane starts at point `(0, 0)` facing north. The robot can receive a sequence of these three possible types of `commands`: *  `-2`: Turn left `90` degrees. *  `-1`: Turn right `90` degrees. *  `1 <= k <= 9`: Move forward `k` units, one unit at a time. Some of the grid squares are `obstacles`. The `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`. If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command. Return _the **maximum Euclidean distance** that the robot ever gets from the origin **squared** (i.e. if the distance is_ `5`_, return_ `25`_)_.",
    "examples": [
      {
        "input": "commands = \\[4,-1,3\\], obstacles = \\[\\]",
        "output": "25",
        "explanation": "The robot starts at (0, 0):"
      },
      {
        "input": "commands = \\[4,-1,4,-2,4\\], obstacles = \\[\\[2,4\\]\\]",
        "output": "65",
        "explanation": "The robot starts at (0, 0):"
      },
      {
        "input": "commands = \\[6,-1,-1,6\\], obstacles = \\[\\]",
        "output": "36",
        "explanation": "The robot starts at (0, 0):"
      }
    ],
    "constraints": [
      "`1 <= commands.length <= 104`",
      "`commands[i]` is either `-2`, `-1`, or an integer in the range `[1, 9]`.",
      "`0 <= obstacles.length <= 104`",
      "`-3  104 <= xi, yi <= 3  104`",
      "The answer is guaranteed to be less than `231`."
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "875",
    "slug": "koko-eating-bananas",
    "title": "Koko Eating Bananas",
    "difficulty": "Medium",
    "description": "Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours. Koko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour. Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. Return _the minimum integer_ `k` _such that she can eat all the bananas within_ `h` _hours_.",
    "examples": [
      {
        "input": "piles = \\[3,6,7,11\\], h = 8",
        "output": "4"
      },
      {
        "input": "piles = \\[30,11,23,4,20\\], h = 5",
        "output": "30"
      },
      {
        "input": "piles = \\[30,11,23,4,20\\], h = 6",
        "output": "23"
      }
    ],
    "constraints": [
      "`1 <= piles.length <= 104`",
      "`piles.length <= h <= 109`",
      "`1 <= piles[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "876",
    "slug": "middle-of-the-linked-list",
    "title": "Middle of the Linked List",
    "difficulty": "Easy",
    "description": "Given the `head` of a singly linked list, return _the middle node of the linked list_. If there are two middle nodes, return **the second middle** node.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5\\]",
        "output": "\\[3,4,5\\]",
        "explanation": "The middle node of the list is node 3."
      },
      {
        "input": "head = \\[1,2,3,4,5,6\\]",
        "output": "\\[4,5,6\\]",
        "explanation": "Since the list has two middle nodes with values 3 and 4, we return the second one."
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[1, 100]`.",
      "`1 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "877",
    "slug": "stone-game",
    "title": "Stone Game",
    "difficulty": "Medium",
    "description": "Alice and Bob play a game with piles of stones. There are an **even** number of piles arranged in a row, and each pile has a **positive** integer number of stones `piles[i]`. The objective of the game is to end with the most stones. The **total** number of stones across all the piles is **odd**, so there are no ties. Alice and Bob take turns, with **Alice starting first**. Each turn, a player takes the entire pile of stones either from the **beginning** or from the **end** of the row. This continues until there are no more piles left, at which point the person with the **most stones wins**. Assuming Alice and Bob play optimally, return `true` _if Alice wins the game, or_ `false` _if Bob wins_.",
    "examples": [
      {
        "input": "piles = \\[5,3,4,5\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "piles = \\[3,7,2,3\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`2 <= piles.length <= 500`",
      "`piles.length` is even.",
      "`1 <= piles[i] <= 500`",
      "`sum(piles[i])` is odd."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "878",
    "slug": "nth-magical-number",
    "title": "Nth Magical Number",
    "difficulty": "Hard",
    "description": "A positive integer is _magical_ if it is divisible by either `a` or `b`. Given the three integers `n`, `a`, and `b`, return the `nth` magical number. Since the answer may be very large, **return it modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 1, a = 2, b = 3",
        "output": "2"
      },
      {
        "input": "n = 4, a = 2, b = 3",
        "output": "6"
      }
    ],
    "constraints": [
      "`1 <= n <= 109`",
      "`2 <= a, b <= 4  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "879",
    "slug": "profitable-schemes",
    "title": "Profitable Schemes",
    "difficulty": "Hard",
    "description": "There is a group of `n` members, and a list of various crimes they could commit. The `ith` crime generates a `profit[i]` and requires `group[i]` members to participate in it. If a member participates in one crime, that member can't participate in another crime. Let's call a **profitable scheme** any subset of these crimes that generates at least `minProfit` profit, and the total number of members participating in that subset of crimes is at most `n`. Return the number of schemes that can be chosen. Since the answer may be very large, **return it modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 5, minProfit = 3, group = \\[2,2\\], profit = \\[2,3\\]",
        "output": "2",
        "explanation": "To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1."
      },
      {
        "input": "n = 10, minProfit = 5, group = \\[2,3,5\\], profit = \\[6,7,8\\]",
        "output": "7",
        "explanation": "To make a profit of at least 5, the group could commit any crimes, as long as they commit one."
      }
    ],
    "constraints": [
      "`1 <= n <= 100`",
      "`0 <= minProfit <= 100`",
      "`1 <= group.length <= 100`",
      "`1 <= group[i] <= 100`",
      "`profit.length == group.length`",
      "`0 <= profit[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "880",
    "slug": "decoded-string-at-index",
    "title": "Decoded String at Index",
    "difficulty": "Medium",
    "description": "You are given an encoded string `s`. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken: *  If the character read is a letter, that letter is written onto the tape. *  If the character read is a digit `d`, the entire current tape is repeatedly written `d - 1` more times in total. Given an integer `k`, return _the_ `kth` _letter (**1-indexed)** in the decoded string_.",
    "examples": [
      {
        "input": "s =  \"leet2code3 \", k = 10",
        "output": "\"o \"",
        "explanation": "The decoded string is  \"leetleetcodeleetleetcodeleetleetcode \"."
      },
      {
        "input": "s =  \"ha22 \", k = 5",
        "output": "\"h \"",
        "explanation": "The decoded string is  \"hahahaha \"."
      },
      {
        "input": "s =  \"a2345678999999999999999 \", k = 1",
        "output": "\"a \"",
        "explanation": "The decoded string is  \"a \" repeated 8301530446056247680 times."
      }
    ],
    "constraints": [
      "`2 <= s.length <= 100`",
      "`s` consists of lowercase English letters and digits `2` through `9`.",
      "`s` starts with a letter.",
      "`1 <= k <= 109`",
      "It is guaranteed that `k` is less than or equal to the length of the decoded string.",
      "The decoded string is guaranteed to have less than `263` letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "881",
    "slug": "boats-to-save-people",
    "title": "Boats to Save People",
    "difficulty": "Medium",
    "description": "You are given an array `people` where `people[i]` is the weight of the `ith` person, and an **infinite number of boats** where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`. Return _the minimum number of boats to carry every given person_.",
    "examples": [
      {
        "input": "people = \\[1,2\\], limit = 3",
        "output": "1",
        "explanation": "1 boat (1, 2)"
      },
      {
        "input": "people = \\[3,2,2,1\\], limit = 3",
        "output": "3",
        "explanation": "3 boats (1, 2), (2) and (3)"
      },
      {
        "input": "people = \\[3,5,3,4\\], limit = 5",
        "output": "4",
        "explanation": "4 boats (3), (3), (4), (5)"
      }
    ],
    "constraints": [
      "`1 <= people.length <= 5  104`",
      "`1 <= people[i] <= limit <= 3  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "882",
    "slug": "reachable-nodes-in-subdivided-graph",
    "title": "Reachable Nodes In Subdivided Graph",
    "difficulty": "Hard",
    "description": "You are given an undirected graph (the **\"original graph \"**) with `n` nodes labeled from `0` to `n - 1`. You decide to **subdivide** each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge. The graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]` indicates that there is an edge between nodes `ui` and `vi` in the original graph, and `cnti` is the total number of new nodes that you will **subdivide** the edge into. Note that `cnti == 0` means you will not subdivide the edge. To **subdivide** the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and `cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti-1, xcnti]`, `[xcnti, vi]`. In this **new graph**, you want to know how many nodes are **reachable** from the node `0`, where a node is **reachable** if the distance is `maxMoves` or less. Given the original graph and `maxMoves`, return _the number of nodes that are **reachable** from node_ `0` _in the new graph_.",
    "examples": [
      {
        "input": "edges = \\[\\[0,1,10\\],\\[0,2,1\\],\\[1,2,2\\]\\], maxMoves = 6, n = 3",
        "output": "13",
        "explanation": "The edge subdivisions are shown in the image above."
      },
      {
        "input": "edges = \\[\\[0,1,4\\],\\[1,2,6\\],\\[0,2,8\\],\\[1,3,1\\]\\], maxMoves = 10, n = 4",
        "output": "23"
      },
      {
        "input": "edges = \\[\\[1,2,4\\],\\[1,4,5\\],\\[1,3,1\\],\\[2,3,4\\],\\[3,4,5\\]\\], maxMoves = 17, n = 5",
        "output": "1",
        "explanation": "Node 0 is disconnected from the rest of the graph, so only node 0 is reachable."
      }
    ],
    "constraints": [
      "`0 <= edges.length <= min(n  (n - 1) / 2, 104)`",
      "`edges[i].length == 3`",
      "`0 <= ui < vi < n`",
      "There are no multiple edges in the graph.",
      "`0 <= cnti <= 104`",
      "`0 <= maxMoves <= 109`",
      "`1 <= n <= 3000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "883",
    "slug": "projection-area-of-3d-shapes",
    "title": "Projection Area of 3D Shapes",
    "difficulty": "Easy",
    "description": "You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`. We view the projection of these cubes onto the `xy`, `yz`, and `zx` planes. A **projection** is like a shadow, that maps our **3-dimensional** figure to a **2-dimensional** plane. We are viewing the \"shadow \" when looking at the cubes from the top, the front, and the side. Return _the total area of all three projections_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,2\\],\\[3,4\\]\\]",
        "output": "17",
        "explanation": "Here are the three projections ( \"shadows \") of the shape made with each axis-aligned plane."
      },
      {
        "input": "grid = \\[\\[2\\]\\]",
        "output": "5"
      },
      {
        "input": "grid = \\[\\[1,0\\],\\[0,2\\]\\]",
        "output": "8"
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`1 <= n <= 50`",
      "`0 <= grid[i][j] <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "884",
    "slug": "uncommon-words-from-two-sentences",
    "title": "Uncommon Words from Two Sentences",
    "difficulty": "Easy",
    "description": "A **sentence** is a string of single-space separated words where each word consists only of lowercase letters. A word is **uncommon** if it appears exactly once in one of the sentences, and **does not appear** in the other sentence. Given two **sentences** `s1` and `s2`, return _a list of all the **uncommon words**_. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "s1 = \"this apple is sweet\", s2 = \"this apple is sour\"",
        "output": "\\[\"sweet\",\"sour\"\\]"
      },
      {
        "input": "s1 = \"apple apple\", s2 = \"banana\"",
        "output": "\\[\"banana\"\\]"
      }
    ],
    "constraints": [
      "`1 <= s1.length, s2.length <= 200`",
      "`s1` and `s2` consist of lowercase English letters and spaces.",
      "`s1` and `s2` do not have leading or trailing spaces.",
      "All the words in `s1` and `s2` are separated by a single space."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "885",
    "slug": "spiral-matrix-iii",
    "title": "Spiral Matrix III",
    "difficulty": "Medium",
    "description": "You start at the cell `(rStart, cStart)` of an `rows x cols` grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column. You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all `rows * cols` spaces of the grid. Return _an array of coordinates representing the positions of the grid in the order you visited them_.",
    "examples": [
      {
        "input": "rows = 1, cols = 4, rStart = 0, cStart = 0",
        "output": "\\[\\[0,0\\],\\[0,1\\],\\[0,2\\],\\[0,3\\]\\]"
      },
      {
        "input": "rows = 5, cols = 6, rStart = 1, cStart = 4",
        "output": "\\[\\[1,4\\],\\[1,5\\],\\[2,5\\],\\[2,4\\],\\[2,3\\],\\[1,3\\],\\[0,3\\],\\[0,4\\],\\[0,5\\],\\[3,5\\],\\[3,4\\],\\[3,3\\],\\[3,2\\],\\[2,2\\],\\[1,2\\],\\[0,2\\],\\[4,5\\],\\[4,4\\],\\[4,3\\],\\[4,2\\],\\[4,1\\],\\[3,1\\],\\[2,1\\],\\[1,1\\],\\[0,1\\],\\[4,0\\],\\[3,0\\],\\[2,0\\],\\[1,0\\],\\[0,0\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= rows, cols <= 100`",
      "`0 <= rStart < rows`",
      "`0 <= cStart < cols`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "886",
    "slug": "possible-bipartition",
    "title": "Possible Bipartition",
    "difficulty": "Medium",
    "description": "We want to split a group of `n` people (labeled from `1` to `n`) into two groups of **any size**. Each person may dislike some other people, and they should not go into the same group. Given the integer `n` and the array `dislikes` where `dislikes[i] = [ai, bi]` indicates that the person labeled `ai` does not like the person labeled `bi`, return `true` _if it is possible to split everyone into two groups in this way_.",
    "examples": [
      {
        "input": "n = 4, dislikes = \\[\\[1,2\\],\\[1,3\\],\\[2,4\\]\\]",
        "output": "true",
        "explanation": "The first group has \\[1,4\\], and the second group has \\[2,3\\]."
      },
      {
        "input": "n = 3, dislikes = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]",
        "output": "false",
        "explanation": "We need at least 3 groups to divide them. We cannot put them in two groups."
      }
    ],
    "constraints": [
      "`1 <= n <= 2000`",
      "`0 <= dislikes.length <= 104`",
      "`dislikes[i].length == 2`",
      "`1 <= ai < bi <= n`",
      "All the pairs of `dislikes` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "887",
    "slug": "super-egg-drop",
    "title": "Super Egg Drop",
    "difficulty": "Hard",
    "description": "You are given `k` identical eggs and you have access to a building with `n` floors labeled from `1` to `n`. You know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor **higher** than `f` will **break**, and any egg dropped **at or below** floor `f` will **not break**. Each move, you may take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may **reuse** it in future moves. Return _the **minimum number of moves** that you need to determine **with certainty** what the value of_ `f` is.",
    "examples": [
      {
        "input": "k = 1, n = 2",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "k = 2, n = 6",
        "output": "3"
      },
      {
        "input": "k = 3, n = 14",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= k <= 100`",
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "888",
    "slug": "fair-candy-swap",
    "title": "Fair Candy Swap",
    "difficulty": "Easy",
    "description": "Alice and Bob have a different total number of candies. You are given two integer arrays `aliceSizes` and `bobSizes` where `aliceSizes[i]` is the number of candies of the `ith` box of candy that Alice has and `bobSizes[j]` is the number of candies of the `jth` box of candy that Bob has. Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have. Return a_n integer array_ `answer` _where_ `answer[0]` _is the number of candies in the box that Alice must exchange, and_ `answer[1]` _is the number of candies in the box that Bob must exchange_. If there are multiple answers, you may **return any** one of them. It is guaranteed that at least one answer exists.",
    "examples": [
      {
        "input": "aliceSizes = \\[1,1\\], bobSizes = \\[2,2\\]",
        "output": "\\[1,2\\]"
      },
      {
        "input": "aliceSizes = \\[1,2\\], bobSizes = \\[2,3\\]",
        "output": "\\[1,2\\]"
      },
      {
        "input": "aliceSizes = \\[2\\], bobSizes = \\[1,3\\]",
        "output": "\\[2,3\\]"
      }
    ],
    "constraints": [
      "`1 <= aliceSizes.length, bobSizes.length <= 104`",
      "`1 <= aliceSizes[i], bobSizes[j] <= 105`",
      "Alice and Bob have a different total number of candies.",
      "There will be at least one valid answer for the given input."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "889",
    "slug": "construct-binary-tree-from-preorder-and-postorder-traversal",
    "title": "Construct Binary Tree from Preorder and Postorder Traversal",
    "difficulty": "Medium",
    "description": "Given two integer arrays, `preorder` and `postorder` where `preorder` is the preorder traversal of a binary tree of **distinct** values and `postorder` is the postorder traversal of the same tree, reconstruct and return _the binary tree_. If there exist multiple answers, you can **return any** of them.",
    "examples": [
      {
        "input": "preorder = \\[1,2,4,5,3,6,7\\], postorder = \\[4,5,2,6,7,3,1\\]",
        "output": "\\[1,2,3,4,5,6,7\\]"
      },
      {
        "input": "preorder = \\[1\\], postorder = \\[1\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "`1 <= preorder.length <= 30`",
      "`1 <= preorder[i] <= preorder.length`",
      "All the values of `preorder` are unique.",
      "`postorder.length == preorder.length`",
      "`1 <= postorder[i] <= postorder.length`",
      "All the values of `postorder` are unique.",
      "It is guaranteed that `preorder` and `postorder` are the preorder traversal and postorder traversal of the same binary tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "890",
    "slug": "find-and-replace-pattern",
    "title": "Find and Replace Pattern",
    "difficulty": "Medium",
    "description": "Given a list of strings `words` and a string `pattern`, return _a list of_ `words[i]` _that match_ `pattern`. You may return the answer in **any order**. A word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter `x` in the pattern with `p(x)`, we get the desired word. Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.",
    "examples": [
      {
        "input": "words = \\[ \"abc \", \"deq \", \"mee \", \"aqq \", \"dkd \", \"ccc \"\\], pattern =  \"abb \"",
        "output": "\\[ \"mee \", \"aqq \"\\]",
        "explanation": "\"mee \" matches the pattern because there is a permutation {a -> m, b -> e, ...}."
      },
      {
        "input": "words = \\[ \"a \", \"b \", \"c \"\\], pattern =  \"a \"",
        "output": "\\[ \"a \", \"b \", \"c \"\\]"
      }
    ],
    "constraints": [
      "`1 <= pattern.length <= 20`",
      "`1 <= words.length <= 50`",
      "`words[i].length == pattern.length`",
      "`pattern` and `words[i]` are lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "891",
    "slug": "sum-of-subsequence-widths",
    "title": "Sum of Subsequence Widths",
    "difficulty": "Hard",
    "description": "The **width** of a sequence is the difference between the maximum and minimum elements in the sequence. Given an array of integers `nums`, return _the sum of the **widths** of all the non-empty **subsequences** of_ `nums`. Since the answer may be very large, return it **modulo** `109 + 7`. A **subsequence** is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.",
    "examples": [
      {
        "input": "nums = \\[2,1,3\\]",
        "output": "6"
      },
      {
        "input": "nums = \\[2\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "892",
    "slug": "surface-area-of-3d-shapes",
    "title": "Surface Area of 3D Shapes",
    "difficulty": "Easy",
    "description": "You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`. After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes. Return _the total surface area of the resulting shapes_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,2\\],\\[3,4\\]\\]",
        "output": "34"
      },
      {
        "input": "grid = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]",
        "output": "32"
      },
      {
        "input": "grid = \\[\\[2,2,2\\],\\[2,1,2\\],\\[2,2,2\\]\\]",
        "output": "46"
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`1 <= n <= 50`",
      "`0 <= grid[i][j] <= 50`"
    ],
    "note": "The bottom face of each shape counts toward its surface area.",
    "follow_up": null
  },
  {
    "id": "893",
    "slug": "groups-of-special-equivalent-strings",
    "title": "Groups of Special-Equivalent Strings",
    "difficulty": "Medium",
    "description": "You are given an array of strings of the same length `words`. In one **move**, you can swap any two even indexed characters or any two odd indexed characters of a string `words[i]`. Two strings `words[i]` and `words[j]` are **special-equivalent** if after any number of moves, `words[i] == words[j]`. *  For example, `words[i] = \"zzxy \"` and `words[j] = \"xyzz \"` are **special-equivalent** because we may make the moves `\"zzxy \" -> \"xzzy \" -> \"xyzz \"`. A **group of special-equivalent strings** from `words` is a non-empty subset of words such that: *  Every pair of strings in the group are special equivalent, and *  The group is the largest size possible (i.e., there is not a string `words[i]` not in the group such that `words[i]` is special-equivalent to every string in the group). Return _the number of **groups of special-equivalent strings** from_ `words`.",
    "examples": [
      {
        "input": "words = \\[ \"abcd \", \"cdab \", \"cbad \", \"xyzz \", \"zzxy \", \"zzyx \"\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"abc \", \"acb \", \"bac \", \"bca \", \"cab \", \"cba \"\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length <= 20`",
      "`words[i]` consist of lowercase English letters.",
      "All the strings are of the same length."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "894",
    "slug": "all-possible-full-binary-trees",
    "title": "All Possible Full Binary Trees",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _a list of all possible **full binary trees** with_ `n` _nodes_. Each node of each tree in the answer must have `Node.val == 0`. Each element of the answer is the root node of one possible tree. You may return the final list of trees in **any order**. A **full binary tree** is a binary tree where each node has exactly `0` or `2` children.",
    "examples": [
      {
        "input": "n = 7",
        "output": "\\[\\[0,0,0,null,null,0,0,null,null,0,0\\],\\[0,0,0,null,null,0,0,0,0\\],\\[0,0,0,0,0,0,0\\],\\[0,0,0,0,0,null,null,null,null,0,0\\],\\[0,0,0,0,0,null,null,0,0\\]\\]"
      },
      {
        "input": "n = 3",
        "output": "\\[\\[0,0,0\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 20`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "895",
    "slug": "maximum-frequency-stack",
    "title": "Maximum Frequency Stack",
    "difficulty": "Hard",
    "description": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack. Implement the `FreqStack` class: *  `FreqStack()` constructs an empty frequency stack. *  `void push(int val)` pushes an integer `val` onto the top of the stack. *  `int pop()` removes and returns the most frequent element in the stack. *  If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.",
    "examples": [],
    "constraints": [
      "`0 <= val <= 109`",
      "At most `2  104` calls will be made to `push` and `pop`.",
      "It is guaranteed that there will be at least one element in the stack before calling `pop`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "896",
    "slug": "monotonic-array",
    "title": "Monotonic Array",
    "difficulty": "Easy",
    "description": "An array is **monotonic** if it is either monotone increasing or monotone decreasing. An array `nums` is monotone increasing if for all `i <= j`, `nums[i] <= nums[j]`. An array `nums` is monotone decreasing if for all `i <= j`, `nums[i] >= nums[j]`. Given an integer array `nums`, return `true` _if the given array is monotonic, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "nums = \\[1,2,2,3\\]",
        "output": "true"
      },
      {
        "input": "nums = \\[6,5,4,4\\]",
        "output": "true"
      },
      {
        "input": "nums = \\[1,3,2\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "897",
    "slug": "increasing-order-search-tree",
    "title": "Increasing Order Search Tree",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary search tree, rearrange the tree in **in-order** so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.",
    "examples": [
      {
        "input": "root = \\[5,3,6,2,4,null,8,1,null,null,null,7,9\\]",
        "output": "\\[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9\\]"
      },
      {
        "input": "root = \\[5,1,7\\]",
        "output": "\\[1,null,5,null,7\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the given tree will be in the range `[1, 100]`.",
      "`0 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "898",
    "slug": "bitwise-ors-of-subarrays",
    "title": "Bitwise ORs of Subarrays",
    "difficulty": "Medium",
    "description": "Given an integer array `arr`, return _the number of distinct bitwise ORs of all the non-empty subarrays of_ `arr`. The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer. A **subarray** is a contiguous non-empty sequence of elements within an array.",
    "examples": [
      {
        "input": "arr = \\[0\\]",
        "output": "1",
        "explanation": "There is only one possible result: 0."
      },
      {
        "input": "arr = \\[1,1,2\\]",
        "output": "3",
        "explanation": "The possible subarrays are \\[1\\], \\[1\\], \\[2\\], \\[1, 1\\], \\[1, 2\\], \\[1, 1, 2\\]."
      },
      {
        "input": "arr = \\[1,2,4\\]",
        "output": "6",
        "explanation": "The possible results are 1, 2, 3, 4, 6, and 7."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 5  104`",
      "`0 <= arr[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "899",
    "slug": "orderly-queue",
    "title": "Orderly Queue",
    "difficulty": "Hard",
    "description": "You are given a string `s` and an integer `k`. You can choose one of the first `k` letters of `s` and append it at the end of the string.. Return _the lexicographically smallest string you could have after applying the mentioned step any number of moves_.",
    "examples": [
      {
        "input": "s =  \"cba \", k = 1",
        "output": "\"acb \"",
        "explanation": ""
      },
      {
        "input": "s =  \"baaca \", k = 3",
        "output": "\"aaabc \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= k <= s.length <= 1000`",
      "`s` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "900",
    "slug": "rle-iterator",
    "title": "RLE Iterator",
    "difficulty": "Medium",
    "description": "We can use run-length encoding (i.e., **RLE**) to encode a sequence of integers. In a run-length encoded array of even length `encoding` (**0-indexed**), for all even `i`, `encoding[i]` tells us the number of times that the non-negative integer value `encoding[i + 1]` is repeated in the sequence. *  For example, the sequence `arr = [8,8,8,5,5]` can be encoded to be `encoding = [3,8,2,5]`. `encoding = [3,8,0,9,2,5]` and `encoding = [2,8,1,8,2,5]` are also valid **RLE** of `arr`. Given a run-length encoded array, design an iterator that iterates through it. Implement the `RLEIterator` class: *  `RLEIterator(int[] encoded)` Initializes the object with the encoded array `encoded`. *  `int next(int n)` Exhausts the next `n` elements and returns the last element exhausted in this way. If there is no element left to exhaust, return `-1` instead.",
    "examples": [],
    "constraints": [
      "`2 <= encoding.length <= 1000`",
      "`encoding.length` is even.",
      "`0 <= encoding[i] <= 109`",
      "`1 <= n <= 109`",
      "At most `1000` calls will be made to `next`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "901",
    "slug": "online-stock-span",
    "title": "Online Stock Span",
    "difficulty": "Medium",
    "description": "Design an algorithm that collects daily price quotes for some stock and returns **the span** of that stock's price for the current day. The **span** of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day. *  For example, if the prices of the stock in the last four days is `[7,2,1,2]` and the price of the stock today is `2`, then the span of today is `4` because starting from today, the price of the stock was less than or equal `2` for `4` consecutive days. *  Also, if the prices of the stock in the last four days is `[7,34,1,2]` and the price of the stock today is `8`, then the span of today is `3` because starting from today, the price of the stock was less than or equal `8` for `3` consecutive days. Implement the `StockSpanner` class: *  `StockSpanner()` Initializes the object of the class. *  `int next(int price)` Returns the **span** of the stock's price given that today's price is `price`.",
    "examples": [],
    "constraints": [
      "`1 <= price <= 105`",
      "At most `104` calls will be made to `next`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "902",
    "slug": "numbers-at-most-n-given-digit-set",
    "title": "Numbers At Most N Given Digit Set",
    "difficulty": "Hard",
    "description": "Given an array of `digits` which is sorted in **non-decreasing** order. You can write numbers using each `digits[i]` as many times as we want. For example, if `digits = ['1','3','5']`, we may write numbers such as `'13'`, `'551'`, and `'1351315'`. Return _the number of positive integers that can be generated_ that are less than or equal to a given integer `n`.",
    "examples": [
      {
        "input": "digits = \\[ \"1 \", \"3 \", \"5 \", \"7 \"\\], n = 100",
        "output": "20",
        "explanation": ""
      },
      {
        "input": "digits = \\[ \"1 \", \"4 \", \"9 \"\\], n = 1000000000",
        "output": "29523",
        "explanation": ""
      },
      {
        "input": "digits = \\[ \"7 \"\\], n = 8",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= digits.length <= 9`",
      "`digits[i].length == 1`",
      "`digits[i]` is a digit from `'1'` to `'9'`.",
      "All the values in `digits` are unique.",
      "`digits` is sorted in non-decreasing order.",
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "903",
    "slug": "valid-permutations-for-di-sequence",
    "title": "Valid Permutations for DI Sequence",
    "difficulty": "Hard",
    "description": "You are given a string `s` of length `n` where `s[i]` is either: *  `'D'` means decreasing, or *  `'I'` means increasing. A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` is called a **valid permutation** if for all valid `i`: *  If `s[i] == 'D'`, then `perm[i] > perm[i + 1]`, and *  If `s[i] == 'I'`, then `perm[i] < perm[i + 1]`. Return _the number of **valid permutations**_ `perm`. Since the answer may be large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "s =  \"DID \"",
        "output": "5",
        "explanation": "The 5 valid permutations of (0, 1, 2, 3) are:"
      },
      {
        "input": "s =  \"D \"",
        "output": "1"
      }
    ],
    "constraints": [
      "`n == s.length`",
      "`1 <= n <= 200`",
      "`s[i]` is either `'I'` or `'D'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "904",
    "slug": "fruit-into-baskets",
    "title": "Fruit Into Baskets",
    "difficulty": "Medium",
    "description": "You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array `fruits` where `fruits[i]` is the **type** of fruit the `ith` tree produces. You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow: *  You only have **two** baskets, and each basket can only hold a **single type** of fruit. There is no limit on the amount of fruit each basket can hold. *  Starting from any tree of your choice, you must pick **exactly one fruit** from **every** tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets. *  Once you reach a tree with fruit that cannot fit in your baskets, you must stop. Given the integer array `fruits`, return _the **maximum** number of fruits you can pick_.",
    "examples": [
      {
        "input": "fruits = \\[1,2,1\\]",
        "output": "3",
        "explanation": "We can pick from all 3 trees."
      },
      {
        "input": "fruits = \\[0,1,2,2\\]",
        "output": "3",
        "explanation": "We can pick from trees \\[1,2,2\\]."
      },
      {
        "input": "fruits = \\[1,2,3,2,2\\]",
        "output": "4",
        "explanation": "We can pick from trees \\[2,3,2,2\\]."
      }
    ],
    "constraints": [
      "`1 <= fruits.length <= 105`",
      "`0 <= fruits[i] < fruits.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "905",
    "slug": "sort-array-by-parity",
    "title": "Sort Array By Parity",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, move all the even integers at the beginning of the array followed by all the odd integers. Return _**any array** that satisfies this condition_.",
    "examples": [
      {
        "input": "nums = \\[3,1,2,4\\]",
        "output": "\\[2,4,3,1\\]",
        "explanation": "The outputs \\[4,2,3,1\\], \\[2,4,1,3\\], and \\[4,2,1,3\\] would also be accepted."
      },
      {
        "input": "nums = \\[0\\]",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5000`",
      "`0 <= nums[i] <= 5000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "906",
    "slug": "super-palindromes",
    "title": "Super Palindromes",
    "difficulty": "Hard",
    "description": "Let's say a positive integer is a **super-palindrome** if it is a palindrome, and it is also the square of a palindrome. Given two positive integers `left` and `right` represented as strings, return _the number of **super-palindromes** integers in the inclusive range_ `[left, right]`.",
    "examples": [
      {
        "input": "left =  \"4 \", right =  \"1000 \"",
        "output": "4"
      },
      {
        "input": "left =  \"1 \", right =  \"2 \"",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= left.length, right.length <= 18`",
      "`left` and `right` consist of only digits.",
      "`left` and `right` cannot have leading zeros.",
      "`left` and `right` represent integers in the range `[1, 1018 - 1]`.",
      "`left` is less than or equal to `right`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "907",
    "slug": "sum-of-subarray-minimums",
    "title": "Sum of Subarray Minimums",
    "difficulty": "Medium",
    "description": "Given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "arr = \\[3,1,2,4\\]",
        "output": "17",
        "explanation": ""
      },
      {
        "input": "arr = \\[11,81,94,43,3\\]",
        "output": "444"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 3  104`",
      "`1 <= arr[i] <= 3  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "908",
    "slug": "smallest-range-i",
    "title": "Smallest Range I",
    "difficulty": "Easy",
    "description": "You are given an integer array `nums` and an integer `k`. In one operation, you can choose any index `i` where `0 <= i < nums.length` and change `nums[i]` to `nums[i] + x` where `x` is an integer from the range `[-k, k]`. You can apply this operation **at most once** for each index `i`. The **score** of `nums` is the difference between the maximum and minimum elements in `nums`. Return _the minimum **score** of_ `nums` _after applying the mentioned operation at most once for each index in it_.",
    "examples": [
      {
        "input": "nums = \\[1\\], k = 0",
        "output": "0",
        "explanation": "The score is max(nums) - min(nums) = 1 - 1 = 0."
      },
      {
        "input": "nums = \\[0,10\\], k = 2",
        "output": "6",
        "explanation": "Change nums to be \\[2, 8\\]. The score is max(nums) - min(nums) = 8 - 2 = 6."
      },
      {
        "input": "nums = \\[1,3,6\\], k = 3",
        "output": "0",
        "explanation": "Change nums to be \\[4, 4, 4\\]. The score is max(nums) - min(nums) = 4 - 4 = 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`0 <= nums[i] <= 104`",
      "`0 <= k <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "909",
    "slug": "snakes-and-ladders",
    "title": "Snakes and Ladders",
    "difficulty": "Medium",
    "description": "You are given an `n x n` integer matrix `board` where the cells are labeled from `1` to `n2` in a [**Boustrophedon style**](https://en.wikipedia.org/wiki/Boustrophedon) starting from the bottom left of the board (i.e. `board[n - 1][0]`) and alternating direction each row. You start on square `1` of the board. In each move, starting from square `curr`, do the following: *  Choose a destination square `next` with a label in the range `[curr + 1, min(curr + 6, n2)]`. *  This choice simulates the result of a standard **6-sided die roll**: i.e., there are always at most 6 destinations, regardless of the size of the board. *  If `next` has a snake or ladder, you **must** move to the destination of that snake or ladder. Otherwise, you move to `next`. *  The game ends when you reach the square `n2`. A board square on row `r` and column `c` has a snake or ladder if `board[r][c] != -1`. The destination of that snake or ladder is `board[r][c]`. Squares `1` and `n2` do not have a snake or ladder. Note that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do **not** follow the subsequent snake or ladder. *  For example, suppose the board is `[[-1,4],[-1,3]]`, and on the first move, your destination square is `2`. You follow the ladder to square `3`, but do **not** follow the subsequent ladder to `4`. Return _the least number of moves required to reach the square_ `n2`_. If it is not possible to reach the square, return_ `-1`.",
    "examples": [
      {
        "input": "board = \\[\\[-1,-1,-1,-1,-1,-1\\],\\[-1,-1,-1,-1,-1,-1\\],\\[-1,-1,-1,-1,-1,-1\\],\\[-1,35,-1,-1,13,-1\\],\\[-1,-1,-1,-1,-1,-1\\],\\[-1,15,-1,-1,-1,-1\\]\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "board = \\[\\[-1,-1\\],\\[-1,3\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`n == board.length == board[i].length`",
      "`2 <= n <= 20`",
      "`board[i][j]` is either `-1` or in the range `[1, n2]`.",
      "The squares labeled `1` and `n2` do not have any ladders or snakes."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "910",
    "slug": "smallest-range-ii",
    "title": "Smallest Range II",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an integer `k`. For each index `i` where `0 <= i < nums.length`, change `nums[i]` to be either `nums[i] + k` or `nums[i] - k`. The **score** of `nums` is the difference between the maximum and minimum elements in `nums`. Return _the minimum **score** of_ `nums` _after changing the values at each index_.",
    "examples": [
      {
        "input": "nums = \\[1\\], k = 0",
        "output": "0",
        "explanation": "The score is max(nums) - min(nums) = 1 - 1 = 0."
      },
      {
        "input": "nums = \\[0,10\\], k = 2",
        "output": "6",
        "explanation": "Change nums to be \\[2, 8\\]. The score is max(nums) - min(nums) = 8 - 2 = 6."
      },
      {
        "input": "nums = \\[1,3,6\\], k = 3",
        "output": "3",
        "explanation": "Change nums to be \\[4, 6, 3\\]. The score is max(nums) - min(nums) = 6 - 3 = 3."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`0 <= nums[i] <= 104`",
      "`0 <= k <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "911",
    "slug": "online-election",
    "title": "Online Election",
    "difficulty": "Medium",
    "description": "You are given two integer arrays `persons` and `times`. In an election, the `ith` vote was cast for `persons[i]` at time `times[i]`. For each query at a time `t`, find the person that was leading the election at time `t`. Votes cast at time `t` will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins. Implement the `TopVotedCandidate` class: *  `TopVotedCandidate(int[] persons, int[] times)` Initializes the object with the `persons` and `times` arrays. *  `int q(int t)` Returns the number of the person that was leading the election at time `t` according to the mentioned rules.",
    "examples": [],
    "constraints": [
      "`1 <= persons.length <= 5000`",
      "`times.length == persons.length`",
      "`0 <= persons[i] < persons.length`",
      "`0 <= times[i] <= 109`",
      "`times` is sorted in a strictly increasing order.",
      "`times[0] <= t <= 109`",
      "At most `104` calls will be made to `q`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "912",
    "slug": "sort-an-array",
    "title": "Sort an Array",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums`, sort the array in ascending order and return it. You must solve the problem **without using any built-in** functions in `O(nlog(n))` time complexity and with the smallest space complexity possible.",
    "examples": [
      {
        "input": "nums = \\[5,2,3,1\\]",
        "output": "\\[1,2,3,5\\]",
        "explanation": "After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5)."
      },
      {
        "input": "nums = \\[5,1,1,2,0,0\\]",
        "output": "\\[0,0,1,1,2,5\\]",
        "explanation": "Note that the values of nums are not necessairly unique."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  104`",
      "`-5  104 <= nums[i] <= 5  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "913",
    "slug": "cat-and-mouse",
    "title": "Cat and Mouse",
    "difficulty": "Hard",
    "description": "A game on an **undirected** graph is played by two players, Mouse and Cat, who alternate turns. The graph is given as follows: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph. The mouse starts at node `1` and goes first, the cat starts at node `2` and goes second, and there is a hole at node `0`. During each player's turn, they **must** travel along one edge of the graph that meets where they are. For example, if the Mouse is at node 1, it **must** travel to any node in `graph[1]`. Additionally, it is not allowed for the Cat to travel to the Hole (node 0.) Then, the game can end in three ways: *  If ever the Cat occupies the same node as the Mouse, the Cat wins. *  If ever the Mouse reaches the Hole, the Mouse wins. *  If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw. Given a `graph`, and assuming both players play optimally, return *  `1` if the mouse wins the game, *  `2` if the cat wins the game, or *  `0` if the game is a draw.",
    "examples": [
      {
        "input": "graph = \\[\\[2,5\\],\\[3\\],\\[0,4,5\\],\\[1,4,5\\],\\[2,3\\],\\[0,2,3\\]\\]",
        "output": "0"
      },
      {
        "input": "graph = \\[\\[1,3\\],\\[0\\],\\[3\\],\\[0,2\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`3 <= graph.length <= 50`",
      "`1 <= graph[i].length < graph.length`",
      "`0 <= graph[i][j] < graph.length`",
      "`graph[i][j] != i`",
      "`graph[i]` is unique.",
      "The mouse and the cat can always move."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "914",
    "slug": "x-of-a-kind-in-a-deck-of-cards",
    "title": "X of a Kind in a Deck of Cards",
    "difficulty": "Easy",
    "description": "You are given an integer array `deck` where `deck[i]` represents the number written on the `ith` card. Partition the cards into **one or more groups** such that: *  Each group has **exactly** `x` cards where `x > 1`, and *  All the cards in one group have the same integer written on them. Return `true` _if such partition is possible, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "deck = \\[1,2,3,4,4,3,2,1\\]",
        "output": "true"
      },
      {
        "input": "deck = \\[1,1,1,2,2,2,3,3\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= deck.length <= 104`",
      "`0 <= deck[i] < 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "915",
    "slug": "partition-array-into-disjoint-intervals",
    "title": "Partition Array into Disjoint Intervals",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, partition it into two (contiguous) subarrays `left` and `right` so that: *  Every element in `left` is less than or equal to every element in `right`. *  `left` and `right` are non-empty. *  `left` has the smallest possible size. Return _the length of_ `left` _after such a partitioning_. Test cases are generated such that partitioning exists.",
    "examples": [
      {
        "input": "nums = \\[5,0,3,8,6\\]",
        "output": "3",
        "explanation": "left = \\[5,0,3\\], right = \\[8,6\\]"
      },
      {
        "input": "nums = \\[1,1,1,0,6,12\\]",
        "output": "4",
        "explanation": "left = \\[1,1,1,0\\], right = \\[6,12\\]"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`0 <= nums[i] <= 106`",
      "There is at least one valid answer for the given input."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "916",
    "slug": "word-subsets",
    "title": "Word Subsets",
    "difficulty": "Medium",
    "description": "You are given two string arrays `words1` and `words2`. A string `b` is a **subset** of string `a` if every letter in `b` occurs in `a` including multiplicity. *  For example, `\"wrr \"` is a subset of `\"warrior \"` but is not a subset of `\"world \"`. A string `a` from `words1` is **universal** if for every string `b` in `words2`, `b` is a subset of `a`. Return an array of all the **universal** strings in `words1`. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "words1 = \\[ \"amazon \", \"apple \", \"facebook \", \"google \", \"leetcode \"\\], words2 = \\[ \"e \", \"o \"\\]",
        "output": "\\[ \"facebook \", \"google \", \"leetcode \"\\]"
      },
      {
        "input": "words1 = \\[ \"amazon \", \"apple \", \"facebook \", \"google \", \"leetcode \"\\], words2 = \\[ \"l \", \"e \"\\]",
        "output": "\\[ \"apple \", \"google \", \"leetcode \"\\]"
      }
    ],
    "constraints": [
      "`1 <= words1.length, words2.length <= 104`",
      "`1 <= words1[i].length, words2[i].length <= 10`",
      "`words1[i]` and `words2[i]` consist only of lowercase English letters.",
      "All the strings of `words1` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "917",
    "slug": "reverse-only-letters",
    "title": "Reverse Only Letters",
    "difficulty": "Easy",
    "description": "Given a string `s`, reverse the string according to the following rules: *  All the characters that are not English letters remain in the same position. *  All the English letters (lowercase or uppercase) should be reversed. Return `s` _after reversing it_.",
    "examples": [
      {
        "input": "s = \"ab-cd\"",
        "output": "\"dc-ba\""
      },
      {
        "input": "s = \"a-bC-dEf-ghIj\"",
        "output": "\"j-Ih-gfE-dCba\""
      },
      {
        "input": "s = \"Test1ng-Leet=code-Q!\"",
        "output": "\"Qedo1ct-eeLg=ntse-T!\""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consists of characters with ASCII values in the range `[33, 122]`.",
      "`s` does not contain `'\\ \"'` or `'\\\\'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "918",
    "slug": "maximum-sum-circular-subarray",
    "title": "Maximum Sum Circular Subarray",
    "difficulty": "Medium",
    "description": "Given a **circular integer array** `nums` of length `n`, return _the maximum possible sum of a non-empty **subarray** of_ `nums`. A **circular array** means the end of the array connects to the beginning of the array. Formally, the next element of `nums[i]` is `nums[(i + 1) % n]` and the previous element of `nums[i]` is `nums[(i - 1 + n) % n]`. A **subarray** may only include each element of the fixed buffer `nums` at most once. Formally, for a subarray `nums[i], nums[i + 1], ..., nums[j]`, there does not exist `i <= k1`, `k2 <= j` with `k1 % n == k2 % n`.",
    "examples": [
      {
        "input": "nums = \\[1,-2,3,-2\\]",
        "output": "3",
        "explanation": "Subarray \\[3\\] has maximum sum 3."
      },
      {
        "input": "nums = \\[5,-3,5\\]",
        "output": "10",
        "explanation": "Subarray \\[5,5\\] has maximum sum 5 + 5 = 10."
      },
      {
        "input": "nums = \\[-3,-2,-3\\]",
        "output": "-2",
        "explanation": "Subarray \\[-2\\] has maximum sum -2."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 3  104`",
      "`-3  104 <= nums[i] <= 3  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "919",
    "slug": "complete-binary-tree-inserter",
    "title": "Complete Binary Tree Inserter",
    "difficulty": "Medium",
    "description": "A **complete binary tree** is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion. Implement the `CBTInserter` class: *  `CBTInserter(TreeNode root)` Initializes the data structure with the `root` of the complete binary tree. *  `int insert(int v)` Inserts a `TreeNode` into the tree with value `Node.val == val` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`. *  `TreeNode get_root()` Returns the root node of the tree.",
    "examples": [],
    "constraints": [
      "The number of nodes in the tree will be in the range `[1, 1000]`.",
      "`0 <= Node.val <= 5000`",
      "`root` is a complete binary tree.",
      "`0 <= val <= 5000`",
      "At most `104` calls will be made to `insert` and `get_root`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "920",
    "slug": "number-of-music-playlists",
    "title": "Number of Music Playlists",
    "difficulty": "Hard",
    "description": "Your music player contains `n` different songs. You want to listen to `goal` songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that: *  Every song is played **at least once**. *  A song can only be played again only if `k` other songs have been played. Given `n`, `goal`, and `k`, return _the number of possible playlists that you can create_. Since the answer can be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 3, goal = 3, k = 1",
        "output": "6",
        "explanation": "There are 6 possible playlists: \\[1, 2, 3\\], \\[1, 3, 2\\], \\[2, 1, 3\\], \\[2, 3, 1\\], \\[3, 1, 2\\], and \\[3, 2, 1\\]."
      },
      {
        "input": "n = 2, goal = 3, k = 0",
        "output": "6",
        "explanation": "There are 6 possible playlists: \\[1, 1, 2\\], \\[1, 2, 1\\], \\[2, 1, 1\\], \\[2, 2, 1\\], \\[2, 1, 2\\], and \\[1, 2, 2\\]."
      },
      {
        "input": "n = 2, goal = 3, k = 1",
        "output": "2",
        "explanation": "There are 2 possible playlists: \\[1, 2, 1\\] and \\[2, 1, 2\\]."
      }
    ],
    "constraints": [
      "`0 <= k < n <= goal <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "921",
    "slug": "minimum-add-to-make-parentheses-valid",
    "title": "Minimum Add to Make Parentheses Valid",
    "difficulty": "Medium",
    "description": "A parentheses string is valid if and only if: *  It is the empty string, *  It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or *  It can be written as `(A)`, where `A` is a valid string. You are given a parentheses string `s`. In one move, you can insert a parenthesis at any position of the string. *  For example, if `s = \"())) \"`, you can insert an opening parenthesis to be `\"(**(**))) \"` or a closing parenthesis to be `\"())**)**) \"`. Return _the minimum number of moves required to make_ `s` _valid_.",
    "examples": [
      {
        "input": "s =  \"()) \"",
        "output": "1"
      },
      {
        "input": "s =  \"((( \"",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s[i]` is either `'('` or `')'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "922",
    "slug": "sort-array-by-parity-ii",
    "title": "Sort Array By Parity II",
    "difficulty": "Easy",
    "description": "Given an array of integers `nums`, half of the integers in `nums` are **odd**, and the other half are **even**. Sort the array so that whenever `nums[i]` is odd, `i` is **odd**, and whenever `nums[i]` is even, `i` is **even**. Return _any answer array that satisfies this condition_.",
    "examples": [
      {
        "input": "nums = \\[4,2,5,7\\]",
        "output": "\\[4,5,2,7\\]",
        "explanation": "\\[4,7,2,5\\], \\[2,5,4,7\\], \\[2,7,4,5\\] would also have been accepted."
      },
      {
        "input": "nums = \\[2,3\\]",
        "output": "\\[2,3\\]"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 2  104`",
      "`nums.length` is even.",
      "Half of the integers in `nums` are even.",
      "`0 <= nums[i] <= 1000`",
      "Follow Up: Could you solve it in-place?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "923",
    "slug": "3sum-with-multiplicity",
    "title": "3Sum With Multiplicity",
    "difficulty": "Medium",
    "description": "Given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`. As the answer can be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "arr = \\[1,1,2,2,3,3,4,4,5,5\\], target = 8",
        "output": "20",
        "explanation": ""
      },
      {
        "input": "arr = \\[1,1,2,2,2,2\\], target = 5",
        "output": "12",
        "explanation": ""
      },
      {
        "input": "arr = \\[2,1,3\\], target = 6",
        "output": "1",
        "explanation": "(1, 2, 3) occured one time in the array so we return 1."
      }
    ],
    "constraints": [
      "`3 <= arr.length <= 3000`",
      "`0 <= arr[i] <= 100`",
      "`0 <= target <= 300`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "924",
    "slug": "minimize-malware-spread",
    "title": "Minimize Malware Spread",
    "difficulty": "Hard",
    "description": "You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`. Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner. Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove **exactly one node** from `initial`. Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**. Note that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.",
    "examples": [
      {
        "input": "graph = \\[\\[1,1,0\\],\\[1,1,0\\],\\[0,0,1\\]\\], initial = \\[0,1\\]",
        "output": "0"
      },
      {
        "input": "graph = \\[\\[1,0,0\\],\\[0,1,0\\],\\[0,0,1\\]\\], initial = \\[0,2\\]",
        "output": "0"
      },
      {
        "input": "graph = \\[\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\]\\], initial = \\[1,2\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`n == graph.length`",
      "`n == graph[i].length`",
      "`2 <= n <= 300`",
      "`graph[i][j]` is `0` or `1`.",
      "`graph[i][j] == graph[j][i]`",
      "`graph[i][i] == 1`",
      "`1 <= initial.length <= n`",
      "`0 <= initial[i] <= n - 1`",
      "All the integers in `initial` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "925",
    "slug": "long-pressed-name",
    "title": "Long Pressed Name",
    "difficulty": "Easy",
    "description": "Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get _long pressed_, and the character will be typed 1 or more times. You examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.",
    "examples": [
      {
        "input": "name =  \"alex \", typed =  \"aaleex \"",
        "output": "true",
        "explanation": "'a' and 'e' in 'alex' were long pressed."
      },
      {
        "input": "name =  \"saeed \", typed =  \"ssaaedd \"",
        "output": "false",
        "explanation": "'e' must have been pressed twice, but it was not in the typed output."
      }
    ],
    "constraints": [
      "`1 <= name.length, typed.length <= 1000`",
      "`name` and `typed` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "926",
    "slug": "flip-string-to-monotone-increasing",
    "title": "Flip String to Monotone Increasing",
    "difficulty": "Medium",
    "description": "A binary string is monotone increasing if it consists of some number of `0`'s (possibly none), followed by some number of `1`'s (also possibly none). You are given a binary string `s`. You can flip `s[i]` changing it from `0` to `1` or from `1` to `0`. Return _the minimum number of flips to make_ `s` _monotone increasing_.",
    "examples": [
      {
        "input": "s =  \"00110 \"",
        "output": "1",
        "explanation": "We flip the last digit to get 00111."
      },
      {
        "input": "s =  \"010110 \"",
        "output": "2",
        "explanation": "We flip to get 011111, or alternatively 000111."
      },
      {
        "input": "s =  \"00011000 \"",
        "output": "2",
        "explanation": "We flip to get 00000000."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "927",
    "slug": "three-equal-parts",
    "title": "Three Equal Parts",
    "difficulty": "Hard",
    "description": "You are given an array `arr` which consists of only zeros and ones, divide the array into **three non-empty parts** such that all of these parts represent the same binary value. If it is possible, return any `[i, j]` with `i + 1 < j`, such that: *  `arr[0], arr[1], ..., arr[i]` is the first part, *  `arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and *  `arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part. *  All three parts have equal binary values. If it is not possible, return `[-1, -1]`. Note that the entire part is used when considering what binary value it represents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also, leading zeros **are allowed**, so `[0,1,1]` and `[1,1]` represent the same value.",
    "examples": [
      {
        "input": "arr = \\[1,0,1,0,1\\]",
        "output": "\\[0,3\\]"
      },
      {
        "input": "arr = \\[1,1,0,1,1\\]",
        "output": "\\[-1,-1\\]"
      },
      {
        "input": "arr = \\[1,1,0,0,1\\]",
        "output": "\\[0,2\\]"
      }
    ],
    "constraints": [
      "`3 <= arr.length <= 3  104`",
      "`arr[i]` is `0` or `1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "928",
    "slug": "minimize-malware-spread-ii",
    "title": "Minimize Malware Spread II",
    "difficulty": "Hard",
    "description": "You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`. Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner. Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove **exactly one node** from `initial`, **completely removing it and any connections from this node to any other node**. Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.",
    "examples": [
      {
        "input": "graph = \\[\\[1,1,0\\],\\[1,1,0\\],\\[0,0,1\\]\\], initial = \\[0,1\\]",
        "output": "0"
      },
      {
        "input": "graph = \\[\\[1,1,0\\],\\[1,1,1\\],\\[0,1,1\\]\\], initial = \\[0,1\\]",
        "output": "1"
      },
      {
        "input": "graph = \\[\\[1,1,0,0\\],\\[1,1,1,0\\],\\[0,1,1,1\\],\\[0,0,1,1\\]\\], initial = \\[0,1\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`n == graph.length`",
      "`n == graph[i].length`",
      "`2 <= n <= 300`",
      "`graph[i][j]` is `0` or `1`.",
      "`graph[i][j] == graph[j][i]`",
      "`graph[i][i] == 1`",
      "`1 <= initial.length < n`",
      "`0 <= initial[i] <= n - 1`",
      "All the integers in `initial` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "929",
    "slug": "unique-email-addresses",
    "title": "Unique Email Addresses",
    "difficulty": "Easy",
    "description": "Every **valid email** consists of a **local name** and a **domain name**, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`. *  For example, in `\"alice@leetcode.com \"`, `\"alice \"` is the **local name**, and `\"leetcode.com \"` is the **domain name**. If you add periods `'.'` between some characters in the **local name** part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule **does not apply** to **domain names**. *  For example, `\"alice.z@leetcode.com \"` and `\"alicez@leetcode.com \"` forward to the same email address. If you add a plus `'+'` in the **local name**, everything after the first plus sign **will be ignored**. This allows certain emails to be filtered. Note that this rule **does not apply** to **domain names**. *  For example, `\"m.y+name@email.com \"` will be forwarded to `\"my@email.com \"`. It is possible to use both of these rules at the same time. Given an array of strings `emails` where we send one email to each `emails[i]`, return _the number of different addresses that actually receive mails_.",
    "examples": [
      {
        "input": "emails = \\[ \"test.email+alex@leetcode.com \", \"test.e.mail+bob.cathy@leetcode.com \", \"testemail+david@lee.tcode.com \"\\]",
        "output": "2",
        "explanation": "\"testemail@leetcode.com \" and  \"testemail@lee.tcode.com \" actually receive mails."
      },
      {
        "input": "emails = \\[ \"a@leetcode.com \", \"b@leetcode.com \", \"c@leetcode.com \"\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= emails.length <= 100`",
      "`1 <= emails[i].length <= 100`",
      "`emails[i]` consist of lowercase English letters, `'+'`, `'.'` and `'@'`.",
      "Each `emails[i]` contains exactly one `'@'` character.",
      "All local and domain names are non-empty.",
      "Local names do not start with a `'+'` character.",
      "Domain names end with the `\".com \"` suffix."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "930",
    "slug": "binary-subarrays-with-sum",
    "title": "Binary Subarrays With Sum",
    "difficulty": "Medium",
    "description": "Given a binary array `nums` and an integer `goal`, return _the number of non-empty **subarrays** with a sum_ `goal`. A **subarray** is a contiguous part of the array.",
    "examples": [
      {
        "input": "nums = \\[1,0,1,0,1\\], goal = 2",
        "output": "4",
        "explanation": "The 4 subarrays are bolded and underlined below:"
      },
      {
        "input": "nums = \\[0,0,0,0,0\\], goal = 0",
        "output": "15"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`nums[i]` is either `0` or `1`.",
      "`0 <= goal <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "931",
    "slug": "minimum-falling-path-sum",
    "title": "Minimum Falling Path Sum",
    "difficulty": "Medium",
    "description": "Given an `n x n` array of integers `matrix`, return _the **minimum sum** of any **falling path** through_ `matrix`. A **falling path** starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.",
    "examples": [
      {
        "input": "matrix = \\[\\[2,1,3\\],\\[6,5,4\\],\\[7,8,9\\]\\]",
        "output": "13",
        "explanation": "There are two falling paths with a minimum sum as shown."
      },
      {
        "input": "matrix = \\[\\[-19,57\\],\\[-40,-5\\]\\]",
        "output": "-59",
        "explanation": "The falling path with a minimum sum is shown."
      }
    ],
    "constraints": [
      "`n == matrix.length == matrix[i].length`",
      "`1 <= n <= 100`",
      "`-100 <= matrix[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "932",
    "slug": "beautiful-array",
    "title": "Beautiful Array",
    "difficulty": "Medium",
    "description": "An array `nums` of length `n` is **beautiful** if: *  `nums` is a permutation of the integers in the range `[1, n]`. *  For every `0 <= i < j < n`, there is no index `k` with `i < k < j` where `2 * nums[k] == nums[i] + nums[j]`. Given the integer `n`, return _any **beautiful** array_ `nums` _of length_ `n`. There will be at least one valid answer for the given `n`.",
    "examples": [
      {
        "input": "n = 4",
        "output": "\\[2,1,4,3\\]"
      },
      {
        "input": "n = 5",
        "output": "\\[3,1,2,5,4\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "933",
    "slug": "number-of-recent-calls",
    "title": "Number of Recent Calls",
    "difficulty": "Easy",
    "description": "You have a `RecentCounter` class which counts the number of recent requests within a certain time frame. Implement the `RecentCounter` class: *  `RecentCounter()` Initializes the counter with zero recent requests. *  `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`. It is **guaranteed** that every call to `ping` uses a strictly larger value of `t` than the previous call.",
    "examples": [],
    "constraints": [
      "`1 <= t <= 109`",
      "Each test case will call `ping` with strictly increasing values of `t`.",
      "At most `104` calls will be made to `ping`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "934",
    "slug": "shortest-bridge",
    "title": "Shortest Bridge",
    "difficulty": "Medium",
    "description": "You are given an `n x n` binary matrix `grid` where `1` represents land and `0` represents water. An **island** is a 4-directionally connected group of `1`'s not connected to any other `1`'s. There are **exactly two islands** in `grid`. You may change `0`'s to `1`'s to connect the two islands to form **one island**. Return _the smallest number of_ `0`_'s you must flip to connect the two islands_.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1\\],\\[1,0\\]\\]",
        "output": "1"
      },
      {
        "input": "grid = \\[\\[0,1,0\\],\\[0,0,0\\],\\[0,0,1\\]\\]",
        "output": "2"
      },
      {
        "input": "grid = \\[\\[1,1,1,1,1\\],\\[1,0,0,0,1\\],\\[1,0,1,0,1\\],\\[1,0,0,0,1\\],\\[1,1,1,1,1\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`2 <= n <= 100`",
      "`grid[i][j]` is either `0` or `1`.",
      "There are exactly two islands in `grid`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "935",
    "slug": "knight-dialer",
    "title": "Knight Dialer",
    "difficulty": "Medium",
    "description": "The chess knight has a **unique movement**, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an **L**). The possible movements of chess knight are shown in this diagaram: A chess knight can move as indicated in the chess diagram below: We have a chess knight and a phone pad as shown below, the knight **can only stand on a numeric cell** (i.e. blue cell). Given an integer `n`, return how many distinct phone numbers of length `n` we can dial. You are allowed to place the knight **on any numeric cell** initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be **valid** knight jumps. As the answer may be very large, **return the answer modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 1",
        "output": "10",
        "explanation": "We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient."
      },
      {
        "input": "n = 2",
        "output": "20",
        "explanation": "All the valid number we can dial are \\[04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94\\]"
      },
      {
        "input": "n = 3131",
        "output": "136006598",
        "explanation": "Please take care of the mod."
      }
    ],
    "constraints": [
      "`1 <= n <= 5000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "936",
    "slug": "stamping-the-sequence",
    "title": "Stamping The Sequence",
    "difficulty": "Hard",
    "description": "You are given two strings `stamp` and `target`. Initially, there is a string `s` of length `target.length` with all `s[i] == '?'`. In one turn, you can place `stamp` over `s` and replace every letter in the `s` with the corresponding letter from `stamp`. *  For example, if `stamp = \"abc \"` and `target = \"abcba \"`, then `s` is `\"????? \"` initially. In one turn you can: *  place `stamp` at index `0` of `s` to obtain `\"abc?? \"`, *  place `stamp` at index `1` of `s` to obtain `\"?abc? \"`, or *  place `stamp` at index `2` of `s` to obtain `\"??abc \"`. Note that `stamp` must be fully contained in the boundaries of `s` in order to stamp (i.e., you cannot place `stamp` at index `3` of `s`). We want to convert `s` to `target` using **at most** `10 * target.length` turns. Return _an array of the index of the left-most letter being stamped at each turn_. If we cannot obtain `target` from `s` within `10 * target.length` turns, return an empty array.",
    "examples": [
      {
        "input": "stamp =  \"abc \", target =  \"ababc \"",
        "output": "\\[0,2\\]",
        "explanation": "Initially s =  \"????? \"."
      },
      {
        "input": "stamp =  \"abca \", target =  \"aabcaca \"",
        "output": "\\[3,0,1\\]",
        "explanation": "Initially s =  \"??????? \"."
      }
    ],
    "constraints": [
      "`1 <= stamp.length <= target.length <= 1000`",
      "`stamp` and `target` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "937",
    "slug": "reorder-data-in-log-files",
    "title": "Reorder Data in Log Files",
    "difficulty": "Medium",
    "description": "You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the **identifier**. There are two types of logs: *  **Letter-logs**: All words (except the identifier) consist of lowercase English letters. *  **Digit-logs**: All words (except the identifier) consist of digits. Reorder these logs so that: 1. The **letter-logs** come before all **digit-logs**. 2. The **letter-logs** are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers. 3. The **digit-logs** maintain their relative ordering. Return _the final order of the logs_.",
    "examples": [
      {
        "input": "logs = \\[ \"dig1 8 1 5 1 \", \"let1 art can \", \"dig2 3 6 \", \"let2 own kit dig \", \"let3 art zero \"\\]",
        "output": "\\[ \"let1 art can \", \"let3 art zero \", \"let2 own kit dig \", \"dig1 8 1 5 1 \", \"dig2 3 6 \"\\]",
        "explanation": ""
      },
      {
        "input": "logs = \\[ \"a1 9 2 3 1 \", \"g1 act car \", \"zo4 4 7 \", \"ab1 off key dog \", \"a8 act zoo \"\\]",
        "output": "\\[ \"g1 act car \", \"a8 act zoo \", \"ab1 off key dog \", \"a1 9 2 3 1 \", \"zo4 4 7 \"\\]"
      }
    ],
    "constraints": [
      "`1 <= logs.length <= 100`",
      "`3 <= logs[i].length <= 100`",
      "All the tokens of `logs[i]` are separated by a single space.",
      "`logs[i]` is guaranteed to have an identifier and at least one word after the identifier."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "938",
    "slug": "range-sum-of-bst",
    "title": "Range Sum of BST",
    "difficulty": "Easy",
    "description": "Given the `root` node of a binary search tree and two integers `low` and `high`, return _the sum of values of all nodes with a value in the **inclusive** range_ `[low, high]`.",
    "examples": [
      {
        "input": "root = \\[10,5,15,3,7,null,18\\], low = 7, high = 15",
        "output": "32",
        "explanation": "Nodes 7, 10, and 15 are in the range \\[7, 15\\]. 7 + 10 + 15 = 32."
      },
      {
        "input": "root = \\[10,5,15,3,7,13,18,1,null,6\\], low = 6, high = 10",
        "output": "23",
        "explanation": "Nodes 6, 7, and 10 are in the range \\[6, 10\\]. 6 + 7 + 10 = 23."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 2  104]`.",
      "`1 <= Node.val <= 105`",
      "`1 <= low <= high <= 105`",
      "All `Node.val` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "939",
    "slug": "minimum-area-rectangle",
    "title": "Minimum Area Rectangle",
    "difficulty": "Medium",
    "description": "You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`. Return _the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes_. If there is not any such rectangle, return `0`.",
    "examples": [
      {
        "input": "points = \\[\\[1,1\\],\\[1,3\\],\\[3,1\\],\\[3,3\\],\\[2,2\\]\\]",
        "output": "4"
      },
      {
        "input": "points = \\[\\[1,1\\],\\[1,3\\],\\[3,1\\],\\[3,3\\],\\[4,1\\],\\[4,3\\]\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= points.length <= 500`",
      "`points[i].length == 2`",
      "`0 <= xi, yi <= 4  104`",
      "All the given points are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "940",
    "slug": "distinct-subsequences-ii",
    "title": "Distinct Subsequences II",
    "difficulty": "Hard",
    "description": "Given a string s, return _the number of **distinct non-empty subsequences** of_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`. A **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not.",
    "examples": [
      {
        "input": "s =  \"abc \"",
        "output": "7",
        "explanation": "The 7 distinct subsequences are  \"a \",  \"b \",  \"c \",  \"ab \",  \"ac \",  \"bc \", and  \"abc \"."
      },
      {
        "input": "s =  \"aba \"",
        "output": "6",
        "explanation": "The 6 distinct subsequences are  \"a \",  \"b \",  \"ab \",  \"aa \",  \"ba \", and  \"aba \"."
      },
      {
        "input": "s =  \"aaa \"",
        "output": "3",
        "explanation": "The 3 distinct subsequences are  \"a \",  \"aa \" and  \"aaa \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 2000`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "941",
    "slug": "valid-mountain-array",
    "title": "Valid Mountain Array",
    "difficulty": "Easy",
    "description": "Given an array of integers `arr`, return _`true` if and only if it is a valid mountain array_. Recall that arr is a mountain array if and only if: *  `arr.length >= 3` *  There exists some `i` with `0 < i < arr.length - 1` such that: *  `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` *  `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`",
    "examples": [
      {
        "input": "arr = \\[2,1\\]",
        "output": "false"
      },
      {
        "input": "arr = \\[3,5,5\\]",
        "output": "false"
      },
      {
        "input": "arr = \\[0,3,2,1\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 104`",
      "`0 <= arr[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "942",
    "slug": "di-string-match",
    "title": "DI String Match",
    "difficulty": "Easy",
    "description": "A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where: *  `s[i] == 'I'` if `perm[i] < perm[i + 1]`, and *  `s[i] == 'D'` if `perm[i] > perm[i + 1]`. Given a string `s`, reconstruct the permutation `perm` and return it. If there are multiple valid permutations perm, return **any of them**.",
    "examples": [
      {
        "input": "s = \"IDID\"",
        "output": "\\[0,4,1,3,2\\]"
      },
      {
        "input": "s = \"III\"",
        "output": "\\[0,1,2,3\\]"
      },
      {
        "input": "s = \"DDI\"",
        "output": "\\[3,2,0,1\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is either `'I'` or `'D'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "943",
    "slug": "find-the-shortest-superstring",
    "title": "Find the Shortest Superstring",
    "difficulty": "Hard",
    "description": "Given an array of strings `words`, return _the smallest string that contains each string in_ `words` _as a substring_. If there are multiple valid strings of the smallest length, return **any of them**. You may assume that no string in `words` is a substring of another string in `words`.",
    "examples": [
      {
        "input": "words = \\[ \"alex \", \"loves \", \"leetcode \"\\]",
        "output": "\"alexlovesleetcode \"",
        "explanation": "All permutations of  \"alex \", \"loves \", \"leetcode \" would also be accepted."
      },
      {
        "input": "words = \\[ \"catg \", \"ctaagt \", \"gcta \", \"ttca \", \"atgcatc \"\\]",
        "output": "\"gctaagttcatgcatc \""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 12`",
      "`1 <= words[i].length <= 20`",
      "`words[i]` consists of lowercase English letters.",
      "All the strings of `words` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "944",
    "slug": "delete-columns-to-make-sorted",
    "title": "Delete Columns to Make Sorted",
    "difficulty": "Easy",
    "description": "You are given an array of `n` strings `strs`, all of the same length. The strings can be arranged such that there is one on each line, making a grid. *  For example, `strs = [ \"abc \", \"bce \", \"cae \"]` can be arranged as follows: abc bce cae You want to **delete** the columns that are **not sorted lexicographically**. In the above example (**0-indexed**), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted, while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1. Return _the number of columns that you will delete_.",
    "examples": [
      {
        "input": "strs = \\[ \"cba \", \"daf \", \"ghi \"\\]",
        "output": "1",
        "explanation": "The grid looks as follows:"
      },
      {
        "input": "strs = \\[ \"a \", \"b \"\\]",
        "output": "0",
        "explanation": "The grid looks as follows:"
      },
      {
        "input": "strs = \\[ \"zyx \", \"wvu \", \"tsr \"\\]",
        "output": "3",
        "explanation": "The grid looks as follows:"
      }
    ],
    "constraints": [
      "`n == strs.length`",
      "`1 <= n <= 100`",
      "`1 <= strs[i].length <= 1000`",
      "`strs[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "945",
    "slug": "minimum-increment-to-make-array-unique",
    "title": "Minimum Increment to Make Array Unique",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. In one move, you can pick an index `i` where `0 <= i < nums.length` and increment `nums[i]` by `1`. Return _the minimum number of moves to make every value in_ `nums` _**unique**_. The test cases are generated so that the answer fits in a 32-bit integer.",
    "examples": [
      {
        "input": "nums = \\[1,2,2\\]",
        "output": "1",
        "explanation": "After 1 move, the array could be \\[1, 2, 3\\]."
      },
      {
        "input": "nums = \\[3,2,1,2,1,7\\]",
        "output": "6",
        "explanation": "After 6 moves, the array could be \\[3, 4, 1, 2, 5, 7\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "946",
    "slug": "validate-stack-sequences",
    "title": "Validate Stack Sequences",
    "difficulty": "Medium",
    "description": "Given two integer arrays `pushed` and `popped` each with distinct values, return `true` _if this could have been the result of a sequence of push and pop operations on an initially empty stack, or_ `false` _otherwise._",
    "examples": [
      {
        "input": "pushed = \\[1,2,3,4,5\\], popped = \\[4,5,3,2,1\\]",
        "output": "true",
        "explanation": "We might do the following sequence:"
      },
      {
        "input": "pushed = \\[1,2,3,4,5\\], popped = \\[4,3,5,1,2\\]",
        "output": "false",
        "explanation": "1 cannot be popped before 2."
      }
    ],
    "constraints": [
      "`1 <= pushed.length <= 1000`",
      "`0 <= pushed[i] <= 1000`",
      "All the elements of `pushed` are unique.",
      "`popped.length == pushed.length`",
      "`popped` is a permutation of `pushed`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "947",
    "slug": "most-stones-removed-with-same-row-or-column",
    "title": "Most Stones Removed with Same Row or Column",
    "difficulty": "Medium",
    "description": "On a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone. A stone can be removed if it shares either **the same row or the same column** as another stone that has not been removed. Given an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return _the largest possible number of stones that can be removed_.",
    "examples": [
      {
        "input": "stones = \\[\\[0,0\\],\\[0,1\\],\\[1,0\\],\\[1,2\\],\\[2,1\\],\\[2,2\\]\\]",
        "output": "5",
        "explanation": "One way to remove 5 stones is as follows:"
      },
      {
        "input": "stones = \\[\\[0,0\\],\\[0,2\\],\\[1,1\\],\\[2,0\\],\\[2,2\\]\\]",
        "output": "3",
        "explanation": "One way to make 3 moves is as follows:"
      },
      {
        "input": "stones = \\[\\[0,0\\]\\]",
        "output": "0",
        "explanation": "\\[0,0\\] is the only stone on the plane, so you cannot remove it."
      }
    ],
    "constraints": [
      "`1 <= stones.length <= 1000`",
      "`0 <= xi, yi <= 104`",
      "No two stones are at the same coordinate point."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "948",
    "slug": "bag-of-tokens",
    "title": "Bag of Tokens",
    "difficulty": "Medium",
    "description": "You have an initial **power** of `power`, an initial **score** of `0`, and a bag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed). Your goal is to maximize your total **score** by potentially playing each token in one of two ways: *  If your current **power** is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` **power** and gaining `1` **score**. *  If your current **score** is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` **power** and losing `1` **score**. Each token may be played **at most** once and **in any order**. You do **not** have to play all the tokens. Return _the largest possible **score** you can achieve after playing any number of tokens_.",
    "examples": [
      {
        "input": "tokens = \\[100\\], power = 50",
        "output": "0"
      },
      {
        "input": "tokens = \\[100,200\\], power = 150",
        "output": "1",
        "explanation": "Play the 0th token (100) face up, your power becomes 50 and score becomes 1."
      },
      {
        "input": "tokens = \\[100,200,300,400\\], power = 200",
        "output": "2",
        "explanation": "Play the tokens in this order to get a score of 2:"
      }
    ],
    "constraints": [
      "`0 <= tokens.length <= 1000`",
      "`0 <= tokens[i], power < 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "949",
    "slug": "largest-time-for-given-digits",
    "title": "Largest Time for Given Digits",
    "difficulty": "Medium",
    "description": "Given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit **exactly once**. 24-hour times are formatted as `\"HH:MM \"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`. Return _the latest 24-hour time in `\"HH:MM \"` format_. If no valid time can be made, return an empty string.",
    "examples": [
      {
        "input": "arr = \\[1,2,3,4\\]",
        "output": "\"23:41 \"",
        "explanation": "The valid 24-hour times are  \"12:34 \",  \"12:43 \",  \"13:24 \",  \"13:42 \",  \"14:23 \",  \"14:32 \",  \"21:34 \",  \"21:43 \",  \"23:14 \", and  \"23:41 \". Of these times,  \"23:41 \" is the latest."
      },
      {
        "input": "arr = \\[5,5,5,5\\]",
        "output": "\" \"",
        "explanation": "There are no valid 24-hour times as  \"55:55 \" is not valid."
      }
    ],
    "constraints": [
      "`arr.length == 4`",
      "`0 <= arr[i] <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "950",
    "slug": "reveal-cards-in-increasing-order",
    "title": "Reveal Cards In Increasing Order",
    "difficulty": "Medium",
    "description": "You are given an integer array `deck`. There is a deck of cards where every card has a unique integer. The integer on the `ith` card is `deck[i]`. You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck. You will do the following steps repeatedly until all cards are revealed: 1. Take the top card of the deck, reveal it, and take it out of the deck. 2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck. 3. If there are still unrevealed cards, go back to step 1. Otherwise, stop. Return _an ordering of the deck that would reveal the cards in increasing order_. **Note** that the first entry in the answer is considered to be the top of the deck.",
    "examples": [
      {
        "input": "deck = \\[17,13,11,2,3,5,7\\]",
        "output": "\\[2,13,3,11,5,17,7\\]",
        "explanation": ""
      },
      {
        "input": "deck = \\[1,1000\\]",
        "output": "\\[1,1000\\]"
      }
    ],
    "constraints": [
      "`1 <= deck.length <= 1000`",
      "`1 <= deck[i] <= 106`",
      "All the values of `deck` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "951",
    "slug": "flip-equivalent-binary-trees",
    "title": "Flip Equivalent Binary Trees",
    "difficulty": "Medium",
    "description": "For a binary tree **T**, we can define a **flip operation** as follows: choose any node, and swap the left and right child subtrees. A binary tree **X** is _flip equivalent_ to a binary tree **Y** if and only if we can make **X** equal to **Y** after some number of flip operations. Given the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivalent or `false` otherwise.",
    "examples": [
      {
        "input": "root1 = \\[1,2,3,4,5,6,null,null,null,7,8\\], root2 = \\[1,3,2,null,6,4,5,null,null,null,null,8,7\\]",
        "output": "true",
        "explanation": "We flipped at nodes with values 1, 3, and 5."
      },
      {
        "input": "root1 = \\[\\], root2 = \\[\\]",
        "output": "true"
      },
      {
        "input": "root1 = \\[\\], root2 = \\[1\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in each tree is in the range `[0, 100]`.",
      "Each tree will have unique node values in the range `[0, 99]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "952",
    "slug": "largest-component-size-by-common-factor",
    "title": "Largest Component Size by Common Factor",
    "difficulty": "Hard",
    "description": "You are given an integer array of unique positive integers `nums`. Consider the following graph: *  There are `nums.length` nodes, labeled `nums[0]` to `nums[nums.length - 1]`, *  There is an undirected edge between `nums[i]` and `nums[j]` if `nums[i]` and `nums[j]` share a common factor greater than `1`. Return _the size of the largest connected component in the graph_.",
    "examples": [
      {
        "input": "nums = \\[4,6,15,35\\]",
        "output": "4"
      },
      {
        "input": "nums = \\[20,50,9,63\\]",
        "output": "2"
      },
      {
        "input": "nums = \\[2,3,6,7,4,12,21,39\\]",
        "output": "8"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  104`",
      "`1 <= nums[i] <= 105`",
      "All the values of `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "953",
    "slug": "verifying-an-alien-dictionary",
    "title": "Verifying an Alien Dictionary",
    "difficulty": "Easy",
    "description": "In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different `order`. The `order` of the alphabet is some permutation of lowercase letters. Given a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographically in this alien language.",
    "examples": [
      {
        "input": "words = \\[ \"hello \", \"leetcode \"\\], order =  \"hlabcdefgijkmnopqrstuvwxyz \"",
        "output": "true",
        "explanation": "As 'h' comes before 'l' in this language, then the sequence is sorted."
      },
      {
        "input": "words = \\[ \"word \", \"world \", \"row \"\\], order =  \"worldabcefghijkmnpqstuvxyz \"",
        "output": "false",
        "explanation": "As 'd' comes after 'l' in this language, then words\\[0\\] > words\\[1\\], hence the sequence is unsorted."
      },
      {
        "input": "words = \\[ \"apple \", \"app \"\\], order =  \"abcdefghijklmnopqrstuvwxyz \"",
        "output": "false",
        "explanation": "The first three characters  \"app \" match, and the second string is shorter (in size.) According to lexicographical rules  \"apple \" >  \"app \", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character ([More info](https://en.wikipedia.org/wiki/Lexicographical_order))."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 20`",
      "`order.length == 26`",
      "All characters in `words[i]` and `order` are English lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "954",
    "slug": "array-of-doubled-pairs",
    "title": "Array of Doubled Pairs",
    "difficulty": "Medium",
    "description": "Given an integer array of even length `arr`, return `true` _if it is possible to reorder_ `arr` _such that_ `arr[2 * i + 1] = 2 * arr[2 * i]` _for every_ `0 <= i < len(arr) / 2`_, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "arr = \\[3,1,3,6\\]",
        "output": "false"
      },
      {
        "input": "arr = \\[2,1,2,6\\]",
        "output": "false"
      },
      {
        "input": "arr = \\[4,-2,2,-4\\]",
        "output": "true",
        "explanation": "We can take two groups, \\[-2,-4\\] and \\[2,4\\] to form \\[-2,-4,2,4\\] or \\[2,4,-2,-4\\]."
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 3  104`",
      "`arr.length` is even.",
      "`-105 <= arr[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "955",
    "slug": "delete-columns-to-make-sorted-ii",
    "title": "Delete Columns to Make Sorted II",
    "difficulty": "Medium",
    "description": "You are given an array of `n` strings `strs`, all of the same length. We may choose any deletion indices, and we delete all the characters in those indices for each string. For example, if we have `strs = [ \"abcdef \", \"uvwxyz \"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[ \"bef \", \"vyz \"]`. Suppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in **lexicographic** order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Return _the minimum possible value of_ `answer.length`.",
    "examples": [
      {
        "input": "strs = \\[ \"ca \", \"bb \", \"ac \"\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "strs = \\[ \"xc \", \"yb \", \"za \"\\]",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "strs = \\[ \"zyx \", \"wvu \", \"tsr \"\\]",
        "output": "3",
        "explanation": "We have to delete every column."
      }
    ],
    "constraints": [
      "`n == strs.length`",
      "`1 <= n <= 100`",
      "`1 <= strs[i].length <= 100`",
      "`strs[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "956",
    "slug": "tallest-billboard",
    "title": "Tallest Billboard",
    "difficulty": "Hard",
    "description": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height. You are given a collection of `rods` that can be welded together. For example, if you have rods of lengths `1`, `2`, and `3`, you can weld them together to make a support of length `6`. Return _the largest possible height of your billboard installation_. If you cannot support the billboard, return `0`.",
    "examples": [
      {
        "input": "rods = \\[1,2,3,6\\]",
        "output": "6",
        "explanation": "We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6."
      },
      {
        "input": "rods = \\[1,2,3,4,5,6\\]",
        "output": "10",
        "explanation": "We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10."
      },
      {
        "input": "rods = \\[1,2\\]",
        "output": "0",
        "explanation": "The billboard cannot be supported, so we return 0."
      }
    ],
    "constraints": [
      "`1 <= rods.length <= 20`",
      "`1 <= rods[i] <= 1000`",
      "`sum(rods[i]) <= 5000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "957",
    "slug": "prison-cells-after-n-days",
    "title": "Prison Cells After N Days",
    "difficulty": "Medium",
    "description": "There are `8` prison cells in a row and each cell is either occupied or vacant. Each day, whether the cell is occupied or vacant changes according to the following rules: *  If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. *  Otherwise, it becomes vacant. **Note** that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors. You are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`. Return the state of the prison after `n` days (i.e., `n` such changes described above).",
    "examples": [
      {
        "input": "cells = \\[0,1,0,1,1,0,0,1\\], n = 7",
        "output": "\\[0,0,1,1,0,0,0,0\\]",
        "explanation": "The following table summarizes the state of the prison on each day:"
      },
      {
        "input": "cells = \\[1,0,0,1,0,0,1,0\\], n = 1000000000",
        "output": "\\[0,0,1,1,1,1,1,0\\]"
      }
    ],
    "constraints": [
      "`cells.length == 8`",
      "`cells[i]` is either `0` or `1`.",
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "958",
    "slug": "check-completeness-of-a-binary-tree",
    "title": "Check Completeness of a Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, determine if it is a _complete binary tree_. In a **[complete binary tree](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5,6\\]",
        "output": "true",
        "explanation": "Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible."
      },
      {
        "input": "root = \\[1,2,3,4,5,null,7\\]",
        "output": "false",
        "explanation": "The node with value 7 isn't as far left as possible."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 100]`.",
      "`1 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "959",
    "slug": "regions-cut-by-slashes",
    "title": "Regions Cut By Slashes",
    "difficulty": "Medium",
    "description": "An `n x n` grid is composed of `1 x 1` squares where each `1 x 1` square consists of a `'/'`, `'\\'`, or blank space `' '`. These characters divide the square into contiguous regions. Given the grid `grid` represented as a string array, return _the number of regions_. Note that backslash characters are escaped, so a `'\\'` is represented as `'\\\\'`.",
    "examples": [
      {
        "input": "grid = \\[ \" / \", \"/  \"\\]",
        "output": "2"
      },
      {
        "input": "grid = \\[ \" / \", \"   \"\\]",
        "output": "1"
      },
      {
        "input": "grid = \\[ \"/\\\\\\\\ \", \"\\\\/ \"\\]",
        "output": "5",
        "explanation": "Recall that because \\\\ characters are escaped,  \"\\\\/ \" refers to /, and  \"/\\\\\\\\ \" refers to /\\\\."
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`1 <= n <= 30`",
      "`grid[i][j]` is either `'/'`, `'\\'`, or `' '`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "960",
    "slug": "delete-columns-to-make-sorted-iii",
    "title": "Delete Columns to Make Sorted III",
    "difficulty": "Hard",
    "description": "You are given an array of `n` strings `strs`, all of the same length. We may choose any deletion indices, and we delete all the characters in those indices for each string. For example, if we have `strs = [ \"abcdef \", \"uvwxyz \"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[ \"bef \", \"vyz \"]`. Suppose we chose a set of deletion indices `answer` such that after deletions, the final array has **every string (row) in lexicographic** order. (i.e., `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and `(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so on). Return _the minimum possible value of_ `answer.length`.",
    "examples": [
      {
        "input": "strs = \\[ \"babca \", \"bbazb \"\\]",
        "output": "3",
        "explanation": "After deleting columns 0, 1, and 4, the final array is strs = \\[ \"bc \",  \"az \"\\]."
      },
      {
        "input": "strs = \\[ \"edcba \"\\]",
        "output": "4",
        "explanation": "If we delete less than 4 columns, the only row will not be lexicographically sorted."
      },
      {
        "input": "strs = \\[ \"ghi \", \"def \", \"abc \"\\]",
        "output": "0",
        "explanation": "All rows are already lexicographically sorted."
      }
    ],
    "constraints": [
      "`n == strs.length`",
      "`1 <= n <= 100`",
      "`1 <= strs[i].length <= 100`",
      "`strs[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "961",
    "slug": "n-repeated-element-in-size-2n-array",
    "title": "N-Repeated Element in Size 2N Array",
    "difficulty": "Easy",
    "description": "You are given an integer array `nums` with the following properties: *  `nums.length == 2 * n`. *  `nums` contains `n + 1` **unique** elements. *  Exactly one element of `nums` is repeated `n` times. Return _the element that is repeated_ `n` _times_.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,3\\]",
        "output": "3"
      },
      {
        "input": "nums = \\[2,1,2,5,3,2\\]",
        "output": "2"
      },
      {
        "input": "nums = \\[5,1,5,2,5,3,5,4\\]",
        "output": "5"
      }
    ],
    "constraints": [
      "`2 <= n <= 5000`",
      "`nums.length == 2  n`",
      "`0 <= nums[i] <= 104`",
      "`nums` contains `n + 1` unique elements and one of them is repeated exactly `n` times."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "962",
    "slug": "maximum-width-ramp",
    "title": "Maximum Width Ramp",
    "difficulty": "Medium",
    "description": "A **ramp** in an integer array `nums` is a pair `(i, j)` for which `i < j` and `nums[i] <= nums[j]`. The **width** of such a ramp is `j - i`. Given an integer array `nums`, return _the maximum width of a **ramp** in_ `nums`. If there is no **ramp** in `nums`, return `0`.",
    "examples": [
      {
        "input": "nums = \\[6,0,8,2,1,5\\]",
        "output": "4",
        "explanation": "The maximum width ramp is achieved at (i, j) = (1, 5): nums\\[1\\] = 0 and nums\\[5\\] = 5."
      },
      {
        "input": "nums = \\[9,8,1,0,1,9,4,0,4,1\\]",
        "output": "7",
        "explanation": "The maximum width ramp is achieved at (i, j) = (2, 9): nums\\[2\\] = 1 and nums\\[9\\] = 1."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 5  104`",
      "`0 <= nums[i] <= 5  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "963",
    "slug": "minimum-area-rectangle-ii",
    "title": "Minimum Area Rectangle II",
    "difficulty": "Medium",
    "description": "You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`. Return _the minimum area of any rectangle formed from these points, with sides **not necessarily parallel** to the X and Y axes_. If there is not any such rectangle, return `0`. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "points = \\[\\[1,2\\],\\[2,1\\],\\[1,0\\],\\[0,1\\]\\]",
        "output": "2.00000",
        "explanation": "The minimum area rectangle occurs at \\[1,2\\],\\[2,1\\],\\[1,0\\],\\[0,1\\], with an area of 2."
      },
      {
        "input": "points = \\[\\[0,1\\],\\[2,1\\],\\[1,1\\],\\[1,0\\],\\[2,0\\]\\]",
        "output": "1.00000",
        "explanation": "The minimum area rectangle occurs at \\[1,0\\],\\[1,1\\],\\[2,1\\],\\[2,0\\], with an area of 1."
      },
      {
        "input": "points = \\[\\[0,3\\],\\[1,2\\],\\[3,1\\],\\[1,3\\],\\[2,1\\]\\]",
        "output": "0",
        "explanation": "There is no possible rectangle to form from these points."
      }
    ],
    "constraints": [
      "`1 <= points.length <= 50`",
      "`points[i].length == 2`",
      "`0 <= xi, yi <= 4  104`",
      "All the given points are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "964",
    "slug": "least-operators-to-express-number",
    "title": "Least Operators to Express Number",
    "difficulty": "Hard",
    "description": "Given a single positive integer `x`, we will write an expression of the form `x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is either addition, subtraction, multiplication, or division (`+`, `-`, `*`, or `/)`. For example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a value of 3. When writing such an expression, we adhere to the following conventions: *  The division operator (`/`) returns rational numbers. *  There are no parentheses placed anywhere. *  We use the usual order of operations: multiplication and division happen before addition and subtraction. *  It is not allowed to use the unary negation operator (`-`). For example, \"`x - x` \" is a valid expression as it only uses subtraction, but \"`-x + x` \" is not because it uses negation. We would like to write an expression with the least number of operators such that the expression equals the given `target`. Return the least number of operators used.",
    "examples": [
      {
        "input": "x = 3, target = 19",
        "output": "5",
        "explanation": "3 \\* 3 + 3 \\* 3 + 3 / 3."
      },
      {
        "input": "x = 5, target = 501",
        "output": "8",
        "explanation": "5 \\* 5 \\* 5 \\* 5 - 5 \\* 5 \\* 5 + 5 / 5."
      },
      {
        "input": "x = 100, target = 100000000",
        "output": "3",
        "explanation": "100 \\* 100 \\* 100 \\* 100."
      }
    ],
    "constraints": [
      "`2 <= x <= 100`",
      "`1 <= target <= 2  108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "965",
    "slug": "univalued-binary-tree",
    "title": "Univalued Binary Tree",
    "difficulty": "Easy",
    "description": "A binary tree is **uni-valued** if every node in the tree has the same value. Given the `root` of a binary tree, return `true` _if the given tree is **uni-valued**, or_ `false` _otherwise._",
    "examples": [
      {
        "input": "root = \\[1,1,1,1,1,null,1\\]",
        "output": "true"
      },
      {
        "input": "root = \\[2,2,2,5,2\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 100]`.",
      "`0 <= Node.val < 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "966",
    "slug": "vowel-spellchecker",
    "title": "Vowel Spellchecker",
    "difficulty": "Medium",
    "description": "Given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word. For a given `query` word, the spell checker handles two categories of spelling mistakes: *  Capitalization: If the query matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the case in the wordlist. *  Example: `wordlist = [ \"yellow \"]`, `query = \"YellOw \"`: `correct = \"yellow \"` *  Example: `wordlist = [ \"Yellow \"]`, `query = \"yellow \"`: `correct = \"Yellow \"` *  Example: `wordlist = [ \"yellow \"]`, `query = \"yellow \"`: `correct = \"yellow \"` *  Vowel Errors: If after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the match in the wordlist. *  Example: `wordlist = [ \"YellOw \"]`, `query = \"yollow \"`: `correct = \"YellOw \"` *  Example: `wordlist = [ \"YellOw \"]`, `query = \"yeellow \"`: `correct = \" \"` (no match) *  Example: `wordlist = [ \"YellOw \"]`, `query = \"yllw \"`: `correct = \" \"` (no match) In addition, the spell checker operates under the following precedence rules: *  When the query exactly matches a word in the wordlist (**case-sensitive**), you should return the same word back. *  When the query matches a word up to capitlization, you should return the first such match in the wordlist. *  When the query matches a word up to vowel errors, you should return the first such match in the wordlist. *  If the query has no matches in the wordlist, you should return the empty string. Given some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`.",
    "examples": [
      {
        "input": "wordlist = \\[\"KiTe\",\"kite\",\"hare\",\"Hare\"\\], queries = \\[\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"\\]",
        "output": "\\[\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"\\]"
      },
      {
        "input": "wordlist = \\[\"yellow\"\\], queries = \\[\"YellOw\"\\]",
        "output": "\\[\"yellow\"\\]"
      }
    ],
    "constraints": [
      "`1 <= wordlist.length, queries.length <= 5000`",
      "`1 <= wordlist[i].length, queries[i].length <= 7`",
      "`wordlist[i]` and `queries[i]` consist only of only English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "967",
    "slug": "numbers-with-same-consecutive-differences",
    "title": "Numbers With Same Consecutive Differences",
    "difficulty": "Medium",
    "description": "Given two integers n and k, return _an array of all the integers of length_ `n` _where the difference between every two consecutive digits is_ `k`. You may return the answer in **any order**. Note that the integers should not have leading zeros. Integers as `02` and `043` are not allowed.",
    "examples": [
      {
        "input": "n = 3, k = 7",
        "output": "\\[181,292,707,818,929\\]",
        "explanation": "Note that 070 is not a valid number, because it has leading zeroes."
      },
      {
        "input": "n = 2, k = 1",
        "output": "\\[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98\\]"
      }
    ],
    "constraints": [
      "`2 <= n <= 9`",
      "`0 <= k <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "968",
    "slug": "binary-tree-cameras",
    "title": "Binary Tree Cameras",
    "difficulty": "Hard",
    "description": "You are given the `root` of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children. Return _the minimum number of cameras needed to monitor all nodes of the tree_.",
    "examples": [
      {
        "input": "root = \\[0,0,null,0,0\\]",
        "output": "1",
        "explanation": "One camera is enough to monitor all nodes if placed as shown."
      },
      {
        "input": "root = \\[0,0,null,0,null,0,null,null,0\\]",
        "output": "2",
        "explanation": "At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 1000]`.",
      "`Node.val == 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "969",
    "slug": "pancake-sorting",
    "title": "Pancake Sorting",
    "difficulty": "Medium",
    "description": "Given an array of integers `arr`, sort the array by performing a series of **pancake flips**. In one pancake flip we do the following steps: *  Choose an integer `k` where `1 <= k <= arr.length`. *  Reverse the sub-array `arr[0...k-1]` (**0-indexed**). For example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`. Return _an array of the_ `k`_\\-values corresponding to a sequence of pancake flips that sort_ `arr`. Any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct.",
    "examples": [
      {
        "input": "arr = \\[3,2,4,1\\]",
        "output": "\\[4,2,4,3\\]",
        "explanation": ""
      },
      {
        "input": "arr = \\[1,2,3\\]",
        "output": "\\[\\]",
        "explanation": "The input is already sorted, so there is no need to flip anything."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 100`",
      "`1 <= arr[i] <= arr.length`",
      "All integers in `arr` are unique (i.e. `arr` is a permutation of the integers from `1` to `arr.length`)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "970",
    "slug": "powerful-integers",
    "title": "Powerful Integers",
    "difficulty": "Medium",
    "description": "Given three integers `x`, `y`, and `bound`, return _a list of all the **powerful integers** that have a value less than or equal to_ `bound`. An integer is **powerful** if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`. You may return the answer in **any order**. In your answer, each value should occur **at most once**.",
    "examples": [
      {
        "input": "x = 2, y = 3, bound = 10",
        "output": "\\[2,3,4,5,7,9,10\\]",
        "explanation": ""
      },
      {
        "input": "x = 3, y = 5, bound = 15",
        "output": "\\[2,4,6,8,10,14\\]"
      }
    ],
    "constraints": [
      "`1 <= x, y <= 100`",
      "`0 <= bound <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "971",
    "slug": "flip-binary-tree-to-match-preorder-traversal",
    "title": "Flip Binary Tree To Match Preorder Traversal",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. You are also given a sequence of `n` values `voyage`, which is the **desired** [**pre-order traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order) of the binary tree. Any node in the binary tree can be **flipped** by swapping its left and right subtrees. For example, flipping node 1 will have the following effect: Flip the **smallest** number of nodes so that the **pre-order traversal** of the tree **matches** `voyage`. Return _a list of the values of all **flipped** nodes. You may return the answer in **any order**. If it is **impossible** to flip the nodes in the tree to make the pre-order traversal match_ `voyage`_, return the list_ `[-1]`.",
    "examples": [
      {
        "input": "root = \\[1,2\\], voyage = \\[2,1\\]",
        "output": "\\[-1\\]",
        "explanation": "It is impossible to flip the nodes such that the pre-order traversal matches voyage."
      },
      {
        "input": "root = \\[1,2,3\\], voyage = \\[1,3,2\\]",
        "output": "\\[1\\]",
        "explanation": "Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage."
      },
      {
        "input": "root = \\[1,2,3\\], voyage = \\[1,2,3\\]",
        "output": "\\[\\]",
        "explanation": "The tree's pre-order traversal already matches voyage, so no nodes need to be flipped."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is `n`.",
      "`n == voyage.length`",
      "`1 <= n <= 100`",
      "`1 <= Node.val, voyage[i] <= n`",
      "All the values in the tree are unique.",
      "All the values in `voyage` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "972",
    "slug": "equal-rational-numbers",
    "title": "Equal Rational Numbers",
    "difficulty": "Hard",
    "description": "Given two strings `s` and `t`, each of which represents a non-negative rational number, return `true` if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number. A **rational number** can be represented using up to three parts: , , and a . The number will be represented in one of the following three ways: *  *  For example, `12`, `0`, and `123`. *  `**<.>**` *  For example, `0.5`, `1.`, `2.12`, and `123.0001`. *  `**<.>****<(>****<)>**` *  For example, `0.1(6)`, `1.(9)`, `123.00(1212)`. The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example: *  `1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`.",
    "examples": [
      {
        "input": "s =  \"0.(52) \", t =  \"0.5(25) \"",
        "output": "true",
        "explanation": "Because  \"0.(52) \" represents 0.52525252..., and  \"0.5(25) \" represents 0.52525252525..... , the strings represent the same number."
      },
      {
        "input": "s =  \"0.1666(6) \", t =  \"0.166(66) \"",
        "output": "true"
      },
      {
        "input": "s =  \"0.9(9) \", t =  \"1. \"",
        "output": "true",
        "explanation": "\"0.9(9) \" represents 0.999999999... repeated forever, which equals 1.  \\[[See this link for an explanation.](https://en.wikipedia.org/wiki/0.999...)\\]"
      }
    ],
    "constraints": [
      "Each part consists only of digits.",
      "The does not have leading zeros (except for the zero itself).",
      "`1 <= .length <= 4`",
      "`0 <= .length <= 4`",
      "`1 <= .length <= 4`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "973",
    "slug": "k-closest-points-to-origin",
    "title": "K Closest Points to Origin",
    "difficulty": "Medium",
    "description": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`. The distance between two points on the **X-Y** plane is the Euclidean distance (i.e., `\u221a(x1 - x2)2 + (y1 - y2)2`). You may return the answer in **any order**. The answer is **guaranteed** to be **unique** (except for the order that it is in).",
    "examples": [
      {
        "input": "points = \\[\\[1,3\\],\\[-2,2\\]\\], k = 1",
        "output": "\\[\\[-2,2\\]\\]",
        "explanation": ""
      },
      {
        "input": "points = \\[\\[3,3\\],\\[5,-1\\],\\[-2,4\\]\\], k = 2",
        "output": "\\[\\[3,3\\],\\[-2,4\\]\\]",
        "explanation": "The answer \\[\\[-2,4\\],\\[3,3\\]\\] would also be accepted."
      }
    ],
    "constraints": [
      "`1 <= k <= points.length <= 104`",
      "`-104 < xi, yi < 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "974",
    "slug": "subarray-sums-divisible-by-k",
    "title": "Subarray Sums Divisible by K",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and an integer `k`, return _the number of non-empty **subarrays** that have a sum divisible by_ `k`. A **subarray** is a **contiguous** part of an array.",
    "examples": [
      {
        "input": "nums = \\[4,5,0,-2,-3,1\\], k = 5",
        "output": "7",
        "explanation": "There are 7 subarrays with a sum divisible by k = 5:"
      },
      {
        "input": "nums = \\[5\\], k = 9",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`-104 <= nums[i] <= 104`",
      "`2 <= k <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "975",
    "slug": "odd-even-jump",
    "title": "Odd Even Jump",
    "difficulty": "Hard",
    "description": "You are given an integer array `arr`. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called **odd-numbered jumps**, and the (2nd, 4th, 6th, ...) jumps in the series are called **even-numbered jumps**. Note that the **jumps** are numbered, not the indices. You may jump forward from index `i` to index `j` (with `i < j`) in the following way: *  During **odd-numbered jumps** (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`. *  During **even-numbered jumps** (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`. *  It may be the case that for some index `i`, there are no legal jumps. A starting index is **good** if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly 0 or more than once). Return _the number of **good** starting indices_.",
    "examples": [
      {
        "input": "arr = \\[10,13,12,14,15\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "arr = \\[2,3,1,1,4\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "arr = \\[5,1,3,4,2\\]",
        "output": "3",
        "explanation": "We can reach the end from starting indices 1, 2, and 4."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 2  104`",
      "`0 <= arr[i] < 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "976",
    "slug": "largest-perimeter-triangle",
    "title": "Largest Perimeter Triangle",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, return _the largest perimeter of a triangle with a non-zero area, formed from three of these lengths_. If it is impossible to form any triangle of a non-zero area, return `0`.",
    "examples": [
      {
        "input": "nums = \\[2,1,2\\]",
        "output": "5",
        "explanation": "You can form a triangle with three side lengths: 1, 2, and 2."
      },
      {
        "input": "nums = \\[1,2,1,10\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 104`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "977",
    "slug": "squares-of-a-sorted-array",
    "title": "Squares of a Sorted Array",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` sorted in **non-decreasing** order, return _an array of **the squares of each number** sorted in non-decreasing order_.",
    "examples": [
      {
        "input": "nums = \\[-4,-1,0,3,10\\]",
        "output": "\\[0,1,9,16,100\\]",
        "explanation": "After squaring, the array becomes \\[16,1,0,9,100\\]."
      },
      {
        "input": "nums = \\[-7,-3,2,3,11\\]",
        "output": "\\[4,9,9,49,121\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-104 <= nums[i] <= 104`",
      "`nums` is sorted in non-decreasing order.",
      "Follow up: Squaring each element and sorting the new array is very trivial, could you find an `O(n)` solution using a different approach?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "978",
    "slug": "longest-turbulent-subarray",
    "title": "Longest Turbulent Subarray",
    "difficulty": "Medium",
    "description": "Given an integer array `arr`, return _the length of a maximum size turbulent subarray of_ `arr`. A subarray is **turbulent** if the comparison sign flips between each adjacent pair of elements in the subarray. More formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if: *  For `i <= k < j`: *  `arr[k] > arr[k + 1]` when `k` is odd, and *  `arr[k] < arr[k + 1]` when `k` is even. *  Or, for `i <= k < j`: *  `arr[k] > arr[k + 1]` when `k` is even, and *  `arr[k] < arr[k + 1]` when `k` is odd.",
    "examples": [
      {
        "input": "arr = \\[9,4,2,10,7,8,8,1,9\\]",
        "output": "5",
        "explanation": "arr\\[1\\] > arr\\[2\\] < arr\\[3\\] > arr\\[4\\] < arr\\[5\\]"
      },
      {
        "input": "arr = \\[4,8,12,16\\]",
        "output": "2"
      },
      {
        "input": "arr = \\[100\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 4  104`",
      "`0 <= arr[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "979",
    "slug": "distribute-coins-in-binary-tree",
    "title": "Distribute Coins in Binary Tree",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins. There are `n` coins in total throughout the whole tree. In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent. Return _the **minimum** number of moves required to make every node have **exactly** one coin_.",
    "examples": [
      {
        "input": "root = \\[3,0,0\\]",
        "output": "2",
        "explanation": "From the root of the tree, we move one coin to its left child, and one coin to its right child."
      },
      {
        "input": "root = \\[0,3,0\\]",
        "output": "3",
        "explanation": "From the left child of the root, we move two coins to the root \\[taking two moves\\]. Then, we move one coin from the root of the tree to the right child."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is `n`.",
      "`1 <= n <= 100`",
      "`0 <= Node.val <= n`",
      "The sum of all `Node.val` is `n`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "980",
    "slug": "unique-paths-iii",
    "title": "Unique Paths III",
    "difficulty": "Hard",
    "description": "You are given an `m x n` integer array `grid` where `grid[i][j]` could be: *  `1` representing the starting square. There is exactly one starting square. *  `2` representing the ending square. There is exactly one ending square. *  `0` representing empty squares we can walk over. *  `-1` representing obstacles that we cannot walk over. Return _the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,0,0,0\\],\\[0,0,0,0\\],\\[0,0,2,-1\\]\\]",
        "output": "2",
        "explanation": "We have the following two paths:"
      },
      {
        "input": "grid = \\[\\[1,0,0,0\\],\\[0,0,0,0\\],\\[0,0,0,2\\]\\]",
        "output": "4",
        "explanation": "We have the following four paths:"
      },
      {
        "input": "grid = \\[\\[0,1\\],\\[2,0\\]\\]",
        "output": "0",
        "explanation": "There is no path that walks over every empty square exactly once."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 20`",
      "`1 <= m  n <= 20`",
      "`-1 <= grid[i][j] <= 2`",
      "There is exactly one starting cell and one ending cell."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "981",
    "slug": "time-based-key-value-store",
    "title": "Time Based Key-Value Store",
    "difficulty": "Medium",
    "description": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp. Implement the `TimeMap` class: *  `TimeMap()` Initializes the object of the data structure. *  `void set(String key, String value, int timestamp)` Stores the key `key` with the value `value` at the given time `timestamp`. *  `String get(String key, int timestamp)` Returns a value such that `set` was called previously, with `timestamp_prev <= timestamp`. If there are multiple such values, it returns the value associated with the largest `timestamp_prev`. If there are no values, it returns `\" \"`.",
    "examples": [],
    "constraints": [
      "`1 <= key.length, value.length <= 100`",
      "`key` and `value` consist of lowercase English letters and digits.",
      "`1 <= timestamp <= 107`",
      "All the timestamps `timestamp` of `set` are strictly increasing.",
      "At most `2  105` calls will be made to `set` and `get`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "982",
    "slug": "triples-with-bitwise-and-equal-to-zero",
    "title": "Triples with Bitwise AND Equal To Zero",
    "difficulty": "Hard",
    "description": "Given an integer array nums, return _the number of **AND triples**_. An **AND triple** is a triple of indices `(i, j, k)` such that: *  `0 <= i < nums.length` *  `0 <= j < nums.length` *  `0 <= k < nums.length` *  `nums[i] & nums[j] & nums[k] == 0`, where `&` represents the bitwise-AND operator.",
    "examples": [
      {
        "input": "nums = \\[2,1,3\\]",
        "output": "12",
        "explanation": "We could choose the following i, j, k triples:"
      },
      {
        "input": "nums = \\[0,0,0\\]",
        "output": "27"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] < 216`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "983",
    "slug": "minimum-cost-for-tickets",
    "title": "Minimum Cost For Tickets",
    "difficulty": "Medium",
    "description": "You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array `days`. Each day is an integer from `1` to `365`. Train tickets are sold in **three different ways**: *  a **1-day** pass is sold for `costs[0]` dollars, *  a **7-day** pass is sold for `costs[1]` dollars, and *  a **30-day** pass is sold for `costs[2]` dollars. The passes allow that many days of consecutive travel. *  For example, if we get a **7-day** pass on day `2`, then we can travel for `7` days: `2`, `3`, `4`, `5`, `6`, `7`, and `8`. Return _the minimum number of dollars you need to travel every day in the given list of days_.",
    "examples": [
      {
        "input": "days = \\[1,4,6,7,8,20\\], costs = \\[2,7,15\\]",
        "output": "11",
        "explanation": "For example, here is one way to buy passes that lets you travel your travel plan:"
      },
      {
        "input": "days = \\[1,2,3,4,5,6,7,8,9,10,30,31\\], costs = \\[2,7,15\\]",
        "output": "17",
        "explanation": "For example, here is one way to buy passes that lets you travel your travel plan:"
      }
    ],
    "constraints": [
      "`1 <= days.length <= 365`",
      "`1 <= days[i] <= 365`",
      "`days` is in strictly increasing order.",
      "`costs.length == 3`",
      "`1 <= costs[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "984",
    "slug": "string-without-aaa-or-bbb",
    "title": "String Without AAA or BBB",
    "difficulty": "Medium",
    "description": "Given two integers `a` and `b`, return **any** string `s` such that: *  `s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters, *  The substring `'aaa'` does not occur in `s`, and *  The substring `'bbb'` does not occur in `s`.",
    "examples": [
      {
        "input": "a = 1, b = 2",
        "output": "\"abb \"",
        "explanation": "\"abb \",  \"bab \" and  \"bba \" are all correct answers."
      },
      {
        "input": "a = 4, b = 1",
        "output": "\"aabaa \""
      }
    ],
    "constraints": [
      "`0 <= a, b <= 100`",
      "It is guaranteed such an `s` exists for the given `a` and `b`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "985",
    "slug": "sum-of-even-numbers-after-queries",
    "title": "Sum of Even Numbers After Queries",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an array `queries` where `queries[i] = [vali, indexi]`. For each query `i`, first, apply `nums[indexi] = nums[indexi] + vali`, then print the sum of the even values of `nums`. Return _an integer array_ `answer` _where_ `answer[i]` _is the answer to the_ `ith` _query_.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\], queries = \\[\\[1,0\\],\\[-3,1\\],\\[-4,0\\],\\[2,3\\]\\]",
        "output": "\\[8,6,2,4\\]",
        "explanation": "At the beginning, the array is \\[1,2,3,4\\]."
      },
      {
        "input": "nums = \\[1\\], queries = \\[\\[4,0\\]\\]",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-104 <= nums[i] <= 104`",
      "`1 <= queries.length <= 104`",
      "`-104 <= vali <= 104`",
      "`0 <= indexi < nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "986",
    "slug": "interval-list-intersections",
    "title": "Interval List Intersections",
    "difficulty": "Medium",
    "description": "You are given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each list of intervals is pairwise **disjoint** and in **sorted order**. Return _the intersection of these two interval lists_. A **closed interval** `[a, b]` (with `a <= b`) denotes the set of real numbers `x` with `a <= x <= b`. The **intersection** of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.",
    "examples": [
      {
        "input": "firstList = \\[\\[0,2\\],\\[5,10\\],\\[13,23\\],\\[24,25\\]\\], secondList = \\[\\[1,5\\],\\[8,12\\],\\[15,24\\],\\[25,26\\]\\]",
        "output": "\\[\\[1,2\\],\\[5,5\\],\\[8,10\\],\\[15,23\\],\\[24,24\\],\\[25,25\\]\\]"
      },
      {
        "input": "firstList = \\[\\[1,3\\],\\[5,9\\]\\], secondList = \\[\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`0 <= firstList.length, secondList.length <= 1000`",
      "`firstList.length + secondList.length >= 1`",
      "`0 <= starti < endi <= 109`",
      "`endi < starti+1`",
      "`0 <= startj < endj <= 109`",
      "`endj < startj+1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "987",
    "slug": "vertical-order-traversal-of-a-binary-tree",
    "title": "Vertical Order Traversal of a Binary Tree",
    "difficulty": "Hard",
    "description": "Given the `root` of a binary tree, calculate the **vertical order traversal** of the binary tree. For each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`. The **vertical order traversal** of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values. Return _the **vertical order traversal** of the binary tree_.",
    "examples": [
      {
        "input": "root = \\[3,9,20,null,null,15,7\\]",
        "output": "\\[\\[9\\],\\[3,15\\],\\[20\\],\\[7\\]\\]",
        "explanation": ""
      },
      {
        "input": "root = \\[1,2,3,4,5,6,7\\]",
        "output": "\\[\\[4\\],\\[2\\],\\[1,5,6\\],\\[3\\],\\[7\\]\\]",
        "explanation": ""
      },
      {
        "input": "root = \\[1,2,3,4,6,5,7\\]",
        "output": "\\[\\[4\\],\\[2\\],\\[1,5,6\\],\\[3\\],\\[7\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 1000]`.",
      "`0 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "988",
    "slug": "smallest-string-starting-from-leaf",
    "title": "Smallest String Starting From Leaf",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary tree where each node has a value in the range `[0, 25]` representing the letters `'a'` to `'z'`. Return _the **lexicographically smallest** string that starts at a leaf of this tree and ends at the root_. As a reminder, any shorter prefix of a string is **lexicographically smaller**. *  For example, `\"ab \"` is lexicographically smaller than `\"aba \"`. A leaf of a node is a node that has no children.",
    "examples": [
      {
        "input": "root = \\[0,1,2,3,4,3,4\\]",
        "output": "\"dba \""
      },
      {
        "input": "root = \\[25,1,3,1,3,0,2\\]",
        "output": "\"adz \""
      },
      {
        "input": "root = \\[2,2,1,null,1,0,null,0\\]",
        "output": "\"abc \""
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 8500]`.",
      "`0 <= Node.val <= 25`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "989",
    "slug": "add-to-array-form-of-integer",
    "title": "Add to Array-Form of Integer",
    "difficulty": "Easy",
    "description": "The **array-form** of an integer `num` is an array representing its digits in left to right order. *  For example, for `num = 1321`, the array form is `[1,3,2,1]`. Given `num`, the **array-form** of an integer, and an integer `k`, return _the **array-form** of the integer_ `num + k`.",
    "examples": [
      {
        "input": "num = \\[1,2,0,0\\], k = 34",
        "output": "\\[1,2,3,4\\]",
        "explanation": "1200 + 34 = 1234"
      },
      {
        "input": "num = \\[2,7,4\\], k = 181",
        "output": "\\[4,5,5\\]",
        "explanation": "274 + 181 = 455"
      },
      {
        "input": "num = \\[2,1,5\\], k = 806",
        "output": "\\[1,0,2,1\\]",
        "explanation": "215 + 806 = 1021"
      }
    ],
    "constraints": [
      "`1 <= num.length <= 104`",
      "`0 <= num[i] <= 9`",
      "`num` does not contain any leading zeros except for the zero itself.",
      "`1 <= k <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "990",
    "slug": "satisfiability-of-equality-equations",
    "title": "Satisfiability of Equality Equations",
    "difficulty": "Medium",
    "description": "You are given an array of strings `equations` that represent relationships between variables where each string `equations[i]` is of length `4` and takes one of two different forms: `\"xi==yi \"` or `\"xi!=yi \"`.Here, `xi` and `yi` are lowercase letters (not necessarily different) that represent one-letter variable names. Return `true` _if it is possible to assign integers to variable names so as to satisfy all the given equations, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "equations = \\[ \"a==b \", \"b!=a \"\\]",
        "output": "false",
        "explanation": "If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second."
      },
      {
        "input": "equations = \\[ \"b==a \", \"a==b \"\\]",
        "output": "true",
        "explanation": "We could assign a = 1 and b = 1 to satisfy both equations."
      }
    ],
    "constraints": [
      "`1 <= equations.length <= 500`",
      "`equations[i].length == 4`",
      "`equations[i][0]` is a lowercase letter.",
      "`equations[i][1]` is either `'='` or `'!'`.",
      "`equations[i][2]` is `'='`.",
      "`equations[i][3]` is a lowercase letter."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "991",
    "slug": "broken-calculator",
    "title": "Broken Calculator",
    "difficulty": "Medium",
    "description": "There is a broken calculator that has the integer `startValue` on its display initially. In one operation, you can: *  multiply the number on display by `2`, or *  subtract `1` from the number on display. Given two integers `startValue` and `target`, return _the minimum number of operations needed to display_ `target` _on the calculator_.",
    "examples": [
      {
        "input": "startValue = 2, target = 3",
        "output": "2",
        "explanation": "Use double operation and then decrement operation {2 -> 4 -> 3}."
      },
      {
        "input": "startValue = 5, target = 8",
        "output": "2",
        "explanation": "Use decrement and then double {5 -> 4 -> 8}."
      },
      {
        "input": "startValue = 3, target = 10",
        "output": "3",
        "explanation": "Use double, decrement and double {3 -> 6 -> 5 -> 10}."
      }
    ],
    "constraints": [
      "`1 <= startValue, target <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "992",
    "slug": "subarrays-with-k-different-integers",
    "title": "Subarrays with K Different Integers",
    "difficulty": "Hard",
    "description": "Given an integer array `nums` and an integer `k`, return _the number of **good subarrays** of_ `nums`. A **good array** is an array where the number of different integers in that array is exactly `k`. *  For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`. A **subarray** is a **contiguous** part of an array.",
    "examples": [
      {
        "input": "nums = \\[1,2,1,2,3\\], k = 2",
        "output": "7",
        "explanation": "Subarrays formed with exactly 2 different integers: \\[1,2\\], \\[2,1\\], \\[1,2\\], \\[2,3\\], \\[1,2,1\\], \\[2,1,2\\], \\[1,2,1,2\\]"
      },
      {
        "input": "nums = \\[1,2,1,3,4\\], k = 3",
        "output": "3",
        "explanation": "Subarrays formed with exactly 3 different integers: \\[1,2,1,3\\], \\[2,1,3\\], \\[1,3,4\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  104`",
      "`1 <= nums[i], k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "993",
    "slug": "cousins-in-binary-tree",
    "title": "Cousins in Binary Tree",
    "difficulty": "Easy",
    "description": "Given the `root` of a binary tree with unique values and the values of two different nodes of the tree `x` and `y`, return `true` _if the nodes corresponding to the values_ `x` _and_ `y` _in the tree are **cousins**, or_ `false` _otherwise._ Two nodes of a binary tree are **cousins** if they have the same depth with different parents. Note that in a binary tree, the root node is at the depth `0`, and children of each depth `k` node are at the depth `k + 1`.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4\\], x = 4, y = 3",
        "output": "false"
      },
      {
        "input": "root = \\[1,2,3,null,4,null,5\\], x = 5, y = 4",
        "output": "true"
      },
      {
        "input": "root = \\[1,2,3,null,4\\], x = 2, y = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 100]`.",
      "`1 <= Node.val <= 100`",
      "Each node has a unique value.",
      "`x != y`",
      "`x` and `y` are exist in the tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "994",
    "slug": "rotting-oranges",
    "title": "Rotting Oranges",
    "difficulty": "Medium",
    "description": "You are given an `m x n` `grid` where each cell can have one of three values: *  `0` representing an empty cell, *  `1` representing a fresh orange, or *  `2` representing a rotten orange. Every minute, any fresh orange that is **4-directionally adjacent** to a rotten orange becomes rotten. Return _the minimum number of minutes that must elapse until no cell has a fresh orange_. If _this is impossible, return_ `-1`.",
    "examples": [
      {
        "input": "grid = \\[\\[2,1,1\\],\\[1,1,0\\],\\[0,1,1\\]\\]",
        "output": "4"
      },
      {
        "input": "grid = \\[\\[2,1,1\\],\\[0,1,1\\],\\[1,0,1\\]\\]",
        "output": "-1",
        "explanation": "The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally."
      },
      {
        "input": "grid = \\[\\[0,2\\]\\]",
        "output": "0",
        "explanation": "Since there are already no fresh oranges at minute 0, the answer is just 0."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 10`",
      "`grid[i][j]` is `0`, `1`, or `2`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "995",
    "slug": "minimum-number-of-k-consecutive-bit-flips",
    "title": "Minimum Number of K Consecutive Bit Flips",
    "difficulty": "Hard",
    "description": "You are given a binary array `nums` and an integer `k`. A **k-bit flip** is choosing a **subarray** of length `k` from `nums` and simultaneously changing every `0` in the subarray to `1`, and every `1` in the subarray to `0`. Return _the minimum number of **k-bit flips** required so that there is no_ `0` _in the array_. If it is not possible, return `-1`. A **subarray** is a **contiguous** part of an array.",
    "examples": [
      {
        "input": "nums = \\[0,1,0\\], k = 1",
        "output": "2",
        "explanation": "Flip nums\\[0\\], then flip nums\\[2\\]."
      },
      {
        "input": "nums = \\[1,1,0\\], k = 2",
        "output": "-1",
        "explanation": "No matter how we flip subarrays of size 2, we cannot make the array become \\[1,1,1\\]."
      },
      {
        "input": "nums = \\[0,0,0,1,0,1,1,0\\], k = 3",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "996",
    "slug": "number-of-squareful-arrays",
    "title": "Number of Squareful Arrays",
    "difficulty": "Hard",
    "description": "An array is **squareful** if the sum of every pair of adjacent elements is a **perfect square**. Given an integer array nums, return _the number of permutations of_ `nums` _that are **squareful**_. Two permutations `perm1` and `perm2` are different if there is some index `i` such that `perm1[i] != perm2[i]`.",
    "examples": [
      {
        "input": "nums = \\[1,17,8\\]",
        "output": "2",
        "explanation": "\\[1,8,17\\] and \\[17,8,1\\] are the valid permutations."
      },
      {
        "input": "nums = \\[2,2,2\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 12`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "997",
    "slug": "find-the-town-judge",
    "title": "Find the Town Judge",
    "difficulty": "Easy",
    "description": "In a town, there are `n` people labeled from `1` to `n`. There is a rumor that one of these people is secretly the town judge. If the town judge exists, then: 1. The town judge trusts nobody. 2. Everybody (except for the town judge) trusts the town judge. 3. There is exactly one person that satisfies properties **1** and **2**. You are given an array `trust` where `trust[i] = [ai, bi]` representing that the person labeled `ai` trusts the person labeled `bi`. If a trust relationship does not exist in `trust` array, then such a trust relationship does not exist. Return _the label of the town judge if the town judge exists and can be identified, or return_ `-1` _otherwise_.",
    "examples": [
      {
        "input": "n = 2, trust = \\[\\[1,2\\]\\]",
        "output": "2"
      },
      {
        "input": "n = 3, trust = \\[\\[1,3\\],\\[2,3\\]\\]",
        "output": "3"
      },
      {
        "input": "n = 3, trust = \\[\\[1,3\\],\\[2,3\\],\\[3,1\\]\\]",
        "output": "-1"
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`",
      "`0 <= trust.length <= 104`",
      "`trust[i].length == 2`",
      "All the pairs of `trust` are unique.",
      "`ai != bi`",
      "`1 <= ai, bi <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "998",
    "slug": "maximum-binary-tree-ii",
    "title": "Maximum Binary Tree II",
    "difficulty": "Medium",
    "description": "A **maximum tree** is a tree where every node has a value greater than any other value in its subtree. You are given the `root` of a maximum binary tree and an integer `val`. Just as in the [previous problem](https://leetcode.com/problems/maximum-binary-tree/), the given tree was constructed from a list `a` (`root = Construct(a)`) recursively with the following `Construct(a)` routine: *  If `a` is empty, return `null`. *  Otherwise, let `a[i]` be the largest element of `a`. Create a `root` node with the value `a[i]`. *  The left child of `root` will be `Construct([a[0], a[1], ..., a[i - 1]])`. *  The right child of `root` will be `Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])`. *  Return `root`. Note that we were not given `a` directly, only a root node `root = Construct(a)`. Suppose `b` is a copy of `a` with the value `val` appended to it. It is guaranteed that `b` has unique values. Return `Construct(b)`.",
    "examples": [
      {
        "input": "root = \\[4,1,3,null,null,2\\], val = 5",
        "output": "\\[5,4,null,1,3,null,null,2\\]",
        "explanation": "a = \\[1,4,2,3\\], b = \\[1,4,2,3,5\\]"
      },
      {
        "input": "root = \\[5,2,4,null,1\\], val = 3",
        "output": "\\[5,2,4,null,1,null,3\\]",
        "explanation": "a = \\[2,1,5,4\\], b = \\[2,1,5,4,3\\]"
      },
      {
        "input": "root = \\[5,2,3,null,1\\], val = 4",
        "output": "\\[5,2,4,null,1,3\\]",
        "explanation": "a = \\[2,1,5,3\\], b = \\[2,1,5,3,4\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 100]`.",
      "`1 <= Node.val <= 100`",
      "All the values of the tree are unique.",
      "`1 <= val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "999",
    "slug": "available-captures-for-rook",
    "title": "Available Captures for Rook",
    "difficulty": "Easy",
    "description": "On an `8 x 8` chessboard, there is **exactly one** white rook `'R'` and some number of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`. When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered **attacking** a pawn if the rook can capture the pawn on the rook's turn. The **number of available captures** for the white rook is the number of pawns that the rook is **attacking**. Return _the **number of available captures** for the white rook_.",
    "examples": [
      {
        "input": "board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"R \", \". \", \". \", \". \", \"p \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\]\\]",
        "output": "3",
        "explanation": "In this example, the rook is attacking all the pawns."
      },
      {
        "input": "board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"p \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"B \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"B \", \"R \", \"B \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"B \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"p \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\]\\]",
        "output": "0",
        "explanation": "The bishops are blocking the rook from attacking any of the pawns."
      },
      {
        "input": "board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \"p \", \"p \", \". \", \"R \", \". \", \"p \", \"B \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"B \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\]\\]",
        "output": "3",
        "explanation": "The rook is attacking the pawns at positions b5, d6, and f5."
      }
    ],
    "constraints": [
      "`board.length == 8`",
      "`board[i].length == 8`",
      "`board[i][j]` is either `'R'`, `'.'`, `'B'`, or `'p'`",
      "There is exactly one cell with `board[i][j] == 'R'`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1000",
    "slug": "minimum-cost-to-merge-stones",
    "title": "Minimum Cost to Merge Stones",
    "difficulty": "Hard",
    "description": "There are `n` piles of `stones` arranged in a row. The `ith` pile has `stones[i]` stones. A move consists of merging exactly `k` **consecutive** piles into one pile, and the cost of this move is equal to the total number of stones in these `k` piles. Return _the minimum cost to merge all piles of stones into one pile_. If it is impossible, return `-1`.",
    "examples": [
      {
        "input": "stones = \\[3,2,4,1\\], k = 2",
        "output": "20",
        "explanation": "We start with \\[3, 2, 4, 1\\]."
      },
      {
        "input": "stones = \\[3,2,4,1\\], k = 3",
        "output": "-1",
        "explanation": "After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible."
      },
      {
        "input": "stones = \\[3,5,1,2,6\\], k = 3",
        "output": "25",
        "explanation": "We start with \\[3, 5, 1, 2, 6\\]."
      }
    ],
    "constraints": [
      "`n == stones.length`",
      "`1 <= n <= 30`",
      "`1 <= stones[i] <= 100`",
      "`2 <= k <= 30`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1001",
    "slug": "grid-illumination",
    "title": "Grid Illumination",
    "difficulty": "Hard",
    "description": "There is a 2D `grid` of size `n x n` where each cell of this grid has a lamp that is initially **turned off**. You are given a 2D array of lamp positions `lamps`, where `lamps[i] = [rowi, coli]` indicates that the lamp at `grid[rowi][coli]` is **turned on**. Even if the same lamp is listed more than once, it is turned on. When a lamp is turned on, it **illuminates its cell** and **all other cells** in the same **row, column, or diagonal**. You are also given another 2D array `queries`, where `queries[j] = [rowj, colj]`. For the `jth` query, determine whether `grid[rowj][colj]` is illuminated or not. After answering the `jth` query, **turn off** the lamp at `grid[rowj][colj]` and its **8 adjacent lamps** if they exist. A lamp is adjacent if its cell shares either a side or corner with `grid[rowj][colj]`. Return _an array of integers_ `ans`_,_ _where_ `ans[j]` _should be_ `1` _if the cell in the_ `jth` _query was illuminated, or_ `0` _if the lamp was not._",
    "examples": [
      {
        "input": "n = 5, lamps = \\[\\[0,0\\],\\[4,4\\]\\], queries = \\[\\[1,1\\],\\[1,0\\]\\]",
        "output": "\\[1,0\\]",
        "explanation": "We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid\\[0\\]\\[0\\] then turning on the lamp at grid\\[4\\]\\[4\\]."
      },
      {
        "input": "n = 5, lamps = \\[\\[0,0\\],\\[4,4\\]\\], queries = \\[\\[1,1\\],\\[1,1\\]\\]",
        "output": "\\[1,1\\]"
      },
      {
        "input": "n = 5, lamps = \\[\\[0,0\\],\\[0,4\\]\\], queries = \\[\\[0,4\\],\\[0,1\\],\\[1,4\\]\\]",
        "output": "\\[1,1,0\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 109`",
      "`0 <= lamps.length <= 20000`",
      "`0 <= queries.length <= 20000`",
      "`lamps[i].length == 2`",
      "`0 <= rowi, coli < n`",
      "`queries[j].length == 2`",
      "`0 <= rowj, colj < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1002",
    "slug": "find-common-characters",
    "title": "Find Common Characters",
    "difficulty": "Easy",
    "description": "Given a string array `words`, return _an array of all characters that show up in all strings within the_ `words` _(including duplicates)_. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "words = \\[\"bella\",\"label\",\"roller\"\\]",
        "output": "\\[\"e\",\"l\",\"l\"\\]"
      },
      {
        "input": "words = \\[\"cool\",\"lock\",\"cook\"\\]",
        "output": "\\[\"c\",\"o\"\\]"
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 100`",
      "`words[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1003",
    "slug": "check-if-word-is-valid-after-substitutions",
    "title": "Check If Word Is Valid After Substitutions",
    "difficulty": "Medium",
    "description": "Given a string `s`, determine if it is **valid**. A string `s` is **valid** if, starting with an empty string `t = \" \"`, you can **transform** `t` **into** `s` after performing the following operation **any number of times**: *  Insert string `\"abc \"` into any position in `t`. More formally, `t` becomes `tleft + \"abc \" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be **empty**. Return `true` _if_ `s` _is a **valid** string, otherwise, return_ `false`.",
    "examples": [
      {
        "input": "s =  \"aabcbc \"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s =  \"abcabcababcc \"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s =  \"abccba \"",
        "output": "false",
        "explanation": "It is impossible to get  \"abccba \" using the operation."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 2  104`",
      "`s` consists of letters `'a'`, `'b'`, and `'c'`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1004",
    "slug": "max-consecutive-ones-iii",
    "title": "Max Consecutive Ones III",
    "difficulty": "Medium",
    "description": "Given a binary array `nums` and an integer `k`, return _the maximum number of consecutive_ `1`_'s in the array if you can flip at most_ `k` `0`'s.",
    "examples": [
      {
        "input": "nums = \\[1,1,1,0,0,0,1,1,1,1,0\\], k = 2",
        "output": "6",
        "explanation": "\\[1,1,1,0,0,**1**,1,1,1,1,**1**\\]"
      },
      {
        "input": "nums = \\[0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1\\], k = 3",
        "output": "10",
        "explanation": "\\[0,0,1,1,**1**,**1**,1,1,1,**1**,1,1,0,0,0,1,1,1,1\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`nums[i]` is either `0` or `1`.",
      "`0 <= k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1005",
    "slug": "maximize-sum-of-array-after-k-negations",
    "title": "Maximize Sum Of Array After K Negations",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` and an integer `k`, modify the array in the following way: *  choose an index `i` and replace `nums[i]` with `-nums[i]`. You should apply this process exactly `k` times. You may choose the same index `i` multiple times. Return _the largest possible sum of the array after modifying it in this way_.",
    "examples": [
      {
        "input": "nums = \\[4,2,3\\], k = 1",
        "output": "5",
        "explanation": "Choose index 1 and nums becomes \\[4,-2,3\\]."
      },
      {
        "input": "nums = \\[3,-1,0,2\\], k = 3",
        "output": "6",
        "explanation": "Choose indices (1, 2, 2) and nums becomes \\[3,1,0,2\\]."
      },
      {
        "input": "nums = \\[2,-3,-1,5,-4\\], k = 2",
        "output": "13",
        "explanation": "Choose indices (1, 4) and nums becomes \\[2,3,-1,5,4\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`-100 <= nums[i] <= 100`",
      "`1 <= k <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1006",
    "slug": "clumsy-factorial",
    "title": "Clumsy Factorial",
    "difficulty": "Medium",
    "description": "The **factorial** of a positive integer `n` is the product of all positive integers less than or equal to `n`. *  For example, `factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`. We make a **clumsy factorial** using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply `'*'`, divide `'/'`, add `'+'`, and subtract `'-'` in this order. *  For example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`. However, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right. Additionally, the division that we use is floor division such that `10 * 9 / 8 = 90 / 8 = 11`. Given an integer `n`, return _the clumsy factorial of_ `n`.",
    "examples": [
      {
        "input": "n = 4",
        "output": "7",
        "explanation": "7 = 4 \\* 3 / 2 + 1"
      },
      {
        "input": "n = 10",
        "output": "12",
        "explanation": "12 = 10 \\* 9 / 8 + 7 - 6 \\* 5 / 4 + 3 - 2 \\* 1"
      }
    ],
    "constraints": [
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1007",
    "slug": "minimum-domino-rotations-for-equal-row",
    "title": "Minimum Domino Rotations For Equal Row",
    "difficulty": "Medium",
    "description": "In a row of dominoes, `tops[i]` and `bottoms[i]` represent the top and bottom halves of the `ith` domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.) We may rotate the `ith` domino, so that `tops[i]` and `bottoms[i]` swap values. Return the minimum number of rotations so that all the values in `tops` are the same, or all the values in `bottoms` are the same. If it cannot be done, return `-1`.",
    "examples": [
      {
        "input": "tops = \\[2,1,2,4,2,2\\], bottoms = \\[5,2,6,2,3,2\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "tops = \\[3,5,1,2,3\\], bottoms = \\[3,6,3,3,4\\]",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= tops.length <= 2  104`",
      "`bottoms.length == tops.length`",
      "`1 <= tops[i], bottoms[i] <= 6`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1008",
    "slug": "construct-binary-search-tree-from-preorder-traversal",
    "title": "Construct Binary Search Tree from Preorder Traversal",
    "difficulty": "Medium",
    "description": "Given an array of integers preorder, which represents the **preorder traversal** of a BST (i.e., **binary search tree**), construct the tree and return _its root_. It is **guaranteed** that there is always possible to find a binary search tree with the given requirements for the given test cases. A **binary search tree** is a binary tree where for every node, any descendant of `Node.left` has a value **strictly less than** `Node.val`, and any descendant of `Node.right` has a value **strictly greater than** `Node.val`. A **preorder traversal** of a binary tree displays the value of the node first, then traverses `Node.left`, then traverses `Node.right`.",
    "examples": [
      {
        "input": "preorder = \\[8,5,1,7,10,12\\]",
        "output": "\\[8,5,10,1,7,null,12\\]"
      },
      {
        "input": "preorder = \\[1,3\\]",
        "output": "\\[1,null,3\\]"
      }
    ],
    "constraints": [
      "`1 <= preorder.length <= 100`",
      "`1 <= preorder[i] <= 1000`",
      "All the values of `preorder` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1009",
    "slug": "complement-of-base-10-integer",
    "title": "Complement of Base 10 Integer",
    "difficulty": "Easy",
    "description": "The **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation. *  For example, The integer `5` is `\"101 \"` in binary and its **complement** is `\"010 \"` which is the integer `2`. Given an integer `n`, return _its complement_.",
    "examples": [
      {
        "input": "n = 5",
        "output": "2",
        "explanation": "5 is  \"101 \" in binary, with complement  \"010 \" in binary, which is 2 in base-10."
      },
      {
        "input": "n = 7",
        "output": "0",
        "explanation": "7 is  \"111 \" in binary, with complement  \"000 \" in binary, which is 0 in base-10."
      },
      {
        "input": "n = 10",
        "output": "5",
        "explanation": "10 is  \"1010 \" in binary, with complement  \"0101 \" in binary, which is 5 in base-10."
      }
    ],
    "constraints": [
      "`0 <= n < 109`"
    ],
    "note": "This question is the same as 476: [https://leetcode.com/problems/number-complement/](https://leetcode.com/problems/number-complement/)",
    "follow_up": null
  },
  {
    "id": "1010",
    "slug": "pairs-of-songs-with-total-durations-divisible-by-60",
    "title": "Pairs of Songs With Total Durations Divisible by 60",
    "difficulty": "Medium",
    "description": "You are given a list of songs where the `ith` song has a duration of `time[i]` seconds. Return _the number of pairs of songs for which their total duration in seconds is divisible by_ `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.",
    "examples": [
      {
        "input": "time = \\[30,20,150,100,40\\]",
        "output": "3",
        "explanation": "Three pairs have a total duration divisible by 60:"
      },
      {
        "input": "time = \\[60,60,60\\]",
        "output": "3",
        "explanation": "All three pairs have a total duration of 120, which is divisible by 60."
      }
    ],
    "constraints": [
      "`1 <= time.length <= 6  104`",
      "`1 <= time[i] <= 500`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1011",
    "slug": "capacity-to-ship-packages-within-d-days",
    "title": "Capacity To Ship Packages Within D Days",
    "difficulty": "Medium",
    "description": "A conveyor belt has packages that must be shipped from one port to another within `days` days. The `ith` package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship. Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `days` days.",
    "examples": [
      {
        "input": "weights = \\[1,2,3,4,5,6,7,8,9,10\\], days = 5",
        "output": "15",
        "explanation": "A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:"
      },
      {
        "input": "weights = \\[3,2,2,4,1,4\\], days = 3",
        "output": "6",
        "explanation": "A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:"
      },
      {
        "input": "weights = \\[1,2,3,1,1\\], days = 4",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= days <= weights.length <= 5  104`",
      "`1 <= weights[i] <= 500`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1012",
    "slug": "numbers-with-repeated-digits",
    "title": "Numbers With Repeated Digits",
    "difficulty": "Hard",
    "description": "Given an integer `n`, return _the number of positive integers in the range_ `[1, n]` _that have **at least one** repeated digit_.",
    "examples": [
      {
        "input": "n = 20",
        "output": "1",
        "explanation": "The only positive number (<= 20) with at least 1 repeated digit is 11."
      },
      {
        "input": "n = 100",
        "output": "10",
        "explanation": "The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100."
      },
      {
        "input": "n = 1000",
        "output": "262"
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1013",
    "slug": "partition-array-into-three-parts-with-equal-sum",
    "title": "Partition Array Into Three Parts With Equal Sum",
    "difficulty": "Easy",
    "description": "Given an array of integers `arr`, return `true` if we can partition the array into three **non-empty** parts with equal sums. Formally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`",
    "examples": [
      {
        "input": "arr = \\[0,2,1,-6,6,-7,9,1,2,0,1\\]",
        "output": "true",
        "explanation": "0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1"
      },
      {
        "input": "arr = \\[0,2,1,-6,6,7,9,-1,2,0,1\\]",
        "output": "false"
      },
      {
        "input": "arr = \\[3,3,6,5,-2,2,5,1,-9,4\\]",
        "output": "true",
        "explanation": "3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4"
      }
    ],
    "constraints": [
      "`3 <= arr.length <= 5  104`",
      "`-104 <= arr[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1014",
    "slug": "best-sightseeing-pair",
    "title": "Best Sightseeing Pair",
    "difficulty": "Medium",
    "description": "You are given an integer array `values` where values\\[i\\] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a **distance** `j - i` between them. The score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them. Return _the maximum score of a pair of sightseeing spots_.",
    "examples": [
      {
        "input": "values = \\[8,1,5,2,6\\]",
        "output": "11",
        "explanation": "i = 0, j = 2, values\\[i\\] + values\\[j\\] + i - j = 8 + 5 + 0 - 2 = 11"
      },
      {
        "input": "values = \\[1,2\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`2 <= values.length <= 5  104`",
      "`1 <= values[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1015",
    "slug": "smallest-integer-divisible-by-k",
    "title": "Smallest Integer Divisible by K",
    "difficulty": "Medium",
    "description": "Given a positive integer `k`, you need to find the **length** of the **smallest** positive integer `n` such that `n` is divisible by `k`, and `n` only contains the digit `1`. Return _the **length** of_ `n`. If there is no such `n`, return -1.",
    "examples": [
      {
        "input": "k = 1",
        "output": "1",
        "explanation": "The smallest answer is n = 1, which has length 1."
      },
      {
        "input": "k = 2",
        "output": "-1",
        "explanation": "There is no such positive integer n divisible by 2."
      },
      {
        "input": "k = 3",
        "output": "3",
        "explanation": "The smallest answer is n = 111, which has length 3."
      }
    ],
    "constraints": [
      "`1 <= k <= 105`"
    ],
    "note": "`n` may not fit in a 64-bit signed integer.",
    "follow_up": null
  },
  {
    "id": "1016",
    "slug": "binary-string-with-substrings-representing-1-to-n",
    "title": "Binary String With Substrings Representing 1 To N",
    "difficulty": "Medium",
    "description": "Given a binary string `s` and a positive integer `n`, return `true` _if the binary representation of all the integers in the range_ `[1, n]` _are **substrings** of_ `s`_, or_ `false` _otherwise_. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s = \"0110\", n = 3",
        "output": "true"
      },
      {
        "input": "s = \"0110\", n = 4",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s[i]` is either `'0'` or `'1'`.",
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1017",
    "slug": "convert-to-base-2",
    "title": "Convert to Base -2",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _a binary string representing its representation in base_ `-2`. **Note** that the returned string should not have leading zeros unless the string is `\"0 \"`.",
    "examples": [
      {
        "input": "n = 2",
        "output": "\"110 \""
      },
      {
        "input": "n = 3",
        "output": "\"111 \""
      },
      {
        "input": "n = 4",
        "output": "\"100 \""
      }
    ],
    "constraints": [
      "`0 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1018",
    "slug": "binary-prefix-divisible-by-5",
    "title": "Binary Prefix Divisible By 5",
    "difficulty": "Easy",
    "description": "You are given a binary array `nums` (**0-indexed**). We define `xi` as the number whose binary representation is the subarray `nums[0..i]` (from most-significant-bit to least-significant-bit). *  For example, if `nums = [1,0,1]`, then `x0 = 1`, `x1 = 2`, and `x2 = 5`. Return _an array of booleans_ `answer` _where_ `answer[i]` _is_ `true` _if_ `xi` _is divisible by_ `5`.",
    "examples": [
      {
        "input": "nums = \\[0,1,1\\]",
        "output": "\\[true,false,false\\]",
        "explanation": "The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10."
      },
      {
        "input": "nums = \\[1,1,1\\]",
        "output": "\\[false,false,false\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`nums[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1019",
    "slug": "next-greater-node-in-linked-list",
    "title": "Next Greater Node In Linked List",
    "difficulty": "Medium",
    "description": "You are given the `head` of a linked list with `n` nodes. For each node in the list, find the value of the **next greater node**. That is, for each node, find the value of the first node that is next to it and has a **strictly larger** value than it. Return an integer array `answer` where `answer[i]` is the value of the next greater node of the `ith` node (**1-indexed**). If the `ith` node does not have a next greater node, set `answer[i] = 0`.",
    "examples": [
      {
        "input": "head = \\[2,1,5\\]",
        "output": "\\[5,5,0\\]"
      },
      {
        "input": "head = \\[2,7,4,3,5\\]",
        "output": "\\[7,0,5,5,0\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is `n`.",
      "`1 <= n <= 104`",
      "`1 <= Node.val <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1020",
    "slug": "number-of-enclaves",
    "title": "Number of Enclaves",
    "difficulty": "Medium",
    "description": "You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell. A **move** consists of walking from one land cell to another adjacent (**4-directionally**) land cell or walking off the boundary of the `grid`. Return _the number of land cells in_ `grid` _for which we cannot walk off the boundary of the grid in any number of **moves**_.",
    "examples": [
      {
        "input": "grid = \\[\\[0,0,0,0\\],\\[1,0,1,0\\],\\[0,1,1,0\\],\\[0,0,0,0\\]\\]",
        "output": "3",
        "explanation": "There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary."
      },
      {
        "input": "grid = \\[\\[0,1,1,0\\],\\[0,0,1,0\\],\\[0,0,1,0\\],\\[0,0,0,0\\]\\]",
        "output": "0",
        "explanation": "All 1s are either on the boundary or can reach the boundary."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 500`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1021",
    "slug": "remove-outermost-parentheses",
    "title": "Remove Outermost Parentheses",
    "difficulty": "Easy",
    "description": "A valid parentheses string is either empty `\" \"`, `\"( \" + A + \") \"`, or `A + B`, where `A` and `B` are valid parentheses strings, and `+` represents string concatenation. *  For example, `\" \"`, `\"() \"`, `\"(())() \"`, and `\"(()(())) \"` are all valid parentheses strings. A valid parentheses string `s` is primitive if it is nonempty, and there does not exist a way to split it into `s = A + B`, with `A` and `B` nonempty valid parentheses strings. Given a valid parentheses string `s`, consider its primitive decomposition: `s = P1 + P2 + ... + Pk`, where `Pi` are primitive valid parentheses strings. Return `s` _after removing the outermost parentheses of every primitive string in the primitive decomposition of_ `s`.",
    "examples": [
      {
        "input": "s =  \"(()())(()) \"",
        "output": "\"()()() \"",
        "explanation": ""
      },
      {
        "input": "s =  \"(()())(())(()(())) \"",
        "output": "\"()()()()(()) \"",
        "explanation": ""
      },
      {
        "input": "s =  \"()() \"",
        "output": "\" \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is either `'('` or `')'`.",
      "`s` is a valid parentheses string."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1022",
    "slug": "sum-of-root-to-leaf-binary-numbers",
    "title": "Sum of Root To Leaf Binary Numbers",
    "difficulty": "Easy",
    "description": "You are given the `root` of a binary tree where each node has a value `0` or `1`. Each root-to-leaf path represents a binary number starting with the most significant bit. *  For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`. For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return _the sum of these numbers_. The test cases are generated so that the answer fits in a **32-bits** integer.",
    "examples": [
      {
        "input": "root = \\[1,0,1,0,1,0,1\\]",
        "output": "22",
        "explanation": "(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22"
      },
      {
        "input": "root = \\[0\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 1000]`.",
      "`Node.val` is `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1023",
    "slug": "camelcase-matching",
    "title": "Camelcase Matching",
    "difficulty": "Medium",
    "description": "Given an array of strings `queries` and a string `pattern`, return a boolean array `answer` where `answer[i]` is `true` if `queries[i]` matches `pattern`, and `false` otherwise. A query word `queries[i]` matches `pattern` if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.",
    "examples": [
      {
        "input": "queries = \\[ \"FooBar \", \"FooBarTest \", \"FootBall \", \"FrameBuffer \", \"ForceFeedBack \"\\], pattern =  \"FB \"",
        "output": "\\[true,false,true,true,false\\]",
        "explanation": "\"FooBar \" can be generated like this  \"F \" +  \"oo \" +  \"B \" +  \"ar \"."
      },
      {
        "input": "queries = \\[ \"FooBar \", \"FooBarTest \", \"FootBall \", \"FrameBuffer \", \"ForceFeedBack \"\\], pattern =  \"FoBa \"",
        "output": "\\[true,false,true,false,false\\]",
        "explanation": "\"FooBar \" can be generated like this  \"Fo \" +  \"o \" +  \"Ba \" +  \"r \"."
      },
      {
        "input": "queries = \\[ \"FooBar \", \"FooBarTest \", \"FootBall \", \"FrameBuffer \", \"ForceFeedBack \"\\], pattern =  \"FoBaT \"",
        "output": "\\[false,true,false,false,false\\]",
        "explanation": "\"FooBarTest \" can be generated like this  \"Fo \" +  \"o \" +  \"Ba \" +  \"r \" +  \"T \" +  \"est \"."
      }
    ],
    "constraints": [
      "`1 <= pattern.length, queries.length <= 100`",
      "`1 <= queries[i].length <= 100`",
      "`queries[i]` and `pattern` consist of English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1024",
    "slug": "video-stitching",
    "title": "Video Stitching",
    "difficulty": "Medium",
    "description": "You are given a series of video clips from a sporting event that lasted `time` seconds. These video clips can be overlapping with each other and have varying lengths. Each video clip is described by an array `clips` where `clips[i] = [starti, endi]` indicates that the ith clip started at `starti` and ended at `endi`. We can cut these clips into segments freely. *  For example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`. Return _the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event_ `[0, time]`. If the task is impossible, return `-1`.",
    "examples": [
      {
        "input": "clips = \\[\\[0,2\\],\\[4,6\\],\\[8,10\\],\\[1,9\\],\\[1,5\\],\\[5,9\\]\\], time = 10",
        "output": "3",
        "explanation": "We take the clips \\[0,2\\], \\[8,10\\], \\[1,9\\]; a total of 3 clips."
      },
      {
        "input": "clips = \\[\\[0,1\\],\\[1,2\\]\\], time = 5",
        "output": "-1",
        "explanation": "We cannot cover \\[0,5\\] with only \\[0,1\\] and \\[1,2\\]."
      },
      {
        "input": "clips = \\[\\[0,1\\],\\[6,8\\],\\[0,2\\],\\[5,6\\],\\[0,4\\],\\[0,3\\],\\[6,7\\],\\[1,3\\],\\[4,7\\],\\[1,4\\],\\[2,5\\],\\[2,6\\],\\[3,4\\],\\[4,5\\],\\[5,7\\],\\[6,9\\]\\], time = 9",
        "output": "3",
        "explanation": "We can take clips \\[0,4\\], \\[4,7\\], and \\[6,9\\]."
      }
    ],
    "constraints": [
      "`1 <= clips.length <= 100`",
      "`0 <= starti <= endi <= 100`",
      "`1 <= time <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1025",
    "slug": "divisor-game",
    "title": "Divisor Game",
    "difficulty": "Easy",
    "description": "Alice and Bob take turns playing a game, with Alice starting first. Initially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of: *  Choosing any `x` with `0 < x < n` and `n % x == 0`. *  Replacing the number `n` on the chalkboard with `n - x`. Also, if a player cannot make a move, they lose the game. Return `true` _if and only if Alice wins the game, assuming both players play optimally_.",
    "examples": [
      {
        "input": "n = 2",
        "output": "true",
        "explanation": "Alice chooses 1, and Bob has no more moves."
      },
      {
        "input": "n = 3",
        "output": "false",
        "explanation": "Alice chooses 1, Bob chooses 1, and Alice has no more moves."
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1026",
    "slug": "maximum-difference-between-node-and-ancestor",
    "title": "Maximum Difference Between Node and Ancestor",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, find the maximum value `v` for which there exist **different** nodes `a` and `b` where `v = |a.val - b.val|` and `a` is an ancestor of `b`. A node `a` is an ancestor of `b` if either: any child of `a` is equal to `b` or any child of `a` is an ancestor of `b`.",
    "examples": [
      {
        "input": "root = \\[8,3,10,1,6,null,14,null,null,4,7,13\\]",
        "output": "7",
        "explanation": "We have various ancestor-node differences, some of which are given below :"
      },
      {
        "input": "root = \\[1,null,2,null,0,3\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 5000]`.",
      "`0 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1027",
    "slug": "longest-arithmetic-subsequence",
    "title": "Longest Arithmetic Subsequence",
    "difficulty": "Medium",
    "description": "Given an array `nums` of integers, return _the length of the longest arithmetic subsequence in_ `nums`. **Note** that: *  A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. *  A sequence `seq` is arithmetic if `seq[i + 1] - seq[i]` are all the same value (for `0 <= i < seq.length - 1`).",
    "examples": [
      {
        "input": "nums = \\[3,6,9,12\\]",
        "output": "4"
      },
      {
        "input": "nums = \\[9,4,7,2,10\\]",
        "output": "3"
      },
      {
        "input": "nums = \\[20,1,15,3,10,5,8\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 1000`",
      "`0 <= nums[i] <= 500`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1028",
    "slug": "recover-a-tree-from-preorder-traversal",
    "title": "Recover a Tree From Preorder Traversal",
    "difficulty": "Hard",
    "description": "We run a preorder depth-first search (DFS) on the `root` of a binary tree. At each node in this traversal, we output `D` dashes (where `D` is the depth of this node), then we output the value of this node. If the depth of a node is `D`, the depth of its immediate child is `D + 1`. The depth of the `root` node is `0`. If a node has only one child, that child is guaranteed to be **the left child**. Given the output `traversal` of this traversal, recover the tree and return _its_ `root`.",
    "examples": [
      {
        "input": "traversal =  \"1-2--3--4-5--6--7 \"",
        "output": "\\[1,2,5,3,4,6,7\\]"
      },
      {
        "input": "traversal =  \"1-2--3---4-5--6---7 \"",
        "output": "\\[1,2,5,3,null,6,null,4,null,7\\]"
      },
      {
        "input": "traversal =  \"1-401--349---90--88 \"",
        "output": "\\[1,401,null,349,88,90\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the original tree is in the range `[1, 1000]`.",
      "`1 <= Node.val <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1029",
    "slug": "two-city-scheduling",
    "title": "Two City Scheduling",
    "difficulty": "Medium",
    "description": "A company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`, the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`. Return _the minimum cost to fly every person to a city_ such that exactly `n` people arrive in each city.",
    "examples": [
      {
        "input": "costs = \\[\\[10,20\\],\\[30,200\\],\\[400,50\\],\\[30,20\\]\\]",
        "output": "110",
        "explanation": ""
      },
      {
        "input": "costs = \\[\\[259,770\\],\\[448,54\\],\\[926,667\\],\\[184,139\\],\\[840,118\\],\\[577,469\\]\\]",
        "output": "1859"
      },
      {
        "input": "costs = \\[\\[515,563\\],\\[451,713\\],\\[537,709\\],\\[343,819\\],\\[855,779\\],\\[457,60\\],\\[650,359\\],\\[631,42\\]\\]",
        "output": "3086"
      }
    ],
    "constraints": [
      "`2  n == costs.length`",
      "`2 <= costs.length <= 100`",
      "`costs.length` is even.",
      "`1 <= aCosti, bCosti <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1030",
    "slug": "matrix-cells-in-distance-order",
    "title": "Matrix Cells in Distance Order",
    "difficulty": "Easy",
    "description": "You are given four integers `row`, `cols`, `rCenter`, and `cCenter`. There is a `rows x cols` matrix and you are on the cell with the coordinates `(rCenter, cCenter)`. Return _the coordinates of all cells in the matrix, sorted by their **distance** from_ `(rCenter, cCenter)` _from the smallest distance to the largest distance_. You may return the answer in **any order** that satisfies this condition. The **distance** between two cells `(r1, c1)` and `(r2, c2)` is `|r1 - r2| + |c1 - c2|`.",
    "examples": [
      {
        "input": "rows = 1, cols = 2, rCenter = 0, cCenter = 0",
        "output": "\\[\\[0,0\\],\\[0,1\\]\\]",
        "explanation": "The distances from (0, 0) to other cells are: \\[0,1\\]"
      },
      {
        "input": "rows = 2, cols = 2, rCenter = 0, cCenter = 1",
        "output": "\\[\\[0,1\\],\\[0,0\\],\\[1,1\\],\\[1,0\\]\\]",
        "explanation": "The distances from (0, 1) to other cells are: \\[0,1,1,2\\]"
      },
      {
        "input": "rows = 2, cols = 3, rCenter = 1, cCenter = 2",
        "output": "\\[\\[1,2\\],\\[0,2\\],\\[1,1\\],\\[0,1\\],\\[1,0\\],\\[0,0\\]\\]",
        "explanation": "The distances from (1, 2) to other cells are: \\[0,1,1,2,2,3\\]"
      }
    ],
    "constraints": [
      "`1 <= rows, cols <= 100`",
      "`0 <= rCenter < rows`",
      "`0 <= cCenter < cols`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1031",
    "slug": "maximum-sum-of-two-non-overlapping-subarrays",
    "title": "Maximum Sum of Two Non-Overlapping Subarrays",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and two integers `firstLen` and `secondLen`, return _the maximum sum of elements in two non-overlapping **subarrays** with lengths_ `firstLen` _and_ `secondLen`. The array with length `firstLen` could occur before or after the array with length `secondLen`, but they have to be non-overlapping. A **subarray** is a **contiguous** part of an array.",
    "examples": [
      {
        "input": "nums = \\[0,6,5,2,2,5,1,9,4\\], firstLen = 1, secondLen = 2",
        "output": "20",
        "explanation": "One choice of subarrays is \\[9\\] with length 1, and \\[6,5\\] with length 2."
      },
      {
        "input": "nums = \\[3,8,1,3,2,1,8,9,0\\], firstLen = 3, secondLen = 2",
        "output": "29",
        "explanation": "One choice of subarrays is \\[3,8,1\\] with length 3, and \\[8,9\\] with length 2."
      },
      {
        "input": "nums = \\[2,1,5,6,0,9,5,0,3,8\\], firstLen = 4, secondLen = 3",
        "output": "31",
        "explanation": "One choice of subarrays is \\[5,6,0,9\\] with length 4, and \\[0,3,8\\] with length 3."
      }
    ],
    "constraints": [
      "`1 <= firstLen, secondLen <= 1000`",
      "`2 <= firstLen + secondLen <= 1000`",
      "`firstLen + secondLen <= nums.length <= 1000`",
      "`0 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1032",
    "slug": "stream-of-characters",
    "title": "Stream of Characters",
    "difficulty": "Hard",
    "description": "Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings `words`. For example, if `words = [ \"abc \", \"xyz \"]` and the stream added the four characters (one by one) `'a'`, `'x'`, `'y'`, and `'z'`, your algorithm should detect that the suffix `\"xyz \"` of the characters `\"axyz \"` matches `\"xyz \"` from `words`. Implement the `StreamChecker` class: *  `StreamChecker(String[] words)` Initializes the object with the strings array `words`. *  `boolean query(char letter)` Accepts a new character from the stream and returns `true` if any non-empty suffix from the stream forms a word that is in `words`.",
    "examples": [],
    "constraints": [
      "`1 <= words.length <= 2000`",
      "`1 <= words[i].length <= 200`",
      "`words[i]` consists of lowercase English letters.",
      "`letter` is a lowercase English letter.",
      "At most `4  104` calls will be made to query."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1033",
    "slug": "moving-stones-until-consecutive",
    "title": "Moving Stones Until Consecutive",
    "difficulty": "Medium",
    "description": "There are three stones in different positions on the X-axis. You are given three integers `a`, `b`, and `c`, the positions of the stones. In one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions `x`, `y`, and `z` with `x < y < z`. You pick up the stone at either position `x` or position `z`, and move that stone to an integer position `k`, with `x < k < z` and `k != y`. The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). Return _an integer array_ `answer` _of length_ `2` _where_: *  `answer[0]` _is the minimum number of moves you can play, and_ *  `answer[1]` _is the maximum number of moves you can play_.",
    "examples": [
      {
        "input": "a = 1, b = 2, c = 5",
        "output": "\\[1,2\\]",
        "explanation": "Move the stone from 5 to 3, or move the stone from 5 to 4 to 3."
      },
      {
        "input": "a = 4, b = 3, c = 2",
        "output": "\\[0,0\\]",
        "explanation": "We cannot make any moves."
      },
      {
        "input": "a = 3, b = 5, c = 1",
        "output": "\\[1,2\\]",
        "explanation": "Move the stone from 1 to 4; or move the stone from 1 to 2 to 4."
      }
    ],
    "constraints": [
      "`1 <= a, b, c <= 100`",
      "`a`, `b`, and `c` have different values."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1034",
    "slug": "coloring-a-border",
    "title": "Coloring A Border",
    "difficulty": "Medium",
    "description": "You are given an `m x n` integer matrix `grid`, and three integers `row`, `col`, and `color`. Each value in the grid represents the color of the grid square at that location. Two squares belong to the same **connected component** if they have the same color and are next to each other in any of the 4 directions. The **border of a connected component** is all the squares in the connected component that are either **4-directionally** adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column). You should color the **border** of the **connected component** that contains the square `grid[row][col]` with `color`. Return _the final grid_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1\\],\\[1,2\\]\\], row = 0, col = 0, color = 3",
        "output": "\\[\\[3,3\\],\\[3,2\\]\\]"
      },
      {
        "input": "grid = \\[\\[1,2,2\\],\\[2,3,2\\]\\], row = 0, col = 1, color = 3",
        "output": "\\[\\[1,3,3\\],\\[2,3,3\\]\\]"
      },
      {
        "input": "grid = \\[\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\]\\], row = 1, col = 1, color = 2",
        "output": "\\[\\[2,2,2\\],\\[2,1,2\\],\\[2,2,2\\]\\]"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 50`",
      "`1 <= grid[i][j], color <= 1000`",
      "`0 <= row < m`",
      "`0 <= col < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1035",
    "slug": "uncrossed-lines",
    "title": "Uncrossed Lines",
    "difficulty": "Medium",
    "description": "You are given two integer arrays `nums1` and `nums2`. We write the integers of `nums1` and `nums2` (in the order they are given) on two separate horizontal lines. We may draw connecting lines: a straight line connecting two numbers `nums1[i]` and `nums2[j]` such that: *  `nums1[i] == nums2[j]`, and *  the line we draw does not intersect any other connecting (non-horizontal) line. Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line). Return _the maximum number of connecting lines we can draw in this way_.",
    "examples": [
      {
        "input": "nums1 = \\[1,4,2\\], nums2 = \\[1,2,4\\]",
        "output": "2",
        "explanation": "We can draw 2 uncrossed lines as in the diagram."
      },
      {
        "input": "nums1 = \\[2,5,1,2,5\\], nums2 = \\[10,5,2,1,5,2\\]",
        "output": "3"
      },
      {
        "input": "nums1 = \\[1,3,7,1,7,5\\], nums2 = \\[1,9,2,5,1\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 500`",
      "`1 <= nums1[i], nums2[j] <= 2000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1036",
    "slug": "escape-a-large-maze",
    "title": "Escape a Large Maze",
    "difficulty": "Hard",
    "description": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are `(x, y)`. We start at the `source = [sx, sy]` square and want to reach the `target = [tx, ty]` square. There is also an array of `blocked` squares, where each `blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi, yi)`. Each move, we can walk one square north, east, south, or west if the square is **not** in the array of `blocked` squares. We are also not allowed to walk outside of the grid. Return `true` _if and only if it is possible to reach the_ `target` _square from the_ `source` _square through a sequence of valid moves_.",
    "examples": [
      {
        "input": "blocked = \\[\\[0,1\\],\\[1,0\\]\\], source = \\[0,0\\], target = \\[0,2\\]",
        "output": "false",
        "explanation": "The target square is inaccessible starting from the source square because we cannot move."
      },
      {
        "input": "blocked = \\[\\], source = \\[0,0\\], target = \\[999999,999999\\]",
        "output": "true",
        "explanation": "Because there are no blocked cells, it is possible to reach the target square."
      }
    ],
    "constraints": [
      "`0 <= blocked.length <= 200`",
      "`blocked[i].length == 2`",
      "`0 <= xi, yi < 106`",
      "`source.length == target.length == 2`",
      "`0 <= sx, sy, tx, ty < 106`",
      "`source != target`",
      "It is guaranteed that `source` and `target` are not blocked."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1037",
    "slug": "valid-boomerang",
    "title": "Valid Boomerang",
    "difficulty": "Easy",
    "description": "Given an array `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return `true` _if these points are a **boomerang**_. A **boomerang** is a set of three points that are **all distinct** and **not in a straight line**.",
    "examples": [
      {
        "input": "points = \\[\\[1,1\\],\\[2,3\\],\\[3,2\\]\\]",
        "output": "true"
      },
      {
        "input": "points = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`points.length == 3`",
      "`points[i].length == 2`",
      "`0 <= xi, yi <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1038",
    "slug": "binary-search-tree-to-greater-sum-tree",
    "title": "Binary Search Tree to Greater Sum Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. As a reminder, a _binary search tree_ is a tree that satisfies these constraints: *  The left subtree of a node contains only nodes with keys **less than** the node's key. *  The right subtree of a node contains only nodes with keys **greater than** the node's key. *  Both the left and right subtrees must also be binary search trees.",
    "examples": [
      {
        "input": "root = \\[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8\\]",
        "output": "\\[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8\\]"
      },
      {
        "input": "root = \\[0,null,1\\]",
        "output": "\\[1,null,1\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 100]`.",
      "`0 <= Node.val <= 100`",
      "All the values in the tree are unique."
    ],
    "note": "This question is the same as 538: [https://leetcode.com/problems/convert-bst-to-greater-tree/](https://leetcode.com/problems/convert-bst-to-greater-tree/)",
    "follow_up": null
  },
  {
    "id": "1039",
    "slug": "minimum-score-triangulation-of-polygon",
    "title": "Minimum Score Triangulation of Polygon",
    "difficulty": "Medium",
    "description": "You have a convex `n`\\-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., **clockwise order**). You will **triangulate** the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation. Return _the smallest possible total score that you can achieve with some triangulation of the polygon_.",
    "examples": [
      {
        "input": "values = \\[1,2,3\\]",
        "output": "6",
        "explanation": "The polygon is already triangulated, and the score of the only triangle is 6."
      },
      {
        "input": "values = \\[3,7,4,5\\]",
        "output": "144",
        "explanation": "There are two triangulations, with possible scores: 3\\*7\\*5 + 4\\*5\\*7 = 245, or 3\\*4\\*5 + 3\\*4\\*7 = 144."
      },
      {
        "input": "values = \\[1,3,1,4,1,5\\]",
        "output": "13",
        "explanation": "The minimum score triangulation has score 1\\*1\\*3 + 1\\*1\\*4 + 1\\*1\\*5 + 1\\*1\\*1 = 13."
      }
    ],
    "constraints": [
      "`n == values.length`",
      "`3 <= n <= 50`",
      "`1 <= values[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1040",
    "slug": "moving-stones-until-consecutive-ii",
    "title": "Moving Stones Until Consecutive II",
    "difficulty": "Medium",
    "description": "There are some stones in different positions on the X-axis. You are given an integer array `stones`, the positions of the stones. Call a stone an **endpoint stone** if it has the smallest or largest position. In one move, you pick up an **endpoint stone** and move it to an unoccupied position so that it is no longer an **endpoint stone**. *  In particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position `5`, since moving it to any position (such as `0`, or `3`) will still keep that stone as an endpoint stone. The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). Return _an integer array_ `answer` _of length_ `2` _where_: *  `answer[0]` _is the minimum number of moves you can play, and_ *  `answer[1]` _is the maximum number of moves you can play_.",
    "examples": [
      {
        "input": "stones = \\[7,4,9\\]",
        "output": "\\[1,2\\]",
        "explanation": "We can move 4 -> 8 for one move to finish the game."
      },
      {
        "input": "stones = \\[6,5,4,3,10\\]",
        "output": "\\[2,3\\]",
        "explanation": "We can move 3 -> 8 then 10 -> 7 to finish the game."
      }
    ],
    "constraints": [
      "`3 <= stones.length <= 104`",
      "`1 <= stones[i] <= 109`",
      "All the values of `stones` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1041",
    "slug": "robot-bounded-in-circle",
    "title": "Robot Bounded In Circle",
    "difficulty": "Medium",
    "description": "On an infinite plane, a robot initially stands at `(0, 0)` and faces north. Note that: *  The **north direction** is the positive direction of the y-axis. *  The **south direction** is the negative direction of the y-axis. *  The **east direction** is the positive direction of the x-axis. *  The **west direction** is the negative direction of the x-axis. The robot can receive one of three instructions: *  `\"G \"`: go straight 1 unit. *  `\"L \"`: turn 90 degrees to the left (i.e., anti-clockwise direction). *  `\"R \"`: turn 90 degrees to the right (i.e., clockwise direction). The robot performs the `instructions` given in order, and repeats them forever. Return `true` if and only if there exists a circle in the plane such that the robot never leaves the circle.",
    "examples": [
      {
        "input": "instructions =  \"GGLLGG \"",
        "output": "true",
        "explanation": "The robot is initially at (0, 0) facing the north direction."
      },
      {
        "input": "instructions =  \"GG \"",
        "output": "false",
        "explanation": "The robot is initially at (0, 0) facing the north direction."
      },
      {
        "input": "instructions =  \"GL \"",
        "output": "true",
        "explanation": "The robot is initially at (0, 0) facing the north direction."
      }
    ],
    "constraints": [
      "`1 <= instructions.length <= 100`",
      "`instructions[i]` is `'G'`, `'L'` or, `'R'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1042",
    "slug": "flower-planting-with-no-adjacent",
    "title": "Flower Planting With No Adjacent",
    "difficulty": "Medium",
    "description": "You have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. In each garden, you want to plant one of 4 types of flowers. All gardens have **at most 3** paths coming into or leaving it. Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers. Return _**any** such a choice as an array_ `answer`_, where_ `answer[i]` _is the type of flower planted in the_ `(i+1)th` _garden. The flower types are denoted_ `1`_,_ `2`_,_ `3`_, or_ `4`_. It is guaranteed an answer exists._",
    "examples": [
      {
        "input": "n = 3, paths = \\[\\[1,2\\],\\[2,3\\],\\[3,1\\]\\]",
        "output": "\\[1,2,3\\]",
        "explanation": ""
      },
      {
        "input": "n = 4, paths = \\[\\[1,2\\],\\[3,4\\]\\]",
        "output": "\\[1,2,1,2\\]"
      },
      {
        "input": "n = 4, paths = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,1\\],\\[1,3\\],\\[2,4\\]\\]",
        "output": "\\[1,2,3,4\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 104`",
      "`0 <= paths.length <= 2  104`",
      "`paths[i].length == 2`",
      "`1 <= xi, yi <= n`",
      "`xi != yi`",
      "Every garden has at most 3 paths coming into or leaving it."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1043",
    "slug": "partition-array-for-maximum-sum",
    "title": "Partition Array for Maximum Sum",
    "difficulty": "Medium",
    "description": "Given an integer array `arr`, partition the array into (contiguous) subarrays of length **at most** `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray. Return _the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a **32-bit** integer._",
    "examples": [
      {
        "input": "arr = \\[1,15,7,9,2,5,10\\], k = 3",
        "output": "84",
        "explanation": "arr becomes \\[15,15,15,9,10,10,10\\]"
      },
      {
        "input": "arr = \\[1,4,1,5,7,3,6,1,9,9,3\\], k = 4",
        "output": "83"
      },
      {
        "input": "arr = \\[1\\], k = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 500`",
      "`0 <= arr[i] <= 109`",
      "`1 <= k <= arr.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1044",
    "slug": "longest-duplicate-substring",
    "title": "Longest Duplicate Substring",
    "difficulty": "Hard",
    "description": "Given a string `s`, consider all _duplicated substrings_: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap. Return **any** duplicated substring that has the longest possible length. If `s` does not have a duplicated substring, the answer is `\" \"`.",
    "examples": [
      {
        "input": "s = \"banana\"",
        "output": "\"ana\""
      },
      {
        "input": "s = \"abcd\"",
        "output": "\"\""
      }
    ],
    "constraints": [
      "`2 <= s.length <= 3  104`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1046",
    "slug": "last-stone-weight",
    "title": "Last Stone Weight",
    "difficulty": "Easy",
    "description": "You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone. We are playing a game with the stones. On each turn, we choose the **heaviest two stones** and smash them together. Suppose the heaviest two stones have weights `x` and `y` with `x <= y`. The result of this smash is: *  If `x == y`, both stones are destroyed, and *  If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`. At the end of the game, there is **at most one** stone left. Return _the weight of the last remaining stone_. If there are no stones left, return `0`.",
    "examples": [
      {
        "input": "stones = \\[2,7,4,1,8,1\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "stones = \\[1\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= stones.length <= 30`",
      "`1 <= stones[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1047",
    "slug": "remove-all-adjacent-duplicates-in-string",
    "title": "Remove All Adjacent Duplicates In String",
    "difficulty": "Easy",
    "description": "You are given a string `s` consisting of lowercase English letters. A **duplicate removal** consists of choosing two **adjacent** and **equal** letters and removing them. We repeatedly make **duplicate removals** on `s` until we no longer can. Return _the final string after all such duplicate removals have been made_. It can be proven that the answer is **unique**.",
    "examples": [
      {
        "input": "s =  \"abbaca \"",
        "output": "\"ca \"",
        "explanation": ""
      },
      {
        "input": "s =  \"azxxzy \"",
        "output": "\"ay \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1048",
    "slug": "longest-string-chain",
    "title": "Longest String Chain",
    "difficulty": "Medium",
    "description": "You are given an array of `words` where each word consists of lowercase English letters. `wordA` is a **predecessor** of `wordB` if and only if we can insert **exactly one** letter anywhere in `wordA` **without changing the order of the other characters** to make it equal to `wordB`. *  For example, `\"abc \"` is a **predecessor** of `\"abac \"`, while `\"cba \"` is not a **predecessor** of `\"bcad \"`. A **word chain** is a sequence of words `[word1, word2, ..., wordk]` with `k >= 1`, where `word1` is a **predecessor** of `word2`, `word2` is a **predecessor** of `word3`, and so on. A single word is trivially a **word chain** with `k == 1`. Return _the **length** of the **longest possible word chain** with words chosen from the given list of_ `words`.",
    "examples": [
      {
        "input": "words = \\[ \"a \", \"b \", \"ba \", \"bca \", \"bda \", \"bdca \"\\]",
        "output": "4"
      },
      {
        "input": "words = \\[ \"xbc \", \"pcxbcf \", \"xb \", \"cxbc \", \"pcxbc \"\\]",
        "output": "5",
        "explanation": "All the words can be put in a word chain \\[ \"xb \",  \"xbc \",  \"cxbc \",  \"pcxbc \",  \"pcxbcf \"\\]."
      },
      {
        "input": "words = \\[ \"abcd \", \"dbqca \"\\]",
        "output": "1",
        "explanation": "The trivial word chain \\[ \"abcd \"\\] is one of the longest word chains."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length <= 16`",
      "`words[i]` only consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1049",
    "slug": "last-stone-weight-ii",
    "title": "Last Stone Weight II",
    "difficulty": "Medium",
    "description": "You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone. We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is: *  If `x == y`, both stones are destroyed, and *  If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`. At the end of the game, there is **at most one** stone left. Return _the smallest possible weight of the left stone_. If there are no stones left, return `0`.",
    "examples": [
      {
        "input": "stones = \\[2,7,4,1,8,1\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "stones = \\[31,26,33,21,40\\]",
        "output": "5"
      }
    ],
    "constraints": [
      "`1 <= stones.length <= 30`",
      "`1 <= stones[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1051",
    "slug": "height-checker",
    "title": "Height Checker",
    "difficulty": "Easy",
    "description": "A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in **non-decreasing order** by height. Let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line. You are given an integer array `heights` representing the **current order** that the students are standing in. Each `heights[i]` is the height of the `ith` student in line (**0-indexed**). Return _the **number of indices** where_ `heights[i] != expected[i]`.",
    "examples": [
      {
        "input": "heights = \\[1,1,4,2,1,3\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "heights = \\[5,1,2,3,4\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "heights = \\[1,2,3,4,5\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= heights.length <= 100`",
      "`1 <= heights[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1052",
    "slug": "grumpy-bookstore-owner",
    "title": "Grumpy Bookstore Owner",
    "difficulty": "Medium",
    "description": "There is a bookstore owner that has a store open for `n` minutes. Every minute, some number of customers enter the store. You are given an integer array `customers` of length `n` where `customers[i]` is the number of the customer that enters the store at the start of the `ith` minute and all those customers leave after the end of that minute. On some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where `grumpy[i]` is `1` if the bookstore owner is grumpy during the `ith` minute, and is `0` otherwise. When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied. The bookstore owner knows a secret technique to keep themselves not grumpy for `minutes` consecutive minutes, but can only use it once. Return _the maximum number of customers that can be satisfied throughout the day_.",
    "examples": [
      {
        "input": "customers = \\[1,0,1,2,1,1,7,5\\], grumpy = \\[0,1,0,1,0,1,0,1\\], minutes = 3",
        "output": "16",
        "explanation": "The bookstore owner keeps themselves not grumpy for the last 3 minutes."
      },
      {
        "input": "customers = \\[1\\], grumpy = \\[0\\], minutes = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`n == customers.length == grumpy.length`",
      "`1 <= minutes <= n <= 2  104`",
      "`0 <= customers[i] <= 1000`",
      "`grumpy[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1053",
    "slug": "previous-permutation-with-one-swap",
    "title": "Previous Permutation With One Swap",
    "difficulty": "Medium",
    "description": "Given an array of positive integers `arr` (not necessarily distinct), return _the_ _lexicographically_ _largest permutation that is smaller than_ `arr`, that can be **made with exactly one swap**. If it cannot be done, then return the same array. **Note** that a _swap_ exchanges the positions of two numbers `arr[i]` and `arr[j]`",
    "examples": [
      {
        "input": "arr = \\[3,2,1\\]",
        "output": "\\[3,1,2\\]",
        "explanation": "Swapping 2 and 1."
      },
      {
        "input": "arr = \\[1,1,5\\]",
        "output": "\\[1,1,5\\]",
        "explanation": "This is already the smallest permutation."
      },
      {
        "input": "arr = \\[1,9,4,6,7\\]",
        "output": "\\[1,7,4,6,9\\]",
        "explanation": "Swapping 9 and 7."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 104`",
      "`1 <= arr[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1054",
    "slug": "distant-barcodes",
    "title": "Distant Barcodes",
    "difficulty": "Medium",
    "description": "In a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`. Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.",
    "examples": [
      {
        "input": "barcodes = \\[1,1,1,2,2,2\\]",
        "output": "\\[2,1,2,1,2,1\\]"
      },
      {
        "input": "barcodes = \\[1,1,1,1,2,2,3,3\\]",
        "output": "\\[1,3,1,3,1,2,1,2\\]"
      }
    ],
    "constraints": [
      "`1 <= barcodes.length <= 10000`",
      "`1 <= barcodes[i] <= 10000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1055",
    "slug": "shortest-way-to-form-string",
    "title": "Shortest Way to Form String",
    "difficulty": "Medium",
    "description": "A **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not). Given two strings `source` and `target`, return _the minimum number of **subsequences** of_ `source` _such that their concatenation equals_ `target`. If the task is impossible, return `-1`.",
    "examples": [
      {
        "input": "source =  \"abc \", target =  \"abcbc \"",
        "output": "2",
        "explanation": "The target  \"abcbc \" can be formed by  \"abc \" and  \"bc \", which are subsequences of source  \"abc \"."
      },
      {
        "input": "source =  \"abc \", target =  \"acdbc \"",
        "output": "-1",
        "explanation": "The target string cannot be constructed from the subsequences of source string due to the character  \"d \" in target string."
      },
      {
        "input": "source =  \"xyz \", target =  \"xzyxz \"",
        "output": "3",
        "explanation": "The target string can be constructed as follows  \"xz \" +  \"y \" +  \"xz \"."
      }
    ],
    "constraints": [
      "`1 <= source.length, target.length <= 1000`",
      "`source` and `target` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1056",
    "slug": "confusing-number",
    "title": "Confusing Number",
    "difficulty": "Easy",
    "description": "A **confusing number** is a number that when rotated `180` degrees becomes a different number with **each digit valid**. We can rotate digits of a number by `180` degrees to form new digits. *  When `0`, `1`, `6`, `8`, and `9` are rotated `180` degrees, they become `0`, `1`, `9`, `8`, and `6` respectively. *  When `2`, `3`, `4`, `5`, and `7` are rotated `180` degrees, they become **invalid**. Note that after rotating a number, we can ignore leading zeros. *  For example, after rotating `8000`, we have `0008` which is considered as just `8`. Given an integer `n`, return `true` _if it is a **confusing number**, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "n = 6",
        "output": "true",
        "explanation": "We get 9 after rotating 6, 9 is a valid number, and 9 != 6."
      },
      {
        "input": "n = 89",
        "output": "true",
        "explanation": "We get 68 after rotating 89, 68 is a valid number and 68 != 89."
      },
      {
        "input": "n = 11",
        "output": "false",
        "explanation": "We get 11 after rotating 11, 11 is a valid number but the value remains the same, thus 11 is not a confusing number"
      }
    ],
    "constraints": [
      "`0 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1057",
    "slug": "campus-bikes",
    "title": "Campus Bikes",
    "difficulty": "Medium",
    "description": "On a campus represented on the X-Y plane, there are `n` workers and `m` bikes, with `n <= m`. You are given an array `workers` of length `n` where `workers[i] = [xi, yi]` is the position of the `ith` worker. You are also given an array `bikes` of length `m` where `bikes[j] = [xj, yj]` is the position of the `jth` bike. All the given positions are **unique**. Assign a bike to each worker. Among the available bikes and workers, we choose the `(workeri, bikej)` pair with the shortest **Manhattan distance** between each other and assign the bike to that worker. If there are multiple `(workeri, bikej)` pairs with the same shortest **Manhattan distance**, we choose the pair with **the smallest worker index**. If there are multiple ways to do that, we choose the pair with **the smallest bike index**. Repeat this process until there are no available workers. Return _an array_ `answer` _of length_ `n`_, where_ `answer[i]` _is the index (**0-indexed**) of the bike that the_ `ith` _worker is assigned to_. The **Manhattan distance** between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.",
    "examples": [
      {
        "input": "workers = \\[\\[0,0\\],\\[2,1\\]\\], bikes = \\[\\[1,2\\],\\[3,3\\]\\]",
        "output": "\\[1,0\\]",
        "explanation": "Worker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is \\[1, 0\\]."
      },
      {
        "input": "workers = \\[\\[0,0\\],\\[1,1\\],\\[2,0\\]\\], bikes = \\[\\[1,0\\],\\[2,2\\],\\[2,1\\]\\]",
        "output": "\\[0,2,1\\]",
        "explanation": "Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is \\[0,2,1\\]."
      }
    ],
    "constraints": [
      "`n == workers.length`",
      "`m == bikes.length`",
      "`1 <= n <= m <= 1000`",
      "`workers[i].length == bikes[j].length == 2`",
      "`0 <= xi, yi < 1000`",
      "`0 <= xj, yj < 1000`",
      "All worker and bike locations are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1058",
    "slug": "minimize-rounding-error-to-meet-target",
    "title": "Minimize Rounding Error to Meet Target",
    "difficulty": "Medium",
    "description": "Given an array of `prices` `[p1,p2...,pn]` and a `target`, round each price `pi` to `Roundi(pi)` so that the rounded array `[Round1(p1),Round2(p2)...,Roundn(pn)]` sums to the given `target`. Each operation `Roundi(pi)` could be either `Floor(pi)` or `Ceil(pi)`. Return the string `\"-1 \"` if the rounded array is impossible to sum to `target`. Otherwise, return the smallest rounding error, which is defined as `\u03a3 |Roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string with three places after the decimal.",
    "examples": [
      {
        "input": "prices = \\[ \"0.700 \", \"2.800 \", \"4.900 \"\\], target = 8",
        "output": "\"1.000 \"",
        "explanation": ""
      },
      {
        "input": "prices = \\[ \"1.500 \", \"2.500 \", \"3.500 \"\\], target = 10",
        "output": "\"-1 \"",
        "explanation": "It is impossible to meet the target."
      },
      {
        "input": "prices = \\[ \"1.500 \", \"2.500 \", \"3.500 \"\\], target = 9",
        "output": "\"1.500 \""
      }
    ],
    "constraints": [
      "`1 <= prices.length <= 500`",
      "Each string `prices[i]` represents a real number in the range `[0.0, 1000.0]` and has exactly 3 decimal places.",
      "`0 <= target <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1059",
    "slug": "all-paths-from-source-lead-to-destination",
    "title": "All Paths from Source Lead to Destination",
    "difficulty": "Medium",
    "description": "Given the `edges` of a directed graph where `edges[i] = [ai, bi]` indicates there is an edge between nodes `ai` and `bi`, and two nodes `source` and `destination` of this graph, determine whether or not all paths starting from `source` eventually, end at `destination`, that is: *  At least one path exists from the `source` node to the `destination` node *  If a path exists from the `source` node to a node with no outgoing edges, then that node is equal to `destination`. *  The number of possible paths from `source` to `destination` is a finite number. Return `true` if and only if all roads from `source` lead to `destination`.",
    "examples": [
      {
        "input": "n = 3, edges = \\[\\[0,1\\],\\[0,2\\]\\], source = 0, destination = 2",
        "output": "false",
        "explanation": "It is possible to reach and get stuck on both node 1 and node 2."
      },
      {
        "input": "n = 4, edges = \\[\\[0,1\\],\\[0,3\\],\\[1,2\\],\\[2,1\\]\\], source = 0, destination = 3",
        "output": "false",
        "explanation": "We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely."
      },
      {
        "input": "n = 4, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,3\\],\\[2,3\\]\\], source = 0, destination = 3",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= n <= 104`",
      "`0 <= edges.length <= 104`",
      "`edges.length == 2`",
      "`0 <= ai, bi <= n - 1`",
      "`0 <= source <= n - 1`",
      "`0 <= destination <= n - 1`",
      "The given graph may have self-loops and parallel edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1060",
    "slug": "missing-element-in-sorted-array",
    "title": "Missing Element in Sorted Array",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` which is sorted in **ascending order** and all of its elements are **unique** and given also an integer `k`, return the `kth` missing number starting from the leftmost number of the array.",
    "examples": [
      {
        "input": "nums = \\[4,7,9,10\\], k = 1",
        "output": "5",
        "explanation": "The first missing number is 5."
      },
      {
        "input": "nums = \\[4,7,9,10\\], k = 3",
        "output": "8",
        "explanation": "The missing numbers are \\[5,6,8,...\\], hence the third missing number is 8."
      },
      {
        "input": "nums = \\[1,2,4\\], k = 3",
        "output": "6",
        "explanation": "The missing numbers are \\[3,5,6,7,...\\], hence the third missing number is 6."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  104`",
      "`1 <= nums[i] <= 107`",
      "`nums` is sorted in ascending order, and all the elements are unique.",
      "`1 <= k <= 108`",
      "Follow up: Can you find a logarithmic time complexity (i.e., `O(log(n))`) solution?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1061",
    "slug": "lexicographically-smallest-equivalent-string",
    "title": "Lexicographically Smallest Equivalent String",
    "difficulty": "Medium",
    "description": "You are given two strings of the same length `s1` and `s2` and a string `baseStr`. We say `s1[i]` and `s2[i]` are equivalent characters. *  For example, if `s1 = \"abc \"` and `s2 = \"cde \"`, then we have `'a' == 'c'`, `'b' == 'd'`, and `'c' == 'e'`. Equivalent characters follow the usual rules of any equivalence relation: *  **Reflexivity:** `'a' == 'a'`. *  **Symmetry:** `'a' == 'b'` implies `'b' == 'a'`. *  **Transitivity:** `'a' == 'b'` and `'b' == 'c'` implies `'a' == 'c'`. For example, given the equivalency information from `s1 = \"abc \"` and `s2 = \"cde \"`, `\"acd \"` and `\"aab \"` are equivalent strings of `baseStr = \"eed \"`, and `\"aab \"` is the lexicographically smallest equivalent string of `baseStr`. Return _the lexicographically smallest equivalent string of_ `baseStr` _by using the equivalency information from_ `s1` _and_ `s2`.",
    "examples": [
      {
        "input": "s1 =  \"parker \", s2 =  \"morris \", baseStr =  \"parser \"",
        "output": "\"makkek \"",
        "explanation": "Based on the equivalency information in s1 and s2, we can group their characters as \\[m,p\\], \\[a,o\\], \\[k,r,s\\], \\[e,i\\]."
      },
      {
        "input": "s1 =  \"hello \", s2 =  \"world \", baseStr =  \"hold \"",
        "output": "\"hdld \"",
        "explanation": "Based on the equivalency information in s1 and s2, we can group their characters as \\[h,w\\], \\[d,e,o\\], \\[l,r\\]."
      },
      {
        "input": "s1 =  \"leetcode \", s2 =  \"programs \", baseStr =  \"sourcecode \"",
        "output": "\"aauaaaaada \"",
        "explanation": "We group the equivalent characters in s1 and s2 as \\[a,o,e,r,s,c\\], \\[l,p\\], \\[g,t\\] and \\[d,m\\], thus all letters in baseStr except 'u' and 'd' are transformed to 'a', the answer is  \"aauaaaaada \"."
      }
    ],
    "constraints": [
      "`1 <= s1.length, s2.length, baseStr <= 1000`",
      "`s1.length == s2.length`",
      "`s1`, `s2`, and `baseStr` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1062",
    "slug": "longest-repeating-substring",
    "title": "Longest Repeating Substring",
    "difficulty": "Medium",
    "description": "Given a string `s`, return _the length of the longest repeating substrings_. If no repeating substring exists, return `0`.",
    "examples": [
      {
        "input": "s =  \"abcd \"",
        "output": "0",
        "explanation": "There is no repeating substring."
      },
      {
        "input": "s =  \"abbaba \"",
        "output": "2",
        "explanation": "The longest repeating substrings are  \"ab \" and  \"ba \", each of which occurs twice."
      },
      {
        "input": "s =  \"aabcaabdaab \"",
        "output": "3",
        "explanation": "The longest repeating substring is  \"aab \", which occurs `3` times."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 2000`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1063",
    "slug": "number-of-valid-subarrays",
    "title": "Number of Valid Subarrays",
    "difficulty": "Hard",
    "description": "Given an integer array `nums`, return _the number of non-empty **subarrays** with the leftmost element of the subarray not larger than other elements in the subarray_. A **subarray** is a **contiguous** part of an array.",
    "examples": [
      {
        "input": "nums = \\[1,4,2,5,3\\]",
        "output": "11",
        "explanation": "There are 11 valid subarrays: \\[1\\],\\[4\\],\\[2\\],\\[5\\],\\[3\\],\\[1,4\\],\\[2,5\\],\\[1,4,2\\],\\[2,5,3\\],\\[1,4,2,5\\],\\[1,4,2,5,3\\]."
      },
      {
        "input": "nums = \\[3,2,1\\]",
        "output": "3",
        "explanation": "The 3 valid subarrays are: \\[3\\],\\[2\\],\\[1\\]."
      },
      {
        "input": "nums = \\[2,2,2\\]",
        "output": "6",
        "explanation": "There are 6 valid subarrays: \\[2\\],\\[2\\],\\[2\\],\\[2,2\\],\\[2,2\\],\\[2,2,2\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  104`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1064",
    "slug": "fixed-point",
    "title": "Fixed Point",
    "difficulty": "Easy",
    "description": "Given an array of distinct integers `arr`, where `arr` is sorted in **ascending order**, return the smallest index `i` that satisfies `arr[i] == i`. If there is no such index, return `-1`.",
    "examples": [
      {
        "input": "arr = \\[-10,-5,0,3,7\\]",
        "output": "3",
        "explanation": "For the given array, `arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3`, thus the output is 3."
      },
      {
        "input": "arr = \\[0,2,5,8,17\\]",
        "output": "0",
        "explanation": "`arr[0] = 0`, thus the output is 0."
      },
      {
        "input": "arr = \\[-10,-5,3,4,7,9\\]",
        "output": "-1",
        "explanation": "There is no such `i` that `arr[i] == i`, thus the output is -1."
      }
    ],
    "constraints": [
      "`1 <= arr.length < 104`",
      "`-109 <= arr[i] <= 109`",
      "Follow up: The `O(n)` solution is very straightforward. Can we do better?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1065",
    "slug": "index-pairs-of-a-string",
    "title": "Index Pairs of a String",
    "difficulty": "Easy",
    "description": "Given a string `text` and an array of strings `words`, return _an array of all index pairs_ `[i, j]` _so that the substring_ `text[i...j]` _is in `words`_. Return the pairs `[i, j]` in sorted order (i.e., sort them by their first coordinate, and in case of ties sort them by their second coordinate).",
    "examples": [
      {
        "input": "text =  \"thestoryofleetcodeandme \", words = \\[ \"story \", \"fleet \", \"leetcode \"\\]",
        "output": "\\[\\[3,7\\],\\[9,13\\],\\[10,17\\]\\]"
      },
      {
        "input": "text =  \"ababa \", words = \\[ \"aba \", \"ab \"\\]",
        "output": "\\[\\[0,1\\],\\[0,2\\],\\[2,3\\],\\[2,4\\]\\]",
        "explanation": "Notice that matches can overlap, see  \"aba \" is found in \\[0,2\\] and \\[2,4\\]."
      }
    ],
    "constraints": [
      "`1 <= text.length <= 100`",
      "`1 <= words.length <= 20`",
      "`1 <= words[i].length <= 50`",
      "`text` and `words[i]` consist of lowercase English letters.",
      "All the strings of `words` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1066",
    "slug": "campus-bikes-ii",
    "title": "Campus Bikes II",
    "difficulty": "Medium",
    "description": "On a campus represented as a 2D grid, there are `n` workers and `m` bikes, with `n <= m`. Each worker and bike is a 2D coordinate on this grid. We assign one unique bike to each worker so that the sum of the **Manhattan distances** between each worker and their assigned bike is minimized. Return `the minimum possible sum of Manhattan distances between each worker and their assigned bike`. The **Manhattan distance** between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.",
    "examples": [
      {
        "input": "workers = \\[\\[0,0\\],\\[2,1\\]\\], bikes = \\[\\[1,2\\],\\[3,3\\]\\]",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "workers = \\[\\[0,0\\],\\[1,1\\],\\[2,0\\]\\], bikes = \\[\\[1,0\\],\\[2,2\\],\\[2,1\\]\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "workers = \\[\\[0,0\\],\\[1,0\\],\\[2,0\\],\\[3,0\\],\\[4,0\\]\\], bikes = \\[\\[0,999\\],\\[1,999\\],\\[2,999\\],\\[3,999\\],\\[4,999\\]\\]",
        "output": "4995"
      }
    ],
    "constraints": [
      "`n == workers.length`",
      "`m == bikes.length`",
      "`1 <= n <= m <= 10`",
      "`workers[i].length == 2`",
      "`bikes[i].length == 2`",
      "`0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000`",
      "All the workers and the bikes locations are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1067",
    "slug": "digit-count-in-range",
    "title": "Digit Count in Range",
    "difficulty": "Hard",
    "description": "Given a single-digit integer `d` and two integers `low` and `high`, return _the number of times that_ `d` _occurs as a digit in all integers in the inclusive range_ `[low, high]`.",
    "examples": [
      {
        "input": "d = 1, low = 1, high = 13",
        "output": "6",
        "explanation": "The digit d = 1 occurs 6 times in 1, 10, 11, 12, 13."
      },
      {
        "input": "d = 3, low = 100, high = 250",
        "output": "35",
        "explanation": "The digit d = 3 occurs 35 times in 103,113,123,130,131,...,238,239,243."
      }
    ],
    "constraints": [
      "`0 <= d <= 9`",
      "`1 <= low <= high <= 2  108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1071",
    "slug": "greatest-common-divisor-of-strings",
    "title": "Greatest Common Divisor of Strings",
    "difficulty": "Easy",
    "description": "For two strings `s` and `t`, we say \"`t` divides `s` \" if and only if `s = t + ... + t` (i.e., `t` is concatenated with itself one or more times). Given two strings `str1` and `str2`, return _the largest string_ `x` _such that_ `x` _divides both_ `str1` _and_ `str2`.",
    "examples": [
      {
        "input": "str1 =  \"ABCABC \", str2 =  \"ABC \"",
        "output": "\"ABC \""
      },
      {
        "input": "str1 =  \"ABABAB \", str2 =  \"ABAB \"",
        "output": "\"AB \""
      },
      {
        "input": "str1 =  \"LEET \", str2 =  \"CODE \"",
        "output": "\" \""
      }
    ],
    "constraints": [
      "`1 <= str1.length, str2.length <= 1000`",
      "`str1` and `str2` consist of English uppercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1072",
    "slug": "flip-columns-for-maximum-number-of-equal-rows",
    "title": "Flip Columns For Maximum Number of Equal Rows",
    "difficulty": "Medium",
    "description": "You are given an `m x n` binary matrix `matrix`. You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from `0` to `1` or vice versa). Return _the maximum number of rows that have all values equal after some number of flips_.",
    "examples": [
      {
        "input": "matrix = \\[\\[0,1\\],\\[1,1\\]\\]",
        "output": "1",
        "explanation": "After flipping no values, 1 row has all values equal."
      },
      {
        "input": "matrix = \\[\\[0,1\\],\\[1,0\\]\\]",
        "output": "2",
        "explanation": "After flipping values in the first column, both rows have equal values."
      },
      {
        "input": "matrix = \\[\\[0,0,0\\],\\[0,0,1\\],\\[1,1,0\\]\\]",
        "output": "2",
        "explanation": "After flipping values in the first two columns, the last two rows have equal values."
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 300`",
      "`matrix[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1073",
    "slug": "adding-two-negabinary-numbers",
    "title": "Adding Two Negabinary Numbers",
    "difficulty": "Medium",
    "description": "Given two numbers `arr1` and `arr2` in base **\\-2**, return the result of adding them together. Each number is given in _array format_: as an array of 0s and 1s, from most significant bit to least significant bit. For example, `arr = [1,1,0,1]` represents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`. A number `arr` in _array, format_ is also guaranteed to have no leading zeros: either `arr == [0]` or `arr[0] == 1`. Return the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros.",
    "examples": [
      {
        "input": "arr1 = \\[1,1,1,1,1\\], arr2 = \\[1,0,1\\]",
        "output": "\\[1,0,0,0,0\\]",
        "explanation": "arr1 represents 11, arr2 represents 5, the output represents 16."
      },
      {
        "input": "arr1 = \\[0\\], arr2 = \\[0\\]",
        "output": "\\[0\\]"
      },
      {
        "input": "arr1 = \\[0\\], arr2 = \\[1\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "`1 <= arr1.length, arr2.length <= 1000`",
      "`arr1[i]` and `arr2[i]` are `0` or `1`",
      "`arr1` and `arr2` have no leading zeros"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1074",
    "slug": "number-of-submatrices-that-sum-to-target",
    "title": "Number of Submatrices That Sum to Target",
    "difficulty": "Hard",
    "description": "Given a `matrix` and a `target`, return the number of non-empty submatrices that sum to target. A submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1 <= x <= x2` and `y1 <= y <= y2`. Two submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some coordinate that is different: for example, if `x1 != x1'`.",
    "examples": [
      {
        "input": "matrix = \\[\\[0,1,0\\],\\[1,1,1\\],\\[0,1,0\\]\\], target = 0",
        "output": "4",
        "explanation": "The four 1x1 submatrices that only contain 0."
      },
      {
        "input": "matrix = \\[\\[1,-1\\],\\[-1,1\\]\\], target = 0",
        "output": "5",
        "explanation": "The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix."
      },
      {
        "input": "matrix = \\[\\[904\\]\\], target = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= matrix.length <= 100`",
      "`1 <= matrix[0].length <= 100`",
      "`-1000 <= matrix[i] <= 1000`",
      "`-10^8 <= target <= 10^8`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1078",
    "slug": "occurrences-after-bigram",
    "title": "Occurrences After Bigram",
    "difficulty": "Easy",
    "description": "Given two strings `first` and `second`, consider occurrences in some text of the form `\"first second third \"`, where `second` comes immediately after `first`, and `third` comes immediately after `second`. Return _an array of all the words_ `third` _for each occurrence of_ `\"first second third \"`.",
    "examples": [
      {
        "input": "text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"",
        "output": "\\[\"girl\",\"student\"\\]"
      },
      {
        "input": "text = \"we will we will rock you\", first = \"we\", second = \"will\"",
        "output": "\\[\"we\",\"rock\"\\]"
      }
    ],
    "constraints": [
      "`1 <= text.length <= 1000`",
      "`text` consists of lowercase English letters and spaces.",
      "All the words in `text` a separated by a single space.",
      "`1 <= first.length, second.length <= 10`",
      "`first` and `second` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1079",
    "slug": "letter-tile-possibilities",
    "title": "Letter Tile Possibilities",
    "difficulty": "Medium",
    "description": "You have `n` `tiles`, where each tile has one letter `tiles[i]` printed on it. Return _the number of possible non-empty sequences of letters_ you can make using the letters printed on those `tiles`.",
    "examples": [
      {
        "input": "tiles =  \"AAB \"",
        "output": "8",
        "explanation": "The possible sequences are  \"A \",  \"B \",  \"AA \",  \"AB \",  \"BA \",  \"AAB \",  \"ABA \",  \"BAA \"."
      },
      {
        "input": "tiles =  \"AAABBC \"",
        "output": "188"
      },
      {
        "input": "tiles =  \"V \"",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= tiles.length <= 7`",
      "`tiles` consists of uppercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1080",
    "slug": "insufficient-nodes-in-root-to-leaf-paths",
    "title": "Insufficient Nodes in Root to Leaf Paths",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree and an integer `limit`, delete all **insufficient nodes** in the tree simultaneously, and return _the root of the resulting binary tree_. A node is **insufficient** if every root to **leaf** path intersecting this node has a sum strictly less than `limit`. A **leaf** is a node with no children.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14\\], limit = 1",
        "output": "\\[1,2,3,4,null,null,7,8,9,null,14\\]"
      },
      {
        "input": "root = \\[5,4,8,11,null,17,4,7,1,null,null,5,3\\], limit = 22",
        "output": "\\[5,4,8,11,null,17,4,7,null,null,null,5\\]"
      },
      {
        "input": "root = \\[1,2,-3,-5,null,4,null\\], limit = -1",
        "output": "\\[1,null,-3,4\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 5000]`.",
      "`-105 <= Node.val <= 105`",
      "`-109 <= limit <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1081",
    "slug": "smallest-subsequence-of-distinct-characters",
    "title": "Smallest Subsequence of Distinct Characters",
    "difficulty": "Medium",
    "description": "Given a string `s`, return _the_ _lexicographically smallest_ _subsequence_ _of_ `s` _that contains all the distinct characters of_ `s` _exactly once_.",
    "examples": [
      {
        "input": "s =  \"bcabc \"",
        "output": "\"abc \""
      },
      {
        "input": "s =  \"cbacdcbc \"",
        "output": "\"acdb \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of lowercase English letters."
    ],
    "note": "This question is the same as 316: [https://leetcode.com/problems/remove-duplicate-letters/](https://leetcode.com/problems/remove-duplicate-letters/)",
    "follow_up": null
  },
  {
    "id": "1085",
    "slug": "sum-of-digits-in-the-minimum-number",
    "title": "Sum of Digits in the Minimum Number",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, return `0` _if the sum of the digits of the minimum integer in_ `nums` _is odd, or_ `1` _otherwise_.",
    "examples": [
      {
        "input": "nums = \\[34,23,1,24,75,33,54,8\\]",
        "output": "0",
        "explanation": "The minimal element is 1, and the sum of those digits is 1 which is odd, so the answer is 0."
      },
      {
        "input": "nums = \\[99,77,33,66,55\\]",
        "output": "1",
        "explanation": "The minimal element is 33, and the sum of those digits is 3 + 3 = 6 which is even, so the answer is 1."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1086",
    "slug": "high-five",
    "title": "High Five",
    "difficulty": "Easy",
    "description": "Given a list of the scores of different students, `items`, where `items[i] = [IDi, scorei]` represents one score from a student with `IDi`, calculate each student's **top five average**. Return _the answer as an array of pairs_ `result`_, where_ `result[j] = [IDj, topFiveAveragej]` _represents the student with_ `IDj` _and their **top five average**. Sort_ `result` _by_ `IDj` _in **increasing order**._ A student's **top five average** is calculated by taking the sum of their top five scores and dividing it by `5` using **integer division**.",
    "examples": [
      {
        "input": "items = \\[\\[1,91\\],\\[1,92\\],\\[2,93\\],\\[2,97\\],\\[1,60\\],\\[2,77\\],\\[1,65\\],\\[1,87\\],\\[1,100\\],\\[2,100\\],\\[2,76\\]\\]",
        "output": "\\[\\[1,87\\],\\[2,88\\]\\]",
        "explanation": ""
      },
      {
        "input": "items = \\[\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\]\\]",
        "output": "\\[\\[1,100\\],\\[7,100\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= items.length <= 1000`",
      "`items[i].length == 2`",
      "`1 <= IDi <= 1000`",
      "`0 <= scorei <= 100`",
      "For each `IDi`, there will be at least five scores."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1087",
    "slug": "brace-expansion",
    "title": "Brace Expansion",
    "difficulty": "Medium",
    "description": "You are given a string `s` representing a list of words. Each letter in the word has one or more options. *  If there is one option, the letter is represented as is. *  If there is more than one option, then curly braces delimit the options. For example, `\"{a,b,c} \"` represents options `[ \"a \", \"b \", \"c \"]`. For example, if `s = \"a{b,c} \"`, the first character is always `'a'`, but the second character can be `'b'` or `'c'`. The original list is `[ \"ab \", \"ac \"]`. Return all words that can be formed in this manner, **sorted** in lexicographical order.",
    "examples": [
      {
        "input": "s = \"{a,b}c{d,e}f\"",
        "output": "\\[\"acdf\",\"acef\",\"bcdf\",\"bcef\"\\]"
      },
      {
        "input": "s = \"abcd\"",
        "output": "\\[\"abcd\"\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 50`",
      "`s` consists of curly brackets `'{}'`, commas `','`, and lowercase English letters.",
      "`s` is guaranteed to be a valid input.",
      "There are no nested curly brackets.",
      "All characters inside a pair of consecutive opening and ending curly brackets are different."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1088",
    "slug": "confusing-number-ii",
    "title": "Confusing Number II",
    "difficulty": "Hard",
    "description": "A **confusing number** is a number that when rotated `180` degrees becomes a different number with **each digit valid**. We can rotate digits of a number by `180` degrees to form new digits. *  When `0`, `1`, `6`, `8`, and `9` are rotated `180` degrees, they become `0`, `1`, `9`, `8`, and `6` respectively. *  When `2`, `3`, `4`, `5`, and `7` are rotated `180` degrees, they become **invalid**. Note that after rotating a number, we can ignore leading zeros. *  For example, after rotating `8000`, we have `0008` which is considered as just `8`. Given an integer `n`, return _the number of **confusing numbers** in the inclusive range_ `[1, n]`.",
    "examples": [
      {
        "input": "n = 20",
        "output": "6",
        "explanation": "The confusing numbers are \\[6,9,10,16,18,19\\]."
      },
      {
        "input": "n = 100",
        "output": "19",
        "explanation": "The confusing numbers are \\[6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100\\]."
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1089",
    "slug": "duplicate-zeros",
    "title": "Duplicate Zeros",
    "difficulty": "Easy",
    "description": "Given a fixed-length integer array `arr`, duplicate each occurrence of zero, shifting the remaining elements to the right. **Note** that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.",
    "examples": [
      {
        "input": "arr = \\[1,0,2,3,0,4,5,0\\]",
        "output": "\\[1,0,0,2,3,0,0,4\\]",
        "explanation": "After calling your function, the input array is modified to: \\[1,0,0,2,3,0,0,4\\]"
      },
      {
        "input": "arr = \\[1,2,3\\]",
        "output": "\\[1,2,3\\]",
        "explanation": "After calling your function, the input array is modified to: \\[1,2,3\\]"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 104`",
      "`0 <= arr[i] <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1090",
    "slug": "largest-values-from-labels",
    "title": "Largest Values From Labels",
    "difficulty": "Medium",
    "description": "There is a set of `n` items. You are given two integer arrays `values` and `labels` where the value and the label of the `ith` element are `values[i]` and `labels[i]` respectively. You are also given two integers `numWanted` and `useLimit`. Choose a subset `s` of the `n` elements such that: *  The size of the subset `s` is **less than or equal to** `numWanted`. *  There are **at most** `useLimit` items with the same label in `s`. The **score** of a subset is the sum of the values in the subset. Return _the maximum **score** of a subset_ `s`.",
    "examples": [
      {
        "input": "values = \\[5,4,3,2,1\\], labels = \\[1,1,2,2,3\\], numWanted = 3, useLimit = 1",
        "output": "9",
        "explanation": "The subset chosen is the first, third, and fifth items."
      },
      {
        "input": "values = \\[5,4,3,2,1\\], labels = \\[1,3,3,3,2\\], numWanted = 3, useLimit = 2",
        "output": "12",
        "explanation": "The subset chosen is the first, second, and third items."
      },
      {
        "input": "values = \\[9,8,8,7,6\\], labels = \\[0,0,0,1,1\\], numWanted = 3, useLimit = 1",
        "output": "16",
        "explanation": "The subset chosen is the first and fourth items."
      }
    ],
    "constraints": [
      "`n == values.length == labels.length`",
      "`1 <= n <= 2  104`",
      "`0 <= values[i], labels[i] <= 2  104`",
      "`1 <= numWanted, useLimit <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1091",
    "slug": "shortest-path-in-binary-matrix",
    "title": "Shortest Path in Binary Matrix",
    "difficulty": "Medium",
    "description": "Given an `n x n` binary matrix `grid`, return _the length of the shortest **clear path** in the matrix_. If there is no clear path, return `-1`. A **clear path** in a binary matrix is a path from the **top-left** cell (i.e., `(0, 0)`) to the **bottom-right** cell (i.e., `(n - 1, n - 1)`) such that: *  All the visited cells of the path are `0`. *  All the adjacent cells of the path are **8-directionally** connected (i.e., they are different and they share an edge or a corner). The **length of a clear path** is the number of visited cells of this path.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1\\],\\[1,0\\]\\]",
        "output": "2"
      },
      {
        "input": "grid = \\[\\[0,0,0\\],\\[1,1,0\\],\\[1,1,0\\]\\]",
        "output": "4"
      },
      {
        "input": "grid = \\[\\[1,0,0\\],\\[1,1,0\\],\\[1,1,0\\]\\]",
        "output": "-1"
      }
    ],
    "constraints": [
      "`n == grid.length`",
      "`n == grid[i].length`",
      "`1 <= n <= 100`",
      "`grid[i][j] is 0 or 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1092",
    "slug": "shortest-common-supersequence",
    "title": "Shortest Common Supersequence ",
    "difficulty": "Hard",
    "description": "Given two strings `str1` and `str2`, return _the shortest string that has both_ `str1` _and_ `str2` _as **subsequences**_. If there are multiple valid strings, return **any** of them. A string `s` is a **subsequence** of string `t` if deleting some number of characters from `t` (possibly `0`) results in the string `s`.",
    "examples": [
      {
        "input": "str1 =  \"abac \", str2 =  \"cab \"",
        "output": "\"cabac \"",
        "explanation": ""
      },
      {
        "input": "str1 =  \"aaaaaaaa \", str2 =  \"aaaaaaaa \"",
        "output": "\"aaaaaaaa \""
      }
    ],
    "constraints": [
      "`1 <= str1.length, str2.length <= 1000`",
      "`str1` and `str2` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1093",
    "slug": "statistics-from-a-large-sample",
    "title": "Statistics from a Large Sample",
    "difficulty": "Medium",
    "description": "You are given a large sample of integers in the range `[0, 255]`. Since the sample is so large, it is represented by an array `count` where `count[k]` is the **number of times** that `k` appears in the sample. Calculate the following statistics: *  `minimum`: The minimum element in the sample. *  `maximum`: The maximum element in the sample. *  `mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements. *  `median`: *  If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted. *  If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted. *  `mode`: The number that appears the most in the sample. It is guaranteed to be **unique**. Return _the statistics of the sample as an array of floating-point numbers_ `[minimum, maximum, mean, median, mode]`_. Answers within_ `10-5` _of the actual answer will be accepted._",
    "examples": [
      {
        "input": "count = \\[0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\]",
        "output": "\\[1.00000,3.00000,2.37500,2.50000,3.00000\\]",
        "explanation": "The sample represented by count is \\[1,2,2,2,3,3,3,3\\]."
      },
      {
        "input": "count = \\[0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\]",
        "output": "\\[1.00000,4.00000,2.18182,2.00000,1.00000\\]",
        "explanation": "The sample represented by count is \\[1,1,1,1,2,2,2,3,3,4,4\\]."
      }
    ],
    "constraints": [
      "`count.length == 256`",
      "`0 <= count[i] <= 109`",
      "`1 <= sum(count) <= 109`",
      "The mode of the sample that `count` represents is unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1094",
    "slug": "car-pooling",
    "title": "Car Pooling",
    "difficulty": "Medium",
    "description": "There is a car with `capacity` empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west). You are given the integer `capacity` and an array `trips` where `trips[i] = [numPassengersi, fromi, toi]` indicates that the `ith` trip has `numPassengersi` passengers and the locations to pick them up and drop them off are `fromi` and `toi` respectively. The locations are given as the number of kilometers due east from the car's initial location. Return `true` _if it is possible to pick up and drop off all passengers for all the given trips, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "trips = \\[\\[2,1,5\\],\\[3,3,7\\]\\], capacity = 4",
        "output": "false"
      },
      {
        "input": "trips = \\[\\[2,1,5\\],\\[3,3,7\\]\\], capacity = 5",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= trips.length <= 1000`",
      "`trips[i].length == 3`",
      "`1 <= numPassengersi <= 100`",
      "`0 <= fromi < toi <= 1000`",
      "`1 <= capacity <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1095",
    "slug": "find-in-mountain-array",
    "title": "Find in Mountain Array",
    "difficulty": "Hard",
    "description": "_(This problem is an **interactive problem**.)_ You may recall that an array `arr` is a **mountain array** if and only if: *  `arr.length >= 3` *  There exists some `i` with `0 < i < arr.length - 1` such that: *  `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` *  `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` Given a mountain array `mountainArr`, return the **minimum** `index` such that `mountainArr.get(index) == target`. If such an `index` does not exist, return `-1`. **You cannot access the mountain array directly.** You may only access the array using a `MountainArray` interface: *  `MountainArray.get(k)` returns the element of the array at index `k` (0-indexed). *  `MountainArray.length()` returns the length of the array. Submissions making more than `100` calls to `MountainArray.get` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification.",
    "examples": [
      {
        "input": "array = \\[1,2,3,4,5,3,1\\], target = 3",
        "output": "2",
        "explanation": "3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2."
      },
      {
        "input": "array = \\[0,1,2,4,2,1\\], target = 3",
        "output": "-1",
        "explanation": "3 does not exist in `the array,` so we return -1."
      }
    ],
    "constraints": [
      "`3 <= mountain_arr.length() <= 104`",
      "`0 <= target <= 109`",
      "`0 <= mountain_arr.get(index) <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1096",
    "slug": "brace-expansion-ii",
    "title": "Brace Expansion II",
    "difficulty": "Hard",
    "description": "Under the grammar given below, strings can represent a set of lowercase words. Let `R(expr)` denote the set of words the expression represents. The grammar can best be understood through simple examples: *  Single letters represent a singleton set containing that word. *  `R( \"a \") = { \"a \"}` *  `R( \"w \") = { \"w \"}` *  When we take a comma-delimited list of two or more expressions, we take the union of possibilities. *  `R( \"{a,b,c} \") = { \"a \", \"b \", \"c \"}` *  `R( \"{{a,b},{b,c}} \") = { \"a \", \"b \", \"c \"}` (notice the final set only contains each word at most once) *  When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression. *  `R( \"{a,b}{c,d} \") = { \"ac \", \"ad \", \"bc \", \"bd \"}` *  `R( \"a{b,c}{d,e}f{g,h} \") = { \"abdfg \", \"abdfh \", \"abefg \", \"abefh \", \"acdfg \", \"acdfh \", \"acefg \", \"acefh \"}` Formally, the three rules for our grammar: *  For every lowercase letter `x`, we have `R(x) = {x}`. *  For expressions `e1, e2, ... , ek` with `k >= 2`, we have `R({e1, e2, ...}) = R(e1) \u222a R(e2) \u222a ...` *  For expressions `e1` and `e2`, we have `R(e1 + e2) = {a + b for (a, b) in R(e1) * R(e2)}`, where `+` denotes concatenation, and `*` denotes the cartesian product. Given an expression representing a set of words under the given grammar, return _the sorted list of words that the expression represents_.",
    "examples": [
      {
        "input": "expression =  \"{a,b}{c,{d,e}} \"",
        "output": "\\[ \"ac \", \"ad \", \"ae \", \"bc \", \"bd \", \"be \"\\]"
      },
      {
        "input": "expression =  \"{{a,z},a{b,c},{ab,z}} \"",
        "output": "\\[ \"a \", \"ab \", \"ac \", \"z \"\\]",
        "explanation": "Each distinct word is written only once in the final answer."
      }
    ],
    "constraints": [
      "`1 <= expression.length <= 60`",
      "`expression[i]` consists of `'{'`, `'}'`, `','`or lowercase English letters.",
      "The given `expression` represents a set of words based on the grammar given in the description."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1099",
    "slug": "two-sum-less-than-k",
    "title": "Two Sum Less Than K",
    "difficulty": "Easy",
    "description": "Given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. If no `i`, `j` exist satisfying this equation, return `-1`.",
    "examples": [
      {
        "input": "nums = \\[34,23,1,24,75,33,54,8\\], k = 60",
        "output": "58",
        "explanation": "We can use 34 and 24 to sum 58 which is less than 60."
      },
      {
        "input": "nums = \\[10,20,30\\], k = 15",
        "output": "-1",
        "explanation": "In this case it is not possible to get a pair sum less that 15."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i] <= 1000`",
      "`1 <= k <= 2000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1100",
    "slug": "find-k-length-substrings-with-no-repeated-characters",
    "title": "Find K-Length Substrings With No Repeated Characters",
    "difficulty": "Medium",
    "description": "Given a string `s` and an integer `k`, return _the number of substrings in_ `s` _of length_ `k` _with no repeated characters_.",
    "examples": [
      {
        "input": "s =  \"havefunonleetcode \", k = 5",
        "output": "6",
        "explanation": "There are 6 substrings they are: 'havef','avefu','vefun','efuno','etcod','tcode'."
      },
      {
        "input": "s =  \"home \", k = 5",
        "output": "0",
        "explanation": "Notice k can be larger than the length of s. In this case, it is not possible to find any substring."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of lowercase English letters.",
      "`1 <= k <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1101",
    "slug": "the-earliest-moment-when-everyone-become-friends",
    "title": "The Earliest Moment When Everyone Become Friends",
    "difficulty": "Medium",
    "description": "There are n people in a social group labeled from `0` to `n - 1`. You are given an array `logs` where `logs[i] = [timestampi, xi, yi]` indicates that `xi` and `yi` will be friends at the time `timestampi`. Friendship is **symmetric**. That means if `a` is friends with `b`, then `b` is friends with `a`. Also, person `a` is acquainted with a person `b` if `a` is friends with `b`, or `a` is a friend of someone acquainted with `b`. Return _the earliest time for which every person became acquainted with every other person_. If there is no such earliest time, return `-1`.",
    "examples": [
      {
        "input": "logs = \\[\\[20190101,0,1\\],\\[20190104,3,4\\],\\[20190107,2,3\\],\\[20190211,1,5\\],\\[20190224,2,4\\],\\[20190301,0,3\\],\\[20190312,1,2\\],\\[20190322,4,5\\]\\], n = 6",
        "output": "20190301",
        "explanation": ""
      },
      {
        "input": "logs = \\[\\[0,2,0\\],\\[1,0,1\\],\\[3,0,3\\],\\[4,1,2\\],\\[7,3,1\\]\\], n = 4",
        "output": "3",
        "explanation": "At timestamp = 3, all the persons (i.e., 0, 1, 2, and 3) become friends."
      }
    ],
    "constraints": [
      "`2 <= n <= 100`",
      "`1 <= logs.length <= 104`",
      "`logs[i].length == 3`",
      "`0 <= timestampi <= 109`",
      "`0 <= xi, yi <= n - 1`",
      "`xi != yi`",
      "All the values `timestampi` are unique.",
      "All the pairs `(xi, yi)` occur at most one time in the input."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1102",
    "slug": "path-with-maximum-minimum-value",
    "title": "Path With Maximum Minimum Value",
    "difficulty": "Medium",
    "description": "Given an `m x n` integer matrix `grid`, return _the maximum **score** of a path starting at_ `(0, 0)` _and ending at_ `(m - 1, n - 1)` moving in the 4 cardinal directions. The **score** of a path is the minimum value in that path. *  For example, the score of the path `8 -> 4 -> 5 -> 9` is `4`.",
    "examples": [
      {
        "input": "grid = \\[\\[5,4,5\\],\\[1,2,6\\],\\[7,4,6\\]\\]",
        "output": "4",
        "explanation": "The path with the maximum score is highlighted in yellow."
      },
      {
        "input": "grid = \\[\\[2,2,1,2,2,2\\],\\[1,2,2,2,1,2\\]\\]",
        "output": "2"
      },
      {
        "input": "grid = \\[\\[3,4,6,3,4\\],\\[0,2,1,1,7\\],\\[8,8,3,2,7\\],\\[3,2,4,9,8\\],\\[4,1,2,0,0\\],\\[4,6,5,4,3\\]\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 100`",
      "`0 <= grid[i][j] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1103",
    "slug": "distribute-candies-to-people",
    "title": "Distribute Candies to People",
    "difficulty": "Easy",
    "description": "We distribute some number of `candies`, to a row of **`n = num_people`** people in the following way: We then give 1 candy to the first person, 2 candies to the second person, and so on until we give `n` candies to the last person. Then, we go back to the start of the row, giving `n + 1` candies to the first person, `n + 2` candies to the second person, and so on until we give `2 * n` candies to the last person. This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies. The last person will receive all of our remaining candies (not necessarily one more than the previous gift). Return an array (of length `num_people` and sum `candies`) that represents the final distribution of candies.",
    "examples": [
      {
        "input": "candies = 7, num\\_people = 4",
        "output": "\\[1,2,3,1\\]",
        "explanation": ""
      },
      {
        "input": "candies = 10, num\\_people = 3",
        "output": "\\[5,2,3\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "1 <= candies <= 10^9",
      "1 <= num\\_people <= 1000"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1104",
    "slug": "path-in-zigzag-labelled-binary-tree",
    "title": "Path In Zigzag Labelled Binary Tree",
    "difficulty": "Medium",
    "description": "In an infinite binary tree where every node has two children, the nodes are labelled in row order. In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left. Given the `label` of a node in this tree, return the labels in the path from the root of the tree to the node with that `label`.",
    "examples": [
      {
        "input": "label = 14",
        "output": "\\[1,3,4,14\\]"
      },
      {
        "input": "label = 26",
        "output": "\\[1,2,6,10,26\\]"
      }
    ],
    "constraints": [
      "`1 <= label <= 10^6`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1105",
    "slug": "filling-bookcase-shelves",
    "title": "Filling Bookcase Shelves",
    "difficulty": "Medium",
    "description": "You are given an array `books` where `books[i] = [thicknessi, heighti]` indicates the thickness and height of the `ith` book. You are also given an integer `shelfWidth`. We want to place these books in order onto bookcase shelves that have a total width `shelfWidth`. We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to `shelfWidth`, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place. Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books. *  For example, if we have an ordered list of `5` books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf. Return _the minimum possible height that the total bookshelf can be after placing shelves in this manner_.",
    "examples": [
      {
        "input": "books = \\[\\[1,1\\],\\[2,3\\],\\[2,3\\],\\[1,1\\],\\[1,1\\],\\[1,1\\],\\[1,2\\]\\], shelfWidth = 4",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "books = \\[\\[1,3\\],\\[2,4\\],\\[3,2\\]\\], shelfWidth = 6",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= books.length <= 1000`",
      "`1 <= thicknessi <= shelfWidth <= 1000`",
      "`1 <= heighti <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1106",
    "slug": "parsing-a-boolean-expression",
    "title": "Parsing A Boolean Expression",
    "difficulty": "Hard",
    "description": "A **boolean expression** is an expression that evaluates to either `true` or `false`. It can be in one of the following shapes: *  `'t'` that evaluates to `true`. *  `'f'` that evaluates to `false`. *  `'!(subExpr)'` that evaluates to **the logical NOT** of the inner expression `subExpr`. *  `'&(subExpr1, subExpr2, ..., subExprn)'` that evaluates to **the logical AND** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`. *  `'|(subExpr1, subExpr2, ..., subExprn)'` that evaluates to **the logical OR** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`. Given a string `expression` that represents a **boolean expression**, return _the evaluation of that expression_. It is **guaranteed** that the given expression is valid and follows the given rules.",
    "examples": [
      {
        "input": "expression =  \"&(|(f)) \"",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "expression =  \"|(f,f,f,t) \"",
        "output": "true",
        "explanation": "The evaluation of (false OR false OR false OR true) is true."
      },
      {
        "input": "expression =  \"!(&(f,t)) \"",
        "output": "true",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= expression.length <= 2  104`",
      "expression\\[i\\] is one following characters: `'('`, `')'`, `'&'`, `'|'`, `'!'`, `'t'`, `'f'`, and `','`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1108",
    "slug": "defanging-an-ip-address",
    "title": "Defanging an IP Address",
    "difficulty": "Easy",
    "description": "Given a valid (IPv4) IP `address`, return a defanged version of that IP address. A _defanged IP address_ replaces every period `\". \"` with `\"[.] \"`.",
    "examples": [
      {
        "input": "address = \"1.1.1.1\"",
        "output": "\"1\\[.\\]1\\[.\\]1\\[.\\]1\""
      },
      {
        "input": "address = \"255.100.50.0\"",
        "output": "\"255\\[.\\]100\\[.\\]50\\[.\\]0\""
      }
    ],
    "constraints": [
      "The given `address` is a valid IPv4 address."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1109",
    "slug": "corporate-flight-bookings",
    "title": "Corporate Flight Bookings",
    "difficulty": "Medium",
    "description": "There are `n` flights that are labeled from `1` to `n`. You are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (**inclusive**) with `seatsi` seats reserved for **each flight** in the range. Return _an array_ `answer` _of length_ `n`_, where_ `answer[i]` _is the total number of seats reserved for flight_ `i`.",
    "examples": [
      {
        "input": "bookings = \\[\\[1,2,10\\],\\[2,3,20\\],\\[2,5,25\\]\\], n = 5",
        "output": "\\[10,55,45,25,25\\]",
        "explanation": ""
      },
      {
        "input": "bookings = \\[\\[1,2,10\\],\\[2,2,15\\]\\], n = 2",
        "output": "\\[10,25\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 2  104`",
      "`1 <= bookings.length <= 2  104`",
      "`bookings[i].length == 3`",
      "`1 <= firsti <= lasti <= n`",
      "`1 <= seatsi <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1110",
    "slug": "delete-nodes-and-return-forest",
    "title": "Delete Nodes And Return Forest",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, each node in the tree has a distinct value. After deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees). Return the roots of the trees in the remaining forest. You may return the result in any order.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5,6,7\\], to\\_delete = \\[3,5\\]",
        "output": "\\[\\[1,2,null,4\\],\\[6\\],\\[7\\]\\]"
      },
      {
        "input": "root = \\[1,2,4,null,3\\], to\\_delete = \\[3\\]",
        "output": "\\[\\[1,2,4\\]\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the given tree is at most `1000`.",
      "Each node has a distinct value between `1` and `1000`.",
      "`to_delete.length <= 1000`",
      "`to_delete` contains distinct values between `1` and `1000`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1111",
    "slug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
    "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
    "difficulty": "Medium",
    "description": "A string is a _valid parentheses string_ (denoted VPS) if and only if it consists of `\"( \"` and `\") \"` characters only, and: *  It is the empty string, or *  It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or *  It can be written as `(A)`, where `A` is a VPS. We can similarly define the _nesting depth_ `depth(S)` of any VPS `S` as follows: *  `depth( \" \") = 0` *  `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's *  `depth( \"( \" + A + \") \") = 1 + depth(A)`, where `A` is a VPS. For example, `\" \"`, `\"()() \"`, and `\"()(()()) \"` are VPS's (with nesting depths 0, 1, and 2), and `\")( \"` and `\"(() \"` are not VPS's. Given a VPS seq, split it into two disjoint subsequences `A` and `B`, such that `A` and `B` are VPS's (and `A.length + B.length = seq.length`). Now choose **any** such `A` and `B` such that `max(depth(A), depth(B))` is the minimum possible value. Return an `answer` array (of length `seq.length`) that encodes such a choice of `A` and `B`: `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] = 1`. Note that even though multiple answers may exist, you may return any of them.",
    "examples": [
      {
        "input": "seq =  \"(()()) \"",
        "output": "\\[0,1,1,1,1,0\\]"
      },
      {
        "input": "seq =  \"()(())() \"",
        "output": "\\[0,0,0,1,1,0,1,1\\]"
      }
    ],
    "constraints": [
      "`1 <= seq.size <= 10000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1118",
    "slug": "number-of-days-in-a-month",
    "title": "Number of Days in a Month",
    "difficulty": "Easy",
    "description": "Given a year `year` and a month `month`, return _the number of days of that month_.",
    "examples": [
      {
        "input": "year = 1992, month = 7",
        "output": "31"
      },
      {
        "input": "year = 2000, month = 2",
        "output": "29"
      },
      {
        "input": "year = 1900, month = 2",
        "output": "28"
      }
    ],
    "constraints": [
      "`1583 <= year <= 2100`",
      "`1 <= month <= 12`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1119",
    "slug": "remove-vowels-from-a-string",
    "title": "Remove Vowels from a String",
    "difficulty": "Easy",
    "description": "Given a string `s`, remove the vowels `'a'`, `'e'`, `'i'`, `'o'`, and `'u'` from it, and return the new string.",
    "examples": [
      {
        "input": "s =  \"leetcodeisacommunityforcoders \"",
        "output": "\"ltcdscmmntyfrcdrs \""
      },
      {
        "input": "s =  \"aeiou \"",
        "output": "\" \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1120",
    "slug": "maximum-average-subtree",
    "title": "Maximum Average Subtree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the maximum **average** value of a **subtree** of that tree_. Answers within `10-5` of the actual answer will be accepted. A **subtree** of a tree is any node of that tree plus all its descendants. The **average** value of a tree is the sum of its values, divided by the number of nodes.",
    "examples": [
      {
        "input": "root = \\[5,6,1\\]",
        "output": "6.00000",
        "explanation": ""
      },
      {
        "input": "root = \\[0,null,1\\]",
        "output": "1.00000"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`0 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1121",
    "slug": "divide-array-into-increasing-sequences",
    "title": "Divide Array Into Increasing Sequences",
    "difficulty": "Hard",
    "description": "Given an integer array `nums` sorted in non-decreasing order and an integer `k`, return `true` _if this array can be divided into one or more disjoint increasing subsequences of length at least_ `k`_, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "nums = \\[1,2,2,3,3,4,4\\], k = 3",
        "output": "true",
        "explanation": "The array can be divided into two subsequences \\[1,2,3,4\\] and \\[2,3,4\\] with lengths at least 3 each."
      },
      {
        "input": "nums = \\[5,6,6,7,8\\], k = 3",
        "output": "false",
        "explanation": "There is no way to divide the array using the conditions required."
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`",
      "`nums` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1122",
    "slug": "relative-sort-array",
    "title": "Relative Sort Array",
    "difficulty": "Easy",
    "description": "Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`. Sort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`. Elements that do not appear in `arr2` should be placed at the end of `arr1` in **ascending** order.",
    "examples": [
      {
        "input": "arr1 = \\[2,3,1,3,2,4,6,7,9,2,19\\], arr2 = \\[2,1,4,3,9,6\\]",
        "output": "\\[2,2,2,1,4,3,3,9,6,7,19\\]"
      },
      {
        "input": "arr1 = \\[28,6,22,8,44,17\\], arr2 = \\[22,28,8,6\\]",
        "output": "\\[22,28,8,6,17,44\\]"
      }
    ],
    "constraints": [
      "`1 <= arr1.length, arr2.length <= 1000`",
      "`0 <= arr1[i], arr2[i] <= 1000`",
      "All the elements of `arr2` are distinct.",
      "Each `arr2[i]` is in `arr1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1123",
    "slug": "lowest-common-ancestor-of-deepest-leaves",
    "title": "Lowest Common Ancestor of Deepest Leaves",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the lowest common ancestor of its deepest leaves_. Recall that: *  The node of a binary tree is a leaf if and only if it has no children *  The depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`. *  The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.",
    "examples": [
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\]",
        "output": "\\[2,7,4\\]",
        "explanation": "We return the node with value 2, colored in yellow in the diagram."
      },
      {
        "input": "root = \\[1\\]",
        "output": "\\[1\\]",
        "explanation": "The root is the deepest node in the tree, and it's the lca of itself."
      },
      {
        "input": "root = \\[0,1,3,null,2\\]",
        "output": "\\[2\\]",
        "explanation": "The deepest leaf node in the tree is 2, the lca of one node is itself."
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range `[1, 1000]`.",
      "`0 <= Node.val <= 1000`",
      "The values of the nodes in the tree are unique."
    ],
    "note": "This question is the same as 865: [https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/](https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/)",
    "follow_up": null
  },
  {
    "id": "1124",
    "slug": "longest-well-performing-interval",
    "title": "Longest Well-Performing Interval",
    "difficulty": "Medium",
    "description": "We are given `hours`, a list of the number of hours worked per day for a given employee. A day is considered to be a _tiring day_ if and only if the number of hours worked is (strictly) greater than `8`. A _well-performing interval_ is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days. Return the length of the longest well-performing interval.",
    "examples": [
      {
        "input": "hours = \\[9,9,6,0,6,6,9\\]",
        "output": "3",
        "explanation": "The longest well-performing interval is \\[9,9,6\\]."
      },
      {
        "input": "hours = \\[6,6,6\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= hours.length <= 104`",
      "`0 <= hours[i] <= 16`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1125",
    "slug": "smallest-sufficient-team",
    "title": "Smallest Sufficient Team",
    "difficulty": "Hard",
    "description": "In a project, you have a list of required skills `req_skills`, and a list of people. The `ith` person `people[i]` contains a list of skills that the person has. Consider a sufficient team: a set of people such that for every required skill in `req_skills`, there is at least one person in the team who has that skill. We can represent these teams by the index of each person. *  For example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`. Return _any sufficient team of the smallest possible size, represented by the index of each person_. You may return the answer in **any order**. It is **guaranteed** an answer exists.",
    "examples": [
      {
        "input": "req\\_skills = \\[\"java\",\"nodejs\",\"reactjs\"\\], people = \\[\\[\"java\"\\],\\[\"nodejs\"\\],\\[\"nodejs\",\"reactjs\"\\]\\]",
        "output": "\\[0,2\\]"
      },
      {
        "input": "req\\_skills = \\[\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"\\], people = \\[\\[\"algorithms\",\"math\",\"java\"\\],\\[\"algorithms\",\"math\",\"reactjs\"\\],\\[\"java\",\"csharp\",\"aws\"\\],\\[\"reactjs\",\"csharp\"\\],\\[\"csharp\",\"math\"\\],\\[\"aws\",\"java\"\\]\\]",
        "output": "\\[1,2\\]"
      }
    ],
    "constraints": [
      "`1 <= req_skills.length <= 16`",
      "`1 <= req_skills[i].length <= 16`",
      "`req_skills[i]` consists of lowercase English letters.",
      "All the strings of `req_skills` are unique.",
      "`1 <= people.length <= 60`",
      "`0 <= people[i].length <= 16`",
      "`1 <= people[i][j].length <= 16`",
      "`people[i][j]` consists of lowercase English letters.",
      "All the strings of `people[i]` are unique.",
      "Every skill in `people[i]` is a skill in `req_skills`.",
      "It is guaranteed a sufficient team exists."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1128",
    "slug": "number-of-equivalent-domino-pairs",
    "title": "Number of Equivalent Domino Pairs",
    "difficulty": "Easy",
    "description": "Given a list of `dominoes`, `dominoes[i] = [a, b]` is **equivalent to** `dominoes[j] = [c, d]` if and only if either (`a == c` and `b == d`), or (`a == d` and `b == c`) - that is, one domino can be rotated to be equal to another domino. Return _the number of pairs_ `(i, j)` _for which_ `0 <= i < j < dominoes.length`_, and_ `dominoes[i]` _is **equivalent to**_ `dominoes[j]`.",
    "examples": [
      {
        "input": "dominoes = \\[\\[1,2\\],\\[2,1\\],\\[3,4\\],\\[5,6\\]\\]",
        "output": "1"
      },
      {
        "input": "dominoes = \\[\\[1,2\\],\\[1,2\\],\\[1,1\\],\\[1,2\\],\\[2,2\\]\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= dominoes.length <= 4  104`",
      "`dominoes[i].length == 2`",
      "`1 <= dominoes[i][j] <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1129",
    "slug": "shortest-path-with-alternating-colors",
    "title": "Shortest Path with Alternating Colors",
    "difficulty": "Medium",
    "description": "You are given an integer `n`, the number of nodes in a directed graph where the nodes are labeled from `0` to `n - 1`. Each edge is red or blue in this graph, and there could be self-edges and parallel edges. You are given two arrays `redEdges` and `blueEdges` where: *  `redEdges[i] = [ai, bi]` indicates that there is a directed red edge from node `ai` to node `bi` in the graph, and *  `blueEdges[j] = [uj, vj]` indicates that there is a directed blue edge from node `uj` to node `vj` in the graph. Return an array `answer` of length `n`, where each `answer[x]` is the length of the shortest path from node `0` to node `x` such that the edge colors alternate along the path, or `-1` if such a path does not exist.",
    "examples": [
      {
        "input": "n = 3, redEdges = \\[\\[0,1\\],\\[1,2\\]\\], blueEdges = \\[\\]",
        "output": "\\[0,1,-1\\]"
      },
      {
        "input": "n = 3, redEdges = \\[\\[0,1\\]\\], blueEdges = \\[\\[2,1\\]\\]",
        "output": "\\[0,1,-1\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 100`",
      "`0 <= redEdges.length, blueEdges.length <= 400`",
      "`redEdges[i].length == blueEdges[j].length == 2`",
      "`0 <= ai, bi, uj, vj < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1130",
    "slug": "minimum-cost-tree-from-leaf-values",
    "title": "Minimum Cost Tree From Leaf Values",
    "difficulty": "Medium",
    "description": "Given an array `arr` of positive integers, consider all binary trees such that: *  Each node has either `0` or `2` children; *  The values of `arr` correspond to the values of each **leaf** in an in-order traversal of the tree. *  The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively. Among all possible binary trees considered, return _the smallest possible sum of the values of each non-leaf node_. It is guaranteed this sum fits into a **32-bit** integer. A node is a **leaf** if and only if it has zero children.",
    "examples": [
      {
        "input": "arr = \\[6,2,4\\]",
        "output": "32",
        "explanation": "There are two possible trees shown."
      },
      {
        "input": "arr = \\[4,11\\]",
        "output": "44"
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 40`",
      "`1 <= arr[i] <= 15`",
      "It is guaranteed that the answer fits into a 32-bit signed integer (i.e., it is less than 231)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1131",
    "slug": "maximum-of-absolute-value-expression",
    "title": "Maximum of Absolute Value Expression",
    "difficulty": "Medium",
    "description": "Given two arrays of integers with equal lengths, return the maximum value of: `|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|` where the maximum is taken over all `0 <= i, j < arr1.length`.",
    "examples": [
      {
        "input": "arr1 = \\[1,2,3,4\\], arr2 = \\[-1,4,5,6\\]",
        "output": "13"
      },
      {
        "input": "arr1 = \\[1,-2,-5,0,10\\], arr2 = \\[0,-2,-1,-7,-4\\]",
        "output": "20"
      }
    ],
    "constraints": [
      "`2 <= arr1.length == arr2.length <= 40000`",
      "`-10^6 <= arr1[i], arr2[i] <= 10^6`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1133",
    "slug": "largest-unique-number",
    "title": "Largest Unique Number",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, return _the largest integer that only occurs once_. If no integer occurs once, return `-1`.",
    "examples": [
      {
        "input": "nums = \\[5,7,3,9,4,9,8,3,1\\]",
        "output": "8",
        "explanation": "The maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it is the answer."
      },
      {
        "input": "nums = \\[9,9,8,8\\]",
        "output": "-1",
        "explanation": "There is no number that occurs only once."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2000`",
      "`0 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1134",
    "slug": "armstrong-number",
    "title": "Armstrong Number",
    "difficulty": "Easy",
    "description": "Given an integer `n`, return `true` _if and only if it is an **Armstrong number**_. The `k`\\-digit number `n` is an Armstrong number if and only if the `kth` power of each digit sums to `n`.",
    "examples": [
      {
        "input": "n = 153",
        "output": "true",
        "explanation": "153 is a 3-digit number, and 153 = 13 + 53 + 33."
      },
      {
        "input": "n = 123",
        "output": "false",
        "explanation": "123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36."
      }
    ],
    "constraints": [
      "`1 <= n <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1135",
    "slug": "connecting-cities-with-minimum-cost",
    "title": "Connecting Cities With Minimum Cost",
    "difficulty": "Medium",
    "description": "There are `n` cities labeled from `1` to `n`. You are given the integer `n` and an array `connections` where `connections[i] = [xi, yi, costi]` indicates that the cost of connecting city `xi` and city `yi` (bidirectional connection) is `costi`. Return _the minimum **cost** to connect all the_ `n` _cities such that there is at least one path between each pair of cities_. If it is impossible to connect all the `n` cities, return `-1`, The **cost** is the sum of the connections' costs used.",
    "examples": [
      {
        "input": "n = 3, connections = \\[\\[1,2,5\\],\\[1,3,6\\],\\[2,3,1\\]\\]",
        "output": "6",
        "explanation": "Choosing any 2 edges will connect all cities so we choose the minimum 2."
      },
      {
        "input": "n = 4, connections = \\[\\[1,2,3\\],\\[3,4,4\\]\\]",
        "output": "-1",
        "explanation": "There is no way to connect all cities even if all edges are used."
      }
    ],
    "constraints": [
      "`1 <= n <= 104`",
      "`1 <= connections.length <= 104`",
      "`connections[i].length == 3`",
      "`1 <= xi, yi <= n`",
      "`xi != yi`",
      "`0 <= costi <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1136",
    "slug": "parallel-courses",
    "title": "Parallel Courses",
    "difficulty": "Medium",
    "description": "You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [prevCoursei, nextCoursei]`, representing a prerequisite relationship between course `prevCoursei` and course `nextCoursei`: course `prevCoursei` has to be taken before course `nextCoursei`. In one semester, you can take **any number** of courses as long as you have taken all the prerequisites in the **previous** semester for the courses you are taking. Return _the **minimum** number of semesters needed to take all courses_. If there is no way to take all the courses, return `-1`.",
    "examples": [
      {
        "input": "n = 3, relations = \\[\\[1,3\\],\\[2,3\\]\\]",
        "output": "2",
        "explanation": "The figure above represents the given graph."
      },
      {
        "input": "n = 3, relations = \\[\\[1,2\\],\\[2,3\\],\\[3,1\\]\\]",
        "output": "-1",
        "explanation": "No course can be studied because they are prerequisites of each other."
      }
    ],
    "constraints": [
      "`1 <= n <= 5000`",
      "`1 <= relations.length <= 5000`",
      "`relations[i].length == 2`",
      "`1 <= prevCoursei, nextCoursei <= n`",
      "`prevCoursei != nextCoursei`",
      "All the pairs `[prevCoursei, nextCoursei]` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1137",
    "slug": "n-th-tribonacci-number",
    "title": "N-th Tribonacci Number",
    "difficulty": "Easy",
    "description": "The Tribonacci sequence Tn is defined as follows: T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0. Given `n`, return the value of Tn.",
    "examples": [
      {
        "input": "n = 4",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "n = 25",
        "output": "1389537"
      }
    ],
    "constraints": [
      "`0 <= n <= 37`",
      "The answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1138",
    "slug": "alphabet-board-path",
    "title": "Alphabet Board Path",
    "difficulty": "Medium",
    "description": "On an alphabet board, we start at position `(0, 0)`, corresponding to character `board[0][0]`. Here, `board = [ \"abcde \", \"fghij \", \"klmno \", \"pqrst \", \"uvwxy \", \"z \"]`, as shown in the diagram below. We may make the following moves: *  `'U'` moves our position up one row, if the position exists on the board; *  `'D'` moves our position down one row, if the position exists on the board; *  `'L'` moves our position left one column, if the position exists on the board; *  `'R'` moves our position right one column, if the position exists on the board; *  `'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer. (Here, the only positions that exist on the board are positions with letters on them.) Return a sequence of moves that makes our answer equal to `target` in the minimum number of moves. You may return any path that does so.",
    "examples": [
      {
        "input": "target = \"leet\"",
        "output": "\"DDR!UURRR!!DDD!\""
      },
      {
        "input": "target = \"code\"",
        "output": "\"RR!DDRR!UUL!R!\""
      }
    ],
    "constraints": [
      "`1 <= target.length <= 100`",
      "`target` consists only of English lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1139",
    "slug": "largest-1-bordered-square",
    "title": "Largest 1-Bordered Square",
    "difficulty": "Medium",
    "description": "Given a 2D `grid` of `0`s and `1`s, return the number of elements in the largest **square** subgrid that has all `1`s on its **border**, or `0` if such a subgrid doesn't exist in the `grid`.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]",
        "output": "9"
      },
      {
        "input": "grid = \\[\\[1,1,0,0\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= grid.length <= 100`",
      "`1 <= grid[0].length <= 100`",
      "`grid[i][j]` is `0` or `1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1140",
    "slug": "stone-game-ii",
    "title": "Stone Game II",
    "difficulty": "Medium",
    "description": "Alice and Bob continue their games with piles of stones. There are a number of piles **arranged in a row**, and each pile has a positive integer number of stones `piles[i]`. The objective of the game is to end with the most stones. Alice and Bob take turns, with Alice starting first. Initially, `M = 1`. On each player's turn, that player can take **all the stones** in the **first** `X` remaining piles, where `1 <= X <= 2M`. Then, we set `M = max(M, X)`. The game continues until all the stones have been taken. Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.",
    "examples": [
      {
        "input": "piles = \\[2,7,9,4,4\\]",
        "output": "10",
        "explanation": "If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger."
      },
      {
        "input": "piles = \\[1,2,3,4,5,100\\]",
        "output": "104"
      }
    ],
    "constraints": [
      "`1 <= piles.length <= 100`",
      "`1 <= piles[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1143",
    "slug": "longest-common-subsequence",
    "title": "Longest Common Subsequence",
    "difficulty": "Medium",
    "description": "Given two strings `text1` and `text2`, return _the length of their longest **common subsequence**._ If there is no **common subsequence**, return `0`. A **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. *  For example, `\"ace \"` is a subsequence of `\"abcde \"`. A **common subsequence** of two strings is a subsequence that is common to both strings.",
    "examples": [
      {
        "input": "text1 =  \"abcde \", text2 =  \"ace \"",
        "output": "3",
        "explanation": "The longest common subsequence is  \"ace \" and its length is 3."
      },
      {
        "input": "text1 =  \"abc \", text2 =  \"abc \"",
        "output": "3",
        "explanation": "The longest common subsequence is  \"abc \" and its length is 3."
      },
      {
        "input": "text1 =  \"abc \", text2 =  \"def \"",
        "output": "0",
        "explanation": "There is no such common subsequence, so the result is 0."
      }
    ],
    "constraints": [
      "`1 <= text1.length, text2.length <= 1000`",
      "`text1` and `text2` consist of only lowercase English characters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1144",
    "slug": "decrease-elements-to-make-array-zigzag",
    "title": "Decrease Elements To Make Array Zigzag",
    "difficulty": "Medium",
    "description": "Given an array `nums` of integers, a _move_ consists of choosing any element and **decreasing it by 1**. An array `A` is a _zigzag array_ if either: *  Every even-indexed element is greater than adjacent elements, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...` *  OR, every odd-indexed element is greater than adjacent elements, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...` Return the minimum number of moves to transform the given array `nums` into a zigzag array.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "2",
        "explanation": "We can decrease 2 to 0 or 3 to 1."
      },
      {
        "input": "nums = \\[9,6,1,6,2\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1145",
    "slug": "binary-tree-coloring-game",
    "title": "Binary Tree Coloring Game",
    "difficulty": "Medium",
    "description": "Two players play a turn based game on a binary tree. We are given the `root` of this binary tree, and the number of nodes `n` in the tree. `n` is odd, and each node has a distinct value from `1` to `n`. Initially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`. The first player colors the node with value `x` red, and the second player colors the node with value `y` blue. Then, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an **uncolored** neighbor of the chosen node (either the left child, right child, or parent of the chosen node.) If (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes. You are the second player. If it is possible to choose such a `y` to ensure you win the game, return `true`. If it is not possible, return `false`.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5,6,7,8,9,10,11\\], n = 11, x = 3",
        "output": "true",
        "explanation": "The second player can choose the node with value 2."
      },
      {
        "input": "root = \\[1,2,3\\], n = 3, x = 1",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is `n`.",
      "`1 <= x <= n <= 100`",
      "`n` is odd.",
      "1 <= Node.val <= n",
      "All the values of the tree are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1146",
    "slug": "snapshot-array",
    "title": "Snapshot Array",
    "difficulty": "Medium",
    "description": "Implement a SnapshotArray that supports the following interface: *  `SnapshotArray(int length)` initializes an array-like data structure with the given length. **Initially, each element equals 0**. *  `void set(index, val)` sets the element at the given `index` to be equal to `val`. *  `int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`. *  `int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`",
    "examples": [
      {
        "input": "\\[ \"SnapshotArray \", \"set \", \"snap \", \"set \", \"get \"\\]",
        "output": "\\[null,null,0,null,5\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= length <= 5  104`",
      "`0 <= index < length`",
      "`0 <= val <= 109`",
      "`0 <= snap_id <` (the total number of times we call `snap()`)",
      "At most `5  104` calls will be made to `set`, `snap`, and `get`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1147",
    "slug": "longest-chunked-palindrome-decomposition",
    "title": "Longest Chunked Palindrome Decomposition",
    "difficulty": "Hard",
    "description": "You are given a string `text`. You should split it to k substrings `(subtext1, subtext2, ..., subtextk)` such that: *  `subtexti` is a **non-empty** string. *  The concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`). *  `subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`). Return the largest possible value of `k`.",
    "examples": [
      {
        "input": "text =  \"ghiabcdefhelloadamhelloabcdefghi \"",
        "output": "7",
        "explanation": "We can split the string on  \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi) \"."
      },
      {
        "input": "text =  \"merchant \"",
        "output": "1",
        "explanation": "We can split the string on  \"(merchant) \"."
      },
      {
        "input": "text =  \"antaprezatepzapreanta \"",
        "output": "11",
        "explanation": "We can split the string on  \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a) \"."
      }
    ],
    "constraints": [
      "`1 <= text.length <= 1000`",
      "`text` consists only of lowercase English characters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1150",
    "slug": "check-if-a-number-is-majority-element-in-a-sorted-array",
    "title": "Check If a Number Is Majority Element in a Sorted Array",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` sorted in non-decreasing order and an integer `target`, return `true` _if_ `target` _is a **majority** element, or_ `false` _otherwise_. A **majority** element in an array `nums` is an element that appears more than `nums.length / 2` times in the array.",
    "examples": [
      {
        "input": "nums = \\[2,4,5,5,5,5,5,6,6\\], target = 5",
        "output": "true",
        "explanation": "The value 5 appears 5 times and the length of the array is 9."
      },
      {
        "input": "nums = \\[10,100,101,101\\], target = 101",
        "output": "false",
        "explanation": "The value 101 appears 2 times and the length of the array is 4."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i], target <= 109`",
      "`nums` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1151",
    "slug": "minimum-swaps-to-group-all-1s-together",
    "title": "Minimum Swaps to Group All 1's Together",
    "difficulty": "Medium",
    "description": "Given a binary array `data`, return the minimum number of swaps required to group all `1`'s present in the array together in **any place** in the array.",
    "examples": [
      {
        "input": "data = \\[1,0,1,0,1\\]",
        "output": "1",
        "explanation": "There are 3 ways to group all 1's together:"
      },
      {
        "input": "data = \\[0,0,0,1,0\\]",
        "output": "0",
        "explanation": "Since there is only one 1 in the array, no swaps are needed."
      },
      {
        "input": "data = \\[1,0,1,0,1,0,0,1,1,0,1\\]",
        "output": "3",
        "explanation": "One possible solution that uses 3 swaps is \\[0,0,0,0,0,1,1,1,1,1,1\\]."
      }
    ],
    "constraints": [
      "`1 <= data.length <= 105`",
      "`data[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1152",
    "slug": "analyze-user-website-visit-pattern",
    "title": "Analyze User Website Visit Pattern",
    "difficulty": "Medium",
    "description": "You are given two string arrays `username` and `website` and an integer array `timestamp`. All the given arrays are of the same length and the tuple `[username[i], website[i], timestamp[i]]` indicates that the user `username[i]` visited the website `website[i]` at time `timestamp[i]`. A **pattern** is a list of three websites (not necessarily distinct). *  For example, `[ \"home \", \"away \", \"love \"]`, `[ \"leetcode \", \"love \", \"leetcode \"]`, and `[ \"luffy \", \"luffy \", \"luffy \"]` are all patterns. The **score** of a **pattern** is the number of users that visited all the websites in the pattern in the same order they appeared in the pattern. *  For example, if the pattern is `[ \"home \", \"away \", \"love \"]`, the score is the number of users `x` such that `x` visited `\"home \"` then visited `\"away \"` and visited `\"love \"` after that. *  Similarly, if the pattern is `[ \"leetcode \", \"love \", \"leetcode \"]`, the score is the number of users `x` such that `x` visited `\"leetcode \"` then visited `\"love \"` and visited `\"leetcode \"` **one more time** after that. *  Also, if the pattern is `[ \"luffy \", \"luffy \", \"luffy \"]`, the score is the number of users `x` such that `x` visited `\"luffy \"` three different times at different timestamps. Return _the **pattern** with the largest **score**_. If there is more than one pattern with the same largest score, return the lexicographically smallest such pattern.",
    "examples": [
      {
        "input": "username = \\[ \"joe \", \"joe \", \"joe \", \"james \", \"james \", \"james \", \"james \", \"mary \", \"mary \", \"mary \"\\], timestamp = \\[1,2,3,4,5,6,7,8,9,10\\], website = \\[ \"home \", \"about \", \"career \", \"home \", \"cart \", \"maps \", \"home \", \"home \", \"about \", \"career \"\\]",
        "output": "\\[ \"home \", \"about \", \"career \"\\]",
        "explanation": "The tuples in this example are:"
      },
      {
        "input": "username = \\[ \"ua \", \"ua \", \"ua \", \"ub \", \"ub \", \"ub \"\\], timestamp = \\[1,2,3,4,5,6\\], website = \\[ \"a \", \"b \", \"a \", \"a \", \"b \", \"c \"\\]",
        "output": "\\[ \"a \", \"b \", \"a \"\\]"
      }
    ],
    "constraints": [
      "`3 <= username.length <= 50`",
      "`1 <= username[i].length <= 10`",
      "`timestamp.length == username.length`",
      "`1 <= timestamp[i] <= 109`",
      "`website.length == username.length`",
      "`1 <= website[i].length <= 10`",
      "`username[i]` and `website[i]` consist of lowercase English letters.",
      "It is guaranteed that there is at least one user who visited at least three websites.",
      "All the tuples `[username[i], timestamp[i], website[i]]` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1153",
    "slug": "string-transforms-into-another-string",
    "title": "String Transforms Into Another String",
    "difficulty": "Hard",
    "description": "Given two strings `str1` and `str2` of the same length, determine whether you can transform `str1` into `str2` by doing **zero or more** _conversions_. In one conversion you can convert **all** occurrences of one character in `str1` to **any** other lowercase English character. Return `true` if and only if you can transform `str1` into `str2`.",
    "examples": [
      {
        "input": "str1 =  \"aabcc \", str2 =  \"ccdee \"",
        "output": "true",
        "explanation": "Convert 'c' to 'e' then 'b' to 'd' then 'a' to 'c'. Note that the order of conversions matter."
      },
      {
        "input": "str1 =  \"leetcode \", str2 =  \"codeleet \"",
        "output": "false",
        "explanation": "There is no way to transform str1 to str2."
      }
    ],
    "constraints": [
      "`1 <= str1.length == str2.length <= 104`",
      "`str1` and `str2` contain only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1154",
    "slug": "day-of-the-year",
    "title": "Day of the Year",
    "difficulty": "Easy",
    "description": "Given a string `date` representing a [Gregorian calendar](https://en.wikipedia.org/wiki/Gregorian_calendar) date formatted as `YYYY-MM-DD`, return _the day number of the year_.",
    "examples": [
      {
        "input": "date =  \"2019-01-09 \"",
        "output": "9",
        "explanation": "Given date is the 9th day of the year in 2019."
      },
      {
        "input": "date =  \"2019-02-10 \"",
        "output": "41"
      }
    ],
    "constraints": [
      "`date.length == 10`",
      "`date[4] == date[7] == '-'`, and all other `date[i]`'s are digits",
      "`date` represents a calendar date between Jan 1st, 1900 and Dec 31th, 2019."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1155",
    "slug": "number-of-dice-rolls-with-target-sum",
    "title": "Number of Dice Rolls With Target Sum",
    "difficulty": "Medium",
    "description": "You have `n` dice, and each die has `k` faces numbered from `1` to `k`. Given three integers `n`, `k`, and `target`, return _the number of possible ways (out of the_ `kn` _total ways)_ _to roll the dice, so the sum of the face-up numbers equals_ `target`. Since the answer may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 1, k = 6, target = 3",
        "output": "1",
        "explanation": "You throw one die with 6 faces."
      },
      {
        "input": "n = 2, k = 6, target = 7",
        "output": "6",
        "explanation": "You throw two dice, each with 6 faces."
      },
      {
        "input": "n = 30, k = 30, target = 500",
        "output": "222616187",
        "explanation": "The answer must be returned modulo 109 + 7."
      }
    ],
    "constraints": [
      "`1 <= n, k <= 30`",
      "`1 <= target <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1156",
    "slug": "swap-for-longest-repeated-character-substring",
    "title": "Swap For Longest Repeated Character Substring",
    "difficulty": "Medium",
    "description": "You are given a string `text`. You can swap two of the characters in the `text`. Return _the length of the longest substring with repeated characters_.",
    "examples": [
      {
        "input": "text =  \"ababa \"",
        "output": "3",
        "explanation": "We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is  \"aaa \" with length 3."
      },
      {
        "input": "text =  \"aaabaaa \"",
        "output": "6",
        "explanation": "Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring  \"aaaaaa \" with length 6."
      },
      {
        "input": "text =  \"aaaaa \"",
        "output": "5",
        "explanation": "No need to swap, longest repeated character substring is  \"aaaaa \" with length is 5."
      }
    ],
    "constraints": [
      "`1 <= text.length <= 2  104`",
      "`text` consist of lowercase English characters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1157",
    "slug": "online-majority-element-in-subarray",
    "title": "Online Majority Element In Subarray",
    "difficulty": "Hard",
    "description": "Design a data structure that efficiently finds the **majority element** of a given subarray. The **majority element** of a subarray is an element that occurs `threshold` times or more in the subarray. Implementing the `MajorityChecker` class: *  `MajorityChecker(int[] arr)` Initializes the instance of the class with the given array `arr`. *  `int query(int left, int right, int threshold)` returns the element in the subarray `arr[left...right]` that occurs at least `threshold` times, or `-1` if no such element exists.",
    "examples": [],
    "constraints": [
      "`1 <= arr.length <= 2  104`",
      "`1 <= arr[i] <= 2  104`",
      "`0 <= left <= right < arr.length`",
      "`threshold <= right - left + 1`",
      "`2  threshold > right - left + 1`",
      "At most `104` calls will be made to `query`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1160",
    "slug": "find-words-that-can-be-formed-by-characters",
    "title": "Find Words That Can Be Formed by Characters",
    "difficulty": "Easy",
    "description": "You are given an array of strings `words` and a string `chars`. A string is **good** if it can be formed by characters from chars (each character can only be used once). Return _the sum of lengths of all good strings in words_.",
    "examples": [
      {
        "input": "words = \\[ \"cat \", \"bt \", \"hat \", \"tree \"\\], chars =  \"atach \"",
        "output": "6",
        "explanation": "The strings that can be formed are  \"cat \" and  \"hat \" so the answer is 3 + 3 = 6."
      },
      {
        "input": "words = \\[ \"hello \", \"world \", \"leetcode \"\\], chars =  \"welldonehoneyr \"",
        "output": "10",
        "explanation": "The strings that can be formed are  \"hello \" and  \"world \" so the answer is 5 + 5 = 10."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length, chars.length <= 100`",
      "`words[i]` and `chars` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1161",
    "slug": "maximum-level-sum-of-a-binary-tree",
    "title": "Maximum Level Sum of a Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on. Return the **smallest** level `x` such that the sum of all the values of nodes at level `x` is **maximal**.",
    "examples": [
      {
        "input": "root = \\[1,7,0,7,-8,null,null\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "root = \\[989,null,10250,98693,-89388,null,null,null,-32127\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-105 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1162",
    "slug": "as-far-from-land-as-possible",
    "title": "As Far from Land as Possible",
    "difficulty": "Medium",
    "description": "Given an `n x n` `grid` containing only values `0` and `1`, where `0` represents water and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return `-1`. The distance used in this problem is the Manhattan distance: the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.",
    "examples": [
      {
        "input": "grid = \\[\\[1,0,1\\],\\[0,0,0\\],\\[1,0,1\\]\\]",
        "output": "2",
        "explanation": "The cell (1, 1) is as far as possible from all the land with distance 2."
      },
      {
        "input": "grid = \\[\\[1,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]",
        "output": "4",
        "explanation": "The cell (2, 2) is as far as possible from all the land with distance 4."
      }
    ],
    "constraints": [
      "`n == grid.length`",
      "`n == grid[i].length`",
      "`1 <= n <= 100`",
      "`grid[i][j]` is `0` or `1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1163",
    "slug": "last-substring-in-lexicographical-order",
    "title": "Last Substring in Lexicographical Order",
    "difficulty": "Hard",
    "description": "Given a string `s`, return _the last substring of_ `s` _in lexicographical order_.",
    "examples": [
      {
        "input": "s =  \"abab \"",
        "output": "\"bab \"",
        "explanation": "The substrings are \\[ \"a \",  \"ab \",  \"aba \",  \"abab \",  \"b \",  \"ba \",  \"bab \"\\]. The lexicographically maximum substring is  \"bab \"."
      },
      {
        "input": "s =  \"leetcode \"",
        "output": "\"tcode \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 4  105`",
      "`s` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1165",
    "slug": "single-row-keyboard",
    "title": "Single-Row Keyboard",
    "difficulty": "Easy",
    "description": "There is a special keyboard with **all keys in a single row**. Given a string `keyboard` of length `26` indicating the layout of the keyboard (indexed from `0` to `25`). Initially, your finger is at index `0`. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index `i` to index `j` is `|i - j|`. You want to type a string `word`. Write a function to calculate how much time it takes to type it with one finger.",
    "examples": [
      {
        "input": "keyboard =  \"abcdefghijklmnopqrstuvwxyz \", word =  \"cba \"",
        "output": "4",
        "explanation": "The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'."
      },
      {
        "input": "keyboard =  \"pqrstuvwxyzabcdefghijklmno \", word =  \"leetcode \"",
        "output": "73"
      }
    ],
    "constraints": [
      "`keyboard.length == 26`",
      "`keyboard` contains each English lowercase letter exactly once in some order.",
      "`1 <= word.length <= 104`",
      "`word[i]` is an English lowercase letter."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1166",
    "slug": "design-file-system",
    "title": "Design File System",
    "difficulty": "Medium",
    "description": "You are asked to design a file system that allows you to create new paths and associate them with different values. The format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, \"`/leetcode \"` and \"`/leetcode/problems \"` are valid paths while an empty string `\" \"` and `\"/ \"` are not. Implement the `FileSystem` class: *  `bool createPath(string path, int value)` Creates a new `path` and associates a `value` to it if possible and returns `true`. Returns `false` if the path **already exists** or its parent path **doesn't exist**. *  `int get(string path)` Returns the value associated with `path` or returns `-1` if the path doesn't exist.",
    "examples": [
      {
        "input": "",
        "output": "",
        "explanation": ""
      },
      {
        "input": "",
        "output": "",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= path.length <= 100`",
      "`1 <= value <= 109`",
      "Each `path` is valid and consists of lowercase English letters and `'/'`.",
      "At most `104` calls in total will be made to `createPath` and `get`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1167",
    "slug": "minimum-cost-to-connect-sticks",
    "title": "Minimum Cost to Connect Sticks",
    "difficulty": "Medium",
    "description": "You have some number of sticks with positive integer lengths. These lengths are given as an array `sticks`, where `sticks[i]` is the length of the `ith` stick. You can connect any two sticks of lengths `x` and `y` into one stick by paying a cost of `x + y`. You must connect all the sticks until there is only one stick remaining. Return _the minimum cost of connecting all the given sticks into one stick in this way_.",
    "examples": [
      {
        "input": "sticks = \\[2,4,3\\]",
        "output": "14",
        "explanation": "You start with sticks = \\[2,4,3\\]."
      },
      {
        "input": "sticks = \\[1,8,3,5\\]",
        "output": "30",
        "explanation": "You start with sticks = \\[1,8,3,5\\]."
      },
      {
        "input": "sticks = \\[5\\]",
        "output": "0",
        "explanation": "There is only one stick, so you don't need to do anything. The total cost is 0."
      }
    ],
    "constraints": [
      "`1 <= sticks.length <= 104`",
      "`1 <= sticks[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1168",
    "slug": "optimize-water-distribution-in-a-village",
    "title": "Optimize Water Distribution in a Village",
    "difficulty": "Hard",
    "description": "There are `n` houses in a village. We want to supply water for all the houses by building wells and laying pipes. For each house `i`, we can either build a well inside it directly with cost `wells[i - 1]` (note the `-1` due to **0-indexing**), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array `pipes` where each `pipes[j] = [house1j, house2j, costj]` represents the cost to connect `house1j` and `house2j` together using a pipe. Connections are bidirectional, and there could be multiple valid connections between the same two houses with different costs. Return _the minimum total cost to supply water to all houses_.",
    "examples": [
      {
        "input": "n = 3, wells = \\[1,2,2\\], pipes = \\[\\[1,2,1\\],\\[2,3,1\\]\\]",
        "output": "3",
        "explanation": "The image shows the costs of connecting houses using pipes."
      },
      {
        "input": "n = 2, wells = \\[1,1\\], pipes = \\[\\[1,2,1\\],\\[1,2,2\\]\\]",
        "output": "2",
        "explanation": "We can supply water with cost two using one of the three options:"
      }
    ],
    "constraints": [
      "`2 <= n <= 104`",
      "`wells.length == n`",
      "`0 <= wells[i] <= 105`",
      "`1 <= pipes.length <= 104`",
      "`pipes[j].length == 3`",
      "`1 <= house1j, house2j <= n`",
      "`0 <= costj <= 105`",
      "`house1j != house2j`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1169",
    "slug": "invalid-transactions",
    "title": "Invalid Transactions",
    "difficulty": "Medium",
    "description": "A transaction is possibly invalid if: *  the amount exceeds `$1000`, or; *  if it occurs within (and including) `60` minutes of another transaction with the **same name** in a **different city**. You are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction. Return a list of `transactions` that are possibly invalid. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "transactions = \\[ \"alice,20,800,mtv \", \"alice,50,100,beijing \"\\]",
        "output": "\\[ \"alice,20,800,mtv \", \"alice,50,100,beijing \"\\]",
        "explanation": "The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too."
      },
      {
        "input": "transactions = \\[ \"alice,20,800,mtv \", \"alice,50,1200,mtv \"\\]",
        "output": "\\[ \"alice,50,1200,mtv \"\\]"
      },
      {
        "input": "transactions = \\[ \"alice,20,800,mtv \", \"bob,50,1200,mtv \"\\]",
        "output": "\\[ \"bob,50,1200,mtv \"\\]"
      }
    ],
    "constraints": [
      "`transactions.length <= 1000`",
      "Each `transactions[i]` takes the form `\"{name},{time},{amount},{city} \"`",
      "Each `{name}` and `{city}` consist of lowercase English letters, and have lengths between `1` and `10`.",
      "Each `{time}` consist of digits, and represent an integer between `0` and `1000`.",
      "Each `{amount}` consist of digits, and represent an integer between `0` and `2000`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1170",
    "slug": "compare-strings-by-frequency-of-the-smallest-character",
    "title": "Compare Strings by Frequency of the Smallest Character",
    "difficulty": "Medium",
    "description": "Let the function `f(s)` be the **frequency of the lexicographically smallest character** in a non-empty string `s`. For example, if `s = \"dcce \"` then `f(s) = 2` because the lexicographically smallest character is `'c'`, which has a frequency of 2. You are given an array of strings `words` and another array of query strings `queries`. For each query `queries[i]`, count the **number of words** in `words` such that `f(queries[i])` < `f(W)` for each `W` in `words`. Return _an integer array_ `answer`_, where each_ `answer[i]` _is the answer to the_ `ith` _query_.",
    "examples": [
      {
        "input": "queries = \\[ \"cbd \"\\], words = \\[ \"zaaaz \"\\]",
        "output": "\\[1\\]",
        "explanation": "On the first query we have f( \"cbd \") = 1, f( \"zaaaz \") = 3 so f( \"cbd \") < f( \"zaaaz \")."
      },
      {
        "input": "queries = \\[ \"bbb \", \"cc \"\\], words = \\[ \"a \", \"aa \", \"aaa \", \"aaaa \"\\]",
        "output": "\\[1,2\\]",
        "explanation": "On the first query only f( \"bbb \") < f( \"aaaa \"). On the second query both f( \"aaa \") and f( \"aaaa \") are both > f( \"cc \")."
      }
    ],
    "constraints": [
      "`1 <= queries.length <= 2000`",
      "`1 <= words.length <= 2000`",
      "`1 <= queries[i].length, words[i].length <= 10`",
      "`queries[i][j]`, `words[i][j]` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1171",
    "slug": "remove-zero-sum-consecutive-nodes-from-linked-list",
    "title": "Remove Zero Sum Consecutive Nodes from Linked List",
    "difficulty": "Medium",
    "description": "Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences. After doing so, return the head of the final linked list. You may return any such answer. (Note that in the examples below, all sequences are serializations of `ListNode` objects.)",
    "examples": [
      {
        "input": "head = \\[1,2,-3,3,1\\]",
        "output": "\\[3,1\\]"
      },
      {
        "input": "head = \\[1,2,3,-3,4\\]",
        "output": "\\[1,2,4\\]"
      },
      {
        "input": "head = \\[1,2,3,-3,-2\\]",
        "output": "\\[1\\]"
      }
    ],
    "constraints": [
      "The given linked list will contain between `1` and `1000` nodes.",
      "Each node in the linked list has `-1000 <= node.val <= 1000`."
    ],
    "note": "The answer \\[1,2,1\\] would also be accepted.",
    "follow_up": null
  },
  {
    "id": "1172",
    "slug": "dinner-plate-stacks",
    "title": "Dinner Plate Stacks",
    "difficulty": "Hard",
    "description": "You have an infinite number of stacks arranged in a row and numbered (left to right) from `0`, each of the stacks has the same maximum capacity. Implement the `DinnerPlates` class: *  `DinnerPlates(int capacity)` Initializes the object with the maximum capacity of the stacks `capacity`. *  `void push(int val)` Pushes the given integer `val` into the leftmost stack with a size less than `capacity`. *  `int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all the stacks are empty. *  `int popAtStack(int index)` Returns the value at the top of the stack with the given index `index` and removes it from that stack or returns `-1` if the stack with that given index is empty.",
    "examples": [
      {
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= capacity <= 2  104`",
      "`1 <= val <= 2  104`",
      "`0 <= index <= 105`",
      "At most `2  105` calls will be made to `push`, `pop`, and `popAtStack`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1175",
    "slug": "prime-arrangements",
    "title": "Prime Arrangements",
    "difficulty": "Easy",
    "description": "Return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.) _(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)_ Since the answer may be large, return the answer **modulo `10^9 + 7`**.",
    "examples": [
      {
        "input": "n = 5",
        "output": "12",
        "explanation": "For example \\[1,2,5,4,3\\] is a valid permutation, but \\[5,2,3,4,1\\] is not because the prime number 5 is at index 1."
      },
      {
        "input": "n = 100",
        "output": "682289015"
      }
    ],
    "constraints": [
      "`1 <= n <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1176",
    "slug": "diet-plan-performance",
    "title": "Diet Plan Performance",
    "difficulty": "Easy",
    "description": "A dieter consumes `calories[i]` calories on the `i`\\-th day. Given an integer `k`, for **every** consecutive sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]` for all `0 <= i <= n-k`), they look at _T_, the total calories consumed during that sequence of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k-1]`): *  If `T < lower`, they performed poorly on their diet and lose 1 point; *  If `T > upper`, they performed well on their diet and gain 1 point; *  Otherwise, they performed normally and there is no change in points. Initially, the dieter has zero points. Return the total number of points the dieter has after dieting for `calories.length` days. Note that the total points can be negative.",
    "examples": [
      {
        "input": "calories = \\[1,2,3,4,5\\], k = 1, lower = 3, upper = 3",
        "output": "0"
      },
      {
        "input": "calories = \\[3,2\\], k = 2, lower = 0, upper = 1",
        "output": "1"
      },
      {
        "input": "calories = \\[6,5,0,0\\], k = 2, lower = 1, upper = 5",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= k <= calories.length <= 10^5`",
      "`0 <= calories[i] <= 20000`",
      "`0 <= lower <= upper`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1177",
    "slug": "can-make-palindrome-from-substring",
    "title": "Can Make Palindrome from Substring",
    "difficulty": "Medium",
    "description": "You are given a string `s` and array `queries` where `queries[i] = [lefti, righti, ki]`. We may rearrange the substring `s[lefti...righti]` for each query and then choose up to `ki` of them to replace with any lowercase English letter. If the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. Otherwise, the result is `false`. Return a boolean array `answer` where `answer[i]` is the result of the `ith` query `queries[i]`. Note that each letter is counted individually for replacement, so if, for example `s[lefti...righti] = \"aaa \"`, and `ki = 2`, we can only replace two of the letters. Also, note that no query modifies the initial string `s`.",
    "examples": [
      {
        "input": "s =  \"abcda \", queries = \\[\\[3,3,0\\],\\[1,2,0\\],\\[0,3,1\\],\\[0,3,2\\],\\[0,4,1\\]\\]",
        "output": "\\[true,false,false,true,true\\]",
        "explanation": ""
      },
      {
        "input": "s =  \"lyb \", queries = \\[\\[0,1,0\\],\\[2,2,1\\]\\]",
        "output": "\\[false,true\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length, queries.length <= 105`",
      "`0 <= lefti <= righti < s.length`",
      "`0 <= ki <= s.length`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1178",
    "slug": "number-of-valid-words-for-each-puzzle",
    "title": "Number of Valid Words for Each Puzzle",
    "difficulty": "Hard",
    "description": "With respect to a given `puzzle` string, a `word` is _valid_ if both the following conditions are satisfied: *  `word` contains the first letter of `puzzle`. *  For each letter in `word`, that letter is in `puzzle`. *  For example, if the puzzle is `\"abcdefg \"`, then valid words are `\"faced \"`, `\"cabbage \"`, and `\"baggage \"`, while *  invalid words are `\"beefed \"` (does not include `'a'`) and `\"based \"` (includes `'s'` which is not in the puzzle). Return _an array_ `answer`_, where_ `answer[i]` _is the number of words in the given word list_ `words` _that is valid with respect to the puzzle_ `puzzles[i]`.",
    "examples": [
      {
        "input": "words = \\[ \"aaaa \", \"asas \", \"able \", \"ability \", \"actt \", \"actor \", \"access \"\\], puzzles = \\[ \"aboveyz \", \"abrodyz \", \"abslute \", \"absoryz \", \"actresz \", \"gaswxyz \"\\]",
        "output": "\\[1,1,3,2,4,0\\]",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"apple \", \"pleas \", \"please \"\\], puzzles = \\[ \"aelwxyz \", \"aelpxyz \", \"aelpsxy \", \"saelpxy \", \"xaelpsy \"\\]",
        "output": "\\[0,1,3,2,0\\]"
      }
    ],
    "constraints": [
      "`1 <= words.length <= 105`",
      "`4 <= words[i].length <= 50`",
      "`1 <= puzzles.length <= 104`",
      "`puzzles[i].length == 7`",
      "`words[i]` and `puzzles[i]` consist of lowercase English letters.",
      "Each `puzzles[i]` does not contain repeated characters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1180",
    "slug": "count-substrings-with-only-one-distinct-letter",
    "title": "Count Substrings with Only One Distinct Letter",
    "difficulty": "Easy",
    "description": "Given a string `s`, return _the number of substrings that have only **one distinct** letter_.",
    "examples": [
      {
        "input": "s =  \"aaaba \"",
        "output": "8",
        "explanation": "The substrings with one distinct letter are  \"aaa \",  \"aa \",  \"a \",  \"b \"."
      },
      {
        "input": "s =  \"aaaaaaaaaa \"",
        "output": "55"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s[i]` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1181",
    "slug": "before-and-after-puzzle",
    "title": "Before and After Puzzle",
    "difficulty": "Medium",
    "description": "Given a list of `phrases`, generate a list of Before and After puzzles. A _phrase_ is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There are no consecutive spaces in a phrase. _Before and After puzzles_ are phrases that are formed by merging two phrases where the **last word of the first phrase** is the same as the **first word of the second phrase**. Return the Before and After puzzles that can be formed by every two phrases `phrases[i]` and `phrases[j]` where `i != j`. Note that the order of matching two phrases matters, we want to consider both orders. You should return a list of **distinct** strings **sorted lexicographically**.",
    "examples": [
      {
        "input": "phrases = \\[ \"writing code \", \"code rocks \"\\]",
        "output": "\\[ \"writing code rocks \"\\]"
      },
      {
        "input": "phrases = \\[ \"mission statement \",",
        "output": "\\[ \"a chip off the old block party \","
      },
      {
        "input": "phrases = \\[ \"a \", \"b \", \"a \"\\]",
        "output": "\\[ \"a \"\\]"
      }
    ],
    "constraints": [
      "`1 <= phrases.length <= 100`",
      "`1 <= phrases[i].length <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1182",
    "slug": "shortest-distance-to-target-color",
    "title": "Shortest Distance to Target Color",
    "difficulty": "Medium",
    "description": "You are given an array `colors`, in which there are three colors: `1`, `2` and `3`. You are also given some queries. Each query consists of two integers `i` and `c`, return the shortest distance between the given index `i` and the target color `c`. If there is no solution return `-1`.",
    "examples": [
      {
        "input": "colors = \\[1,1,2,1,3,2,2,3,3\\], queries = \\[\\[1,3\\],\\[2,2\\],\\[6,1\\]\\]",
        "output": "\\[3,0,3\\]",
        "explanation": ""
      },
      {
        "input": "colors = \\[1,2\\], queries = \\[\\[0,3\\]\\]",
        "output": "\\[-1\\]",
        "explanation": "There is no 3 in the array."
      }
    ],
    "constraints": [
      "`1 <= colors.length <= 510^4`",
      "`1 <= colors[i] <= 3`",
      "`1 <= queries.length <= 510^4`",
      "`queries[i].length == 2`",
      "`0 <= queries[i][0] < colors.length`",
      "`1 <= queries[i][1] <= 3`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1183",
    "slug": "maximum-number-of-ones",
    "title": "Maximum Number of Ones",
    "difficulty": "Hard",
    "description": "Consider a matrix `M` with dimensions `width * height`, such that every cell has value `0` or `1`, and any **square** sub-matrix of `M` of size `sideLength * sideLength` has at most `maxOnes` ones. Return the maximum possible number of ones that the matrix `M` can have.",
    "examples": [
      {
        "input": "width = 3, height = 3, sideLength = 2, maxOnes = 1",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "width = 3, height = 3, sideLength = 2, maxOnes = 2",
        "output": "6",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= width, height <= 100`",
      "`1 <= sideLength <= width, height`",
      "`0 <= maxOnes <= sideLength  sideLength`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1184",
    "slug": "distance-between-bus-stops",
    "title": "Distance Between Bus Stops",
    "difficulty": "Easy",
    "description": "A bus has `n` stops numbered from `0` to `n - 1` that form a circle. We know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number `i` and `(i + 1) % n`. The bus goes along both directions i.e. clockwise and counterclockwise. Return the shortest distance between the given `start` and `destination` stops.",
    "examples": [
      {
        "input": "distance = \\[1,2,3,4\\], start = 0, destination = 1",
        "output": "1",
        "explanation": "Distance between 0 and 1 is 1 or 9, minimum is 1."
      },
      {
        "input": "distance = \\[1,2,3,4\\], start = 0, destination = 2",
        "output": "3",
        "explanation": "Distance between 0 and 2 is 3 or 7, minimum is 3."
      },
      {
        "input": "distance = \\[1,2,3,4\\], start = 0, destination = 3",
        "output": "4",
        "explanation": "Distance between 0 and 3 is 6 or 4, minimum is 4."
      }
    ],
    "constraints": [
      "`1 <= n <= 10^4`",
      "`distance.length == n`",
      "`0 <= start, destination < n`",
      "`0 <= distance[i] <= 10^4`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1185",
    "slug": "day-of-the-week",
    "title": "Day of the Week",
    "difficulty": "Easy",
    "description": "Given a date, return the corresponding day of the week for that date. The input is given as three integers representing the `day`, `month` and `year` respectively. Return the answer as one of the following values `{ \"Sunday \", \"Monday \", \"Tuesday \", \"Wednesday \", \"Thursday \", \"Friday \", \"Saturday \"}`.",
    "examples": [
      {
        "input": "day = 31, month = 8, year = 2019",
        "output": "\"Saturday \""
      },
      {
        "input": "day = 18, month = 7, year = 1999",
        "output": "\"Sunday \""
      },
      {
        "input": "day = 15, month = 8, year = 1993",
        "output": "\"Sunday \""
      }
    ],
    "constraints": [
      "The given dates are valid dates between the years `1971` and `2100`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1186",
    "slug": "maximum-subarray-sum-with-one-deletion",
    "title": "Maximum Subarray Sum with One Deletion",
    "difficulty": "Medium",
    "description": "Given an array of integers, return the maximum sum for a **non-empty** subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible. Note that the subarray needs to be **non-empty** after deleting one element.",
    "examples": [
      {
        "input": "arr = \\[1,-2,0,3\\]",
        "output": "4",
        "explanation": "Because we can choose \\[1, -2, 0, 3\\] and drop -2, thus the subarray \\[1, 0, 3\\] becomes the maximum value."
      },
      {
        "input": "arr = \\[1,-2,-2,3\\]",
        "output": "3",
        "explanation": "We just choose \\[3\\] and it's the maximum sum."
      },
      {
        "input": "arr = \\[-1,-1,-1,-1\\]",
        "output": "-1",
        "explanation": "The final subarray needs to be non-empty. You can't choose \\[-1\\] and delete -1 from it, then get an empty subarray to make the sum equals to 0."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`-104 <= arr[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1187",
    "slug": "make-array-strictly-increasing",
    "title": "Make Array Strictly Increasing",
    "difficulty": "Hard",
    "description": "Given two integer arrays `arr1` and `arr2`, return the minimum number of operations (possibly zero) needed to make `arr1` strictly increasing. In one operation, you can choose two indices `0 <= i < arr1.length` and `0 <= j < arr2.length` and do the assignment `arr1[i] = arr2[j]`. If there is no way to make `arr1` strictly increasing, return `-1`.",
    "examples": [
      {
        "input": "arr1 = \\[1,5,3,6,7\\], arr2 = \\[1,3,2,4\\]",
        "output": "1",
        "explanation": "Replace `5` with `2`, then `arr1 = [1, 2, 3, 6, 7]`."
      },
      {
        "input": "arr1 = \\[1,5,3,6,7\\], arr2 = \\[4,3,1\\]",
        "output": "2",
        "explanation": "Replace `5` with `3` and then replace `3` with `4`. `arr1 = [1, 3, 4, 6, 7]`."
      },
      {
        "input": "arr1 = \\[1,5,3,6,7\\], arr2 = \\[1,6,3,3\\]",
        "output": "-1",
        "explanation": "You can't make `arr1` strictly increasing."
      }
    ],
    "constraints": [
      "`1 <= arr1.length, arr2.length <= 2000`",
      "`0 <= arr1[i], arr2[i] <= 10^9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1189",
    "slug": "maximum-number-of-balloons",
    "title": "Maximum Number of Balloons",
    "difficulty": "Easy",
    "description": "Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"balloon \"** as possible. You can use each character in `text` **at most once**. Return the maximum number of instances that can be formed.",
    "examples": [
      {
        "input": "text =  \"nlaebolko \"",
        "output": "1"
      },
      {
        "input": "text =  \"loonbalxballpoon \"",
        "output": "2"
      },
      {
        "input": "text =  \"leetcode \"",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= text.length <= 104`",
      "`text` consists of lower case English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1190",
    "slug": "reverse-substrings-between-each-pair-of-parentheses",
    "title": "Reverse Substrings Between Each Pair of Parentheses",
    "difficulty": "Medium",
    "description": "You are given a string `s` that consists of lower case English letters and brackets. Reverse the strings in each pair of matching parentheses, starting from the innermost one. Your result should **not** contain any brackets.",
    "examples": [
      {
        "input": "s =  \"(abcd) \"",
        "output": "\"dcba \""
      },
      {
        "input": "s =  \"(u(love)i) \"",
        "output": "\"iloveu \"",
        "explanation": "The substring  \"love \" is reversed first, then the whole string is reversed."
      },
      {
        "input": "s =  \"(ed(et(oc))el) \"",
        "output": "\"leetcode \"",
        "explanation": "First, we reverse the substring  \"oc \", then  \"etco \", and finally, the whole string."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 2000`",
      "`s` only contains lower case English characters and parentheses.",
      "It is guaranteed that all parentheses are balanced."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1191",
    "slug": "k-concatenation-maximum-sum",
    "title": "K-Concatenation Maximum Sum",
    "difficulty": "Medium",
    "description": "Given an integer array `arr` and an integer `k`, modify the array by repeating it `k` times. For example, if `arr = [1, 2]` and `k = 3` then the modified array will be `[1, 2, 1, 2, 1, 2]`. Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be `0` and its sum in that case is `0`. As the answer can be very large, return the answer **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "arr = \\[1,2\\], k = 3",
        "output": "9"
      },
      {
        "input": "arr = \\[1,-2,1\\], k = 5",
        "output": "2"
      },
      {
        "input": "arr = \\[-1,-2\\], k = 7",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`1 <= k <= 105`",
      "`-104 <= arr[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1192",
    "slug": "critical-connections-in-a-network",
    "title": "Critical Connections in a Network",
    "difficulty": "Hard",
    "description": "There are `n` servers numbered from `0` to `n - 1` connected by undirected server-to-server `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between servers `ai` and `bi`. Any server can reach other servers directly or indirectly through the network. A _critical connection_ is a connection that, if removed, will make some servers unable to reach some other server. Return all critical connections in the network in any order.",
    "examples": [
      {
        "input": "n = 4, connections = \\[\\[0,1\\],\\[1,2\\],\\[2,0\\],\\[1,3\\]\\]",
        "output": "\\[\\[1,3\\]\\]",
        "explanation": "\\[\\[3,1\\]\\] is also accepted."
      },
      {
        "input": "n = 2, connections = \\[\\[0,1\\]\\]",
        "output": "\\[\\[0,1\\]\\]"
      }
    ],
    "constraints": [
      "`2 <= n <= 105`",
      "`n - 1 <= connections.length <= 105`",
      "`0 <= ai, bi <= n - 1`",
      "`ai != bi`",
      "There are no repeated connections."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1196",
    "slug": "how-many-apples-can-you-put-into-the-basket",
    "title": "How Many Apples Can You Put into the Basket",
    "difficulty": "Easy",
    "description": "You have some apples and a basket that can carry up to `5000` units of weight. Given an integer array `weight` where `weight[i]` is the weight of the `ith` apple, return _the maximum number of apples you can put in the basket_.",
    "examples": [
      {
        "input": "weight = \\[100,200,150,1000\\]",
        "output": "4",
        "explanation": "All 4 apples can be carried by the basket since their sum of weights is 1450."
      },
      {
        "input": "weight = \\[900,950,800,1000,700,800\\]",
        "output": "5",
        "explanation": "The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them."
      }
    ],
    "constraints": [
      "`1 <= weight.length <= 103`",
      "`1 <= weight[i] <= 103`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1197",
    "slug": "minimum-knight-moves",
    "title": "Minimum Knight Moves",
    "difficulty": "Medium",
    "description": "In an **infinite** chess board with coordinates from `-infinity` to `+infinity`, you have a **knight** at square `[0, 0]`. A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction. Return _the minimum number of steps needed to move the knight to the square_ `[x, y]`. It is guaranteed the answer exists.",
    "examples": [
      {
        "input": "x = 2, y = 1",
        "output": "1",
        "explanation": "\\[0, 0\\] -> \\[2, 1\\]"
      },
      {
        "input": "x = 5, y = 5",
        "output": "4",
        "explanation": "\\[0, 0\\] -> \\[2, 1\\] -> \\[4, 2\\] -> \\[3, 4\\] -> \\[5, 5\\]"
      }
    ],
    "constraints": [
      "`-300 <= x, y <= 300`",
      "`0 <= |x| + |y| <= 300`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1198",
    "slug": "find-smallest-common-element-in-all-rows",
    "title": "Find Smallest Common Element in All Rows",
    "difficulty": "Medium",
    "description": "Given an `m x n` matrix `mat` where every row is sorted in **strictly** **increasing** order, return _the **smallest common element** in all rows_. If there is no common element, return `-1`.",
    "examples": [
      {
        "input": "mat = \\[\\[1,2,3,4,5\\],\\[2,4,5,8,10\\],\\[3,5,7,9,11\\],\\[1,3,5,7,9\\]\\]",
        "output": "5"
      },
      {
        "input": "mat = \\[\\[1,2,3\\],\\[2,3,4\\],\\[2,3,5\\]\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 500`",
      "`1 <= mat[i][j] <= 104`",
      "`mat[i]` is sorted in strictly increasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1199",
    "slug": "minimum-time-to-build-blocks",
    "title": "Minimum Time to Build Blocks",
    "difficulty": "Hard",
    "description": "You are given a list of blocks, where `blocks[i] = t` means that the `i`\\-th block needs `t` units of time to be built. A block can only be built by exactly one worker. A worker can either split into two workers (number of workers increases by one) or build a block then go home. Both decisions cost some time. The time cost of spliting one worker into two workers is given as an integer `split`. Note that if two workers split at the same time, they split in parallel so the cost would be `split`. Output the minimum time needed to build all blocks. Initially, there is only **one** worker.",
    "examples": [
      {
        "input": "blocks = \\[1\\], split = 1",
        "output": "1",
        "explanation": "We use 1 worker to build 1 block in 1 time unit."
      },
      {
        "input": "blocks = \\[1,2\\], split = 5",
        "output": "7",
        "explanation": "We split the worker into 2 workers in 5 time units then assign each of them to a block so the cost is 5 + max(1, 2) = 7."
      },
      {
        "input": "blocks = \\[1,2,3\\], split = 1",
        "output": "4",
        "explanation": "Split 1 worker into 2, then assign the first worker to the last block and split the second worker into 2."
      }
    ],
    "constraints": [
      "`1 <= blocks.length <= 1000`",
      "`1 <= blocks[i] <= 10^5`",
      "`1 <= split <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1200",
    "slug": "minimum-absolute-difference",
    "title": "Minimum Absolute Difference",
    "difficulty": "Easy",
    "description": "Given an array of **distinct** integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements. Return a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows *  `a, b` are from `arr` *  `a < b` *  `b - a` equals to the minimum absolute difference of any two elements in `arr`",
    "examples": [
      {
        "input": "arr = \\[4,2,1,3\\]",
        "output": "\\[\\[1,2\\],\\[2,3\\],\\[3,4\\]\\]",
        "explanation": "The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order."
      },
      {
        "input": "arr = \\[1,3,6,10,15\\]",
        "output": "\\[\\[1,3\\]\\]"
      },
      {
        "input": "arr = \\[3,8,-10,23,19,-4,-14,27\\]",
        "output": "\\[\\[-14,-10\\],\\[19,23\\],\\[23,27\\]\\]"
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 105`",
      "`-106 <= arr[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1201",
    "slug": "ugly-number-iii",
    "title": "Ugly Number III",
    "difficulty": "Medium",
    "description": "An **ugly number** is a positive integer that is divisible by `a`, `b`, or `c`. Given four integers `n`, `a`, `b`, and `c`, return the `nth` **ugly number**.",
    "examples": [
      {
        "input": "n = 3, a = 2, b = 3, c = 5",
        "output": "4",
        "explanation": "The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4."
      },
      {
        "input": "n = 4, a = 2, b = 3, c = 4",
        "output": "6",
        "explanation": "The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6."
      },
      {
        "input": "n = 5, a = 2, b = 11, c = 13",
        "output": "10",
        "explanation": "The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10."
      }
    ],
    "constraints": [
      "`1 <= n, a, b, c <= 109`",
      "`1 <= a  b  c <= 1018`",
      "It is guaranteed that the result will be in range `[1, 2  109]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1202",
    "slug": "smallest-string-with-swaps",
    "title": "Smallest String With Swaps",
    "difficulty": "Medium",
    "description": "You are given a string `s`, and an array of pairs of indices in the string `pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the string. You can swap the characters at any pair of indices in the given `pairs` **any number of times**. Return the lexicographically smallest string that `s` can be changed to after using the swaps.",
    "examples": [
      {
        "input": "s =  \"dcab \", pairs = \\[\\[0,3\\],\\[1,2\\]\\]",
        "output": "\"bacd \""
      },
      {
        "input": "s =  \"dcab \", pairs = \\[\\[0,3\\],\\[1,2\\],\\[0,2\\]\\]",
        "output": "\"abcd \""
      },
      {
        "input": "s =  \"cba \", pairs = \\[\\[0,1\\],\\[1,2\\]\\]",
        "output": "\"abc \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 10^5`",
      "`0 <= pairs.length <= 10^5`",
      "`0 <= pairs[i][0], pairs[i][1] < s.length`",
      "`s` only contains lower case English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1203",
    "slug": "sort-items-by-groups-respecting-dependencies",
    "title": "Sort Items by Groups Respecting Dependencies",
    "difficulty": "Hard",
    "description": "There are `n` items each belonging to zero or one of `m` groups where `group[i]` is the group that the `i`\\-th item belongs to and it's equal to `-1` if the `i`\\-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it. Return a sorted list of the items such that: *  The items that belong to the same group are next to each other in the sorted list. *  There are some relations between these items where `beforeItems[i]` is a list containing all the items that should come before the `i`\\-th item in the sorted array (to the left of the `i`\\-th item). Return any solution if there is more than one solution and return an **empty list** if there is no solution.",
    "examples": [
      {
        "input": "n = 8, m = 2, group = \\[-1,-1,1,0,0,1,0,-1\\], beforeItems = \\[\\[\\],\\[6\\],\\[5\\],\\[6\\],\\[3,6\\],\\[\\],\\[\\],\\[\\]\\]",
        "output": "\\[6,3,4,1,5,2,0,7\\]"
      },
      {
        "input": "n = 8, m = 2, group = \\[-1,-1,1,0,0,1,0,-1\\], beforeItems = \\[\\[\\],\\[6\\],\\[5\\],\\[6\\],\\[3\\],\\[\\],\\[4\\],\\[\\]\\]",
        "output": "\\[\\]",
        "explanation": "This is the same as example 1 except that 4 needs to be before 6 in the sorted list."
      }
    ],
    "constraints": [
      "`1 <= m <= n <= 3  104`",
      "`group.length == beforeItems.length == n`",
      "`-1 <= group[i] <= m - 1`",
      "`0 <= beforeItems[i].length <= n - 1`",
      "`0 <= beforeItems[i][j] <= n - 1`",
      "`i != beforeItems[i][j]`",
      "`beforeItems[i]` does not contain duplicates elements."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1206",
    "slug": "design-skiplist",
    "title": "Design Skiplist",
    "difficulty": "Hard",
    "description": "Design a **Skiplist** without using any built-in libraries. A **skiplist** is a data structure that takes `O(log(n))` time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists. For example, we have a Skiplist containing `[30,40,50,60,70,90]` and we want to add `80` and `45` into it. The Skiplist works this way: Artyom Kalinin \\[CC BY-SA 3.0\\], via [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Skip_list_add_element-en.gif \"Artyom Kalinin [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons\") You can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than `O(n)`. It can be proven that the average time complexity for each operation is `O(log(n))` and space complexity is `O(n)`. See more about Skiplist: [https://en.wikipedia.org/wiki/Skip\\_list](https://en.wikipedia.org/wiki/Skip_list) Implement the `Skiplist` class: *  `Skiplist()` Initializes the object of the skiplist. *  `bool search(int target)` Returns `true` if the integer `target` exists in the Skiplist or `false` otherwise. *  `void add(int num)` Inserts the value `num` into the SkipList. *  `bool erase(int num)` Removes the value `num` from the Skiplist and returns `true`. If `num` does not exist in the Skiplist, do nothing and return `false`. If there exist multiple `num` values, removing any one of them is fine. Note that duplicates may exist in the Skiplist, your code needs to handle this situation.",
    "examples": [],
    "constraints": [
      "`0 <= num, target <= 2  104`",
      "At most `5  104` calls will be made to `search`, `add`, and `erase`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1207",
    "slug": "unique-number-of-occurrences",
    "title": "Unique Number of Occurrences",
    "difficulty": "Easy",
    "description": "Given an array of integers `arr`, return `true` _if the number of occurrences of each value in the array is **unique** or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "arr = \\[1,2,2,1,1,3\\]",
        "output": "true",
        "explanation": "The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences."
      },
      {
        "input": "arr = \\[1,2\\]",
        "output": "false"
      },
      {
        "input": "arr = \\[-3,0,1,-3,1,1,1,-3,10,0\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 1000`",
      "`-1000 <= arr[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1208",
    "slug": "get-equal-substrings-within-budget",
    "title": "Get Equal Substrings Within Budget",
    "difficulty": "Medium",
    "description": "You are given two strings `s` and `t` of the same length and an integer `maxCost`. You want to change `s` to `t`. Changing the `ith` character of `s` to `ith` character of `t` costs `|s[i] - t[i]|` (i.e., the absolute difference between the ASCII values of the characters). Return _the maximum length of a substring of_ `s` _that can be changed to be the same as the corresponding substring of_ `t` _with a cost less than or equal to_ `maxCost`. If there is no substring from `s` that can be changed to its corresponding substring from `t`, return `0`.",
    "examples": [
      {
        "input": "s =  \"abcd \", t =  \"bcdf \", maxCost = 3",
        "output": "3",
        "explanation": "\"abc \" of s can change to  \"bcd \"."
      },
      {
        "input": "s =  \"abcd \", t =  \"cdef \", maxCost = 3",
        "output": "1",
        "explanation": "Each character in s costs 2 to change to character in t,  so the maximum length is 1."
      },
      {
        "input": "s =  \"abcd \", t =  \"acde \", maxCost = 0",
        "output": "1",
        "explanation": "You cannot make any change, so the maximum length is 1."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`t.length == s.length`",
      "`0 <= maxCost <= 106`",
      "`s` and `t` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1209",
    "slug": "remove-all-adjacent-duplicates-in-string-ii",
    "title": "Remove All Adjacent Duplicates in String II",
    "difficulty": "Medium",
    "description": "You are given a string `s` and an integer `k`, a `k` **duplicate removal** consists of choosing `k` adjacent and equal letters from `s` and removing them, causing the left and the right side of the deleted substring to concatenate together. We repeatedly make `k` **duplicate removals** on `s` until we no longer can. Return _the final string after all such duplicate removals have been made_. It is guaranteed that the answer is **unique**.",
    "examples": [
      {
        "input": "s =  \"abcd \", k = 2",
        "output": "\"abcd \"",
        "explanation": "There's nothing to delete."
      },
      {
        "input": "s =  \"deeedbbcccbdaa \", k = 3",
        "output": "\"aa \"",
        "explanation": ""
      },
      {
        "input": "s =  \"pbbcggttciiippooaais \", k = 2",
        "output": "\"ps \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`2 <= k <= 104`",
      "`s` only contains lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1210",
    "slug": "minimum-moves-to-reach-target-with-rotations",
    "title": "Minimum Moves to Reach Target with Rotations",
    "difficulty": "Hard",
    "description": "In an `n*n` grid, there is a snake that spans 2 cells and starts moving from the top left corner at `(0, 0)` and `(0, 1)`. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at `(n-1, n-2)` and `(n-1, n-1)`. In one move the snake can: *  Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is. *  Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is. *  Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from `(r, c)` and `(r, c+1)` to `(r, c)` and `(r+1, c)`. *  Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from `(r, c)` and `(r+1, c)` to `(r, c)` and `(r, c+1)`. Return the minimum number of moves to reach the target. If there is no way to reach the target, return `-1`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,0,0,0,0,1\\],",
        "output": "11",
        "explanation": ""
      },
      {
        "input": "grid = \\[\\[0,0,1,1,1,1\\],",
        "output": "9"
      }
    ],
    "constraints": [
      "`2 <= n <= 100`",
      "`0 <= grid[i][j] <= 1`",
      "It is guaranteed that the snake starts at empty cells."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1213",
    "slug": "intersection-of-three-sorted-arrays",
    "title": "Intersection of Three Sorted Arrays",
    "difficulty": "Easy",
    "description": "Given three integer arrays `arr1`, `arr2` and `arr3` **sorted** in **strictly increasing** order, return a sorted array of **only** the integers that appeared in **all** three arrays.",
    "examples": [
      {
        "input": "arr1 = \\[1,2,3,4,5\\], arr2 = \\[1,2,5,7,9\\], arr3 = \\[1,3,4,5,8\\]",
        "output": "\\[1,5\\]",
        "explanation": "Only 1 and 5 appeared in the three arrays."
      },
      {
        "input": "arr1 = \\[197,418,523,876,1356\\], arr2 = \\[501,880,1593,1710,1870\\], arr3 = \\[521,682,1337,1395,1764\\]",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`1 <= arr1.length, arr2.length, arr3.length <= 1000`",
      "`1 <= arr1[i], arr2[i], arr3[i] <= 2000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1214",
    "slug": "two-sum-bsts",
    "title": "Two Sum BSTs",
    "difficulty": "Medium",
    "description": "Given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.",
    "examples": [
      {
        "input": "root1 = \\[2,1,4\\], root2 = \\[1,0,3\\], target = 5",
        "output": "true",
        "explanation": "2 and 3 sum up to 5."
      },
      {
        "input": "root1 = \\[0,-10,10\\], root2 = \\[5,1,7,0,2\\], target = 18",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in each tree is in the range `[1, 5000]`.",
      "`-109 <= Node.val, target <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1215",
    "slug": "stepping-numbers",
    "title": "Stepping Numbers",
    "difficulty": "Medium",
    "description": "A **stepping number** is an integer such that all of its adjacent digits have an absolute difference of exactly `1`. *  For example, `321` is a **stepping number** while `421` is not. Given two integers `low` and `high`, return _a sorted list of all the **stepping numbers** in the inclusive range_ `[low, high]`.",
    "examples": [
      {
        "input": "low = 0, high = 21",
        "output": "\\[0,1,2,3,4,5,6,7,8,9,10,12,21\\]"
      },
      {
        "input": "low = 10, high = 15",
        "output": "\\[10,12\\]"
      }
    ],
    "constraints": [
      "`0 <= low <= high <= 2  109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1216",
    "slug": "valid-palindrome-iii",
    "title": "Valid Palindrome III",
    "difficulty": "Hard",
    "description": "Given a string `s` and an integer `k`, return `true` if `s` is a `k`**\\-palindrome**. A string is `k`**\\-palindrome** if it can be transformed into a palindrome by removing at most `k` characters from it.",
    "examples": [
      {
        "input": "s =  \"abcdeca \", k = 2",
        "output": "true",
        "explanation": "Remove 'b' and 'e' characters."
      },
      {
        "input": "s =  \"abbababa \", k = 1",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of only lowercase English letters.",
      "`1 <= k <= s.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1217",
    "slug": "minimum-cost-to-move-chips-to-the-same-position",
    "title": "Minimum Cost to Move Chips to The Same Position",
    "difficulty": "Easy",
    "description": "We have `n` chips, where the position of the `ith` chip is `position[i]`. We need to move all the chips to **the same position**. In one step, we can change the position of the `ith` chip from `position[i]` to: *  `position[i] + 2` or `position[i] - 2` with `cost = 0`. *  `position[i] + 1` or `position[i] - 1` with `cost = 1`. Return _the minimum cost_ needed to move all the chips to the same position.",
    "examples": [
      {
        "input": "position = \\[1,2,3\\]",
        "output": "1",
        "explanation": "First step: Move the chip at position 3 to position 1 with cost = 0."
      },
      {
        "input": "position = \\[2,2,2,3,3\\]",
        "output": "2",
        "explanation": "We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2."
      },
      {
        "input": "position = \\[1,1000000000\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= position.length <= 100`",
      "`1 <= position[i] <= 10^9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1218",
    "slug": "longest-arithmetic-subsequence-of-given-difference",
    "title": "Longest Arithmetic Subsequence of Given Difference",
    "difficulty": "Medium",
    "description": "Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`. A **subsequence** is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "arr = \\[1,2,3,4\\], difference = 1",
        "output": "4",
        "explanation": "The longest arithmetic subsequence is \\[1,2,3,4\\]."
      },
      {
        "input": "arr = \\[1,3,5,7\\], difference = 1",
        "output": "1",
        "explanation": "The longest arithmetic subsequence is any single element."
      },
      {
        "input": "arr = \\[1,5,7,8,5,3,4,2,1\\], difference = -2",
        "output": "4",
        "explanation": "The longest arithmetic subsequence is \\[7,5,3,1\\]."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`-104 <= arr[i], difference <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1219",
    "slug": "path-with-maximum-gold",
    "title": "Path with Maximum Gold",
    "difficulty": "Medium",
    "description": "In a gold mine `grid` of size `m x n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty. Return the maximum amount of gold you can collect under the conditions: *  Every time you are located in a cell you will collect all the gold in that cell. *  From your position, you can walk one step to the left, right, up, or down. *  You can't visit the same cell more than once. *  Never visit a cell with `0` gold. *  You can start and stop collecting gold from **any** position in the grid that has some gold.",
    "examples": [
      {
        "input": "grid = \\[\\[0,6,0\\],\\[5,8,7\\],\\[0,9,0\\]\\]",
        "output": "24",
        "explanation": ""
      },
      {
        "input": "grid = \\[\\[1,0,7\\],\\[2,0,6\\],\\[3,4,5\\],\\[0,3,0\\],\\[9,0,20\\]\\]",
        "output": "28",
        "explanation": ""
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 15`",
      "`0 <= grid[i][j] <= 100`",
      "There are at most 25 cells containing gold."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1220",
    "slug": "count-vowels-permutation",
    "title": "Count Vowels Permutation",
    "difficulty": "Hard",
    "description": "Given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules: *  Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`) *  Each vowel `'a'` may only be followed by an `'e'`. *  Each vowel `'e'` may only be followed by an `'a'` or an `'i'`. *  Each vowel `'i'` **may not** be followed by another `'i'`. *  Each vowel `'o'` may only be followed by an `'i'` or a `'u'`. *  Each vowel `'u'` may only be followed by an `'a'.` Since the answer may be too large, return it modulo `10^9 + 7.`",
    "examples": [
      {
        "input": "n = 1",
        "output": "5",
        "explanation": "All possible strings are:  \"a \",  \"e \",  \"i \" ,  \"o \" and  \"u \"."
      },
      {
        "input": "n = 2",
        "output": "10",
        "explanation": "All possible strings are:  \"ae \",  \"ea \",  \"ei \",  \"ia \",  \"ie \",  \"io \",  \"iu \",  \"oi \",  \"ou \" and  \"ua \"."
      },
      {
        "input": "n = 5",
        "output": "68"
      }
    ],
    "constraints": [
      "`1 <= n <= 2  10^4`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1221",
    "slug": "split-a-string-in-balanced-strings",
    "title": "Split a String in Balanced Strings",
    "difficulty": "Easy",
    "description": "**Balanced** strings are those that have an equal quantity of `'L'` and `'R'` characters. Given a **balanced** string `s`, split it into some number of substrings such that: *  Each substring is balanced. Return _the **maximum** number of balanced strings you can obtain._",
    "examples": [
      {
        "input": "s =  \"RLRRLLRLRL \"",
        "output": "4",
        "explanation": "s can be split into  \"RL \",  \"RRLL \",  \"RL \",  \"RL \", each substring contains same number of 'L' and 'R'."
      },
      {
        "input": "s =  \"RLRRRLLRLL \"",
        "output": "2",
        "explanation": "s can be split into  \"RL \",  \"RRRLLRLL \", each substring contains same number of 'L' and 'R'."
      },
      {
        "input": "s =  \"LLLLRRRR \"",
        "output": "1",
        "explanation": "s can be split into  \"LLLLRRRR \"."
      }
    ],
    "constraints": [
      "`2 <= s.length <= 1000`",
      "`s[i]` is either `'L'` or `'R'`.",
      "`s` is a balanced string."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1222",
    "slug": "queens-that-can-attack-the-king",
    "title": "Queens That Can Attack the King",
    "difficulty": "Medium",
    "description": "On a **0-indexed** `8 x 8` chessboard, there can be multiple black queens ad one white king. You are given a 2D integer array `queens` where `queens[i] = [xQueeni, yQueeni]` represents the position of the `ith` black queen on the chessboard. You are also given an integer array `king` of length `2` where `king = [xKing, yKing]` represents the position of the white king. Return _the coordinates of the black queens that can directly attack the king_. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "queens = \\[\\[0,1\\],\\[1,0\\],\\[4,0\\],\\[0,4\\],\\[3,3\\],\\[2,4\\]\\], king = \\[0,0\\]",
        "output": "\\[\\[0,1\\],\\[1,0\\],\\[3,3\\]\\]",
        "explanation": "The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes)."
      },
      {
        "input": "queens = \\[\\[0,0\\],\\[1,1\\],\\[2,2\\],\\[3,4\\],\\[3,5\\],\\[4,4\\],\\[4,5\\]\\], king = \\[3,3\\]",
        "output": "\\[\\[2,2\\],\\[3,4\\],\\[4,4\\]\\]",
        "explanation": "The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes)."
      }
    ],
    "constraints": [
      "`1 <= queens.length < 64`",
      "`queens[i].length == king.length == 2`",
      "`0 <= xQueeni, yQueeni, xKing, yKing < 8`",
      "All the given positions are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1223",
    "slug": "dice-roll-simulation",
    "title": "Dice Roll Simulation",
    "difficulty": "Hard",
    "description": "A die simulator generates a random number from `1` to `6` for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (**1-indexed**) consecutive times. Given an array of integers `rollMax` and an integer `n`, return _the number of distinct sequences that can be obtained with exact_ `n` _rolls_. Since the answer may be too large, return it **modulo** `109 + 7`. Two sequences are considered different if at least one element differs from each other.",
    "examples": [
      {
        "input": "n = 2, rollMax = \\[1,1,2,2,2,3\\]",
        "output": "34",
        "explanation": "There will be 2 rolls of die, if there are no constraints on the die, there are 6 \\* 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34."
      },
      {
        "input": "n = 2, rollMax = \\[1,1,1,1,1,1\\]",
        "output": "30"
      },
      {
        "input": "n = 3, rollMax = \\[1,1,1,2,2,3\\]",
        "output": "181"
      }
    ],
    "constraints": [
      "`1 <= n <= 5000`",
      "`rollMax.length == 6`",
      "`1 <= rollMax[i] <= 15`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1224",
    "slug": "maximum-equal-frequency",
    "title": "Maximum Equal Frequency",
    "difficulty": "Hard",
    "description": "Given an array `nums` of positive integers, return the longest possible length of an array prefix of `nums`, such that it is possible to remove **exactly one** element from this prefix so that every number that has appeared in it will have the same number of occurrences. If after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).",
    "examples": [
      {
        "input": "nums = \\[2,2,1,1,5,3,3,5\\]",
        "output": "7",
        "explanation": "For the subarray \\[2,2,1,1,5,3,3\\] of length 7, if we remove nums\\[4\\] = 5, we will get \\[2,2,1,1,3,3\\], so that each number will appear exactly twice."
      },
      {
        "input": "nums = \\[1,1,1,2,2,2,3,3,3,4,4,4,5\\]",
        "output": "13"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1227",
    "slug": "airplane-seat-assignment-probability",
    "title": "Airplane Seat Assignment Probability",
    "difficulty": "Medium",
    "description": "`n` passengers board an airplane with exactly `n` seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will: *  Take their own seat if it is still available, and *  Pick other seats randomly when they find their seat occupied Return _the probability that the_ `nth` _person gets his own seat_.",
    "examples": [
      {
        "input": "n = 1",
        "output": "1.00000",
        "explanation": "The first person can only get the first seat."
      },
      {
        "input": "n = 2",
        "output": "0.50000",
        "explanation": "The second person has a probability of 0.5 to get the second seat (when first person gets the first seat)."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1228",
    "slug": "missing-number-in-arithmetic-progression",
    "title": "Missing Number In Arithmetic Progression",
    "difficulty": "Easy",
    "description": "In some array `arr`, the values were in arithmetic progression: the values `arr[i + 1] - arr[i]` are all equal for every `0 <= i < arr.length - 1`. A value from `arr` was removed that **was not the first or last value in the array**. Given `arr`, return _the removed value_.",
    "examples": [
      {
        "input": "arr = \\[5,7,11,13\\]",
        "output": "9",
        "explanation": "The previous array was \\[5,7,**9**,11,13\\]."
      },
      {
        "input": "arr = \\[15,13,12\\]",
        "output": "14",
        "explanation": "The previous array was \\[15,**14**,13,12\\]."
      }
    ],
    "constraints": [
      "`3 <= arr.length <= 1000`",
      "`0 <= arr[i] <= 105`",
      "The given array is guaranteed to be a valid array."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1229",
    "slug": "meeting-scheduler",
    "title": "Meeting Scheduler",
    "difficulty": "Medium",
    "description": "Given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the **earliest time slot** that works for both of them and is of duration `duration`. If there is no common time slot that satisfies the requirements, return an **empty array**. The format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`. It is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.",
    "examples": [
      {
        "input": "slots1 = \\[\\[10,50\\],\\[60,120\\],\\[140,210\\]\\], slots2 = \\[\\[0,15\\],\\[60,70\\]\\], duration = 8",
        "output": "\\[60,68\\]"
      },
      {
        "input": "slots1 = \\[\\[10,50\\],\\[60,120\\],\\[140,210\\]\\], slots2 = \\[\\[0,15\\],\\[60,70\\]\\], duration = 12",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`1 <= slots1.length, slots2.length <= 104`",
      "`slots1[i].length, slots2[i].length == 2`",
      "`slots1[i][0] < slots1[i][1]`",
      "`slots2[i][0] < slots2[i][1]`",
      "`0 <= slots1[i][j], slots2[i][j] <= 109`",
      "`1 <= duration <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1230",
    "slug": "toss-strange-coins",
    "title": "Toss Strange Coins",
    "difficulty": "Medium",
    "description": "You have some coins. The `i`\\-th coin has a probability `prob[i]` of facing heads when tossed. Return the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.",
    "examples": [
      {
        "input": "prob = \\[0.4\\], target = 1",
        "output": "0.40000"
      },
      {
        "input": "prob = \\[0.5,0.5,0.5,0.5,0.5\\], target = 0",
        "output": "0.03125"
      }
    ],
    "constraints": [
      "`1 <= prob.length <= 1000`",
      "`0 <= prob[i] <= 1`",
      "`0 <= target` `<= prob.length`",
      "Answers will be accepted as correct if they are within `10^-5` of the correct answer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1231",
    "slug": "divide-chocolate",
    "title": "Divide Chocolate",
    "difficulty": "Hard",
    "description": "You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array `sweetness`. You want to share the chocolate with your `k` friends so you start cutting the chocolate bar into `k + 1` pieces using `k` cuts, each piece consists of some **consecutive** chunks. Being generous, you will eat the piece with the **minimum total sweetness** and give the other pieces to your friends. Find the **maximum total sweetness** of the piece you can get by cutting the chocolate bar optimally.",
    "examples": [
      {
        "input": "sweetness = \\[1,2,3,4,5,6,7,8,9\\], k = 5",
        "output": "6",
        "explanation": "You can divide the chocolate to \\[1,2,3\\], \\[4,5\\], \\[6\\], \\[7\\], \\[8\\], \\[9\\]"
      },
      {
        "input": "sweetness = \\[5,6,7,8,9,1,2,3,4\\], k = 8",
        "output": "1",
        "explanation": "There is only one way to cut the bar into 9 pieces."
      },
      {
        "input": "sweetness = \\[1,2,2,1,2,2,1,2,2\\], k = 2",
        "output": "5",
        "explanation": "You can divide the chocolate to \\[1,2,2\\], \\[1,2,2\\], \\[1,2,2\\]"
      }
    ],
    "constraints": [
      "`0 <= k < sweetness.length <= 104`",
      "`1 <= sweetness[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1232",
    "slug": "check-if-it-is-a-straight-line",
    "title": "Check If It Is a Straight Line",
    "difficulty": "Easy",
    "description": "You are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points make a straight line in the XY plane.",
    "examples": [
      {
        "input": "coordinates = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,5\\],\\[5,6\\],\\[6,7\\]\\]",
        "output": "true"
      },
      {
        "input": "coordinates = \\[\\[1,1\\],\\[2,2\\],\\[3,4\\],\\[4,5\\],\\[5,6\\],\\[7,7\\]\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`2 <= coordinates.length <= 1000`",
      "`coordinates[i].length == 2`",
      "`-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4`",
      "`coordinates` contains no duplicate point."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1233",
    "slug": "remove-sub-folders-from-the-filesystem",
    "title": "Remove Sub-Folders from the Filesystem",
    "difficulty": "Medium",
    "description": "Given a list of folders `folder`, return _the folders after removing all **sub-folders** in those folders_. You may return the answer in **any order**. If a `folder[i]` is located within another `folder[j]`, it is called a **sub-folder** of it. The format of a path is one or more concatenated strings of the form: `'/'` followed by one or more lowercase English letters. *  For example, `\"/leetcode \"` and `\"/leetcode/problems \"` are valid paths while an empty string and `\"/ \"` are not.",
    "examples": [
      {
        "input": "folder = \\[ \"/a \", \"/a/b \", \"/c/d \", \"/c/d/e \", \"/c/f \"\\]",
        "output": "\\[ \"/a \", \"/c/d \", \"/c/f \"\\]",
        "explanation": "Folders  \"/a/b \" is a subfolder of  \"/a \" and  \"/c/d/e \" is inside of folder  \"/c/d \" in our filesystem."
      },
      {
        "input": "folder = \\[ \"/a \", \"/a/b/c \", \"/a/b/d \"\\]",
        "output": "\\[ \"/a \"\\]",
        "explanation": "Folders  \"/a/b/c \" and  \"/a/b/d \" will be removed because they are subfolders of  \"/a \"."
      },
      {
        "input": "folder = \\[ \"/a/b/c \", \"/a/b/ca \", \"/a/b/d \"\\]",
        "output": "\\[ \"/a/b/c \", \"/a/b/ca \", \"/a/b/d \"\\]"
      }
    ],
    "constraints": [
      "`1 <= folder.length <= 4  104`",
      "`2 <= folder[i].length <= 100`",
      "`folder[i]` contains only lowercase letters and `'/'`.",
      "`folder[i]` always starts with the character `'/'`.",
      "Each folder name is unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1234",
    "slug": "replace-the-substring-for-balanced-string",
    "title": "Replace the Substring for Balanced String",
    "difficulty": "Medium",
    "description": "You are given a string s of length `n` containing only four kinds of characters: `'Q'`, `'W'`, `'E'`, and `'R'`. A string is said to be **balanced** if each of its characters appears `n / 4` times where `n` is the length of the string. Return _the minimum length of the substring that can be replaced with **any** other string of the same length to make_ `s` _**balanced**_. If s is already **balanced**, return `0`.",
    "examples": [
      {
        "input": "s =  \"QWER \"",
        "output": "0",
        "explanation": "s is already balanced."
      },
      {
        "input": "s =  \"QQWE \"",
        "output": "1",
        "explanation": "We need to replace a 'Q' to 'R', so that  \"RQWE \" (or  \"QRWE \") is balanced."
      },
      {
        "input": "s =  \"QQQW \"",
        "output": "2",
        "explanation": "We can replace the first  \"QQ \" to  \"ER \"."
      }
    ],
    "constraints": [
      "`n == s.length`",
      "`4 <= n <= 105`",
      "`n` is a multiple of `4`.",
      "`s` contains only `'Q'`, `'W'`, `'E'`, and `'R'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1235",
    "slug": "maximum-profit-in-job-scheduling",
    "title": "Maximum Profit in Job Scheduling",
    "difficulty": "Hard",
    "description": "We have `n` jobs, where every job is scheduled to be done from `startTime[i]` to `endTime[i]`, obtaining a profit of `profit[i]`. You're given the `startTime`, `endTime` and `profit` arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range. If you choose a job that ends at time `X` you will be able to start another job that starts at time `X`.",
    "examples": [
      {
        "input": "startTime = \\[1,2,3,3\\], endTime = \\[3,4,5,6\\], profit = \\[50,10,40,70\\]",
        "output": "120",
        "explanation": "The subset chosen is the first and fourth job."
      },
      {
        "input": "startTime = \\[1,2,3,4,6\\], endTime = \\[3,5,10,6,9\\], profit = \\[20,20,100,70,60\\]",
        "output": "150",
        "explanation": "The subset chosen is the first, fourth and fifth job."
      },
      {
        "input": "startTime = \\[1,1,1\\], endTime = \\[2,3,4\\], profit = \\[5,6,4\\]",
        "output": "6"
      }
    ],
    "constraints": [
      "`1 <= startTime.length == endTime.length == profit.length <= 5  104`",
      "`1 <= startTime[i] < endTime[i] <= 109`",
      "`1 <= profit[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1236",
    "slug": "web-crawler",
    "title": "Web Crawler",
    "difficulty": "Medium",
    "description": "Given a url `startUrl` and an interface `HtmlParser`, implement a web crawler to crawl all links that are under the **same hostname** as `startUrl`. Return all urls obtained by your web crawler in **any** order. Your crawler should: *  Start from the page: `startUrl` *  Call `HtmlParser.getUrls(url)` to get all urls from a webpage of given url. *  Do not crawl the same link twice. *  Explore only the links that are under the **same hostname** as `startUrl`. As shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use **http protocol** without any **port** specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname. The `HtmlParser` interface is defined as such: interface HtmlParser { // Return a list of all urls from a webpage of given _url_. public List getUrls(String url); } Below are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables `urls`, `edges` and `startUrl`. Notice that you will only have access to `startUrl` in your code, while `urls` and `edges` are not directly accessible to you in code. Note: Consider the same URL with the trailing slash \"/ \" as a different URL. For example, \"http://news.yahoo.com \", and \"http://news.yahoo.com/ \" are different urls.",
    "examples": [
      {
        "input": "",
        "output": "\\["
      },
      {
        "input": "",
        "output": "\\[ \"http://news.google.com \"\\]",
        "explanation": "The startUrl links to all other pages that do not share the same hostname."
      }
    ],
    "constraints": [
      "`1 <= urls.length <= 1000`",
      "`1 <= urls[i].length <= 300`",
      "`startUrl` is one of the `urls`.",
      "Hostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-').",
      "The hostname may not start or end with the hyphen-minus character ('-').",
      "See: [https://en.wikipedia.org/wiki/Hostname#Restrictions\\_on\\_valid\\_hostnames](https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames)",
      "You may assume there're no duplicates in url library."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1237",
    "slug": "find-positive-integer-solution-for-a-given-equation",
    "title": "Find Positive Integer Solution for a Given Equation",
    "difficulty": "Medium",
    "description": "Given a callable function `f(x, y)` **with a hidden formula** and a value `z`, reverse engineer the formula and return _all positive integer pairs_ `x` _and_ `y` _where_ `f(x,y) == z`. You may return the pairs in any order. While the exact formula is hidden, the function is monotonically increasing, i.e.: *  `f(x, y) < f(x + 1, y)` *  `f(x, y) < f(x, y + 1)` The function interface is defined like this: interface CustomFunction { public: // Returns some positive integer f(x, y) for two positive integers x and y based on a formula. int f(int x, int y); }; We will judge your solution as follows: *  The judge has a list of `9` hidden implementations of `CustomFunction`, along with a way to generate an **answer key** of all valid pairs for a specific `z`. *  The judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`. *  The judge will call your `findSolution` and compare your results with the **answer key**. *  If your results match the **answer key**, your solution will be `Accepted`.",
    "examples": [
      {
        "input": "function\\_id = 1, z = 5",
        "output": "\\[\\[1,4\\],\\[2,3\\],\\[3,2\\],\\[4,1\\]\\]",
        "explanation": "The hidden formula for function\\_id = 1 is f(x, y) = x + y."
      },
      {
        "input": "function\\_id = 2, z = 5",
        "output": "\\[\\[1,5\\],\\[5,1\\]\\]",
        "explanation": "The hidden formula for function\\_id = 2 is f(x, y) = x \\* y."
      }
    ],
    "constraints": [
      "`1 <= function_id <= 9`",
      "`1 <= z <= 100`",
      "It is guaranteed that the solutions of `f(x, y) == z` will be in the range `1 <= x, y <= 1000`.",
      "It is also guaranteed that `f(x, y)` will fit in 32 bit signed integer if `1 <= x, y <= 1000`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1238",
    "slug": "circular-permutation-in-binary-representation",
    "title": "Circular Permutation in Binary Representation",
    "difficulty": "Medium",
    "description": "Given 2 integers `n` and `start`. Your task is return **any** permutation `p` of `(0,1,2.....,2^n -1)` such that : *  `p[0] = start` *  `p[i]` and `p[i+1]` differ by only one bit in their binary representation. *  `p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representation.",
    "examples": [
      {
        "input": "n = 2, start = 3",
        "output": "\\[3,2,0,1\\]",
        "explanation": "The binary representation of the permutation is (11,10,00,01)."
      },
      {
        "input": "n = 3, start = 2",
        "output": "\\[2,6,7,5,4,0,1,3\\]",
        "explanation": "The binary representation of the permutation is (010,110,111,101,100,000,001,011)."
      }
    ],
    "constraints": [
      "`1 <= n <= 16`",
      "`0 <= start < 2 ^ n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1239",
    "slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
    "title": "Maximum Length of a Concatenated String with Unique Characters",
    "difficulty": "Medium",
    "description": "You are given an array of strings `arr`. A string `s` is formed by the **concatenation** of a **subsequence** of `arr` that has **unique characters**. Return _the **maximum** possible length_ of `s`. A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "arr = \\[ \"un \", \"iq \", \"ue \"\\]",
        "output": "4",
        "explanation": "All the valid concatenations are:"
      },
      {
        "input": "arr = \\[ \"cha \", \"r \", \"act \", \"ers \"\\]",
        "output": "6",
        "explanation": "Possible longest valid concatenations are  \"chaers \" ( \"cha \" +  \"ers \") and  \"acters \" ( \"act \" +  \"ers \")."
      },
      {
        "input": "arr = \\[ \"abcdefghijklmnopqrstuvwxyz \"\\]",
        "output": "26",
        "explanation": "The only string in arr has all 26 characters."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 16`",
      "`1 <= arr[i].length <= 26`",
      "`arr[i]` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1240",
    "slug": "tiling-a-rectangle-with-the-fewest-squares",
    "title": "Tiling a Rectangle with the Fewest Squares",
    "difficulty": "Hard",
    "description": "Given a rectangle of size `n` x `m`, return _the minimum number of integer-sided squares that tile the rectangle_.",
    "examples": [
      {
        "input": "n = 2, m = 3",
        "output": "3",
        "explanation": "`3` squares are necessary to cover the rectangle."
      },
      {
        "input": "n = 5, m = 8",
        "output": "5"
      },
      {
        "input": "n = 11, m = 13",
        "output": "6"
      }
    ],
    "constraints": [
      "`1 <= n, m <= 13`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1243",
    "slug": "array-transformation",
    "title": "Array Transformation",
    "difficulty": "Easy",
    "description": "Given an initial array `arr`, every day you produce a new array using the array of the previous day. On the `i`\\-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`: 1. If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented. 2. If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented. 3. The first and last elements never change. After some days, the array does not change. Return that final array.",
    "examples": [
      {
        "input": "arr = \\[6,2,3,4\\]",
        "output": "\\[6,3,3,4\\]",
        "explanation": ""
      },
      {
        "input": "arr = \\[1,6,3,4,3,5\\]",
        "output": "\\[1,4,4,4,4,5\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`3 <= arr.length <= 100`",
      "`1 <= arr[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1244",
    "slug": "design-a-leaderboard",
    "title": "Design A Leaderboard",
    "difficulty": "Medium",
    "description": "Design a Leaderboard class, which has 3 functions: 1. `addScore(playerId, score)`: Update the leaderboard by adding `score` to the given player's score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given `score`. 2. `top(K)`: Return the score sum of the top `K` players. 3. `reset(playerId)`: Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function. Initially, the leaderboard is empty.",
    "examples": [
      {
        "input": "",
        "output": "",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= playerId, K <= 10000`",
      "It's guaranteed that `K` is less than or equal to the current number of players.",
      "`1 <= score <= 100`",
      "There will be at most `1000` function calls."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1245",
    "slug": "tree-diameter",
    "title": "Tree Diameter",
    "difficulty": "Medium",
    "description": "The **diameter** of a tree is **the number of edges** in the longest path in that tree. There is an undirected tree of `n` nodes labeled from `0` to `n - 1`. You are given a 2D array `edges` where `edges.length == n - 1` and `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the tree. Return _the **diameter** of the tree_.",
    "examples": [
      {
        "input": "edges = \\[\\[0,1\\],\\[0,2\\]\\]",
        "output": "2",
        "explanation": "The longest path of the tree is the path 1 - 0 - 2."
      },
      {
        "input": "edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[1,4\\],\\[4,5\\]\\]",
        "output": "4",
        "explanation": "The longest path of the tree is the path 3 - 2 - 1 - 4 - 5."
      }
    ],
    "constraints": [
      "`n == edges.length + 1`",
      "`1 <= n <= 104`",
      "`0 <= ai, bi < n`",
      "`ai != bi`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1246",
    "slug": "palindrome-removal",
    "title": "Palindrome Removal",
    "difficulty": "Hard",
    "description": "You are given an integer array `arr`. In one move, you can select a **palindromic** subarray `arr[i], arr[i + 1], ..., arr[j]` where `i <= j`, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal. Return _the minimum number of moves needed to remove all numbers from the array_.",
    "examples": [
      {
        "input": "arr = \\[1,2\\]",
        "output": "2"
      },
      {
        "input": "arr = \\[1,3,4,1,5\\]",
        "output": "3",
        "explanation": "Remove \\[4\\] then remove \\[1,3,1\\] then remove \\[5\\]."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 100`",
      "`1 <= arr[i] <= 20`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1247",
    "slug": "minimum-swaps-to-make-strings-equal",
    "title": "Minimum Swaps to Make Strings Equal",
    "difficulty": "Medium",
    "description": "You are given two strings `s1` and `s2` of equal length consisting of letters `\"x \"` and `\"y \"` **only**. Your task is to make these two strings equal to each other. You can swap any two characters that belong to **different** strings, which means: swap `s1[i]` and `s2[j]`. Return the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.",
    "examples": [
      {
        "input": "s1 =  \"xx \", s2 =  \"yy \"",
        "output": "1",
        "explanation": "Swap s1\\[0\\] and s2\\[1\\], s1 =  \"yx \", s2 =  \"yx \"."
      },
      {
        "input": "s1 =  \"xy \", s2 =  \"yx \"",
        "output": "2",
        "explanation": "Swap s1\\[0\\] and s2\\[0\\], s1 =  \"yy \", s2 =  \"xx \"."
      },
      {
        "input": "s1 =  \"xx \", s2 =  \"xy \"",
        "output": "-1"
      }
    ],
    "constraints": [
      "`1 <= s1.length, s2.length <= 1000`",
      "`s1.length == s2.length`",
      "`s1, s2` only contain `'x'` or `'y'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1248",
    "slug": "count-number-of-nice-subarrays",
    "title": "Count Number of Nice Subarrays",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums` and an integer `k`. A continuous subarray is called **nice** if there are `k` odd numbers on it. Return _the number of **nice** sub-arrays_.",
    "examples": [
      {
        "input": "nums = \\[1,1,2,1,1\\], k = 3",
        "output": "2",
        "explanation": "The only sub-arrays with 3 odd numbers are \\[1,1,2,1\\] and \\[1,2,1,1\\]."
      },
      {
        "input": "nums = \\[2,4,6\\], k = 1",
        "output": "0",
        "explanation": "There is no odd numbers in the array."
      },
      {
        "input": "nums = \\[2,2,2,1,2,2,1,2,2,2\\], k = 2",
        "output": "16"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 50000`",
      "`1 <= nums[i] <= 10^5`",
      "`1 <= k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1250",
    "slug": "check-if-it-is-a-good-array",
    "title": "Check If It Is a Good Array",
    "difficulty": "Hard",
    "description": "Given an array `nums` of positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. The array is said to be **good** if you can obtain a sum of `1` from the array by any possible subset and multiplicand. Return `True` if the array is **good** otherwise return `False`.",
    "examples": [
      {
        "input": "nums = \\[12,5,7,23\\]",
        "output": "true",
        "explanation": "Pick numbers 5 and 7."
      },
      {
        "input": "nums = \\[29,6,10\\]",
        "output": "true",
        "explanation": "Pick numbers 29, 6 and 10."
      },
      {
        "input": "nums = \\[3,6\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 10^5`",
      "`1 <= nums[i] <= 10^9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1252",
    "slug": "cells-with-odd-values-in-a-matrix",
    "title": "Cells with Odd Values in a Matrix",
    "difficulty": "Easy",
    "description": "There is an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a **0-indexed location** to perform some increment operations on the matrix. For each location `indices[i]`, do **both** of the following: 1. Increment **all** the cells on row `ri`. 2. Increment **all** the cells on column `ci`. Given `m`, `n`, and `indices`, return _the **number of odd-valued cells** in the matrix after applying the increment to all locations in_ `indices`.",
    "examples": [
      {
        "input": "m = 2, n = 3, indices = \\[\\[0,1\\],\\[1,1\\]\\]",
        "output": "6",
        "explanation": "Initial matrix = \\[\\[0,0,0\\],\\[0,0,0\\]\\]."
      },
      {
        "input": "m = 2, n = 2, indices = \\[\\[1,1\\],\\[0,0\\]\\]",
        "output": "0",
        "explanation": "Final matrix = \\[\\[2,2\\],\\[2,2\\]\\]. There are no odd numbers in the final matrix."
      }
    ],
    "constraints": [
      "`1 <= m, n <= 50`",
      "`1 <= indices.length <= 100`",
      "`0 <= ri < m`",
      "`0 <= ci < n`",
      "Follow up: Could you solve this in `O(n + m + indices.length)` time with only `O(n + m)` extra space?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1253",
    "slug": "reconstruct-a-2-row-binary-matrix",
    "title": "Reconstruct a 2-Row Binary Matrix",
    "difficulty": "Medium",
    "description": "Given the following details of a matrix with `n` columns and `2` rows : *  The matrix is a binary matrix, which means each element in the matrix can be `0` or `1`. *  The sum of elements of the 0-th(upper) row is given as `upper`. *  The sum of elements of the 1-st(lower) row is given as `lower`. *  The sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`. Your task is to reconstruct the matrix with `upper`, `lower` and `colsum`. Return it as a 2-D integer array. If there are more than one valid solution, any of them will be accepted. If no valid solution exists, return an empty 2-D array.",
    "examples": [
      {
        "input": "upper = 2, lower = 1, colsum = \\[1,1,1\\]",
        "output": "\\[\\[1,1,0\\],\\[0,0,1\\]\\]",
        "explanation": "\\[\\[1,0,1\\],\\[0,1,0\\]\\], and \\[\\[0,1,1\\],\\[1,0,0\\]\\] are also correct answers."
      },
      {
        "input": "upper = 2, lower = 3, colsum = \\[2,2,1,1\\]",
        "output": "\\[\\]"
      },
      {
        "input": "upper = 5, lower = 5, colsum = \\[2,1,2,0,1,0,1,2,0,1\\]",
        "output": "\\[\\[1,1,1,0,1,0,0,1,0,0\\],\\[1,0,1,0,0,0,1,1,0,1\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= colsum.length <= 10^5`",
      "`0 <= upper, lower <= colsum.length`",
      "`0 <= colsum[i] <= 2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1254",
    "slug": "number-of-closed-islands",
    "title": "Number of Closed Islands",
    "difficulty": "Medium",
    "description": "Given a 2D `grid` consists of `0s` (land) and `1s` (water). An _island_ is a maximal 4-directionally connected group of `0s` and a _closed island_ is an island **totally** (all left, top, right, bottom) surrounded by `1s.` Return the number of _closed islands_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,1,1,1,1,1,0\\],\\[1,0,0,0,0,1,1,0\\],\\[1,0,1,0,1,1,1,0\\],\\[1,0,0,0,0,1,0,1\\],\\[1,1,1,1,1,1,1,0\\]\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "grid = \\[\\[0,0,1,0,0\\],\\[0,1,0,1,0\\],\\[0,1,1,1,0\\]\\]",
        "output": "1"
      },
      {
        "input": "grid = \\[\\[1,1,1,1,1,1,1\\],",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= grid.length, grid[0].length <= 100`",
      "`0 <= grid[i][j] <=1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1255",
    "slug": "maximum-score-words-formed-by-letters",
    "title": "Maximum Score Words Formed by Letters",
    "difficulty": "Hard",
    "description": "Given a list of `words`, list of single `letters` (might be repeating) and `score` of every character. Return the maximum score of **any** valid set of words formed by using the given letters (`words[i]` cannot be used two or more times). It is not necessary to use all characters in `letters` and each letter can only be used once. Score of letters `'a'`, `'b'`, `'c'`, ... ,`'z'` is given by `score[0]`, `score[1]`, ... , `score[25]` respectively.",
    "examples": [
      {
        "input": "words = \\[ \"dog \", \"cat \", \"dad \", \"good \"\\], letters = \\[ \"a \", \"a \", \"c \", \"d \", \"d \", \"d \", \"g \", \"o \", \"o \"\\], score = \\[1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0\\]",
        "output": "23",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"xxxz \", \"ax \", \"bx \", \"cx \"\\], letters = \\[ \"z \", \"a \", \"b \", \"c \", \"x \", \"x \", \"x \"\\], score = \\[4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10\\]",
        "output": "27",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"leetcode \"\\], letters = \\[ \"l \", \"e \", \"t \", \"c \", \"o \", \"d \"\\], score = \\[0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 14`",
      "`1 <= words[i].length <= 15`",
      "`1 <= letters.length <= 100`",
      "`letters[i].length == 1`",
      "`score.length == 26`",
      "`0 <= score[i] <= 10`",
      "`words[i]`, `letters[i]` contains only lower case English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1256",
    "slug": "encode-number",
    "title": "Encode Number",
    "difficulty": "Medium",
    "description": "Given a non-negative integer `num`, Return its _encoding_ string. The encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:",
    "examples": [
      {
        "input": "num = 23",
        "output": "\"1000 \""
      },
      {
        "input": "num = 107",
        "output": "\"101100 \""
      }
    ],
    "constraints": [
      "`0 <= num <= 10^9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1257",
    "slug": "smallest-common-region",
    "title": "Smallest Common Region",
    "difficulty": "Medium",
    "description": "You are given some lists of `regions` where the first region of each list includes all other regions in that list. Naturally, if a region `x` contains another region `y` then `x` is bigger than `y`. Also, by definition, a region `x` contains itself. Given two regions: `region1` and `region2`, return _the smallest region that contains both of them_. If you are given regions `r1`, `r2`, and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`. It is guaranteed the smallest region exists.",
    "examples": [
      {
        "input": "",
        "output": "\"North America \""
      },
      {
        "input": "regions = \\[\\[ \"Earth \",  \"North America \",  \"South America \"\\],\\[ \"North America \",  \"United States \",  \"Canada \"\\],\\[ \"United States \",  \"New York \",  \"Boston \"\\],\\[ \"Canada \",  \"Ontario \",  \"Quebec \"\\],\\[ \"South America \",  \"Brazil \"\\]\\], region1 =  \"Canada \", region2 =  \"South America \"",
        "output": "\"Earth \""
      }
    ],
    "constraints": [
      "`2 <= regions.length <= 104`",
      "`2 <= regions[i].length <= 20`",
      "`1 <= regions[i][j].length, region1.length, region2.length <= 20`",
      "`region1 != region2`",
      "`regions[i][j]`, `region1`, and `region2` consist of English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1258",
    "slug": "synonymous-sentences",
    "title": "Synonymous Sentences",
    "difficulty": "Medium",
    "description": "You are given a list of equivalent string pairs `synonyms` where `synonyms[i] = [si, ti]` indicates that `si` and `ti` are equivalent strings. You are also given a sentence `text`. Return _all possible synonymous sentences **sorted lexicographically**_.",
    "examples": [
      {
        "input": "synonyms = \\[\\[ \"happy \", \"joy \"\\],\\[ \"sad \", \"sorrow \"\\],\\[ \"joy \", \"cheerful \"\\]\\], text =  \"I am happy today but was sad yesterday \"",
        "output": "\\[ \"I am cheerful today but was sad yesterday \", \"I am cheerful today but was sorrow yesterday \", \"I am happy today but was sad yesterday \", \"I am happy today but was sorrow yesterday \", \"I am joy today but was sad yesterday \", \"I am joy today but was sorrow yesterday \"\\]"
      },
      {
        "input": "synonyms = \\[\\[ \"happy \", \"joy \"\\],\\[ \"cheerful \", \"glad \"\\]\\], text =  \"I am happy today but was sad yesterday \"",
        "output": "\\[ \"I am happy today but was sad yesterday \", \"I am joy today but was sad yesterday \"\\]"
      }
    ],
    "constraints": [
      "`0 <= synonyms.length <= 10`",
      "`synonyms[i].length == 2`",
      "`1 <= si.length, ti.length <= 10`",
      "`si != ti`",
      "`text` consists of at most `10` words.",
      "All the pairs of `synonyms` are unique.",
      "The words of `text` are separated by single spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1259",
    "slug": "handshakes-that-dont-cross",
    "title": "Handshakes That Don't Cross",
    "difficulty": "Hard",
    "description": "You are given an **even** number of people `numPeople` that stand around a circle and each person shakes hands with someone else so that there are `numPeople / 2` handshakes total. Return _the number of ways these handshakes could occur such that none of the handshakes cross_. Since the answer could be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "numPeople = 4",
        "output": "2",
        "explanation": "There are two ways to do it, the first way is \\[(1,2),(3,4)\\] and the second one is \\[(2,3),(4,1)\\]."
      },
      {
        "input": "numPeople = 6",
        "output": "5"
      }
    ],
    "constraints": [
      "`2 <= numPeople <= 1000`",
      "`numPeople` is even."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1260",
    "slug": "shift-2d-grid",
    "title": "Shift 2D Grid",
    "difficulty": "Easy",
    "description": "Given a 2D `grid` of size `m x n` and an integer `k`. You need to shift the `grid` `k` times. In one shift operation: *  Element at `grid[i][j]` moves to `grid[i][j + 1]`. *  Element at `grid[i][n - 1]` moves to `grid[i + 1][0]`. *  Element at `grid[m - 1][n - 1]` moves to `grid[0][0]`. Return the _2D grid_ after applying shift operation `k` times.",
    "examples": [
      {
        "input": "`grid` = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 1",
        "output": "\\[\\[9,1,2\\],\\[3,4,5\\],\\[6,7,8\\]\\]"
      },
      {
        "input": "`grid` = \\[\\[3,8,1,9\\],\\[19,7,2,5\\],\\[4,6,11,10\\],\\[12,0,21,13\\]\\], k = 4",
        "output": "\\[\\[12,0,21,13\\],\\[3,8,1,9\\],\\[19,7,2,5\\],\\[4,6,11,10\\]\\]"
      },
      {
        "input": "`grid` = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 9",
        "output": "\\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m <= 50`",
      "`1 <= n <= 50`",
      "`-1000 <= grid[i][j] <= 1000`",
      "`0 <= k <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1261",
    "slug": "find-elements-in-a-contaminated-binary-tree",
    "title": "Find Elements in a Contaminated Binary Tree",
    "difficulty": "Medium",
    "description": "Given a binary tree with the following rules: 1. `root.val == 0` 2. If `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1` 3. If `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2` Now the binary tree is contaminated, which means all `treeNode.val` have been changed to `-1`. Implement the `FindElements` class: *  `FindElements(TreeNode* root)` Initializes the object with a contaminated binary tree and recovers it. *  `bool find(int target)` Returns `true` if the `target` value exists in the recovered binary tree.",
    "examples": [],
    "constraints": [
      "`TreeNode.val == -1`",
      "The height of the binary tree is less than or equal to `20`",
      "The total number of nodes is between `[1, 104]`",
      "Total calls of `find()` is between `[1, 104]`",
      "`0 <= target <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1262",
    "slug": "greatest-sum-divisible-by-three",
    "title": "Greatest Sum Divisible by Three",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _the **maximum possible sum** of elements of the array such that it is divisible by three_.",
    "examples": [
      {
        "input": "nums = \\[3,6,5,1,8\\]",
        "output": "18",
        "explanation": "Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3)."
      },
      {
        "input": "nums = \\[4\\]",
        "output": "0",
        "explanation": "Since 4 is not divisible by 3, do not pick any number."
      },
      {
        "input": "nums = \\[1,2,3,4,4\\]",
        "output": "12",
        "explanation": "Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3)."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 4  104`",
      "`1 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1263",
    "slug": "minimum-moves-to-move-a-box-to-their-target-location",
    "title": "Minimum Moves to Move a Box to Their Target Location",
    "difficulty": "Hard",
    "description": "A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations. The game is represented by an `m x n` grid of characters `grid` where each element is a wall, floor, or box. Your task is to move the box `'B'` to the target position `'T'` under the following rules: *  The character `'S'` represents the player. The player can move up, down, left, right in `grid` if it is a floor (empty cell). *  The character `'.'` represents the floor which means a free cell to walk. *  The character `'#'` represents the wall which means an obstacle (impossible to walk there). *  There is only one box `'B'` and one target cell `'T'` in the `grid`. *  The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a **push**. *  The player cannot walk through the box. Return _the minimum number of **pushes** to move the box to the target_. If there is no way to reach the target, return `-1`.",
    "examples": [
      {
        "input": "grid = \\[\\[ \"# \", \"# \", \"# \", \"# \", \"# \", \"# \"\\],",
        "output": "3",
        "explanation": "We return only the number of times the box is pushed."
      },
      {
        "input": "grid = \\[\\[ \"# \", \"# \", \"# \", \"# \", \"# \", \"# \"\\],",
        "output": "-1"
      },
      {
        "input": "grid = \\[\\[ \"# \", \"# \", \"# \", \"# \", \"# \", \"# \"\\],",
        "output": "5",
        "explanation": "push the box down, left, left, up and up."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 20`",
      "`grid` contains only characters `'.'`, `'#'`, `'S'`, `'T'`, or `'B'`.",
      "There is only one character `'S'`, `'B'`, and `'T'` in the `grid`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1265",
    "slug": "print-immutable-linked-list-in-reverse",
    "title": "Print Immutable Linked List in Reverse",
    "difficulty": "Medium",
    "description": "You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface: *  `ImmutableListNode`: An interface of immutable linked list, you are given the head of the list. You need to use the following functions to access the linked list (you **can't** access the `ImmutableListNode` directly): *  `ImmutableListNode.printValue()`: Print value of the current node. *  `ImmutableListNode.getNext()`: Return the next node. The input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4\\]",
        "output": "\\[4,3,2,1\\]"
      },
      {
        "input": "head = \\[0,-4,-1,3,-5\\]",
        "output": "\\[-5,3,-1,-4,0\\]"
      },
      {
        "input": "head = \\[-2,0,6,4,4,-6\\]",
        "output": "\\[-6,4,4,6,0,-2\\]"
      }
    ],
    "constraints": [
      "The length of the linked list is between `[1, 1000]`.",
      "The value of each node in the linked list is between `[-1000, 1000]`.",
      "Follow up:",
      "Constant space complexity?",
      "Linear time complexity and less than linear space complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1266",
    "slug": "minimum-time-visiting-all-points",
    "title": "Minimum Time Visiting All Points",
    "difficulty": "Easy",
    "description": "On a 2D plane, there are `n` points with integer coordinates `points[i] = [xi, yi]`. Return _the **minimum time** in seconds to visit all the points in the order given by_ `points`. You can move according to these rules: *  In `1` second, you can either: *  move vertically by one unit, *  move horizontally by one unit, or *  move diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second). *  You have to visit the points in the same order as they appear in the array. *  You are allowed to pass through points that appear later in the order, but these do not count as visits.",
    "examples": [
      {
        "input": "points = \\[\\[1,1\\],\\[3,4\\],\\[-1,0\\]\\]",
        "output": "7",
        "explanation": "One optimal path is **\\[1,1\\]** -> \\[2,2\\] -> \\[3,3\\] -> **\\[3,4\\]** \\-> \\[2,3\\] -> \\[1,2\\] -> \\[0,1\\] -> **\\[-1,0\\]**"
      },
      {
        "input": "points = \\[\\[3,2\\],\\[-2,2\\]\\]",
        "output": "5"
      }
    ],
    "constraints": [
      "`points.length == n`",
      "`1 <= n <= 100`",
      "`points[i].length == 2`",
      "`-1000 <= points[i][0], points[i][1] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1267",
    "slug": "count-servers-that-communicate",
    "title": "Count Servers that Communicate",
    "difficulty": "Medium",
    "description": "You are given a map of a server center, represented as a `m * n` integer matrix `grid`, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column. Return the number of servers that communicate with any other server.",
    "examples": [
      {
        "input": "grid = \\[\\[1,0\\],\\[0,1\\]\\]",
        "output": "0",
        "explanation": "No servers can communicate with others."
      },
      {
        "input": "grid = \\[\\[1,0\\],\\[1,1\\]\\]",
        "output": "3",
        "explanation": "All three servers can communicate with at least one other server."
      },
      {
        "input": "grid = \\[\\[1,1,0,0\\],\\[0,0,1,0\\],\\[0,0,1,0\\],\\[0,0,0,1\\]\\]",
        "output": "4",
        "explanation": "The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m <= 250`",
      "`1 <= n <= 250`",
      "`grid[i][j] == 0 or 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1268",
    "slug": "search-suggestions-system",
    "title": "Search Suggestions System",
    "difficulty": "Medium",
    "description": "You are given an array of strings `products` and a string `searchWord`. Design a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have common prefix with `searchWord`. If there are more than three products with a common prefix return the three lexicographically minimums products. Return _a list of lists of the suggested products after each character of_ `searchWord` _is typed_.",
    "examples": [
      {
        "input": "products = \\[ \"mobile \", \"mouse \", \"moneypot \", \"monitor \", \"mousepad \"\\], searchWord =  \"mouse \"",
        "output": "\\[\\[ \"mobile \", \"moneypot \", \"monitor \"\\],\\[ \"mobile \", \"moneypot \", \"monitor \"\\],\\[ \"mouse \", \"mousepad \"\\],\\[ \"mouse \", \"mousepad \"\\],\\[ \"mouse \", \"mousepad \"\\]\\]",
        "explanation": "products sorted lexicographically = \\[ \"mobile \", \"moneypot \", \"monitor \", \"mouse \", \"mousepad \"\\]."
      },
      {
        "input": "products = \\[ \"havana \"\\], searchWord =  \"havana \"",
        "output": "\\[\\[ \"havana \"\\],\\[ \"havana \"\\],\\[ \"havana \"\\],\\[ \"havana \"\\],\\[ \"havana \"\\],\\[ \"havana \"\\]\\]",
        "explanation": "The only word  \"havana \" will be always suggested while typing the search word."
      }
    ],
    "constraints": [
      "`1 <= products.length <= 1000`",
      "`1 <= products[i].length <= 3000`",
      "`1 <= sum(products[i].length) <= 2  104`",
      "All the strings of `products` are unique.",
      "`products[i]` consists of lowercase English letters.",
      "`1 <= searchWord.length <= 1000`",
      "`searchWord` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1269",
    "slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
    "title": "Number of Ways to Stay in the Same Place After Some Steps",
    "difficulty": "Hard",
    "description": "You have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time). Given two integers `steps` and `arrLen`, return the number of ways such that your pointer is still at index `0` after **exactly** `steps` steps. Since the answer may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "steps = 3, arrLen = 2",
        "output": "4",
        "explanation": "There are 4 differents ways to stay at index 0 after 3 steps."
      },
      {
        "input": "steps = 2, arrLen = 4",
        "output": "2",
        "explanation": "There are 2 differents ways to stay at index 0 after 2 steps"
      },
      {
        "input": "steps = 4, arrLen = 2",
        "output": "8"
      }
    ],
    "constraints": [
      "`1 <= steps <= 500`",
      "`1 <= arrLen <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1271",
    "slug": "hexspeak",
    "title": "Hexspeak",
    "difficulty": "Easy",
    "description": "A decimal number can be converted to its **Hexspeak representation** by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit `'0'` with the letter `'O'`, and the digit `'1'` with the letter `'I'`. Such a representation is valid if and only if it consists only of the letters in the set `{'A', 'B', 'C', 'D', 'E', 'F', 'I', 'O'}`. Given a string `num` representing a decimal integer `n`, _return the **Hexspeak representation** of_ `n` _if it is valid, otherwise return_ `\"ERROR \"`.",
    "examples": [
      {
        "input": "num =  \"257 \"",
        "output": "\"IOI \"",
        "explanation": "257 is 101 in hexadecimal."
      },
      {
        "input": "num =  \"3 \"",
        "output": "\"ERROR \""
      }
    ],
    "constraints": [
      "`1 <= num.length <= 12`",
      "`num` does not contain leading zeros.",
      "num represents an integer in the range `[1, 1012]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1272",
    "slug": "remove-interval",
    "title": "Remove Interval",
    "difficulty": "Medium",
    "description": "A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form `[a, b)`. A real number `x` is in the set if one of its intervals `[a, b)` contains `x` (i.e. `a <= x < b`). You are given a **sorted** list of disjoint intervals `intervals` representing a set of real numbers as described above, where `intervals[i] = [ai, bi]` represents the interval `[ai, bi)`. You are also given another interval `toBeRemoved`. Return _the set of real numbers with the interval_ `toBeRemoved` _**removed** from_ `intervals`_. In other words, return the set of real numbers such that every_ `x` _in the set is in_ `intervals` _but **not** in_ `toBeRemoved`_. Your answer should be a **sorted** list of disjoint intervals as described above._",
    "examples": [
      {
        "input": "intervals = \\[\\[0,2\\],\\[3,4\\],\\[5,7\\]\\], toBeRemoved = \\[1,6\\]",
        "output": "\\[\\[0,1\\],\\[6,7\\]\\]"
      },
      {
        "input": "intervals = \\[\\[0,5\\]\\], toBeRemoved = \\[2,3\\]",
        "output": "\\[\\[0,2\\],\\[3,5\\]\\]"
      },
      {
        "input": "intervals = \\[\\[-5,-4\\],\\[-3,-2\\],\\[1,2\\],\\[3,5\\],\\[8,9\\]\\], toBeRemoved = \\[-1,4\\]",
        "output": "\\[\\[-5,-4\\],\\[-3,-2\\],\\[4,5\\],\\[8,9\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= intervals.length <= 104`",
      "`-109 <= ai < bi <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1273",
    "slug": "delete-tree-nodes",
    "title": "Delete Tree Nodes",
    "difficulty": "Medium",
    "description": "A tree rooted at node 0 is given as follows: *  The number of nodes is `nodes`; *  The value of the `ith` node is `value[i]`; *  The parent of the `ith` node is `parent[i]`. Remove every subtree whose sum of values of nodes is zero. Return _the number of the remaining nodes in the tree_.",
    "examples": [
      {
        "input": "nodes = 7, parent = \\[-1,0,0,1,2,2,2\\], value = \\[1,-2,4,0,-2,-1,-1\\]",
        "output": "2"
      },
      {
        "input": "nodes = 7, parent = \\[-1,0,0,1,2,2,2\\], value = \\[1,-2,4,0,-2,-1,-2\\]",
        "output": "6"
      }
    ],
    "constraints": [
      "`1 <= nodes <= 104`",
      "`parent.length == nodes`",
      "`0 <= parent[i] <= nodes - 1`",
      "`parent[0] == -1` which indicates that `0` is the root.",
      "`value.length == nodes`",
      "`-105 <= value[i] <= 105`",
      "The given input is guaranteed to represent a valid tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1274",
    "slug": "number-of-ships-in-a-rectangle",
    "title": "Number of Ships in a Rectangle",
    "difficulty": "Hard",
    "description": "_(This problem is an **interactive problem**.)_ Each ship is located at an integer point on the sea represented by a cartesian plane, and each integer point may contain at most 1 ship. You have a function `Sea.hasShips(topRight, bottomLeft)` which takes two points as arguments and returns `true` If there is at least one ship in the rectangle represented by the two points, including on the boundary. Given two points: the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle. It is guaranteed that there are **at most 10 ships** in that rectangle. Submissions making **more than 400 calls** to `hasShips` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification.",
    "examples": [
      {
        "input": "",
        "output": "3",
        "explanation": "From \\[0,0\\] to \\[4,4\\] we can count 3 ships within the range."
      },
      {
        "input": "ans = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\], topRight = \\[1000,1000\\], bottomLeft = \\[0,0\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "On the input `ships` is only given to initialize the map internally. You must solve this problem \"blindfolded \". In other words, you must find the answer using the given `hasShips` API, without knowing the `ships` position.",
      "`0 <= bottomLeft[0] <= topRight[0] <= 1000`",
      "`0 <= bottomLeft[1] <= topRight[1] <= 1000`",
      "`topRight != bottomLeft`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1275",
    "slug": "find-winner-on-a-tic-tac-toe-game",
    "title": "Find Winner on a Tic Tac Toe Game",
    "difficulty": "Easy",
    "description": "**Tic-tac-toe** is played by two players `A` and `B` on a `3 x 3` grid. The rules of Tic-Tac-Toe are: *  Players take turns placing characters into empty squares `' '`. *  The first player `A` always places `'X'` characters, while the second player `B` always places `'O'` characters. *  `'X'` and `'O'` characters are always placed into empty squares, never on filled ones. *  The game ends when there are **three** of the same (non-empty) character filling any row, column, or diagonal. *  The game also ends if all squares are non-empty. *  No more moves can be played if the game is over. Given a 2D integer array `moves` where `moves[i] = [rowi, coli]` indicates that the `ith` move will be played on `grid[rowi][coli]`. return _the winner of the game if it exists_ (`A` or `B`). In case the game ends in a draw return `\"Draw \"`. If there are still movements to play return `\"Pending \"`. You can assume that `moves` is valid (i.e., it follows the rules of **Tic-Tac-Toe**), the grid is initially empty, and `A` will play first.",
    "examples": [
      {
        "input": "moves = \\[\\[0,0\\],\\[2,0\\],\\[1,1\\],\\[2,1\\],\\[2,2\\]\\]",
        "output": "\"A \"",
        "explanation": "A wins, they always play first."
      },
      {
        "input": "moves = \\[\\[0,0\\],\\[1,1\\],\\[0,1\\],\\[0,2\\],\\[1,0\\],\\[2,0\\]\\]",
        "output": "\"B \"",
        "explanation": "B wins."
      },
      {
        "input": "moves = \\[\\[0,0\\],\\[1,1\\],\\[2,0\\],\\[1,0\\],\\[1,2\\],\\[2,1\\],\\[0,1\\],\\[0,2\\],\\[2,2\\]\\]",
        "output": "\"Draw \"",
        "explanation": "The game ends in a draw since there are no moves to make."
      }
    ],
    "constraints": [
      "`1 <= moves.length <= 9`",
      "`moves[i].length == 2`",
      "`0 <= rowi, coli <= 2`",
      "There are no repeated elements on `moves`.",
      "`moves` follow the rules of tic tac toe."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1276",
    "slug": "number-of-burgers-with-no-waste-of-ingredients",
    "title": "Number of Burgers with No Waste of Ingredients",
    "difficulty": "Medium",
    "description": "Given two integers `tomatoSlices` and `cheeseSlices`. The ingredients of different burgers are as follows: *  **Jumbo Burger:** `4` tomato slices and `1` cheese slice. *  **Small Burger:** `2` Tomato slices and `1` cheese slice. Return `[total_jumbo, total_small]` so that the number of remaining `tomatoSlices` equal to `0` and the number of remaining `cheeseSlices` equal to `0`. If it is not possible to make the remaining `tomatoSlices` and `cheeseSlices` equal to `0` return `[]`.",
    "examples": [
      {
        "input": "tomatoSlices = 16, cheeseSlices = 7",
        "output": "\\[1,6\\]"
      },
      {
        "input": "tomatoSlices = 17, cheeseSlices = 4",
        "output": "\\[\\]"
      },
      {
        "input": "tomatoSlices = 4, cheeseSlices = 17",
        "output": "\\[\\]"
      }
    ],
    "constraints": [
      "`0 <= tomatoSlices, cheeseSlices <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1277",
    "slug": "count-square-submatrices-with-all-ones",
    "title": "Count Square Submatrices with All Ones",
    "difficulty": "Medium",
    "description": "Given a `m * n` matrix of ones and zeros, return how many **square** submatrices have all ones.",
    "examples": [
      {
        "input": "matrix =",
        "output": "15",
        "explanation": ""
      },
      {
        "input": "matrix =",
        "output": "7",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 300`",
      "`1 <= arr[0].length <= 300`",
      "`0 <= arr[i][j] <= 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1278",
    "slug": "palindrome-partitioning-iii",
    "title": "Palindrome Partitioning III",
    "difficulty": "Hard",
    "description": "You are given a string `s` containing lowercase letters and an integer `k`. You need to : *  First, change some characters of `s` to other lowercase English letters. *  Then divide `s` into `k` non-empty disjoint substrings such that each substring is a palindrome. Return _the minimal number of characters that you need to change to divide the string_.",
    "examples": [
      {
        "input": "s =  \"abc \", k = 2",
        "output": "1",
        "explanation": "You can split the string into  \"ab \" and  \"c \", and change 1 character in  \"ab \" to make it palindrome."
      },
      {
        "input": "s =  \"aabbc \", k = 3",
        "output": "0",
        "explanation": "You can split the string into  \"aa \",  \"bb \" and  \"c \", all of them are palindrome."
      },
      {
        "input": "s =  \"leetcode \", k = 8",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= k <= s.length <= 100`.",
      "`s` only contains lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1281",
    "slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
    "title": "Subtract the Product and Sum of Digits of an Integer",
    "difficulty": "Easy",
    "description": "Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.",
    "examples": [
      {
        "input": "n = 234",
        "output": "15",
        "explanation": ""
      },
      {
        "input": "n = 4421",
        "output": "21",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 10^5`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1282",
    "slug": "group-the-people-given-the-group-size-they-belong-to",
    "title": "Group the People Given the Group Size They Belong To",
    "difficulty": "Medium",
    "description": "There are `n` people that are split into some unknown number of groups. Each person is labeled with a **unique ID** from `0` to `n - 1`. You are given an integer array `groupSizes`, where `groupSizes[i]` is the size of the group that person `i` is in. For example, if `groupSizes[1] = 3`, then person `1` must be in a group of size `3`. Return _a list of groups such that each person `i` is in a group of size `groupSizes[i]`_. Each person should appear in **exactly one group**, and every person must be in a group. If there are multiple answers, **return any of them**. It is **guaranteed** that there will be **at least one** valid solution for the given input.",
    "examples": [
      {
        "input": "groupSizes = \\[3,3,3,3,3,1,3\\]",
        "output": "\\[\\[5\\],\\[0,1,2\\],\\[3,4,6\\]\\]",
        "explanation": ""
      },
      {
        "input": "groupSizes = \\[2,1,3,3,3,2\\]",
        "output": "\\[\\[1\\],\\[0,5\\],\\[2,3,4\\]\\]"
      }
    ],
    "constraints": [
      "`groupSizes.length == n`",
      "`1 <= n <= 500`",
      "`1 <= groupSizes[i] <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1283",
    "slug": "find-the-smallest-divisor-given-a-threshold",
    "title": "Find the Smallest Divisor Given a Threshold",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the **smallest** `divisor` such that the result mentioned above is less than or equal to `threshold`. Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`). The test cases are generated so that there will be an answer.",
    "examples": [
      {
        "input": "nums = \\[1,2,5,9\\], threshold = 6",
        "output": "5",
        "explanation": "We can get a sum to 17 (1+2+5+9) if the divisor is 1."
      },
      {
        "input": "nums = \\[44,22,33,11,1\\], threshold = 5",
        "output": "44"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  104`",
      "`1 <= nums[i] <= 106`",
      "`nums.length <= threshold <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1284",
    "slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
    "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
    "difficulty": "Hard",
    "description": "Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing `1` to `0` and `0` to `1`). A pair of cells are called neighbors if they share one edge. Return the _minimum number of steps_ required to convert `mat` to a zero matrix or `-1` if you cannot. A **binary matrix** is a matrix with all cells equal to `0` or `1` only. A **zero matrix** is a matrix with all cells equal to `0`.",
    "examples": [
      {
        "input": "mat = \\[\\[0,0\\],\\[0,1\\]\\]",
        "output": "3",
        "explanation": "One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown."
      },
      {
        "input": "mat = \\[\\[0\\]\\]",
        "output": "0",
        "explanation": "Given matrix is a zero matrix. We do not need to change it."
      },
      {
        "input": "mat = \\[\\[1,0,0\\],\\[1,0,0\\]\\]",
        "output": "-1",
        "explanation": "Given matrix cannot be a zero matrix."
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 3`",
      "`mat[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1286",
    "slug": "iterator-for-combination",
    "title": "Iterator for Combination",
    "difficulty": "Medium",
    "description": "Design the `CombinationIterator` class: *  `CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of **sorted distinct** lowercase English letters and a number `combinationLength` as arguments. *  `next()` Returns the next combination of length `combinationLength` in **lexicographical order**. *  `hasNext()` Returns `true` if and only if there exists a next combination.",
    "examples": [],
    "constraints": [
      "`1 <= combinationLength <= characters.length <= 15`",
      "All the characters of `characters` are unique.",
      "At most `104` calls will be made to `next` and `hasNext`.",
      "It is guaranteed that all calls of the function `next` are valid."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1287",
    "slug": "element-appearing-more-than-25-in-sorted-array",
    "title": "Element Appearing More Than 25% In Sorted Array",
    "difficulty": "Easy",
    "description": "Given an integer array **sorted** in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.",
    "examples": [
      {
        "input": "arr = \\[1,2,2,6,6,6,6,7,10\\]",
        "output": "6"
      },
      {
        "input": "arr = \\[1,1\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 104`",
      "`0 <= arr[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1288",
    "slug": "remove-covered-intervals",
    "title": "Remove Covered Intervals",
    "difficulty": "Medium",
    "description": "Given an array `intervals` where `intervals[i] = [li, ri]` represent the interval `[li, ri)`, remove all intervals that are covered by another interval in the list. The interval `[a, b)` is covered by the interval `[c, d)` if and only if `c <= a` and `b <= d`. Return _the number of remaining intervals_.",
    "examples": [
      {
        "input": "intervals = \\[\\[1,4\\],\\[3,6\\],\\[2,8\\]\\]",
        "output": "2",
        "explanation": "Interval \\[3,6\\] is covered by \\[2,8\\], therefore it is removed."
      },
      {
        "input": "intervals = \\[\\[1,4\\],\\[2,3\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= intervals.length <= 1000`",
      "`intervals[i].length == 2`",
      "`0 <= li < ri <= 105`",
      "All the given intervals are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1289",
    "slug": "minimum-falling-path-sum-ii",
    "title": "Minimum Falling Path Sum II",
    "difficulty": "Hard",
    "description": "Given an `n x n` integer matrix `grid`, return _the minimum sum of a **falling path with non-zero shifts**_. A **falling path with non-zero shifts** is a choice of exactly one element from each row of `grid` such that no two elements chosen in adjacent rows are in the same column.",
    "examples": [
      {
        "input": "arr = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]",
        "output": "13",
        "explanation": ""
      },
      {
        "input": "grid = \\[\\[7\\]\\]",
        "output": "7"
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`1 <= n <= 200`",
      "`-99 <= grid[i][j] <= 99`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1290",
    "slug": "convert-binary-number-in-a-linked-list-to-integer",
    "title": "Convert Binary Number in a Linked List to Integer",
    "difficulty": "Easy",
    "description": "Given `head` which is a reference node to a singly-linked list. The value of each node in the linked list is either `0` or `1`. The linked list holds the binary representation of a number. Return the _decimal value_ of the number in the linked list. The **most significant bit** is at the head of the linked list.",
    "examples": [
      {
        "input": "head = \\[1,0,1\\]",
        "output": "5",
        "explanation": "(101) in base 2 = (5) in base 10"
      },
      {
        "input": "head = \\[0\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "The Linked List is not empty.",
      "Number of nodes will not exceed `30`.",
      "Each node's value is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1291",
    "slug": "sequential-digits",
    "title": "Sequential Digits",
    "difficulty": "Medium",
    "description": "An integer has _sequential digits_ if and only if each digit in the number is one more than the previous digit. Return a **sorted** list of all the integers in the range `[low, high]` inclusive that have sequential digits.",
    "examples": [
      {
        "input": "low = 100, high = 300",
        "output": "\\[123,234\\]"
      },
      {
        "input": "low = 1000, high = 13000",
        "output": "\\[1234,2345,3456,4567,5678,6789,12345\\]"
      }
    ],
    "constraints": [
      "`10 <= low <= high <= 10^9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1292",
    "slug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
    "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "difficulty": "Medium",
    "description": "Given a `m x n` matrix `mat` and an integer `threshold`, return _the maximum side-length of a square with a sum less than or equal to_ `threshold` _or return_ `0` _if there is no such square_.",
    "examples": [
      {
        "input": "mat = \\[\\[1,1,3,2,4,3,2\\],\\[1,1,3,2,4,3,2\\],\\[1,1,3,2,4,3,2\\]\\], threshold = 4",
        "output": "2",
        "explanation": "The maximum side length of square with sum less than 4 is 2 as shown."
      },
      {
        "input": "mat = \\[\\[2,2,2,2,2\\],\\[2,2,2,2,2\\],\\[2,2,2,2,2\\],\\[2,2,2,2,2\\],\\[2,2,2,2,2\\]\\], threshold = 1",
        "output": "0"
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 300`",
      "`0 <= mat[i][j] <= 104`",
      "`0 <= threshold <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1293",
    "slug": "shortest-path-in-a-grid-with-obstacles-elimination",
    "title": "Shortest Path in a Grid with Obstacles Elimination",
    "difficulty": "Hard",
    "description": "You are given an `m x n` integer matrix `grid` where each cell is either `0` (empty) or `1` (obstacle). You can move up, down, left, or right from and to an empty cell in **one step**. Return _the minimum number of **steps** to walk from the upper left corner_ `(0, 0)` _to the lower right corner_ `(m - 1, n - 1)` _given that you can eliminate **at most**_ `k` _obstacles_. If it is not possible to find such walk return `-1`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,0,0\\],\\[1,1,0\\],\\[0,0,0\\],\\[0,1,1\\],\\[0,0,0\\]\\], k = 1",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "grid = \\[\\[0,1,1\\],\\[1,1,1\\],\\[1,0,0\\]\\], k = 1",
        "output": "-1",
        "explanation": "We need to eliminate at least two obstacles to find such a walk."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 40`",
      "`1 <= k <= m  n`",
      "`grid[i][j]` is either `0` or `1`.",
      "`grid[0][0] == grid[m - 1][n - 1] == 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1295",
    "slug": "find-numbers-with-even-number-of-digits",
    "title": "Find Numbers with Even Number of Digits",
    "difficulty": "Easy",
    "description": "Given an array `nums` of integers, return how many of them contain an **even number** of digits.",
    "examples": [
      {
        "input": "nums = \\[12,345,2,6,7896\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[555,901,482,1771\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 500`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1296",
    "slug": "divide-array-in-sets-of-k-consecutive-numbers",
    "title": "Divide Array in Sets of K Consecutive Numbers",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums` and a positive integer `k`, check whether it is possible to divide this array into sets of `k` consecutive numbers. Return `true` _if it is possible_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,3,4,4,5,6\\], k = 4",
        "output": "true",
        "explanation": "Array can be divided into \\[1,2,3,4\\] and \\[3,4,5,6\\]."
      },
      {
        "input": "nums = \\[3,2,1,2,3,4,3,4,5,9,10,11\\], k = 3",
        "output": "true",
        "explanation": "Array can be divided into \\[1,2,3\\] , \\[2,3,4\\] , \\[3,4,5\\] and \\[9,10,11\\]."
      },
      {
        "input": "nums = \\[1,2,3,4\\], k = 3",
        "output": "false",
        "explanation": "Each array should be divided in subarrays of size 3."
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": "This question is the same as 846: [https://leetcode.com/problems/hand-of-straights/](https://leetcode.com/problems/hand-of-straights/)",
    "follow_up": null
  },
  {
    "id": "1297",
    "slug": "maximum-number-of-occurrences-of-a-substring",
    "title": "Maximum Number of Occurrences of a Substring",
    "difficulty": "Medium",
    "description": "Given a string `s`, return the maximum number of ocurrences of **any** substring under the following rules: *  The number of unique characters in the substring must be less than or equal to `maxLetters`. *  The substring size must be between `minSize` and `maxSize` inclusive.",
    "examples": [
      {
        "input": "s =  \"aababcaab \", maxLetters = 2, minSize = 3, maxSize = 4",
        "output": "2",
        "explanation": "Substring  \"aab \" has 2 ocurrences in the original string."
      },
      {
        "input": "s =  \"aaaa \", maxLetters = 1, minSize = 3, maxSize = 3",
        "output": "2",
        "explanation": "Substring  \"aaa \" occur 2 times in the string. It can overlap."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`1 <= maxLetters <= 26`",
      "`1 <= minSize <= maxSize <= min(26, s.length)`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1298",
    "slug": "maximum-candies-you-can-get-from-boxes",
    "title": "Maximum Candies You Can Get from Boxes",
    "difficulty": "Hard",
    "description": "You have `n` boxes labeled from `0` to `n - 1`. You are given four arrays: `status`, `candies`, `keys`, and `containedBoxes` where: *  `status[i]` is `1` if the `ith` box is open and `0` if the `ith` box is closed, *  `candies[i]` is the number of candies in the `ith` box, *  `keys[i]` is a list of the labels of the boxes you can open after opening the `ith` box. *  `containedBoxes[i]` is a list of the boxes you found inside the `ith` box. You are given an integer array `initialBoxes` that contains the labels of the boxes you initially have. You can take all the candies in **any open box** and you can use the keys in it to open new boxes and you also can use the boxes you find in it. Return _the maximum number of candies you can get following the rules above_.",
    "examples": [
      {
        "input": "status = \\[1,0,1,0\\], candies = \\[7,5,4,100\\], keys = \\[\\[\\],\\[\\],\\[1\\],\\[\\]\\], containedBoxes = \\[\\[1,2\\],\\[3\\],\\[\\],\\[\\]\\], initialBoxes = \\[0\\]",
        "output": "16",
        "explanation": "You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2."
      },
      {
        "input": "status = \\[1,0,0,0,0,0\\], candies = \\[1,1,1,1,1,1\\], keys = \\[\\[1,2,3,4,5\\],\\[\\],\\[\\],\\[\\],\\[\\],\\[\\]\\], containedBoxes = \\[\\[1,2,3,4,5\\],\\[\\],\\[\\],\\[\\],\\[\\],\\[\\]\\], initialBoxes = \\[0\\]",
        "output": "6",
        "explanation": "You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys."
      }
    ],
    "constraints": [
      "`n == status.length == candies.length == keys.length == containedBoxes.length`",
      "`1 <= n <= 1000`",
      "`status[i]` is either `0` or `1`.",
      "`1 <= candies[i] <= 1000`",
      "`0 <= keys[i].length <= n`",
      "`0 <= keys[i][j] < n`",
      "All values of `keys[i]` are unique.",
      "`0 <= containedBoxes[i].length <= n`",
      "`0 <= containedBoxes[i][j] < n`",
      "All values of `containedBoxes[i]` are unique.",
      "Each box is contained in one box at most.",
      "`0 <= initialBoxes.length <= n`",
      "`0 <= initialBoxes[i] < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1299",
    "slug": "replace-elements-with-greatest-element-on-right-side",
    "title": "Replace Elements with Greatest Element on Right Side",
    "difficulty": "Easy",
    "description": "Given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`. After doing so, return the array.",
    "examples": [
      {
        "input": "arr = \\[17,18,5,4,6,1\\]",
        "output": "\\[18,6,6,6,1,-1\\]",
        "explanation": ""
      },
      {
        "input": "arr = \\[400\\]",
        "output": "\\[-1\\]",
        "explanation": "There are no elements to the right of index 0."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 104`",
      "`1 <= arr[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1300",
    "slug": "sum-of-mutated-array-closest-to-target",
    "title": "Sum of Mutated Array Closest to Target",
    "difficulty": "Medium",
    "description": "Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`. In case of a tie, return the minimum such integer. Notice that the answer is not neccesarilly a number from `arr`.",
    "examples": [
      {
        "input": "arr = \\[4,9,3\\], target = 10",
        "output": "3",
        "explanation": "When using 3 arr converts to \\[3, 3, 3\\] which sums 9 and that's the optimal answer."
      },
      {
        "input": "arr = \\[2,3,5\\], target = 10",
        "output": "5"
      },
      {
        "input": "arr = \\[60864,25176,27249,21296,20204\\], target = 56803",
        "output": "11361"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 104`",
      "`1 <= arr[i], target <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1301",
    "slug": "number-of-paths-with-max-score",
    "title": "Number of Paths with Max Score",
    "difficulty": "Hard",
    "description": "You are given a square `board` of characters. You can move on the board starting at the bottom right square marked with the character `'S'`. You need to reach the top left square marked with the character `'E'`. The rest of the squares are labeled either with a numeric character `1, 2, ..., 9` or with an obstacle `'X'`. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there. Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, **taken modulo `10^9 + 7`**. In case there is no path, return `[0, 0]`.",
    "examples": [
      {
        "input": "board = \\[\"E23\",\"2X2\",\"12S\"\\]",
        "output": "\\[7,1\\]"
      },
      {
        "input": "board = \\[\"E12\",\"1X1\",\"21S\"\\]",
        "output": "\\[4,2\\]"
      },
      {
        "input": "board = \\[\"E11\",\"XXX\",\"11S\"\\]",
        "output": "\\[0,0\\]"
      }
    ],
    "constraints": [
      "`2 <= board.length == board[i].length <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1302",
    "slug": "deepest-leaves-sum",
    "title": "Deepest Leaves Sum",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the sum of values of its deepest leaves_.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5,null,6,7,null,null,null,null,8\\]",
        "output": "15"
      },
      {
        "input": "root = \\[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5\\]",
        "output": "19"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`1 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1304",
    "slug": "find-n-unique-integers-sum-up-to-zero",
    "title": "Find N Unique Integers Sum up to Zero",
    "difficulty": "Easy",
    "description": "Given an integer `n`, return **any** array containing `n` **unique** integers such that they add up to `0`.",
    "examples": [
      {
        "input": "n = 5",
        "output": "\\[-7,-1,1,3,4\\]",
        "explanation": "These arrays also are accepted \\[-5,-1,1,2,3\\] , \\[-3,-1,2,-2,4\\]."
      },
      {
        "input": "n = 3",
        "output": "\\[-1,0,1\\]"
      },
      {
        "input": "n = 1",
        "output": "\\[0\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1305",
    "slug": "all-elements-in-two-binary-search-trees",
    "title": "All Elements in Two Binary Search Trees",
    "difficulty": "Medium",
    "description": "Given two binary search trees `root1` and `root2`, return _a list containing all the integers from both trees sorted in **ascending** order_.",
    "examples": [
      {
        "input": "root1 = \\[2,1,4\\], root2 = \\[1,0,3\\]",
        "output": "\\[0,1,1,2,3,4\\]"
      },
      {
        "input": "root1 = \\[1,null,8\\], root2 = \\[8,1\\]",
        "output": "\\[1,1,8,8\\]"
      }
    ],
    "constraints": [
      "The number of nodes in each tree is in the range `[0, 5000]`.",
      "`-105 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1306",
    "slug": "jump-game-iii",
    "title": "Jump Game III",
    "difficulty": "Medium",
    "description": "Given an array of non-negative integers `arr`, you are initially positioned at `start` index of the array. When you are at index `i`, you can jump to `i + arr[i]` or `i - arr[i]`, check if you can reach to **any** index with value 0. Notice that you can not jump outside of the array at any time.",
    "examples": [
      {
        "input": "arr = \\[4,2,3,0,3,1,2\\], start = 5",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "arr = \\[4,2,3,0,3,1,2\\], start = 0",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "arr = \\[3,0,2,1,2\\], start = 2",
        "output": "false",
        "explanation": "There is no way to reach at index 1 with value 0."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 5  104`",
      "`0 <= arr[i] < arr.length`",
      "`0 <= start < arr.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1307",
    "slug": "verbal-arithmetic-puzzle",
    "title": "Verbal Arithmetic Puzzle",
    "difficulty": "Hard",
    "description": "Given an equation, represented by `words` on the left side and the `result` on the right side. You need to check if the equation is solvable under the following rules: *  Each character is decoded as one digit (0 - 9). *  No two characters can map to the same digit. *  Each `words[i]` and `result` are decoded as one number **without** leading zeros. *  Sum of numbers on the left side (`words`) will equal to the number on the right side (`result`). Return `true` _if the equation is solvable, otherwise return_ `false`.",
    "examples": [
      {
        "input": "words = \\[ \"SEND \", \"MORE \"\\], result =  \"MONEY \"",
        "output": "true",
        "explanation": "Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'"
      },
      {
        "input": "words = \\[ \"SIX \", \"SEVEN \", \"SEVEN \"\\], result =  \"TWENTY \"",
        "output": "true",
        "explanation": "Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4"
      },
      {
        "input": "words = \\[ \"LEET \", \"CODE \"\\], result =  \"POINT \"",
        "output": "false",
        "explanation": "There is no possible mapping to satisfy the equation, so we return false."
      }
    ],
    "constraints": [
      "`2 <= words.length <= 5`",
      "`1 <= words[i].length, result.length <= 7`",
      "`words[i], result` contain only uppercase English letters.",
      "The number of different characters used in the expression is at most `10`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1309",
    "slug": "decrypt-string-from-alphabet-to-integer-mapping",
    "title": "Decrypt String from Alphabet to Integer Mapping",
    "difficulty": "Easy",
    "description": "You are given a string `s` formed by digits and `'#'`. We want to map `s` to English lowercase characters as follows: *  Characters (`'a'` to `'i'`) are represented by (`'1'` to `'9'`) respectively. *  Characters (`'j'` to `'z'`) are represented by (`'10#'` to `'26#'`) respectively. Return _the string formed after mapping_. The test cases are generated so that a unique mapping will always exist.",
    "examples": [
      {
        "input": "s =  \"10#11#12 \"",
        "output": "\"jkab \"",
        "explanation": "\"j \" ->  \"10# \" ,  \"k \" ->  \"11# \" ,  \"a \" ->  \"1 \" ,  \"b \" ->  \"2 \"."
      },
      {
        "input": "s =  \"1326# \"",
        "output": "\"acz \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of digits and the `'#'` letter.",
      "`s` will be a valid string such that mapping is always possible."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1310",
    "slug": "xor-queries-of-a-subarray",
    "title": "XOR Queries of a Subarray",
    "difficulty": "Medium",
    "description": "You are given an array `arr` of positive integers. You are also given the array `queries` where `queries[i] = [lefti, righti]`. For each query `i` compute the **XOR** of elements from `lefti` to `righti` (that is, `arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti]` ). Return an array `answer` where `answer[i]` is the answer to the `ith` query.",
    "examples": [
      {
        "input": "arr = \\[1,3,4,8\\], queries = \\[\\[0,1\\],\\[1,2\\],\\[0,3\\],\\[3,3\\]\\]",
        "output": "\\[2,7,14,8\\]",
        "explanation": ""
      },
      {
        "input": "arr = \\[4,8,2,10\\], queries = \\[\\[2,3\\],\\[1,3\\],\\[0,0\\],\\[0,3\\]\\]",
        "output": "\\[8,0,4,4\\]"
      }
    ],
    "constraints": [
      "`1 <= arr.length, queries.length <= 3  104`",
      "`1 <= arr[i] <= 109`",
      "`queries[i].length == 2`",
      "`0 <= lefti <= righti < arr.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1311",
    "slug": "get-watched-videos-by-your-friends",
    "title": "Get Watched Videos by Your Friends",
    "difficulty": "Medium",
    "description": "There are `n` people, each person has a unique _id_ between `0` and `n-1`. Given the arrays `watchedVideos` and `friends`, where `watchedVideos[i]` and `friends[i]` contain the list of watched videos and the list of friends respectively for the person with `id = i`. Level **1** of videos are all watched videos by your friends, level **2** of videos are all watched videos by the friends of your friends and so on. In general, the level `k` of videos are all watched videos by people with the shortest path **exactly** equal to `k` with you. Given your `id` and the `level` of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.",
    "examples": [
      {
        "input": "watchedVideos = \\[\\[ \"A \", \"B \"\\],\\[ \"C \"\\],\\[ \"B \", \"C \"\\],\\[ \"D \"\\]\\], friends = \\[\\[1,2\\],\\[0,3\\],\\[0,3\\],\\[1,2\\]\\], id = 0, level = 1",
        "output": "\\[ \"B \", \"C \"\\]",
        "explanation": ""
      },
      {
        "input": "watchedVideos = \\[\\[ \"A \", \"B \"\\],\\[ \"C \"\\],\\[ \"B \", \"C \"\\],\\[ \"D \"\\]\\], friends = \\[\\[1,2\\],\\[0,3\\],\\[0,3\\],\\[1,2\\]\\], id = 0, level = 2",
        "output": "\\[ \"D \"\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == watchedVideos.length == friends.length`",
      "`2 <= n <= 100`",
      "`1 <= watchedVideos[i].length <= 100`",
      "`1 <= watchedVideos[i][j].length <= 8`",
      "`0 <= friends[i].length < n`",
      "`0 <= friends[i][j] < n`",
      "`0 <= id < n`",
      "`1 <= level < n`",
      "if `friends[i]` contains `j`, then `friends[j]` contains `i`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1312",
    "slug": "minimum-insertion-steps-to-make-a-string-palindrome",
    "title": "Minimum Insertion Steps to Make a String Palindrome",
    "difficulty": "Hard",
    "description": "Given a string `s`. In one step you can insert any character at any index of the string. Return _the minimum number of steps_ to make `s` palindrome. A **Palindrome String** is one that reads the same backward as well as forward.",
    "examples": [
      {
        "input": "s =  \"zzazz \"",
        "output": "0",
        "explanation": "The string  \"zzazz \" is already palindrome we do not need any insertions."
      },
      {
        "input": "s =  \"mbadm \"",
        "output": "2",
        "explanation": "String can be  \"mbdadbm \" or  \"mdbabdm \"."
      },
      {
        "input": "s =  \"leetcode \"",
        "output": "5",
        "explanation": "Inserting 5 characters the string becomes  \"leetcodocteel \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1313",
    "slug": "decompress-run-length-encoded-list",
    "title": "Decompress Run-Length Encoded List",
    "difficulty": "Easy",
    "description": "We are given a list `nums` of integers representing a list compressed with run-length encoding. Consider each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`). For each such pair, there are `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list. Return the decompressed list.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "\\[2,4,4,4\\]",
        "explanation": "The first pair \\[1,2\\] means we have freq = 1 and val = 2 so we generate the array \\[2\\]."
      },
      {
        "input": "nums = \\[1,1,2,3\\]",
        "output": "\\[1,3,3\\]"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 100`",
      "`nums.length % 2 == 0`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1314",
    "slug": "matrix-block-sum",
    "title": "Matrix Block Sum",
    "difficulty": "Medium",
    "description": "Given a `m x n` matrix `mat` and an integer `k`, return _a matrix_ `answer` _where each_ `answer[i][j]` _is the sum of all elements_ `mat[r][c]` _for_: *  `i - k <= r <= i + k,` *  `j - k <= c <= j + k`, and *  `(r, c)` is a valid position in the matrix.",
    "examples": [
      {
        "input": "mat = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 1",
        "output": "\\[\\[12,21,16\\],\\[27,45,33\\],\\[24,39,28\\]\\]"
      },
      {
        "input": "mat = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 2",
        "output": "\\[\\[45,45,45\\],\\[45,45,45\\],\\[45,45,45\\]\\]"
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n, k <= 100`",
      "`1 <= mat[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1315",
    "slug": "sum-of-nodes-with-even-valued-grandparent",
    "title": "Sum of Nodes with Even-Valued Grandparent",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the sum of values of nodes with an **even-valued grandparent**_. If there are no nodes with an **even-valued grandparent**, return `0`. A **grandparent** of a node is the parent of its parent if it exists.",
    "examples": [
      {
        "input": "root = \\[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5\\]",
        "output": "18",
        "explanation": "The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents."
      },
      {
        "input": "root = \\[1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`1 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1317",
    "slug": "convert-integer-to-the-sum-of-two-no-zero-integers",
    "title": "Convert Integer to the Sum of Two No-Zero Integers",
    "difficulty": "Easy",
    "description": "**No-Zero integer** is a positive integer that **does not contain any `0`** in its decimal representation. Given an integer `n`, return _a list of two integers_ `[a, b]` _where_: *  `a` and `b` are **No-Zero integers**. *  `a + b = n` The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.",
    "examples": [
      {
        "input": "n = 2",
        "output": "\\[1,1\\]",
        "explanation": "Let a = 1 and b = 1."
      },
      {
        "input": "n = 11",
        "output": "\\[2,9\\]",
        "explanation": "Let a = 2 and b = 9."
      }
    ],
    "constraints": [
      "`2 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1318",
    "slug": "minimum-flips-to-make-a-or-b-equal-to-c",
    "title": "Minimum Flips to Make a OR b Equal to c",
    "difficulty": "Medium",
    "description": "Given 3 positives numbers `a`, `b` and `c`. Return the minimum flips required in some bits of `a` and `b` to make ( `a` OR `b` == `c` ). (bitwise OR operation). Flip operation consists of change **any** single bit 1 to 0 or change the bit 0 to 1 in their binary representation.",
    "examples": [
      {
        "input": "a = 2, b = 6, c = 5",
        "output": "3",
        "explanation": "After flips a = 1 , b = 4 , c = 5 such that (`a` OR `b` == `c`)"
      },
      {
        "input": "a = 4, b = 2, c = 7",
        "output": "1"
      },
      {
        "input": "a = 1, b = 2, c = 3",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= a <= 10^9`",
      "`1 <= b <= 10^9`",
      "`1 <= c <= 10^9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1319",
    "slug": "number-of-operations-to-make-network-connected",
    "title": "Number of Operations to Make Network Connected",
    "difficulty": "Medium",
    "description": "There are `n` computers numbered from `0` to `n - 1` connected by ethernet cables `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between computers `ai` and `bi`. Any computer can reach any other computer directly or indirectly through the network. You are given an initial computer network `connections`. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return _the minimum number of times you need to do this in order to make all the computers connected_. If it is not possible, return `-1`.",
    "examples": [
      {
        "input": "n = 4, connections = \\[\\[0,1\\],\\[0,2\\],\\[1,2\\]\\]",
        "output": "1",
        "explanation": "Remove cable between computer 1 and 2 and place between computers 1 and 3."
      },
      {
        "input": "n = 6, connections = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\],\\[1,2\\],\\[1,3\\]\\]",
        "output": "2"
      },
      {
        "input": "n = 6, connections = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\],\\[1,2\\]\\]",
        "output": "-1",
        "explanation": "There are not enough cables."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`1 <= connections.length <= min(n  (n - 1) / 2, 105)`",
      "`connections[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "There are no repeated connections.",
      "No two computers are connected by more than one cable."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1320",
    "slug": "minimum-distance-to-type-a-word-using-two-fingers",
    "title": "Minimum Distance to Type a Word Using Two Fingers",
    "difficulty": "Hard",
    "description": "You have a keyboard layout as shown above in the **X-Y** plane, where each English uppercase letter is located at some coordinate. *  For example, the letter `'A'` is located at coordinate `(0, 0)`, the letter `'B'` is located at coordinate `(0, 1)`, the letter `'P'` is located at coordinate `(2, 3)` and the letter `'Z'` is located at coordinate `(4, 1)`. Given the string `word`, return _the minimum total **distance** to type such string using only two fingers_. The **distance** between coordinates `(x1, y1)` and `(x2, y2)` is `|x1 - x2| + |y1 - y2|`. **Note** that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.",
    "examples": [
      {
        "input": "word =  \"CAKE \"",
        "output": "3",
        "explanation": "Using two fingers, one optimal way to type  \"CAKE \" is:"
      },
      {
        "input": "word =  \"HAPPY \"",
        "output": "6",
        "explanation": "Using two fingers, one optimal way to type  \"HAPPY \" is:"
      }
    ],
    "constraints": [
      "`2 <= word.length <= 300`",
      "`word` consists of uppercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1323",
    "slug": "maximum-69-number",
    "title": "Maximum 69 Number",
    "difficulty": "Easy",
    "description": "You are given a positive integer `num` consisting only of digits `6` and `9`. Return _the maximum number you can get by changing **at most** one digit (_`6` _becomes_ `9`_, and_ `9` _becomes_ `6`_)_.",
    "examples": [
      {
        "input": "num = 9669",
        "output": "9969",
        "explanation": ""
      },
      {
        "input": "num = 9996",
        "output": "9999",
        "explanation": "Changing the last digit 6 to 9 results in the maximum number."
      },
      {
        "input": "num = 9999",
        "output": "9999",
        "explanation": "It is better not to apply any change."
      }
    ],
    "constraints": [
      "`1 <= num <= 104`",
      "`num` consists of only `6` and `9` digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1324",
    "slug": "print-words-vertically",
    "title": "Print Words Vertically",
    "difficulty": "Medium",
    "description": "Given a string `s`. Return all the words vertically in the same order in which they appear in `s`. Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed). Each word would be put on only one column and that in one column there will be only one word.",
    "examples": [
      {
        "input": "s =  \"HOW ARE YOU \"",
        "output": "\\[ \"HAY \", \"ORO \", \"WEU \"\\]",
        "explanation": "Each word is printed vertically."
      },
      {
        "input": "s =  \"TO BE OR NOT TO BE \"",
        "output": "\\[ \"TBONTB \", \"OEROOE \", \"   T \"\\]",
        "explanation": "Trailing spaces is not allowed."
      },
      {
        "input": "s =  \"CONTEST IS COMING \"",
        "output": "\\[ \"CIC \", \"OSO \", \"N M \", \"T I \", \"E N \", \"S G \", \"T \"\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 200`",
      "`s` contains only upper case English letters.",
      "It's guaranteed that there is only one space between 2 words."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1325",
    "slug": "delete-leaves-with-a-given-value",
    "title": "Delete Leaves With a Given Value",
    "difficulty": "Medium",
    "description": "Given a binary tree `root` and an integer `target`, delete all the **leaf nodes** with value `target`. Note that once you delete a leaf node with value `target`**,** if its parent node becomes a leaf node and has the value `target`, it should also be deleted (you need to continue doing that until you cannot).",
    "examples": [
      {
        "input": "root = \\[1,2,3,2,null,2,4\\], target = 2",
        "output": "\\[1,null,3,null,4\\]",
        "explanation": "Leaf nodes in green with value (target = 2) are removed (Picture in left)."
      },
      {
        "input": "root = \\[1,3,3,3,2\\], target = 3",
        "output": "\\[1,3,null,null,2\\]"
      },
      {
        "input": "root = \\[1,2,null,2,null,2\\], target = 2",
        "output": "\\[1\\]",
        "explanation": "Leaf nodes in green with value (target = 2) are removed at each step."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 3000]`.",
      "`1 <= Node.val, target <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1326",
    "slug": "minimum-number-of-taps-to-open-to-water-a-garden",
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "difficulty": "Hard",
    "description": "There is a one-dimensional garden on the x-axis. The garden starts at the point `0` and ends at the point `n`. (i.e The length of the garden is `n`). There are `n + 1` taps located at points `[0, 1, ..., n]` in the garden. Given an integer `n` and an integer array `ranges` of length `n + 1` where `ranges[i]` (0-indexed) means the `i-th` tap can water the area `[i - ranges[i], i + ranges[i]]` if it was open. Return _the minimum number of taps_ that should be open to water the whole garden, If the garden cannot be watered return **\\-1**.",
    "examples": [
      {
        "input": "n = 5, ranges = \\[3,4,1,1,0,0\\]",
        "output": "1",
        "explanation": "The tap at point 0 can cover the interval \\[-3,3\\]"
      },
      {
        "input": "n = 3, ranges = \\[0,0,0,0\\]",
        "output": "-1",
        "explanation": "Even if you activate all the four taps you cannot water the whole garden."
      }
    ],
    "constraints": [
      "`1 <= n <= 104`",
      "`ranges.length == n + 1`",
      "`0 <= ranges[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1328",
    "slug": "break-a-palindrome",
    "title": "Break a Palindrome",
    "difficulty": "Medium",
    "description": "Given a palindromic string of lowercase English letters `palindrome`, replace **exactly one** character with any lowercase English letter so that the resulting string is **not** a palindrome and that it is the **lexicographically smallest** one possible. Return _the resulting string. If there is no way to replace a character to make it not a palindrome, return an **empty string**._ A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. For example, `\"abcc \"` is lexicographically smaller than `\"abcd \"` because the first position they differ is at the fourth character, and `'c'` is smaller than `'d'`.",
    "examples": [
      {
        "input": "palindrome =  \"abccba \"",
        "output": "\"aaccba \"",
        "explanation": "There are many ways to make  \"abccba \" not a palindrome, such as  \"zbccba \",  \"aaccba \", and  \"abacba \"."
      },
      {
        "input": "palindrome =  \"a \"",
        "output": "\" \"",
        "explanation": "There is no way to replace a single character to make  \"a \" not a palindrome, so return an empty string."
      }
    ],
    "constraints": [
      "`1 <= palindrome.length <= 1000`",
      "`palindrome` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1329",
    "slug": "sort-the-matrix-diagonally",
    "title": "Sort the Matrix Diagonally",
    "difficulty": "Medium",
    "description": "A **matrix diagonal** is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the **matrix diagonal** starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`. Given an `m x n` matrix `mat` of integers, sort each **matrix diagonal** in ascending order and return _the resulting matrix_.",
    "examples": [
      {
        "input": "mat = \\[\\[3,3,1,1\\],\\[2,2,1,2\\],\\[1,1,1,2\\]\\]",
        "output": "\\[\\[1,1,1,1\\],\\[1,2,2,2\\],\\[1,2,3,3\\]\\]"
      },
      {
        "input": "mat = \\[\\[11,25,66,1,69,7\\],\\[23,55,17,45,15,52\\],\\[75,31,36,44,58,8\\],\\[22,27,33,25,68,4\\],\\[84,28,14,11,5,50\\]\\]",
        "output": "\\[\\[5,17,4,1,52,7\\],\\[11,11,25,45,8,69\\],\\[14,23,25,44,58,15\\],\\[22,27,31,36,50,66\\],\\[84,28,75,33,55,68\\]\\]"
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 100`",
      "`1 <= mat[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1330",
    "slug": "reverse-subarray-to-maximize-array-value",
    "title": "Reverse Subarray To Maximize Array Value",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`. You are allowed to select any subarray of the given array and reverse it. You can perform this operation **only once**. Find maximum possible value of the final array.",
    "examples": [
      {
        "input": "nums = \\[2,3,1,5,4\\]",
        "output": "10",
        "explanation": "By reversing the subarray \\[3,1,5\\] the array becomes \\[2,5,1,3,4\\] whose value is 10."
      },
      {
        "input": "nums = \\[2,4,9,24,2,1,10\\]",
        "output": "68"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1331",
    "slug": "rank-transform-of-an-array",
    "title": "Rank Transform of an Array",
    "difficulty": "Easy",
    "description": "Given an array of integers `arr`, replace each element with its rank. The rank represents how large the element is. The rank has the following rules: *  Rank is an integer starting from 1. *  The larger the element, the larger the rank. If two elements are equal, their rank must be the same. *  Rank should be as small as possible.",
    "examples": [
      {
        "input": "arr = \\[40,10,20,30\\]",
        "output": "\\[4,1,2,3\\]"
      },
      {
        "input": "arr = \\[100,100,100\\]",
        "output": "\\[1,1,1\\]"
      },
      {
        "input": "arr = \\[37,12,28,9,100,56,80,5,12\\]",
        "output": "\\[5,3,4,2,8,6,7,1,3\\]"
      }
    ],
    "constraints": [
      "`0 <= arr.length <= 105`",
      "`-109 <= arr[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1332",
    "slug": "remove-palindromic-subsequences",
    "title": "Remove Palindromic Subsequences",
    "difficulty": "Easy",
    "description": "You are given a string `s` consisting **only** of letters `'a'` and `'b'`. In a single step you can remove one **palindromic subsequence** from `s`. Return _the **minimum** number of steps to make the given string empty_. A string is a **subsequence** of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does **not** necessarily need to be contiguous. A string is called **palindrome** if is one that reads the same backward as well as forward.",
    "examples": [
      {
        "input": "s =  \"ababa \"",
        "output": "1",
        "explanation": "s is already a palindrome, so its entirety can be removed in a single step."
      },
      {
        "input": "s =  \"abb \"",
        "output": "2",
        "explanation": "\"abb \" ->  \"bb \" ->  \" \"."
      },
      {
        "input": "s =  \"baabb \"",
        "output": "2",
        "explanation": "\"baabb \" ->  \"b \" ->  \" \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s[i]` is either `'a'` or `'b'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1333",
    "slug": "filter-restaurants-by-vegan-friendly-price-and-distance",
    "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
    "difficulty": "Medium",
    "description": "Given the array `restaurants` where `restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]`. You have to filter the restaurants using three filters. The `veganFriendly` filter will be either _true_ (meaning you should only include restaurants with `veganFriendlyi` set to true) or _false_ (meaning you can include any restaurant). In addition, you have the filters `maxPrice` and `maxDistance` which are the maximum value for price and distance of restaurants you should consider respectively. Return the array of restaurant _**IDs**_ after filtering, ordered by **rating** from highest to lowest. For restaurants with the same rating, order them by _**id**_ from highest to lowest. For simplicity `veganFriendlyi` and `veganFriendly` take value _1_ when it is _true_, and _0_ when it is _false_.",
    "examples": [
      {
        "input": "restaurants = \\[\\[1,4,1,40,10\\],\\[2,8,0,50,5\\],\\[3,8,1,30,4\\],\\[4,10,0,10,3\\],\\[5,1,1,15,1\\]\\], veganFriendly = 1, maxPrice = 50, maxDistance = 10",
        "output": "\\[3,1,5\\]",
        "explanation": ""
      },
      {
        "input": "restaurants = \\[\\[1,4,1,40,10\\],\\[2,8,0,50,5\\],\\[3,8,1,30,4\\],\\[4,10,0,10,3\\],\\[5,1,1,15,1\\]\\], veganFriendly = 0, maxPrice = 50, maxDistance = 10",
        "output": "\\[4,3,2,1,5\\]",
        "explanation": "The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered."
      },
      {
        "input": "restaurants = \\[\\[1,4,1,40,10\\],\\[2,8,0,50,5\\],\\[3,8,1,30,4\\],\\[4,10,0,10,3\\],\\[5,1,1,15,1\\]\\], veganFriendly = 0, maxPrice = 30, maxDistance = 3",
        "output": "\\[4,5\\]"
      }
    ],
    "constraints": [
      "`1 <= restaurants.length <= 10^4`",
      "`restaurants[i].length == 5`",
      "`1 <= idi, ratingi, pricei, distancei <= 10^5`",
      "`1 <= maxPrice, maxDistance <= 10^5`",
      "`veganFriendlyi` and `veganFriendly` are 0 or 1.",
      "All `idi` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1334",
    "slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
    "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "difficulty": "Medium",
    "description": "There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distanceThreshold`. Return the city with the smallest number of cities that are reachable through some path and whose distance is **at most** `distanceThreshold`, If there are multiple such cities, return the city with the greatest number. Notice that the distance of a path connecting cities _**i**_ and _**j**_ is equal to the sum of the edges' weights along that path.",
    "examples": [
      {
        "input": "n = 4, edges = \\[\\[0,1,3\\],\\[1,2,1\\],\\[1,3,4\\],\\[2,3,1\\]\\], distanceThreshold = 4",
        "output": "3",
        "explanation": "The figure above describes the graph."
      },
      {
        "input": "n = 5, edges = \\[\\[0,1,2\\],\\[0,4,8\\],\\[1,2,3\\],\\[1,4,2\\],\\[2,3,1\\],\\[3,4,1\\]\\], distanceThreshold = 2",
        "output": "0",
        "explanation": "The figure above describes the graph."
      }
    ],
    "constraints": [
      "`2 <= n <= 100`",
      "`1 <= edges.length <= n  (n - 1) / 2`",
      "`edges[i].length == 3`",
      "`0 <= fromi < toi < n`",
      "`1 <= weighti, distanceThreshold <= 10^4`",
      "All pairs `(fromi, toi)` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1335",
    "slug": "minimum-difficulty-of-a-job-schedule",
    "title": "Minimum Difficulty of a Job Schedule",
    "difficulty": "Hard",
    "description": "You want to schedule a list of jobs in `d` days. Jobs are dependent (i.e To work on the `ith` job, you have to finish all the jobs `j` where `0 <= j < i`). You have to finish **at least** one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the `d` days. The difficulty of a day is the maximum difficulty of a job done on that day. You are given an integer array `jobDifficulty` and an integer `d`. The difficulty of the `ith` job is `jobDifficulty[i]`. Return _the minimum difficulty of a job schedule_. If you cannot find a schedule for the jobs return `-1`.",
    "examples": [
      {
        "input": "jobDifficulty = \\[6,5,4,3,2,1\\], d = 2",
        "output": "7",
        "explanation": "First day you can finish the first 5 jobs, total difficulty = 6."
      },
      {
        "input": "jobDifficulty = \\[9,9,9\\], d = 4",
        "output": "-1",
        "explanation": "If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs."
      },
      {
        "input": "jobDifficulty = \\[1,1,1\\], d = 3",
        "output": "3",
        "explanation": "The schedule is one job per day. total difficulty will be 3."
      }
    ],
    "constraints": [
      "`1 <= jobDifficulty.length <= 300`",
      "`0 <= jobDifficulty[i] <= 1000`",
      "`1 <= d <= 10`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1337",
    "slug": "the-k-weakest-rows-in-a-matrix",
    "title": "The K Weakest Rows in a Matrix",
    "difficulty": "Easy",
    "description": "You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned **in front** of the civilians. That is, all the `1`'s will appear to the **left** of all the `0`'s in each row. A row `i` is **weaker** than a row `j` if one of the following is true: *  The number of soldiers in row `i` is less than the number of soldiers in row `j`. *  Both rows have the same number of soldiers and `i < j`. Return _the indices of the_ `k` _**weakest** rows in the matrix ordered from weakest to strongest_.",
    "examples": [
      {
        "input": "mat =",
        "output": "\\[2,0,3\\]",
        "explanation": ""
      },
      {
        "input": "mat =",
        "output": "\\[0,2\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`2 <= n, m <= 100`",
      "`1 <= k <= m`",
      "`matrix[i][j]` is either 0 or 1."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1338",
    "slug": "reduce-array-size-to-the-half",
    "title": "Reduce Array Size to The Half",
    "difficulty": "Medium",
    "description": "You are given an integer array `arr`. You can choose a set of integers and remove all the occurrences of these integers in the array. Return _the minimum size of the set so that **at least** half of the integers of the array are removed_.",
    "examples": [
      {
        "input": "arr = \\[3,3,3,3,5,5,5,2,2,7\\]",
        "output": "2",
        "explanation": "Choosing {3,7} will make the new array \\[5,5,5,2,2\\] which has size 5 (i.e equal to half of the size of the old array)."
      },
      {
        "input": "arr = \\[7,7,7,7,7,7\\]",
        "output": "1",
        "explanation": "The only possible set you can choose is {7}. This will make the new array empty."
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 105`",
      "`arr.length` is even.",
      "`1 <= arr[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1339",
    "slug": "maximum-product-of-splitted-binary-tree",
    "title": "Maximum Product of Splitted Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized. Return _the maximum product of the sums of the two subtrees_. Since the answer may be too large, return it **modulo** `109 + 7`. **Note** that you need to maximize the answer before taking the mod and not after taking it.",
    "examples": [
      {
        "input": "root = \\[1,2,3,4,5,6\\]",
        "output": "110",
        "explanation": "Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11\\*10)"
      },
      {
        "input": "root = \\[1,null,2,3,4,null,null,5,6\\]",
        "output": "90",
        "explanation": "Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15\\*6)"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 5  104]`.",
      "`1 <= Node.val <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1340",
    "slug": "jump-game-v",
    "title": "Jump Game V",
    "difficulty": "Hard",
    "description": "Given an array of integers `arr` and an integer `d`. In one step you can jump from index `i` to index: *  `i + x` where: `i + x < arr.length` and `0 < x <= d`. *  `i - x` where: `i - x >= 0` and `0 < x <= d`. In addition, you can only jump from index `i` to index `j` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More formally `min(i, j) < k < max(i, j)`). You can choose any index of the array and start jumping. Return _the maximum number of indices_ you can visit. Notice that you can not jump outside of the array at any time.",
    "examples": [
      {
        "input": "arr = \\[6,4,14,6,8,13,9,7,10,6,12\\], d = 2",
        "output": "4",
        "explanation": "You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown."
      },
      {
        "input": "arr = \\[3,3,3,3,3\\], d = 3",
        "output": "1",
        "explanation": "You can start at any index. You always cannot jump to any index."
      },
      {
        "input": "arr = \\[7,6,5,4,3,2,1\\], d = 1",
        "output": "7",
        "explanation": "Start at index 0. You can visit all the indicies."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 1000`",
      "`1 <= arr[i] <= 105`",
      "`1 <= d <= arr.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1342",
    "slug": "number-of-steps-to-reduce-a-number-to-zero",
    "title": "Number of Steps to Reduce a Number to Zero",
    "difficulty": "Easy",
    "description": "Given an integer `num`, return _the number of steps to reduce it to zero_. In one step, if the current number is even, you have to divide it by `2`, otherwise, you have to subtract `1` from it.",
    "examples": [
      {
        "input": "num = 14",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "num = 8",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "num = 123",
        "output": "12"
      }
    ],
    "constraints": [
      "`0 <= num <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1343",
    "slug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
    "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "difficulty": "Medium",
    "description": "Given an array of integers `arr` and two integers `k` and `threshold`, return _the number of sub-arrays of size_ `k` _and average greater than or equal to_ `threshold`.",
    "examples": [
      {
        "input": "arr = \\[2,2,2,2,5,5,5,8\\], k = 3, threshold = 4",
        "output": "3",
        "explanation": "Sub-arrays \\[2,5,5\\],\\[5,5,5\\] and \\[5,5,8\\] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold)."
      },
      {
        "input": "arr = \\[11,13,17,23,29,31,7,5,2,3\\], k = 3, threshold = 5",
        "output": "6",
        "explanation": "The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`1 <= arr[i] <= 104`",
      "`1 <= k <= arr.length`",
      "`0 <= threshold <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1344",
    "slug": "angle-between-hands-of-a-clock",
    "title": "Angle Between Hands of a Clock",
    "difficulty": "Medium",
    "description": "Given two numbers, `hour` and `minutes`, return _the smaller angle (in degrees) formed between the_ `hour` _and the_ `minute` _hand_. Answers within `10-5` of the actual value will be accepted as correct.",
    "examples": [
      {
        "input": "hour = 12, minutes = 30",
        "output": "165"
      },
      {
        "input": "hour = 3, minutes = 30",
        "output": "75"
      },
      {
        "input": "hour = 3, minutes = 15",
        "output": "7.5"
      }
    ],
    "constraints": [
      "`1 <= hour <= 12`",
      "`0 <= minutes <= 59`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1345",
    "slug": "jump-game-iv",
    "title": "Jump Game IV",
    "difficulty": "Hard",
    "description": "Given an array of integers `arr`, you are initially positioned at the first index of the array. In one step you can jump from index `i` to index: *  `i + 1` where: `i + 1 < arr.length`. *  `i - 1` where: `i - 1 >= 0`. *  `j` where: `arr[i] == arr[j]` and `i != j`. Return _the minimum number of steps_ to reach the **last index** of the array. Notice that you can not jump outside of the array at any time.",
    "examples": [
      {
        "input": "arr = \\[100,-23,-23,404,100,23,23,23,3,404\\]",
        "output": "3",
        "explanation": "You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array."
      },
      {
        "input": "arr = \\[7\\]",
        "output": "0",
        "explanation": "Start index is the last index. You do not need to jump."
      },
      {
        "input": "arr = \\[7,6,9,6,9,6,9,7\\]",
        "output": "1",
        "explanation": "You can jump directly from index 0 to index 7 which is last index of the array."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 5  104`",
      "`-108 <= arr[i] <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1346",
    "slug": "check-if-n-and-its-double-exist",
    "title": "Check If N and Its Double Exist",
    "difficulty": "Easy",
    "description": "Given an array `arr` of integers, check if there exist two indices `i` and `j` such that : *  `i != j` *  `0 <= i, j < arr.length` *  `arr[i] == 2 * arr[j]`",
    "examples": [
      {
        "input": "arr = \\[10,2,5,3\\]",
        "output": "true",
        "explanation": "For i = 0 and j = 2, arr\\[i\\] == 10 == 2 \\* 5 == 2 \\* arr\\[j\\]"
      },
      {
        "input": "arr = \\[3,1,7,11\\]",
        "output": "false",
        "explanation": "There is no i and j that satisfy the conditions."
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 500`",
      "`-103 <= arr[i] <= 103`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1347",
    "slug": "minimum-number-of-steps-to-make-two-strings-anagram",
    "title": "Minimum Number of Steps to Make Two Strings Anagram",
    "difficulty": "Medium",
    "description": "You are given two strings of the same length `s` and `t`. In one step you can choose **any character** of `t` and replace it with **another character**. Return _the minimum number of steps_ to make `t` an anagram of `s`. An **Anagram** of a string is a string that contains the same characters with a different (or the same) ordering.",
    "examples": [
      {
        "input": "s =  \"bab \", t =  \"aba \"",
        "output": "1",
        "explanation": "Replace the first 'a' in t with b, t =  \"bba \" which is anagram of s."
      },
      {
        "input": "s =  \"leetcode \", t =  \"practice \"",
        "output": "5",
        "explanation": "Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s."
      },
      {
        "input": "s =  \"anagram \", t =  \"mangaar \"",
        "output": "0",
        "explanation": "\"anagram \" and  \"mangaar \" are anagrams."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5  104`",
      "`s.length == t.length`",
      "`s` and `t` consist of lowercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1348",
    "slug": "tweet-counts-per-frequency",
    "title": "Tweet Counts Per Frequency",
    "difficulty": "Medium",
    "description": "A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller **time chunks** based on a certain frequency (every **minute**, **hour**, or **day**). For example, the period `[10, 10000]` (in **seconds**) would be partitioned into the following **time chunks** with these frequencies: *  Every **minute** (60-second chunks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]` *  Every **hour** (3600-second chunks): `[10,3609]`, `[3610,7209]`, `[7210,10000]` *  Every **day** (86400-second chunks): `[10,10000]` Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (`10000` in the above example). Design and implement an API to help the company with their analysis. Implement the `TweetCounts` class: *  `TweetCounts()` Initializes the `TweetCounts` object. *  `void recordTweet(String tweetName, int time)` Stores the `tweetName` at the recorded `time` (in **seconds**). *  `List getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)` Returns a list of integers representing the number of tweets with `tweetName` in each **time chunk** for the given period of time `[startTime, endTime]` (in **seconds**) and frequency `freq`. *  `freq` is one of `\"minute \"`, `\"hour \"`, or `\"day \"` representing a frequency of every **minute**, **hour**, or **day** respectively.",
    "examples": [],
    "constraints": [
      "`0 <= time, startTime, endTime <= 109`",
      "`0 <= endTime - startTime <= 104`",
      "There will be at most `104` calls in total to `recordTweet` and `getTweetCountsPerFrequency`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1349",
    "slug": "maximum-students-taking-exam",
    "title": "Maximum Students Taking Exam",
    "difficulty": "Hard",
    "description": "Given a `m * n` matrix `seats` that represent seats distributions in a classroom. If a seat is broken, it is denoted by `'#'` character otherwise it is denoted by a `'.'` character. Students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the **maximum** number of students that can take the exam together without any cheating being possible.. Students must be placed in seats in good condition.",
    "examples": [
      {
        "input": "seats = \\[\\[ \"# \", \". \", \"# \", \"# \", \". \", \"# \"\\],",
        "output": "4",
        "explanation": "Teacher can place 4 students in available seats so they don't cheat on the exam."
      },
      {
        "input": "seats = \\[\\[ \". \", \"# \"\\],",
        "output": "3",
        "explanation": "Place all students in available seats."
      },
      {
        "input": "seats = \\[\\[ \"# \", \". \", \"**.** \", \". \", \"# \"\\],",
        "output": "10",
        "explanation": "Place students in available seats in column 1, 3 and 5."
      }
    ],
    "constraints": [
      "`seats` contains only characters `'.' and``'#'.`",
      "`m == seats.length`",
      "`n == seats[i].length`",
      "`1 <= m <= 8`",
      "`1 <= n <= 8`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1351",
    "slug": "count-negative-numbers-in-a-sorted-matrix",
    "title": "Count Negative Numbers in a Sorted Matrix",
    "difficulty": "Easy",
    "description": "Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return _the number of **negative** numbers in_ `grid`.",
    "examples": [
      {
        "input": "grid = \\[\\[4,3,2,-1\\],\\[3,2,1,-1\\],\\[1,1,-1,-2\\],\\[-1,-1,-2,-3\\]\\]",
        "output": "8",
        "explanation": "There are 8 negatives number in the matrix."
      },
      {
        "input": "grid = \\[\\[3,2\\],\\[1,0\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 100`",
      "`-100 <= grid[i][j] <= 100`",
      "Follow up: Could you find an `O(n + m)` solution?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1352",
    "slug": "product-of-the-last-k-numbers",
    "title": "Product of the Last K Numbers",
    "difficulty": "Medium",
    "description": "Design an algorithm that accepts a stream of integers and retrieves the product of the last `k` integers of the stream. Implement the `ProductOfNumbers` class: *  `ProductOfNumbers()` Initializes the object with an empty stream. *  `void add(int num)` Appends the integer `num` to the stream. *  `int getProduct(int k)` Returns the product of the last `k` numbers in the current list. You can assume that always the current list has at least `k` numbers. The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.",
    "examples": [],
    "constraints": [
      "`0 <= num <= 100`",
      "`1 <= k <= 4  104`",
      "At most `4  104` calls will be made to `add` and `getProduct`.",
      "The product of the stream at any point in time will fit in a 32-bit integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1353",
    "slug": "maximum-number-of-events-that-can-be-attended",
    "title": "Maximum Number of Events That Can Be Attended",
    "difficulty": "Medium",
    "description": "You are given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`. You can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. You can only attend one event at any time `d`. Return _the maximum number of events you can attend_.",
    "examples": [
      {
        "input": "events = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\]\\]",
        "output": "3",
        "explanation": "You can attend all the three events."
      },
      {
        "input": "events= \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[1,2\\]\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= events.length <= 105`",
      "`events[i].length == 2`",
      "`1 <= startDayi <= endDayi <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1354",
    "slug": "construct-target-array-with-multiple-sums",
    "title": "Construct Target Array With Multiple Sums",
    "difficulty": "Hard",
    "description": "You are given an array `target` of n integers. From a starting array `arr` consisting of `n` 1's, you may perform the following procedure : *  let `x` be the sum of all elements currently in your array. *  choose index `i`, such that `0 <= i < n` and set the value of `arr` at index `i` to `x`. *  You may repeat this procedure as many times as needed. Return `true` _if it is possible to construct the_ `target` _array from_ `arr`_, otherwise, return_ `false`.",
    "examples": [
      {
        "input": "target = \\[9,3,5\\]",
        "output": "true",
        "explanation": "Start with arr = \\[1, 1, 1\\]"
      },
      {
        "input": "target = \\[1,1,1,2\\]",
        "output": "false",
        "explanation": "Impossible to create target array from \\[1,1,1,1\\]."
      },
      {
        "input": "target = \\[8,5\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`n == target.length`",
      "`1 <= n <= 5  104`",
      "`1 <= target[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1356",
    "slug": "sort-integers-by-the-number-of-1-bits",
    "title": "Sort Integers by The Number of 1 Bits",
    "difficulty": "Easy",
    "description": "You are given an integer array `arr`. Sort the integers in the array in ascending order by the number of `1`'s in their binary representation and in case of two or more integers have the same number of `1`'s you have to sort them in ascending order. Return _the array after sorting it_.",
    "examples": [
      {
        "input": "arr = \\[0,1,2,3,4,5,6,7,8\\]",
        "output": "\\[0,1,2,4,8,3,5,6,7\\]"
      },
      {
        "input": "arr = \\[1024,512,256,128,64,32,16,8,4,2,1\\]",
        "output": "\\[1,2,4,8,16,32,64,128,256,512,1024\\]"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 500`",
      "`0 <= arr[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1357",
    "slug": "apply-discount-every-n-orders",
    "title": "Apply Discount Every n Orders",
    "difficulty": "Medium",
    "description": "There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays `products` and `prices`, where the `ith` product has an ID of `products[i]` and a price of `prices[i]`. When a customer is paying, their bill is represented as two parallel integer arrays `product` and `amount`, where the `jth` product they purchased has an ID of `product[j]`, and `amount[j]` is how much of the product they bought. Their subtotal is calculated as the sum of each `amount[j] * (price of the jth product)`. The supermarket decided to have a sale. Every `nth` customer paying for their groceries will be given a **percentage discount**. The discount amount is given by `discount`, where they will be given `discount` percent off their subtotal. More formally, if their subtotal is `bill`, then they would actually pay `bill * ((100 - discount) / 100)`. Implement the `Cashier` class: *  `Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, and the `products` and their `prices`. *  `double getBill(int[] product, int[] amount)` Returns the final total of the bill with the discount applied (if any). Answers within `10-5` of the actual value will be accepted.",
    "examples": [],
    "constraints": [
      "`1 <= n <= 104`",
      "`0 <= discount <= 100`",
      "`1 <= products.length <= 200`",
      "`prices.length == products.length`",
      "`1 <= products[i] <= 200`",
      "`1 <= prices[i] <= 1000`",
      "The elements in `products` are unique.",
      "`1 <= product.length <= products.length`",
      "`amount.length == product.length`",
      "`product[j]` exists in `products`.",
      "`1 <= amount[j] <= 1000`",
      "The elements of `product` are unique.",
      "At most `1000` calls will be made to `getBill`.",
      "Answers within `10-5` of the actual value will be accepted."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1358",
    "slug": "number-of-substrings-containing-all-three-characters",
    "title": "Number of Substrings Containing All Three Characters",
    "difficulty": "Medium",
    "description": "Given a string `s` consisting only of characters _a_, _b_ and _c_. Return the number of substrings containing **at least** one occurrence of all these characters _a_, _b_ and _c_.",
    "examples": [
      {
        "input": "s =  \"abcabc \"",
        "output": "10",
        "explanation": "The substrings containing at least one occurrence of the characters _a_, _b_ and _c are  \"_abc _\",  \"_abca _\",  \"_abcab _\",  \"_abcabc _\",  \"_bca _\",  \"_bcab _\",  \"_bcabc _\",  \"_cab _\",  \"_cabc _\"_ and  _\"_abc _\"_ (**again**)_._"
      },
      {
        "input": "s =  \"aaacb \"",
        "output": "3",
        "explanation": "The substrings containing at least one occurrence of the characters _a_, _b_ and _c are  \"_aaacb _\",  \"_aacb _\"_ and  _\"_acb _\"._"
      },
      {
        "input": "s =  \"abc \"",
        "output": "1"
      }
    ],
    "constraints": [
      "`3 <= s.length <= 5 x 10^4`",
      "`s` only consists of _a_, _b_ or _c_ characters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1359",
    "slug": "count-all-valid-pickup-and-delivery-options",
    "title": "Count All Valid Pickup and Delivery Options",
    "difficulty": "Hard",
    "description": "Given `n` orders, each order consist in pickup and delivery services. Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). Since the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "Unique order (P1, D1), Delivery 1 always is after of Pickup 1."
      },
      {
        "input": "n = 2",
        "output": "6",
        "explanation": "All possible orders:"
      },
      {
        "input": "n = 3",
        "output": "90"
      }
    ],
    "constraints": [
      "`1 <= n <= 500`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1360",
    "slug": "number-of-days-between-two-dates",
    "title": "Number of Days Between Two Dates",
    "difficulty": "Easy",
    "description": "Write a program to count the number of days between two dates. The two dates are given as strings, their format is `YYYY-MM-DD` as shown in the examples.",
    "examples": [
      {
        "input": "date1 = \"2019-06-29\", date2 = \"2019-06-30\"",
        "output": "1"
      },
      {
        "input": "date1 = \"2020-01-15\", date2 = \"2019-12-31\"",
        "output": "15"
      }
    ],
    "constraints": [
      "The given dates are valid dates between the years `1971` and `2100`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1361",
    "slug": "validate-binary-tree-nodes",
    "title": "Validate Binary Tree Nodes",
    "difficulty": "Medium",
    "description": "You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and only if **all** the given nodes form **exactly one** valid binary tree. If node `i` has no left child then `leftChild[i]` will equal `-1`, similarly for the right child. Note that the nodes have no values and that we only use the node numbers in this problem.",
    "examples": [
      {
        "input": "n = 4, leftChild = \\[1,-1,3,-1\\], rightChild = \\[2,-1,-1,-1\\]",
        "output": "true"
      },
      {
        "input": "n = 4, leftChild = \\[1,-1,3,-1\\], rightChild = \\[2,3,-1,-1\\]",
        "output": "false"
      },
      {
        "input": "n = 2, leftChild = \\[1,0\\], rightChild = \\[-1,-1\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`n == leftChild.length == rightChild.length`",
      "`1 <= n <= 104`",
      "`-1 <= leftChild[i], rightChild[i] <= n - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1362",
    "slug": "closest-divisors",
    "title": "Closest Divisors",
    "difficulty": "Medium",
    "description": "Given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`. Return the two integers in any order.",
    "examples": [
      {
        "input": "num = 8",
        "output": "\\[3,3\\]",
        "explanation": "For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen."
      },
      {
        "input": "num = 123",
        "output": "\\[5,25\\]"
      },
      {
        "input": "num = 999",
        "output": "\\[40,25\\]"
      }
    ],
    "constraints": [
      "`1 <= num <= 10^9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1363",
    "slug": "largest-multiple-of-three",
    "title": "Largest Multiple of Three",
    "difficulty": "Hard",
    "description": "Given an array of digits `digits`, return _the largest multiple of **three** that can be formed by concatenating some of the given digits in **any order**_. If there is no answer return an empty string. Since the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.",
    "examples": [
      {
        "input": "digits = \\[8,1,9\\]",
        "output": "\"981 \""
      },
      {
        "input": "digits = \\[8,6,7,1,0\\]",
        "output": "\"8760 \""
      },
      {
        "input": "digits = \\[1\\]",
        "output": "\" \""
      }
    ],
    "constraints": [
      "`1 <= digits.length <= 104`",
      "`0 <= digits[i] <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1365",
    "slug": "how-many-numbers-are-smaller-than-the-current-number",
    "title": "How Many Numbers Are Smaller Than the Current Number",
    "difficulty": "Easy",
    "description": "Given the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` **and** `nums[j] < nums[i]`. Return the answer in an array.",
    "examples": [
      {
        "input": "nums = \\[8,1,2,2,3\\]",
        "output": "\\[4,0,1,1,3\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[6,5,4,8\\]",
        "output": "\\[2,1,0,3\\]"
      },
      {
        "input": "nums = \\[7,7,7,7\\]",
        "output": "\\[0,0,0,0\\]"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 500`",
      "`0 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1366",
    "slug": "rank-teams-by-votes",
    "title": "Rank Teams by Votes",
    "difficulty": "Medium",
    "description": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition. The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter. You are given an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above. Return _a string of all teams **sorted** by the ranking system_.",
    "examples": [
      {
        "input": "votes = \\[ \"ABC \", \"ACB \", \"ABC \", \"ACB \", \"ACB \"\\]",
        "output": "\"ACB \"",
        "explanation": ""
      },
      {
        "input": "votes = \\[ \"WXYZ \", \"XYZW \"\\]",
        "output": "\"XWYZ \"",
        "explanation": ""
      },
      {
        "input": "votes = \\[ \"ZMNAGUEDSJYLBOPHRQICWFXTVK \"\\]",
        "output": "\"ZMNAGUEDSJYLBOPHRQICWFXTVK \"",
        "explanation": "Only one voter, so their votes are used for the ranking."
      }
    ],
    "constraints": [
      "`1 <= votes.length <= 1000`",
      "`1 <= votes[i].length <= 26`",
      "`votes[i].length == votes[j].length` for `0 <= i, j < votes.length`.",
      "`votes[i][j]` is an English uppercase letter.",
      "All characters of `votes[i]` are unique.",
      "All the characters that occur in `votes[0]` also occur in `votes[j]` where `1 <= j < votes.length`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1367",
    "slug": "linked-list-in-binary-tree",
    "title": "Linked List in Binary Tree",
    "difficulty": "Medium",
    "description": "Given a binary tree `root` and a linked list with `head` as the first node. Return True if all the elements in the linked list starting from the `head` correspond to some _downward path_ connected in the binary tree otherwise return False. In this context downward path means a path that starts at some node and goes downwards.",
    "examples": [
      {
        "input": "head = \\[4,2,8\\], root = \\[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3\\]",
        "output": "true",
        "explanation": "Nodes in blue form a subpath in the binary Tree."
      },
      {
        "input": "head = \\[1,4,2,6\\], root = \\[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3\\]",
        "output": "true"
      },
      {
        "input": "head = \\[1,4,2,6,8\\], root = \\[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3\\]",
        "output": "false",
        "explanation": "There is no path in the binary tree that contains all the elements of the linked list from `head`."
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range `[1, 2500]`.",
      "The number of nodes in the list will be in the range `[1, 100]`.",
      "`1 <= Node.val <= 100` for each node in the linked list and binary tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1368",
    "slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
    "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
    "difficulty": "Hard",
    "description": "Given an `m x n` grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of `grid[i][j]` can be: *  `1` which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`) *  `2` which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`) *  `3` which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`) *  `4` which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`) Notice that there could be some signs on the cells of the grid that point outside the grid. You will initially start at the upper left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)` following the signs on the grid. The valid path does not have to be the shortest. You can modify the sign on a cell with `cost = 1`. You can modify the sign on a cell **one time only**. Return _the minimum cost to make the grid have at least one valid path_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,1,1\\],\\[2,2,2,2\\],\\[1,1,1,1\\],\\[2,2,2,2\\]\\]",
        "output": "3",
        "explanation": "You will start at point (0, 0)."
      },
      {
        "input": "grid = \\[\\[1,1,3\\],\\[3,2,2\\],\\[1,1,4\\]\\]",
        "output": "0",
        "explanation": "You can follow the path from (0, 0) to (2, 2)."
      },
      {
        "input": "grid = \\[\\[1,2\\],\\[4,3\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 100`",
      "`1 <= grid[i][j] <= 4`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1370",
    "slug": "increasing-decreasing-string",
    "title": "Increasing Decreasing String",
    "difficulty": "Easy",
    "description": "You are given a string `s`. Reorder the string using the following algorithm: 1. Pick the **smallest** character from `s` and **append** it to the result. 2. Pick the **smallest** character from `s` which is greater than the last appended character to the result and **append** it. 3. Repeat step 2 until you cannot pick more characters. 4. Pick the **largest** character from `s` and **append** it to the result. 5. Pick the **largest** character from `s` which is smaller than the last appended character to the result and **append** it. 6. Repeat step 5 until you cannot pick more characters. 7. Repeat the steps from 1 to 6 until you pick all characters from `s`. In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result. Return _the result string after sorting_ `s` _with this algorithm_.",
    "examples": [
      {
        "input": "s =  \"aaaabbbbcccc \"",
        "output": "\"abccbaabccba \"",
        "explanation": "After steps 1, 2 and 3 of the first iteration, result =  \"abc \""
      },
      {
        "input": "s =  \"rat \"",
        "output": "\"art \"",
        "explanation": "The word  \"rat \" becomes  \"art \" after re-ordering it with the mentioned algorithm."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1371",
    "slug": "find-the-longest-substring-containing-vowels-in-even-counts",
    "title": "Find the Longest Substring Containing Vowels in Even Counts",
    "difficulty": "Medium",
    "description": "Given the string `s`, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.",
    "examples": [
      {
        "input": "s =  \"eleetminicoworoep \"",
        "output": "13",
        "explanation": "The longest substring is  \"leetminicowor \" which contains two each of the vowels: **e**, **i** and **o** and zero of the vowels: **a** and **u**."
      },
      {
        "input": "s =  \"leetcodeisgreat \"",
        "output": "5",
        "explanation": "The longest substring is  \"leetc \" which contains two e's."
      },
      {
        "input": "s =  \"bcbcbc \"",
        "output": "6",
        "explanation": "In this case, the given string  \"bcbcbc \" is the longest because all vowels: **a**, **e**, **i**, **o** and **u** appear zero times."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5 x 10^5`",
      "`s` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1372",
    "slug": "longest-zigzag-path-in-a-binary-tree",
    "title": "Longest ZigZag Path in a Binary Tree",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary tree. A ZigZag path for a binary tree is defined as follow: *  Choose **any** node in the binary tree and a direction (right or left). *  If the current direction is right, move to the right child of the current node; otherwise, move to the left child. *  Change the direction from right to left or from left to right. *  Repeat the second and third steps until you can't move in the tree. Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0). Return _the longest **ZigZag** path contained in that tree_.",
    "examples": [
      {
        "input": "root = \\[1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1\\]",
        "output": "3",
        "explanation": "Longest ZigZag path in blue nodes (right -> left -> right)."
      },
      {
        "input": "root = \\[1,1,1,null,1,null,null,1,1,null,1\\]",
        "output": "4",
        "explanation": "Longest ZigZag path in blue nodes (left -> right -> left -> right)."
      },
      {
        "input": "root = \\[1\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 5  104]`.",
      "`1 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1373",
    "slug": "maximum-sum-bst-in-binary-tree",
    "title": "Maximum Sum BST in Binary Tree",
    "difficulty": "Hard",
    "description": "Given a **binary tree** `root`, return _the maximum sum of all keys of **any** sub-tree which is also a Binary Search Tree (BST)_. Assume a BST is defined as follows: *  The left subtree of a node contains only nodes with keys **less than** the node's key. *  The right subtree of a node contains only nodes with keys **greater than** the node's key. *  Both the left and right subtrees must also be binary search trees.",
    "examples": [
      {
        "input": "root = \\[1,4,3,2,4,2,5,null,null,null,null,null,null,4,6\\]",
        "output": "20",
        "explanation": "Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3."
      },
      {
        "input": "root = \\[4,3,null,1,2\\]",
        "output": "2",
        "explanation": "Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2."
      },
      {
        "input": "root = \\[-4,-2,-5\\]",
        "output": "0",
        "explanation": "All values are negatives. Return an empty BST."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 4  104]`.",
      "`-4  104 <= Node.val <= 4  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1374",
    "slug": "generate-a-string-with-characters-that-have-odd-counts",
    "title": "Generate a String With Characters That Have Odd Counts",
    "difficulty": "Easy",
    "description": "Given an integer `n`, _return a string with `n` characters such that each character in such string occurs **an odd number of times**_. The returned string must contain only lowercase English letters. If there are multiples valid strings, return **any** of them.",
    "examples": [
      {
        "input": "n = 4",
        "output": "\"pppz \"",
        "explanation": "\"pppz \" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as  \"ohhh \" and  \"love \"."
      },
      {
        "input": "n = 2",
        "output": "\"xy \"",
        "explanation": "\"xy \" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as  \"ag \" and  \"ur \"."
      },
      {
        "input": "n = 7",
        "output": "\"holasss \""
      }
    ],
    "constraints": [
      "`1 <= n <= 500`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1375",
    "slug": "number-of-times-binary-string-is-prefix-aligned",
    "title": "Number of Times Binary String Is Prefix-Aligned",
    "difficulty": "Medium",
    "description": "You have a **1-indexed** binary string of length `n` where all the bits are `0` initially. We will flip all the bits of this binary string (i.e., change them from `0` to `1`) one by one. You are given a **1-indexed** integer array `flips` where `flips[i]` indicates that the bit at index `i` will be flipped in the `ith` step. A binary string is **prefix-aligned** if, after the `ith` step, all the bits in the **inclusive** range `[1, i]` are ones and all the other bits are zeros. Return _the number of times the binary string is **prefix-aligned** during the flipping process_.",
    "examples": [
      {
        "input": "flips = \\[3,2,4,1,5\\]",
        "output": "2",
        "explanation": "The binary string is initially  \"00000 \"."
      },
      {
        "input": "flips = \\[4,1,2,3\\]",
        "output": "1",
        "explanation": "The binary string is initially  \"0000 \"."
      }
    ],
    "constraints": [
      "`n == flips.length`",
      "`1 <= n <= 5  104`",
      "`flips` is a permutation of the integers in the range `[1, n]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1376",
    "slug": "time-needed-to-inform-all-employees",
    "title": "Time Needed to Inform All Employees",
    "difficulty": "Medium",
    "description": "A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`. Each employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure. The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news. The `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime\\[i\\] minutes, all his direct subordinates can start spreading the news). Return _the number of minutes_ needed to inform all the employees about the urgent news.",
    "examples": [
      {
        "input": "n = 1, headID = 0, manager = \\[-1\\], informTime = \\[0\\]",
        "output": "0",
        "explanation": "The head of the company is the only employee in the company."
      },
      {
        "input": "n = 6, headID = 2, manager = \\[2,2,-1,2,2,2\\], informTime = \\[0,0,1,0,0,0\\]",
        "output": "1",
        "explanation": "The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`0 <= headID < n`",
      "`manager.length == n`",
      "`0 <= manager[i] < n`",
      "`manager[headID] == -1`",
      "`informTime.length == n`",
      "`0 <= informTime[i] <= 1000`",
      "`informTime[i] == 0` if employee `i` has no subordinates.",
      "It is guaranteed that all the employees can be informed."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1377",
    "slug": "frog-position-after-t-seconds",
    "title": "Frog Position After T Seconds",
    "difficulty": "Hard",
    "description": "Given an undirected tree consisting of `n` vertices numbered from `1` to `n`. A frog starts jumping from **vertex 1**. In one second, the frog jumps from its current vertex to another **unvisited** vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex. The edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. _Return the probability that after `t` seconds the frog is on the vertex `target`._ Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "n = 7, edges = \\[\\[1,2\\],\\[1,3\\],\\[1,7\\],\\[2,4\\],\\[2,6\\],\\[3,5\\]\\], t = 2, target = 4",
        "output": "0.16666666666666666",
        "explanation": "The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after **second 1** and then jumping with 1/2 probability to vertex 4 after **second 2**. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 \\* 1/2 = 1/6 = 0.16666666666666666."
      },
      {
        "input": "n = 7, edges = \\[\\[1,2\\],\\[1,3\\],\\[1,7\\],\\[2,4\\],\\[2,6\\],\\[3,5\\]\\], t = 1, target = 7",
        "output": "0.3333333333333333",
        "explanation": "The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after **second 1**."
      }
    ],
    "constraints": [
      "`1 <= n <= 100`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`1 <= ai, bi <= n`",
      "`1 <= t <= 50`",
      "`1 <= target <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1379",
    "slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
    "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    "difficulty": "Easy",
    "description": "Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree. The `cloned` tree is a **copy of** the `original` tree. Return _a reference to the same node_ in the `cloned` tree. **Note** that you are **not allowed** to change any of the two trees or the `target` node and the answer **must be** a reference to a node in the `cloned` tree.",
    "examples": [
      {
        "input": "tree = \\[7,4,3,null,null,6,19\\], target = 3",
        "output": "3",
        "explanation": "In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree."
      },
      {
        "input": "tree = \\[7\\], target =  7",
        "output": "7"
      },
      {
        "input": "tree = \\[8,null,6,null,5,null,4,null,3,null,2,null,1\\], target = 4",
        "output": "4"
      }
    ],
    "constraints": [
      "The number of nodes in the `tree` is in the range `[1, 104]`.",
      "The values of the nodes of the `tree` are unique.",
      "`target` node is a node from the `original` tree and is not `null`.",
      "Follow up: Could you solve the problem if repeated values on the tree are allowed?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1380",
    "slug": "lucky-numbers-in-a-matrix",
    "title": "Lucky Numbers in a Matrix",
    "difficulty": "Easy",
    "description": "Given an `m x n` matrix of **distinct** numbers, return _all **lucky numbers** in the matrix in **any** order_. A **lucky number** is an element of the matrix such that it is the minimum element in its row and maximum in its column.",
    "examples": [
      {
        "input": "matrix = \\[\\[3,7,8\\],\\[9,11,13\\],\\[15,16,17\\]\\]",
        "output": "\\[15\\]",
        "explanation": "15 is the only lucky number since it is the minimum in its row and the maximum in its column."
      },
      {
        "input": "matrix = \\[\\[1,10,4,2\\],\\[9,3,8,7\\],\\[15,16,17,12\\]\\]",
        "output": "\\[12\\]",
        "explanation": "12 is the only lucky number since it is the minimum in its row and the maximum in its column."
      },
      {
        "input": "matrix = \\[\\[7,8\\],\\[1,2\\]\\]",
        "output": "\\[7\\]",
        "explanation": "7 is the only lucky number since it is the minimum in its row and the maximum in its column."
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= n, m <= 50`",
      "`1 <= matrix[i][j] <= 105`.",
      "All elements in the matrix are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1381",
    "slug": "design-a-stack-with-increment-operation",
    "title": "Design a Stack With Increment Operation",
    "difficulty": "Medium",
    "description": "Design a stack that supports increment operations on its elements. Implement the `CustomStack` class: *  `CustomStack(int maxSize)` Initializes the object with `maxSize` which is the maximum number of elements in the stack. *  `void push(int x)` Adds `x` to the top of the stack if the stack has not reached the `maxSize`. *  `int pop()` Pops and returns the top of the stack or `-1` if the stack is empty. *  `void inc(int k, int val)` Increments the bottom `k` elements of the stack by `val`. If there are less than `k` elements in the stack, increment all the elements in the stack.",
    "examples": [],
    "constraints": [
      "`1 <= maxSize, x, k <= 1000`",
      "`0 <= val <= 100`",
      "At most `1000` calls will be made to each method of `increment`, `push` and `pop` each separately."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1382",
    "slug": "balance-a-binary-search-tree",
    "title": "Balance a Binary Search Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary search tree, return _a **balanced** binary search tree with the same node values_. If there is more than one answer, return **any of them**. A binary search tree is **balanced** if the depth of the two subtrees of every node never differs by more than `1`.",
    "examples": [
      {
        "input": "root = \\[1,null,2,null,3,null,4,null,null\\]",
        "output": "\\[2,1,3,null,null,null,4\\]",
        "explanation": "This is not the only correct answer, \\[3,1,4,null,2\\] is also correct."
      },
      {
        "input": "root = \\[2,1,3\\]",
        "output": "\\[2,1,3\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`1 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1383",
    "slug": "maximum-performance-of-a-team",
    "title": "Maximum Performance of a Team",
    "difficulty": "Hard",
    "description": "You are given two integers `n` and `k` and two integer arrays `speed` and `efficiency` both of length `n`. There are `n` engineers numbered from `1` to `n`. `speed[i]` and `efficiency[i]` represent the speed and efficiency of the `ith` engineer respectively. Choose **at most** `k` different engineers out of the `n` engineers to form a team with the maximum **performance**. The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers. Return _the maximum performance of this team_. Since the answer can be a huge number, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 6, speed = \\[2,10,3,1,5,8\\], efficiency = \\[5,4,3,9,7,2\\], k = 2",
        "output": "60",
        "explanation": ""
      },
      {
        "input": "n = 6, speed = \\[2,10,3,1,5,8\\], efficiency = \\[5,4,3,9,7,2\\], k = 3",
        "output": "68",
        "explanation": ""
      },
      {
        "input": "n = 6, speed = \\[2,10,3,1,5,8\\], efficiency = \\[5,4,3,9,7,2\\], k = 4",
        "output": "72"
      }
    ],
    "constraints": [
      "`1 <= k <= n <= 105`",
      "`speed.length == n`",
      "`efficiency.length == n`",
      "`1 <= speed[i] <= 105`",
      "`1 <= efficiency[i] <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1385",
    "slug": "find-the-distance-value-between-two-arrays",
    "title": "Find the Distance Value Between Two Arrays",
    "difficulty": "Easy",
    "description": "Given two integer arrays `arr1` and `arr2`, and the integer `d`, _return the distance value between the two arrays_. The distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.",
    "examples": [
      {
        "input": "arr1 = \\[4,5,8\\], arr2 = \\[10,9,1,8\\], d = 2",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "arr1 = \\[1,4,2,3\\], arr2 = \\[-4,-3,6,10,20,30\\], d = 3",
        "output": "2"
      },
      {
        "input": "arr1 = \\[2,1,100,3\\], arr2 = \\[-5,-2,10,-3,7\\], d = 6",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= arr1.length, arr2.length <= 500`",
      "`-1000 <= arr1[i], arr2[j] <= 1000`",
      "`0 <= d <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1386",
    "slug": "cinema-seat-allocation",
    "title": "Cinema Seat Allocation",
    "difficulty": "Medium",
    "description": "A cinema has `n` rows of seats, numbered from 1 to `n` and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above. Given the array `reservedSeats` containing the numbers of seats already reserved, for example, `reservedSeats[i] = [3,8]` means the seat located in row **3** and labelled with **8** is already reserved. _Return the maximum number of four-person groups you can assign on the cinema seats._ A four-person group occupies four adjacent seats **in one single row**. Seats across an aisle (such as \\[3,3\\] and \\[3,4\\]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.",
    "examples": [
      {
        "input": "n = 3, reservedSeats = \\[\\[1,2\\],\\[1,3\\],\\[1,8\\],\\[2,6\\],\\[3,1\\],\\[3,10\\]\\]",
        "output": "4",
        "explanation": "The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group."
      },
      {
        "input": "n = 2, reservedSeats = \\[\\[2,1\\],\\[1,8\\],\\[2,6\\]\\]",
        "output": "2"
      },
      {
        "input": "n = 4, reservedSeats = \\[\\[4,3\\],\\[1,4\\],\\[4,6\\],\\[1,7\\]\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= n <= 10^9`",
      "`1 <= reservedSeats.length <= min(10n, 10^4)`",
      "`reservedSeats[i].length == 2`",
      "`1 <= reservedSeats[i][0] <= n`",
      "`1 <= reservedSeats[i][1] <= 10`",
      "All `reservedSeats[i]` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1388",
    "slug": "pizza-with-3n-slices",
    "title": "Pizza With 3n Slices",
    "difficulty": "Hard",
    "description": "There is a pizza with `3n` slices of varying size, you and your friends will take slices of pizza as follows: *  You will pick **any** pizza slice. *  Your friend Alice will pick the next slice in the anti-clockwise direction of your pick. *  Your friend Bob will pick the next slice in the clockwise direction of your pick. *  Repeat until there are no more slices of pizzas. Given an integer array `slices` that represent the sizes of the pizza slices in a clockwise direction, return _the maximum possible sum of slice sizes that you can pick_.",
    "examples": [
      {
        "input": "slices = \\[1,2,3,4,5,6\\]",
        "output": "10",
        "explanation": "Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6."
      },
      {
        "input": "slices = \\[8,9,8,6,1,1\\]",
        "output": "16",
        "explanation": "Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8."
      }
    ],
    "constraints": [
      "`3  n == slices.length`",
      "`1 <= slices.length <= 500`",
      "`1 <= slices[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1390",
    "slug": "four-divisors",
    "title": "Four Divisors",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _the sum of divisors of the integers in that array that have exactly four divisors_. If there is no such integer in the array, return `0`.",
    "examples": [
      {
        "input": "nums = \\[21,4,7\\]",
        "output": "32",
        "explanation": ""
      },
      {
        "input": "nums = \\[21,21\\]",
        "output": "64"
      },
      {
        "input": "nums = \\[1,2,3,4,5\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1391",
    "slug": "check-if-there-is-a-valid-path-in-a-grid",
    "title": "Check if There is a Valid Path in a Grid",
    "difficulty": "Medium",
    "description": "You are given an `m x n` `grid`. Each cell of `grid` represents a street. The street of `grid[i][j]` can be: *  `1` which means a street connecting the left cell and the right cell. *  `2` which means a street connecting the upper cell and the lower cell. *  `3` which means a street connecting the left cell and the lower cell. *  `4` which means a street connecting the right cell and the lower cell. *  `5` which means a street connecting the left cell and the upper cell. *  `6` which means a street connecting the right cell and the upper cell. You will initially start at the street of the upper-left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)`. **The path should only follow the streets**. **Notice** that you are **not allowed** to change any street. Return `true` _if there is a valid path in the grid or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "grid = \\[\\[2,4,3\\],\\[6,5,2\\]\\]",
        "output": "true",
        "explanation": "As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1)."
      },
      {
        "input": "grid = \\[\\[1,2,1\\],\\[1,2,1\\]\\]",
        "output": "false",
        "explanation": "As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)"
      },
      {
        "input": "grid = \\[\\[1,1,2\\]\\]",
        "output": "false",
        "explanation": "You will get stuck at cell (0, 1) and you cannot reach cell (0, 2)."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 300`",
      "`1 <= grid[i][j] <= 6`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1394",
    "slug": "find-lucky-integer-in-an-array",
    "title": "Find Lucky Integer in an Array",
    "difficulty": "Easy",
    "description": "Given an array of integers `arr`, a **lucky integer** is an integer that has a frequency in the array equal to its value. Return _the largest **lucky integer** in the array_. If there is no **lucky integer** return `-1`.",
    "examples": [
      {
        "input": "arr = \\[2,2,3,4\\]",
        "output": "2",
        "explanation": "The only lucky number in the array is 2 because frequency\\[2\\] == 2."
      },
      {
        "input": "arr = \\[1,2,2,3,3,3\\]",
        "output": "3",
        "explanation": "1, 2 and 3 are all lucky numbers, return the largest of them."
      },
      {
        "input": "arr = \\[2,2,2,3,3\\]",
        "output": "-1",
        "explanation": "There are no lucky numbers in the array."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 500`",
      "`1 <= arr[i] <= 500`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1395",
    "slug": "count-number-of-teams",
    "title": "Count Number of Teams",
    "difficulty": "Medium",
    "description": "There are `n` soldiers standing in a line. Each soldier is assigned a **unique** `rating` value. You have to form a team of 3 soldiers amongst them under the following rules: *  Choose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`). *  A team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`). Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).",
    "examples": [
      {
        "input": "rating = \\[2,5,3,4,1\\]",
        "output": "3",
        "explanation": "We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1)."
      },
      {
        "input": "rating = \\[2,1,3\\]",
        "output": "0",
        "explanation": "We can't form any team given the conditions."
      },
      {
        "input": "rating = \\[1,2,3,4\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`n == rating.length`",
      "`3 <= n <= 1000`",
      "`1 <= rating[i] <= 105`",
      "All the integers in `rating` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1396",
    "slug": "design-underground-system",
    "title": "Design Underground System",
    "difficulty": "Medium",
    "description": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another. Implement the `UndergroundSystem` class: *  `void checkIn(int id, string stationName, int t)` *  A customer with a card ID equal to `id`, checks in at the station `stationName` at time `t`. *  A customer can only be checked into one place at a time. *  `void checkOut(int id, string stationName, int t)` *  A customer with a card ID equal to `id`, checks out from the station `stationName` at time `t`. *  `double getAverageTime(string startStation, string endStation)` *  Returns the average time it takes to travel from `startStation` to `endStation`. *  The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened **directly**, meaning a check in at `startStation` followed by a check out from `endStation`. *  The time it takes to travel from `startStation` to `endStation` **may be different** from the time it takes to travel from `endStation` to `startStation`. *  There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called. You may assume all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time `t1` then checks out at time `t2`, then `t1 < t2`. All events happen in chronological order.",
    "examples": [],
    "constraints": [
      "`1 <= id, t <= 106`",
      "`1 <= stationName.length, startStation.length, endStation.length <= 10`",
      "All strings consist of uppercase and lowercase English letters and digits.",
      "There will be at most `2  104` calls in total to `checkIn`, `checkOut`, and `getAverageTime`.",
      "Answers within `10-5` of the actual value will be accepted."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1397",
    "slug": "find-all-good-strings",
    "title": "Find All Good Strings",
    "difficulty": "Hard",
    "description": "Given the strings `s1` and `s2` of size `n` and the string `evil`, return _the number of **good** strings_. A **good** string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 2, s1 =  \"aa \", s2 =  \"da \", evil =  \"b \"",
        "output": "51",
        "explanation": "There are 25 good strings starting with 'a':  \"aa \", \"ac \", \"ad \",..., \"az \". Then there are 25 good strings starting with 'c':  \"ca \", \"cc \", \"cd \",..., \"cz \" and finally there is one good string starting with 'd':  \"da \"."
      },
      {
        "input": "n = 8, s1 =  \"leetcode \", s2 =  \"leetgoes \", evil =  \"leet \"",
        "output": "0",
        "explanation": "All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix  \"leet \", therefore, there is not any good string."
      },
      {
        "input": "n = 2, s1 =  \"gx \", s2 =  \"gz \", evil =  \"x \"",
        "output": "2"
      }
    ],
    "constraints": [
      "`s1.length == n`",
      "`s2.length == n`",
      "`s1 <= s2`",
      "`1 <= n <= 500`",
      "`1 <= evil.length <= 50`",
      "All strings consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1399",
    "slug": "count-largest-group",
    "title": "Count Largest Group",
    "difficulty": "Easy",
    "description": "You are given an integer `n`. Each number from `1` to `n` is grouped according to the sum of its digits. Return _the number of groups that have the largest size_.",
    "examples": [
      {
        "input": "n = 13",
        "output": "4",
        "explanation": "There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:"
      },
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are 2 groups \\[1\\], \\[2\\] of size 1."
      }
    ],
    "constraints": [
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1400",
    "slug": "construct-k-palindrome-strings",
    "title": "Construct K Palindrome Strings",
    "difficulty": "Medium",
    "description": "Given a string `s` and an integer `k`, return `true` _if you can use all the characters in_ `s` _to construct_ `k` _palindrome strings or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "s =  \"annabelle \", k = 2",
        "output": "true",
        "explanation": "You can construct two palindromes using all characters in s."
      },
      {
        "input": "s =  \"leetcode \", k = 3",
        "output": "false",
        "explanation": "It is impossible to construct 3 palindromes using all the characters of s."
      },
      {
        "input": "s =  \"true \", k = 4",
        "output": "true",
        "explanation": "The only possible solution is to put each character in a separate string."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters.",
      "`1 <= k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1401",
    "slug": "circle-and-rectangle-overlapping",
    "title": "Circle and Rectangle Overlapping",
    "difficulty": "Medium",
    "description": "You are given a circle represented as `(radius, xCenter, yCenter)` and an axis-aligned rectangle represented as `(x1, y1, x2, y2)`, where `(x1, y1)` are the coordinates of the bottom-left corner, and `(x2, y2)` are the coordinates of the top-right corner of the rectangle. Return `true` _if the circle and rectangle are overlapped otherwise return_ `false`. In other words, check if there is **any** point `(xi, yi)` that belongs to the circle and the rectangle at the same time.",
    "examples": [
      {
        "input": "radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1",
        "output": "true",
        "explanation": "Circle and rectangle share the point (1,0)."
      },
      {
        "input": "radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1",
        "output": "false"
      },
      {
        "input": "radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= radius <= 2000`",
      "`-104 <= xCenter, yCenter <= 104`",
      "`-104 <= x1 < x2 <= 104`",
      "`-104 <= y1 < y2 <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1402",
    "slug": "reducing-dishes",
    "title": "Reducing Dishes",
    "difficulty": "Hard",
    "description": "A chef has collected data on the `satisfaction` level of his `n` dishes. Chef can cook any dish in 1 unit of time. **Like-time coefficient** of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. `time[i] * satisfaction[i]`. Return _the maximum sum of **like-time coefficient** that the chef can obtain after dishes preparation_. Dishes can be prepared in **any** order and the chef can discard some dishes to get this maximum value.",
    "examples": [
      {
        "input": "satisfaction = \\[-1,-8,0,5,-9\\]",
        "output": "14",
        "explanation": "After Removing the second and last dish, the maximum total **like-time coefficient** will be equal to (-1\\*1 + 0\\*2 + 5\\*3 = 14)."
      },
      {
        "input": "satisfaction = \\[4,3,2\\]",
        "output": "20",
        "explanation": "Dishes can be prepared in any order, (2\\*1 + 3\\*2 + 4\\*3 = 20)"
      },
      {
        "input": "satisfaction = \\[-1,-4,-5\\]",
        "output": "0",
        "explanation": "People do not like the dishes. No dish is prepared."
      }
    ],
    "constraints": [
      "`n == satisfaction.length`",
      "`1 <= n <= 500`",
      "`-1000 <= satisfaction[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1403",
    "slug": "minimum-subsequence-in-non-increasing-order",
    "title": "Minimum Subsequence in Non-Increasing Order",
    "difficulty": "Easy",
    "description": "Given the array `nums`, obtain a subsequence of the array whose sum of elements is **strictly greater** than the sum of the non included elements in such subsequence. If there are multiple solutions, return the subsequence with **minimum size** and if there still exist multiple solutions, return the subsequence with the **maximum total sum** of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. Note that the solution with the given constraints is guaranteed to be **unique**. Also return the answer sorted in **non-increasing** order.",
    "examples": [
      {
        "input": "nums = \\[4,3,10,9,8\\]",
        "output": "\\[10,9\\]",
        "explanation": "The subsequences \\[10,9\\] and \\[10,8\\] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence \\[10,9\\] has the maximum total sum of its elements."
      },
      {
        "input": "nums = \\[4,4,7,6,7\\]",
        "output": "\\[7,7,6\\]",
        "explanation": "The subsequence \\[7,7\\] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence \\[7,6,7\\] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-decreasing order."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 500`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1404",
    "slug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
    "title": "Number of Steps to Reduce a Number in Binary Representation to One",
    "difficulty": "Medium",
    "description": "Given the binary representation of an integer as a string `s`, return _the number of steps to reduce it to_ `1` _under the following rules_: *  If the current number is even, you have to divide it by `2`. *  If the current number is odd, you have to add `1` to it. It is guaranteed that you can always reach one for all test cases.",
    "examples": [
      {
        "input": "s =  \"1101 \"",
        "output": "6",
        "explanation": "\"1101 \" corressponds to number 13 in their decimal representation."
      },
      {
        "input": "s =  \"10 \"",
        "output": "1",
        "explanation": "\"10 \" corressponds to number 2 in their decimal representation."
      },
      {
        "input": "s =  \"1 \"",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of characters '0' or '1'",
      "`s[0] == '1'`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1405",
    "slug": "longest-happy-string",
    "title": "Longest Happy String",
    "difficulty": "Medium",
    "description": "A string `s` is called **happy** if it satisfies the following conditions: *  `s` only contains the letters `'a'`, `'b'`, and `'c'`. *  `s` does not contain any of `\"aaa \"`, `\"bbb \"`, or `\"ccc \"` as a substring. *  `s` contains **at most** `a` occurrences of the letter `'a'`. *  `s` contains **at most** `b` occurrences of the letter `'b'`. *  `s` contains **at most** `c` occurrences of the letter `'c'`. Given three integers `a`, `b`, and `c`, return _the **longest possible happy** string_. If there are multiple longest happy strings, return _any of them_. If there is no such string, return _the empty string_ `\" \"`. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "a = 1, b = 1, c = 7",
        "output": "\"ccaccbcc \"",
        "explanation": "\"ccbccacc \" would also be a correct answer."
      },
      {
        "input": "a = 7, b = 1, c = 0",
        "output": "\"aabaa \"",
        "explanation": "It is the only correct answer in this case."
      }
    ],
    "constraints": [
      "`0 <= a, b, c <= 100`",
      "`a + b + c > 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1406",
    "slug": "stone-game-iii",
    "title": "Stone Game III",
    "difficulty": "Hard",
    "description": "Alice and Bob continue their games with piles of stones. There are several stones **arranged in a row**, and each stone has an associated value which is an integer given in the array `stoneValue`. Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take `1`, `2`, or `3` stones from the **first** remaining stones in the row. The score of each player is the sum of the values of the stones taken. The score of each player is `0` initially. The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken. Assume Alice and Bob **play optimally**. Return `\"Alice \"` _if Alice will win,_ `\"Bob \"` _if Bob will win, or_ `\"Tie \"` _if they will end the game with the same score_.",
    "examples": [
      {
        "input": "values = \\[1,2,3,7\\]",
        "output": "\"Bob \"",
        "explanation": "Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins."
      },
      {
        "input": "values = \\[1,2,3,-9\\]",
        "output": "\"Alice \"",
        "explanation": "Alice must choose all the three piles at the first move to win and leave Bob with negative score."
      },
      {
        "input": "values = \\[1,2,3,6\\]",
        "output": "\"Tie \"",
        "explanation": "Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose."
      }
    ],
    "constraints": [
      "`1 <= stoneValue.length <= 5  104`",
      "`-1000 <= stoneValue[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1408",
    "slug": "string-matching-in-an-array",
    "title": "String Matching in an Array",
    "difficulty": "Easy",
    "description": "Given an array of string `words`, return _all strings in_ `words` _that is a **substring** of another word_. You can return the answer in **any order**. A **substring** is a contiguous sequence of characters within a string",
    "examples": [
      {
        "input": "words = \\[ \"mass \", \"as \", \"hero \", \"superhero \"\\]",
        "output": "\\[ \"as \", \"hero \"\\]",
        "explanation": "\"as \" is substring of  \"mass \" and  \"hero \" is substring of  \"superhero \"."
      },
      {
        "input": "words = \\[ \"leetcode \", \"et \", \"code \"\\]",
        "output": "\\[ \"et \", \"code \"\\]",
        "explanation": "\"et \",  \"code \" are substring of  \"leetcode \"."
      },
      {
        "input": "words = \\[ \"blue \", \"green \", \"bu \"\\]",
        "output": "\\[\\]",
        "explanation": "No string of words is substring of another string."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 30`",
      "`words[i]` contains only lowercase English letters.",
      "All the strings of `words` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1409",
    "slug": "queries-on-a-permutation-with-key",
    "title": "Queries on a Permutation With Key",
    "difficulty": "Medium",
    "description": "Given the array `queries` of positive integers between `1` and `m`, you have to process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to the following rules: *  In the beginning, you have the permutation `P=[1,2,3,...,m]`. *  For the current `i`, find the position of `queries[i]` in the permutation `P` (**indexing from 0**) and then move this at the beginning of the permutation `P.` Notice that the position of `queries[i]` in `P` is the result for `queries[i]`. Return an array containing the result for the given `queries`.",
    "examples": [
      {
        "input": "queries = \\[3,1,2,1\\], m = 5",
        "output": "\\[2,1,2,1\\]",
        "explanation": "The queries are processed as follow:"
      },
      {
        "input": "queries = \\[4,1,2,2\\], m = 4",
        "output": "\\[3,1,2,0\\]"
      },
      {
        "input": "queries = \\[7,5,5,8,3\\], m = 8",
        "output": "\\[6,5,0,7,5\\]"
      }
    ],
    "constraints": [
      "`1 <= m <= 10^3`",
      "`1 <= queries.length <= m`",
      "`1 <= queries[i] <= m`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1410",
    "slug": "html-entity-parser",
    "title": "HTML Entity Parser",
    "difficulty": "Medium",
    "description": "**HTML entity parser** is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself. The special characters and their entities for HTML are: *  **Quotation Mark:** the entity is `&quot;` and symbol character is `\"`. *  **Single Quote Mark:** the entity is `&apos;` and symbol character is `'`. *  **Ampersand:** the entity is `&amp;` and symbol character is `&`. *  **Greater Than Sign:** the entity is `&gt;` and symbol character is `>`. *  **Less Than Sign:** the entity is `&lt;` and symbol character is `<`. *  **Slash:** the entity is `&frasl;` and symbol character is `/`. Given the input `text` string to the HTML parser, you have to implement the entity parser. Return _the text after replacing the entities by the special characters_.",
    "examples": [
      {
        "input": "text =  \"&amp; is an HTML entity but &ambassador; is not. \"",
        "output": "\"& is an HTML entity but &ambassador; is not. \"",
        "explanation": "The parser will replace the &amp; entity by &"
      },
      {
        "input": "text =  \"and I quote: &quot;...&quot; \"",
        "output": "\"and I quote: \\\\ \"...\\\\ \" \""
      }
    ],
    "constraints": [
      "`1 <= text.length <= 105`",
      "The string may contain any possible characters out of all the 256 ASCII characters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1411",
    "slug": "number-of-ways-to-paint-n-3-grid",
    "title": "Number of Ways to Paint N \u00d7 3 Grid",
    "difficulty": "Hard",
    "description": "You have a `grid` of size `n x 3` and you want to paint each cell of the grid with exactly one of the three colors: **Red**, **Yellow,** or **Green** while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color). Given `n` the number of rows of the grid, return _the number of ways_ you can paint this `grid`. As the answer may grow large, the answer **must be** computed modulo `109 + 7`.",
    "examples": [
      {
        "input": "n = 1",
        "output": "12",
        "explanation": "There are 12 possible way to paint the grid as shown."
      },
      {
        "input": "n = 5000",
        "output": "30228214"
      }
    ],
    "constraints": [
      "`n == grid.length`",
      "`1 <= n <= 5000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1413",
    "slug": "minimum-value-to-get-positive-step-by-step-sum",
    "title": "Minimum Value to Get Positive Step by Step Sum",
    "difficulty": "Easy",
    "description": "Given an array of integers `nums`, you start with an initial **positive** value _startValue__._ In each iteration, you calculate the step by step sum of _startValue_ plus elements in `nums` (from left to right). Return the minimum **positive** value of _startValue_ such that the step by step sum is never less than 1.",
    "examples": [
      {
        "input": "nums = \\[-3,2,-3,4,2\\]",
        "output": "5",
        "explanation": "If you choose startValue = 4, in the third iteration your step by step sum is less than 1."
      },
      {
        "input": "nums = \\[1,2\\]",
        "output": "1",
        "explanation": "Minimum start value should be positive."
      },
      {
        "input": "nums = \\[1,-2,-3\\]",
        "output": "5"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`-100 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1414",
    "slug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
    "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
    "difficulty": "Medium",
    "description": "Given an integer `k`, _return the minimum number of Fibonacci numbers whose sum is equal to_ `k`. The same Fibonacci number can be used multiple times. The Fibonacci numbers are defined as: *  `F1 = 1` *  `F2 = 1` *  `Fn = Fn-1 + Fn-2` for `n > 2.` It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.",
    "examples": [
      {
        "input": "k = 7",
        "output": "2",
        "explanation": "The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ..."
      },
      {
        "input": "k = 10",
        "output": "2",
        "explanation": "For k = 10 we can use 2 + 8 = 10."
      },
      {
        "input": "k = 19",
        "output": "3",
        "explanation": "For k = 19 we can use 1 + 5 + 13 = 19."
      }
    ],
    "constraints": [
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1415",
    "slug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
    "title": "The k-th Lexicographical String of All Happy Strings of Length n",
    "difficulty": "Medium",
    "description": "A **happy string** is a string that: *  consists only of letters of the set `['a', 'b', 'c']`. *  `s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed). For example, strings **\"abc \", \"ac \", \"b \"** and **\"abcbabcbcb \"** are all happy strings and strings **\"aa \", \"baa \"** and **\"ababbc \"** are not happy strings. Given two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order. Return _the kth string_ of this list or return an **empty string** if there are less than `k` happy strings of length `n`.",
    "examples": [
      {
        "input": "n = 1, k = 3",
        "output": "\"c \"",
        "explanation": "The list \\[ \"a \",  \"b \",  \"c \"\\] contains all happy strings of length 1. The third string is  \"c \"."
      },
      {
        "input": "n = 1, k = 4",
        "output": "\" \"",
        "explanation": "There are only 3 happy strings of length 1."
      },
      {
        "input": "n = 3, k = 9",
        "output": "\"cab \"",
        "explanation": "There are 12 different happy string of length 3 \\[ \"aba \",  \"abc \",  \"aca \",  \"acb \",  \"bab \",  \"bac \",  \"bca \",  \"bcb \",  \"cab \",  \"cac \",  \"cba \",  \"cbc \"\\]. You will find the 9th string =  \"cab \""
      }
    ],
    "constraints": [
      "`1 <= n <= 10`",
      "`1 <= k <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1416",
    "slug": "restore-the-array",
    "title": "Restore The Array",
    "difficulty": "Hard",
    "description": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits `s` and all we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array. Given the string `s` and the integer `k`, return _the number of the possible arrays that can be printed as_ `s` _using the mentioned program_. Since the answer may be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "s =  \"1000 \", k = 10000",
        "output": "1",
        "explanation": "The only possible array is \\[1000\\]"
      },
      {
        "input": "s =  \"1000 \", k = 10",
        "output": "0",
        "explanation": "There cannot be an array that was printed this way and has all integer >= 1 and <= 10."
      },
      {
        "input": "s =  \"1317 \", k = 2000",
        "output": "8",
        "explanation": "Possible arrays are \\[1317\\],\\[131,7\\],\\[13,17\\],\\[1,317\\],\\[13,1,7\\],\\[1,31,7\\],\\[1,3,17\\],\\[1,3,1,7\\]"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of only digits and does not contain leading zeros.",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1417",
    "slug": "reformat-the-string",
    "title": "Reformat The String",
    "difficulty": "Easy",
    "description": "You are given an alphanumeric string `s`. (**Alphanumeric string** is a string consisting of lowercase English letters and digits). You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type. Return _the reformatted string_ or return **an empty string** if it is impossible to reformat the string.",
    "examples": [
      {
        "input": "s =  \"a0b1c2 \"",
        "output": "\"0a1b2c \"",
        "explanation": "No two adjacent characters have the same type in  \"0a1b2c \".  \"a0b1c2 \",  \"0a1b2c \",  \"0c2a1b \" are also valid permutations."
      },
      {
        "input": "s =  \"leetcode \"",
        "output": "\" \"",
        "explanation": "\"leetcode \" has only characters so we cannot separate them by digits."
      },
      {
        "input": "s =  \"1229857369 \"",
        "output": "\" \"",
        "explanation": "\"1229857369 \" has only digits so we cannot separate them by characters."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of only lowercase English letters and/or digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1418",
    "slug": "display-table-of-food-orders-in-a-restaurant",
    "title": "Display Table of Food Orders in a Restaurant",
    "difficulty": "Medium",
    "description": "Given the array `orders`, which represents the orders that customers have done in a restaurant. More specifically `orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is the name of the customer, `tableNumberi` is the table customer sit at, and `foodItemi` is the item customer orders. _Return the restaurant's \"**display table**\"_. The \"**display table**\" is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \"Table\", followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.",
    "examples": [
      {
        "input": "orders = \\[\\[ \"David \", \"3 \", \"Ceviche \"\\],\\[ \"Corina \", \"10 \", \"Beef Burrito \"\\],\\[ \"David \", \"3 \", \"Fried Chicken \"\\],\\[ \"Carla \", \"5 \", \"Water \"\\],\\[ \"Carla \", \"5 \", \"Ceviche \"\\],\\[ \"Rous \", \"3 \", \"Ceviche \"\\]\\]",
        "output": "\\[\\[ \"Table \", \"Beef Burrito \", \"Ceviche \", \"Fried Chicken \", \"Water \"\\],\\[ \"3 \", \"0 \", \"2 \", \"1 \", \"0 \"\\],\\[ \"5 \", \"0 \", \"1 \", \"0 \", \"1 \"\\],\\[ \"10 \", \"1 \", \"0 \", \"0 \", \"0 \"\\]\\]",
        "explanation": ""
      },
      {
        "input": "orders = \\[\\[ \"James \", \"12 \", \"Fried Chicken \"\\],\\[ \"Ratesh \", \"12 \", \"Fried Chicken \"\\],\\[ \"Amadeus \", \"12 \", \"Fried Chicken \"\\],\\[ \"Adam \", \"1 \", \"Canadian Waffles \"\\],\\[ \"Brianna \", \"1 \", \"Canadian Waffles \"\\]\\]",
        "output": "\\[\\[ \"Table \", \"Canadian Waffles \", \"Fried Chicken \"\\],\\[ \"1 \", \"2 \", \"0 \"\\],\\[ \"12 \", \"0 \", \"3 \"\\]\\]",
        "explanation": ""
      },
      {
        "input": "orders = \\[\\[ \"Laura \", \"2 \", \"Bean Burrito \"\\],\\[ \"Jhon \", \"2 \", \"Beef Burrito \"\\],\\[ \"Melissa \", \"2 \", \"Soda \"\\]\\]",
        "output": "\\[\\[ \"Table \", \"Bean Burrito \", \"Beef Burrito \", \"Soda \"\\],\\[ \"2 \", \"1 \", \"1 \", \"1 \"\\]\\]"
      }
    ],
    "constraints": [
      "`1 <= orders.length <= 5  10^4`",
      "`orders[i].length == 3`",
      "`1 <= customerNamei.length, foodItemi.length <= 20`",
      "`customerNamei` and `foodItemi` consist of lowercase and uppercase English letters and the space character.",
      "`tableNumberi` is a valid integer between `1` and `500`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1419",
    "slug": "minimum-number-of-frogs-croaking",
    "title": "Minimum Number of Frogs Croaking",
    "difficulty": "Medium",
    "description": "You are given the string `croakOfFrogs`, which represents a combination of the string `\"croak \"` from different frogs, that is, multiple frogs can croak at the same time, so multiple `\"croak \"` are mixed. _Return the minimum number of_ different _frogs to finish all the croaks in the given string._ A valid `\"croak \"` means a frog is printing five letters `'c'`, `'r'`, `'o'`, `'a'`, and `'k'` **sequentially**. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid `\"croak \"` return `-1`.",
    "examples": [
      {
        "input": "croakOfFrogs =  \"croakcroak \"",
        "output": "1",
        "explanation": "One frog yelling  \"croak **\"** twice."
      },
      {
        "input": "croakOfFrogs =  \"crcoakroak \"",
        "output": "2",
        "explanation": "The minimum number of frogs is two."
      },
      {
        "input": "croakOfFrogs =  \"croakcrook \"",
        "output": "-1",
        "explanation": "The given string is an invalid combination of  \"croak **\"** from different frogs."
      }
    ],
    "constraints": [
      "`1 <= croakOfFrogs.length <= 105`",
      "`croakOfFrogs` is either `'c'`, `'r'`, `'o'`, `'a'`, or `'k'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1420",
    "slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
    "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "difficulty": "Hard",
    "description": "You are given three integers `n`, `m` and `k`. Consider the following algorithm to find the maximum element of an array of positive integers: You should build the array arr which has the following properties: *  `arr` has exactly `n` integers. *  `1 <= arr[i] <= m` where `(0 <= i < n)`. *  After applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`. Return _the number of ways_ to build the array `arr` under the mentioned conditions. As the answer may grow large, the answer **must be** computed modulo `109 + 7`.",
    "examples": [
      {
        "input": "n = 2, m = 3, k = 1",
        "output": "6",
        "explanation": "The possible arrays are \\[1, 1\\], \\[2, 1\\], \\[2, 2\\], \\[3, 1\\], \\[3, 2\\] \\[3, 3\\]"
      },
      {
        "input": "n = 5, m = 2, k = 3",
        "output": "0",
        "explanation": "There are no possible arrays that satisify the mentioned conditions."
      },
      {
        "input": "n = 9, m = 1, k = 1",
        "output": "1",
        "explanation": "The only possible array is \\[1, 1, 1, 1, 1, 1, 1, 1, 1\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 50`",
      "`1 <= m <= 100`",
      "`0 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1422",
    "slug": "maximum-score-after-splitting-a-string",
    "title": "Maximum Score After Splitting a String",
    "difficulty": "Easy",
    "description": "Given a string `s` of zeros and ones, _return the maximum score after splitting the string into two **non-empty** substrings_ (i.e. **left** substring and **right** substring). The score after splitting a string is the number of **zeros** in the **left** substring plus the number of **ones** in the **right** substring.",
    "examples": [
      {
        "input": "s =  \"011101 \"",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "s =  \"00111 \"",
        "output": "5",
        "explanation": "When left =  \"00 \" and right =  \"111 \", we get the maximum score = 2 + 3 = 5"
      },
      {
        "input": "s =  \"1111 \"",
        "output": "3"
      }
    ],
    "constraints": [
      "`2 <= s.length <= 500`",
      "The string `s` consists of characters `'0'` and `'1'` only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1423",
    "slug": "maximum-points-you-can-obtain-from-cards",
    "title": "Maximum Points You Can Obtain from Cards",
    "difficulty": "Medium",
    "description": "There are several cards **arranged in a row**, and each card has an associated number of points. The points are given in the integer array `cardPoints`. In one step, you can take one card from the beginning or from the end of the row. You have to take exactly `k` cards. Your score is the sum of the points of the cards you have taken. Given the integer array `cardPoints` and the integer `k`, return the _maximum score_ you can obtain.",
    "examples": [
      {
        "input": "cardPoints = \\[1,2,3,4,5,6,1\\], k = 3",
        "output": "12",
        "explanation": "After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12."
      },
      {
        "input": "cardPoints = \\[2,2,2\\], k = 2",
        "output": "4",
        "explanation": "Regardless of which two cards you take, your score will always be 4."
      },
      {
        "input": "cardPoints = \\[9,7,7,9,7,7,9\\], k = 7",
        "output": "55",
        "explanation": "You have to take all the cards. Your score is the sum of points of all cards."
      }
    ],
    "constraints": [
      "`1 <= cardPoints.length <= 105`",
      "`1 <= cardPoints[i] <= 104`",
      "`1 <= k <= cardPoints.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1424",
    "slug": "diagonal-traverse-ii",
    "title": "Diagonal Traverse II",
    "difficulty": "Medium",
    "description": "Given a 2D integer array `nums`, return _all elements of_ `nums` _in diagonal order as shown in the below images_.",
    "examples": [
      {
        "input": "nums = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]",
        "output": "\\[1,4,2,7,5,3,8,6,9\\]"
      },
      {
        "input": "nums = \\[\\[1,2,3,4,5\\],\\[6,7\\],\\[8\\],\\[9,10,11\\],\\[12,13,14,15,16\\]\\]",
        "output": "\\[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i].length <= 105`",
      "`1 <= sum(nums[i].length) <= 105`",
      "`1 <= nums[i][j] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1425",
    "slug": "constrained-subsequence-sum",
    "title": "Constrained Subsequence Sum",
    "difficulty": "Hard",
    "description": "Given an integer array `nums` and an integer `k`, return the maximum sum of a **non-empty** subsequence of that array such that for every two **consecutive** integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied. A _subsequence_ of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.",
    "examples": [
      {
        "input": "nums = \\[10,2,-10,5,20\\], k = 2",
        "output": "37",
        "explanation": "The subsequence is \\[10, 2, 5, 20\\]."
      },
      {
        "input": "nums = \\[-1,-2,-3\\], k = 1",
        "output": "-1",
        "explanation": "The subsequence must be non-empty, so we choose the largest number."
      },
      {
        "input": "nums = \\[10,-2,-10,-5,20\\], k = 2",
        "output": "23",
        "explanation": "The subsequence is \\[10, -2, -5, 20\\]."
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 105`",
      "`-104 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1426",
    "slug": "counting-elements",
    "title": "Counting Elements",
    "difficulty": "Easy",
    "description": "Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.",
    "examples": [
      {
        "input": "arr = \\[1,2,3\\]",
        "output": "2",
        "explanation": "1 and 2 are counted cause 2 and 3 are in arr."
      },
      {
        "input": "arr = \\[1,1,3,3,5,5,7,7\\]",
        "output": "0",
        "explanation": "No numbers are counted, cause there is no 2, 4, 6, or 8 in arr."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 1000`",
      "`0 <= arr[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1427",
    "slug": "perform-string-shifts",
    "title": "Perform String Shifts",
    "difficulty": "Easy",
    "description": "You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [directioni, amounti]`: *  `directioni` can be `0` (for left shift) or `1` (for right shift). *  `amounti` is the amount by which string `s` is to be shifted. *  A left shift by 1 means remove the first character of `s` and append it to the end. *  Similarly, a right shift by 1 means remove the last character of `s` and add it to the beginning. Return the final string after all operations.",
    "examples": [
      {
        "input": "s =  \"abc \", shift = \\[\\[0,1\\],\\[1,2\\]\\]",
        "output": "\"cab \"",
        "explanation": ""
      },
      {
        "input": "s =  \"abcdefg \", shift = \\[\\[1,1\\],\\[1,1\\],\\[0,2\\],\\[1,3\\]\\]",
        "output": "\"efgabcd \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` only contains lower case English letters.",
      "`1 <= shift.length <= 100`",
      "`shift[i].length == 2`",
      "`directioni` is either `0` or `1`.",
      "`0 <= amounti <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1428",
    "slug": "leftmost-column-with-at-least-a-one",
    "title": "Leftmost Column with at Least a One",
    "difficulty": "Medium",
    "description": "A **row-sorted binary matrix** means that all elements are `0` or `1` and each row of the matrix is sorted in non-decreasing order. Given a **row-sorted binary matrix** `binaryMatrix`, return _the index (0-indexed) of the **leftmost column** with a 1 in it_. If such an index does not exist, return `-1`. **You can't access the Binary Matrix directly.** You may only access the matrix using a `BinaryMatrix` interface: *  `BinaryMatrix.get(row, col)` returns the element of the matrix at index `(row, col)` (0-indexed). *  `BinaryMatrix.dimensions()` returns the dimensions of the matrix as a list of 2 elements `[rows, cols]`, which means the matrix is `rows x cols`. Submissions making more than `1000` calls to `BinaryMatrix.get` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification. For custom testing purposes, the input will be the entire binary matrix `mat`. You will not have access to the binary matrix directly.",
    "examples": [
      {
        "input": "mat = \\[\\[0,0\\],\\[1,1\\]\\]",
        "output": "0"
      },
      {
        "input": "mat = \\[\\[0,0\\],\\[0,1\\]\\]",
        "output": "1"
      },
      {
        "input": "mat = \\[\\[0,0\\],\\[0,0\\]\\]",
        "output": "-1"
      }
    ],
    "constraints": [
      "`rows == mat.length`",
      "`cols == mat[i].length`",
      "`1 <= rows, cols <= 100`",
      "`mat[i][j]` is either `0` or `1`.",
      "`mat[i]` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1429",
    "slug": "first-unique-number",
    "title": "First Unique Number",
    "difficulty": "Medium",
    "description": "You have a queue of integers, you need to retrieve the first unique integer in the queue. Implement the `FirstUnique` class: *  `FirstUnique(int[] nums)` Initializes the object with the numbers in the queue. *  `int showFirstUnique()` returns the value of **the first unique** integer of the queue, and returns **\\-1** if there is no such integer. *  `void add(int value)` insert value to the queue.",
    "examples": [
      {
        "input": "",
        "output": "",
        "explanation": ""
      },
      {
        "input": "",
        "output": "",
        "explanation": ""
      },
      {
        "input": "",
        "output": "",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 10^5`",
      "`1 <= nums[i] <= 10^8`",
      "`1 <= value <= 10^8`",
      "At most `50000` calls will be made to `showFirstUnique` and `add`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1430",
    "slug": "check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree",
    "title": "Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
    "difficulty": "Medium",
    "description": "Given a binary tree where each path going from the root to any leaf form a **valid sequence**, check if a given string is a **valid sequence** in such binary tree. We get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a **sequence** in the given binary tree.",
    "examples": [
      {
        "input": "root = \\[0,1,0,0,1,0,null,null,1,0,0\\], arr = \\[0,1,0,1\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "root = \\[0,1,0,0,1,0,null,null,1,0,0\\], arr = \\[0,0,1\\]",
        "output": "false",
        "explanation": "The path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence."
      },
      {
        "input": "root = \\[0,1,0,0,1,0,null,null,1,0,0\\], arr = \\[0,1,1\\]",
        "output": "false",
        "explanation": "The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 5000`",
      "`0 <= arr[i] <= 9`",
      "Each node's value is between \\[0 - 9\\]."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1431",
    "slug": "kids-with-the-greatest-number-of-candies",
    "title": "Kids With the Greatest Number of Candies",
    "difficulty": "Easy",
    "description": "There are `n` kids with candies. You are given an integer array `candies`, where each `candies[i]` represents the number of candies the `ith` kid has, and an integer `extraCandies`, denoting the number of extra candies that you have. Return _a boolean array_ `result` _of length_ `n`_, where_ `result[i]` _is_ `true` _if, after giving the_ `ith` _kid all the_ `extraCandies`_, they will have the **greatest** number of candies among all the kids__, or_ `false` _otherwise_. Note that **multiple** kids can have the **greatest** number of candies.",
    "examples": [
      {
        "input": "candies = \\[2,3,5,1,3\\], extraCandies = 3",
        "output": "\\[true,true,true,false,true\\]",
        "explanation": "If you give all extraCandies to:"
      },
      {
        "input": "candies = \\[4,2,1,1,2\\], extraCandies = 1",
        "output": "\\[true,false,false,false,false\\]",
        "explanation": "There is only 1 extra candy."
      },
      {
        "input": "candies = \\[12,1,12\\], extraCandies = 10",
        "output": "\\[true,false,true\\]"
      }
    ],
    "constraints": [
      "`n == candies.length`",
      "`2 <= n <= 100`",
      "`1 <= candies[i] <= 100`",
      "`1 <= extraCandies <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1432",
    "slug": "max-difference-you-can-get-from-changing-an-integer",
    "title": "Max Difference You Can Get From Changing an Integer",
    "difficulty": "Medium",
    "description": "You are given an integer `num`. You will apply the following steps exactly **two** times: *  Pick a digit `x (0 <= x <= 9)`. *  Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`. *  Replace all the occurrences of `x` in the decimal representation of `num` by `y`. *  The new integer **cannot** have any leading zeros, also the new integer **cannot** be 0. Let `a` and `b` be the results of applying the operations to `num` the first and second times, respectively. Return _the max difference_ between `a` and `b`.",
    "examples": [
      {
        "input": "num = 555",
        "output": "888",
        "explanation": "The first time pick x = 5 and y = 9 and store the new integer in a."
      },
      {
        "input": "num = 9",
        "output": "8",
        "explanation": "The first time pick x = 9 and y = 9 and store the new integer in a."
      }
    ],
    "constraints": [
      "`1 <= num <= 10`8"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1433",
    "slug": "check-if-a-string-can-break-another-string",
    "title": "Check If a String Can Break Another String",
    "difficulty": "Medium",
    "description": "Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words `s2` can break `s1` or vice-versa. A string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.",
    "examples": [
      {
        "input": "s1 =  \"abc \", s2 =  \"xya \"",
        "output": "true",
        "explanation": "\"ayx \" is a permutation of s2= \"xya \" which can break to string  \"abc \" which is a permutation of s1= \"abc \"."
      },
      {
        "input": "s1 =  \"abe \", s2 =  \"acd \"",
        "output": "false",
        "explanation": "All permutations for s1= \"abe \" are:  \"abe \",  \"aeb \",  \"bae \",  \"bea \",  \"eab \" and  \"eba \" and all permutation for s2= \"acd \" are:  \"acd \",  \"adc \",  \"cad \",  \"cda \",  \"dac \" and  \"dca \". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa."
      },
      {
        "input": "s1 =  \"leetcodee \", s2 =  \"interview \"",
        "output": "true"
      }
    ],
    "constraints": [
      "`s1.length == n`",
      "`s2.length == n`",
      "`1 <= n <= 10^5`",
      "All strings consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1434",
    "slug": "number-of-ways-to-wear-different-hats-to-each-other",
    "title": "Number of Ways to Wear Different Hats to Each Other",
    "difficulty": "Hard",
    "description": "There are `n` people and `40` types of hats labeled from `1` to `40`. Given a 2D integer array `hats`, where `hats[i]` is a list of all hats preferred by the `ith` person. Return _the number of ways that the `n` people wear different hats to each other_. Since the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      {
        "input": "hats = \\[\\[3,4\\],\\[4,5\\],\\[5\\]\\]",
        "output": "1",
        "explanation": "There is only one way to choose hats given the conditions."
      },
      {
        "input": "hats = \\[\\[3,5,1\\],\\[3,5\\]\\]",
        "output": "4",
        "explanation": "There are 4 ways to choose hats:"
      },
      {
        "input": "hats = \\[\\[1,2,3,4\\],\\[1,2,3,4\\],\\[1,2,3,4\\],\\[1,2,3,4\\]\\]",
        "output": "24",
        "explanation": "Each person can choose hats labeled from 1 to 4."
      }
    ],
    "constraints": [
      "`n == hats.length`",
      "`1 <= n <= 10`",
      "`1 <= hats[i].length <= 40`",
      "`1 <= hats[i][j] <= 40`",
      "`hats[i]` contains a list of unique integers."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1436",
    "slug": "destination-city",
    "title": "Destination City",
    "difficulty": "Easy",
    "description": "You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. _Return the destination city, that is, the city without any path outgoing to another city._ It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.",
    "examples": [
      {
        "input": "paths = \\[\\[ \"London \", \"New York \"\\],\\[ \"New York \", \"Lima \"\\],\\[ \"Lima \", \"Sao Paulo \"\\]\\]",
        "output": "\"Sao Paulo \"",
        "explanation": "Starting at  \"London \" city you will reach  \"Sao Paulo \" city which is the destination city. Your trip consist of:  \"London \" ->  \"New York \" ->  \"Lima \" ->  \"Sao Paulo \"."
      },
      {
        "input": "paths = \\[\\[ \"B \", \"C \"\\],\\[ \"D \", \"B \"\\],\\[ \"C \", \"A \"\\]\\]",
        "output": "\"A \"",
        "explanation": "All possible trips are:"
      },
      {
        "input": "paths = \\[\\[ \"A \", \"Z \"\\]\\]",
        "output": "\"Z \""
      }
    ],
    "constraints": [
      "`1 <= paths.length <= 100`",
      "`paths[i].length == 2`",
      "`1 <= cityAi.length, cityBi.length <= 10`",
      "`cityAi != cityBi`",
      "All strings consist of lowercase and uppercase English letters and the space character."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1437",
    "slug": "check-if-all-1s-are-at-least-length-k-places-away",
    "title": "Check If All 1's Are at Least Length K Places Away",
    "difficulty": "Easy",
    "description": "Given an binary array `nums` and an integer `k`, return `true` _if all_ `1`_'s are at least_ `k` _places away from each other, otherwise return_ `false`.",
    "examples": [
      {
        "input": "nums = \\[1,0,0,0,1,0,0,1\\], k = 2",
        "output": "true",
        "explanation": "Each of the 1s are at least 2 places away from each other."
      },
      {
        "input": "nums = \\[1,0,0,1,0,1\\], k = 2",
        "output": "false",
        "explanation": "The second 1 and third 1 are only one apart from each other."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= k <= nums.length`",
      "`nums[i]` is `0` or `1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1438",
    "slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
    "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums` and an integer `limit`, return the size of the longest **non-empty** subarray such that the absolute difference between any two elements of this subarray is less than or equal to `limit`_._",
    "examples": [
      {
        "input": "nums = \\[8,2,4,7\\], limit = 4",
        "output": "2",
        "explanation": "All subarrays are:"
      },
      {
        "input": "nums = \\[10,1,2,4,7,2\\], limit = 5",
        "output": "4",
        "explanation": "The subarray \\[2,4,7,2\\] is the longest since the maximum absolute diff is |2-7| = 5 <= 5."
      },
      {
        "input": "nums = \\[4,2,2,2,4,4,2,2\\], limit = 0",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`",
      "`0 <= limit <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1439",
    "slug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
    "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
    "difficulty": "Hard",
    "description": "You are given an `m x n` matrix `mat` that has its rows sorted in non-decreasing order and an integer `k`. You are allowed to choose **exactly one element** from each row to form an array. Return _the_ `kth` _smallest array sum among all possible arrays_.",
    "examples": [
      {
        "input": "mat = \\[\\[1,3,11\\],\\[2,4,6\\]\\], k = 5",
        "output": "7",
        "explanation": "Choosing one element from each row, the first k smallest sum are:"
      },
      {
        "input": "mat = \\[\\[1,3,11\\],\\[2,4,6\\]\\], k = 9",
        "output": "17"
      },
      {
        "input": "mat = \\[\\[1,10,10\\],\\[1,4,5\\],\\[2,3,6\\]\\], k = 7",
        "output": "9",
        "explanation": "Choosing one element from each row, the first k smallest sum are:"
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat.length[i]`",
      "`1 <= m, n <= 40`",
      "`1 <= mat[i][j] <= 5000`",
      "`1 <= k <= min(200, nm)`",
      "`mat[i]` is a non-decreasing array."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1441",
    "slug": "build-an-array-with-stack-operations",
    "title": "Build an Array With Stack Operations",
    "difficulty": "Medium",
    "description": "You are given an integer array `target` and an integer `n`. You have an empty stack with the two following operations: *  **`\"Push \"`**: pushes an integer to the top of the stack. *  **`\"Pop \"`**: removes the integer on the top of the stack. You also have a stream of the integers in the range `[1, n]`. Use the two stack operations to make the numbers in the stack (from the bottom to the top) equal to `target`. You should follow the following rules: *  If the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack. *  If the stack is not empty, pop the integer at the top of the stack. *  If, at any moment, the elements in the stack (from the bottom to the top) are equal to `target`, do not read new integers from the stream and do not do more operations on the stack. Return _the stack operations needed to build_ `target` following the mentioned rules. If there are multiple valid answers, return **any of them**.",
    "examples": [
      {
        "input": "target = \\[1,3\\], n = 3",
        "output": "\\[ \"Push \", \"Push \", \"Pop \", \"Push \"\\]",
        "explanation": "Initially the stack s is empty. The last element is the top of the stack."
      },
      {
        "input": "target = \\[1,2,3\\], n = 3",
        "output": "\\[ \"Push \", \"Push \", \"Push \"\\]",
        "explanation": "Initially the stack s is empty. The last element is the top of the stack."
      },
      {
        "input": "target = \\[1,2\\], n = 4",
        "output": "\\[ \"Push \", \"Push \"\\]",
        "explanation": "Initially the stack s is empty. The last element is the top of the stack."
      }
    ],
    "constraints": [
      "`1 <= target.length <= 100`",
      "`1 <= n <= 100`",
      "`1 <= target[i] <= n`",
      "`target` is strictly increasing."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1442",
    "slug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
    "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
    "difficulty": "Medium",
    "description": "Given an array of integers `arr`. We want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`. Let's define `a` and `b` as follows: *  `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]` *  `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]` Note that **^** denotes the **bitwise-xor** operation. Return _the number of triplets_ (`i`, `j` and `k`) Where `a == b`.",
    "examples": [
      {
        "input": "arr = \\[2,3,1,6,7\\]",
        "output": "4",
        "explanation": "The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)"
      },
      {
        "input": "arr = \\[1,1,1,1,1\\]",
        "output": "10"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 300`",
      "`1 <= arr[i] <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1443",
    "slug": "minimum-time-to-collect-all-apples-in-a-tree",
    "title": "Minimum Time to Collect All Apples in a Tree",
    "difficulty": "Medium",
    "description": "Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. _Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at **vertex 0** and coming back to this vertex._ The edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.",
    "examples": [
      {
        "input": "n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,4\\],\\[1,5\\],\\[2,3\\],\\[2,6\\]\\], hasApple = \\[false,false,true,false,true,true,false\\]",
        "output": "8",
        "explanation": "The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."
      },
      {
        "input": "n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,4\\],\\[1,5\\],\\[2,3\\],\\[2,6\\]\\], hasApple = \\[false,false,true,false,false,true,false\\]",
        "output": "6",
        "explanation": "The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."
      },
      {
        "input": "n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,4\\],\\[1,5\\],\\[2,3\\],\\[2,6\\]\\], hasApple = \\[false,false,false,false,false,false,false\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= ai < bi <= n - 1`",
      "`hasApple.length == n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1444",
    "slug": "number-of-ways-of-cutting-a-pizza",
    "title": "Number of Ways of Cutting a Pizza",
    "difficulty": "Hard",
    "description": "Given a rectangular pizza represented as a `rows x cols` matrix containing the following characters: `'A'` (an apple) and `'.'` (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts. For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person. _Return the number of ways of cutting the pizza such that each piece contains **at least** one apple._ Since the answer can be a huge number, return this modulo 10^9 + 7.",
    "examples": [
      {
        "input": "pizza = \\[ \"A.. \", \"AAA \", \"... \"\\], k = 3",
        "output": "3",
        "explanation": "The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple."
      },
      {
        "input": "pizza = \\[ \"A.. \", \"AA. \", \"... \"\\], k = 3",
        "output": "1"
      },
      {
        "input": "pizza = \\[ \"A.. \", \"A.. \", \"... \"\\], k = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= rows, cols <= 50`",
      "`rows == pizza.length`",
      "`cols == pizza[i].length`",
      "`1 <= k <= 10`",
      "`pizza` consists of characters `'A'` and `'.'` only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1446",
    "slug": "consecutive-characters",
    "title": "Consecutive Characters",
    "difficulty": "Easy",
    "description": "The **power** of the string is the maximum length of a non-empty substring that contains only one unique character. Given a string `s`, return _the **power** of_ `s`.",
    "examples": [
      {
        "input": "s =  \"leetcode \"",
        "output": "2",
        "explanation": "The substring  \"ee \" is of length 2 with the character 'e' only."
      },
      {
        "input": "s =  \"abbcccddddeeeeedcba \"",
        "output": "5",
        "explanation": "The substring  \"eeeee \" is of length 5 with the character 'e' only."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1447",
    "slug": "simplified-fractions",
    "title": "Simplified Fractions",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _a list of all **simplified** fractions between_ `0` _and_ `1` _(exclusive) such that the denominator is less-than-or-equal-to_ `n`. You can return the answer in **any order**.",
    "examples": [
      {
        "input": "n = 2",
        "output": "\\[ \"1/2 \"\\]",
        "explanation": "\"1/2 \" is the only unique fraction with a denominator less-than-or-equal-to 2."
      },
      {
        "input": "n = 3",
        "output": "\\[ \"1/2 \", \"1/3 \", \"2/3 \"\\]"
      },
      {
        "input": "n = 4",
        "output": "\\[ \"1/2 \", \"1/3 \", \"1/4 \", \"2/3 \", \"3/4 \"\\]",
        "explanation": "\"2/4 \" is not a simplified fraction because it can be simplified to  \"1/2 \"."
      }
    ],
    "constraints": [
      "`1 <= n <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1448",
    "slug": "count-good-nodes-in-binary-tree",
    "title": "Count Good Nodes in Binary Tree",
    "difficulty": "Medium",
    "description": "Given a binary tree `root`, a node _X_ in the tree is named **good** if in the path from root to _X_ there are no nodes with a value _greater than_ X. Return the number of **good** nodes in the binary tree.",
    "examples": [
      {
        "input": "root = \\[3,1,4,3,null,1,5\\]",
        "output": "4",
        "explanation": "Nodes in blue are **good**."
      },
      {
        "input": "root = \\[3,3,null,4,2\\]",
        "output": "3",
        "explanation": "Node 2 -> (3, 3, 2) is not good, because  \"3 \" is higher than it."
      },
      {
        "input": "root = \\[1\\]",
        "output": "1",
        "explanation": "Root is considered as **good**."
      }
    ],
    "constraints": [
      "The number of nodes in the binary tree is in the range `[1, 10^5]`.",
      "Each node's value is between `[-10^4, 10^4]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1449",
    "slug": "form-largest-integer-with-digits-that-add-up-to-target",
    "title": "Form Largest Integer With Digits That Add up to Target",
    "difficulty": "Hard",
    "description": "Given an array of integers `cost` and an integer `target`, return _the **maximum** integer you can paint under the following rules_: *  The cost of painting a digit `(i + 1)` is given by `cost[i]` (**0-indexed**). *  The total cost used must be equal to `target`. *  The integer does not have `0` digits. Since the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return `\"0 \"`.",
    "examples": [
      {
        "input": "cost = \\[4,3,2,5,6,7,2,5,5\\], target = 9",
        "output": "\"7772 \"",
        "explanation": "The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost( \"7772 \") = 2\\*3+ 3\\*1 = 9. You could also paint  \"977 \", but  \"7772 \" is the largest number."
      },
      {
        "input": "cost = \\[7,6,5,5,5,6,8,7,8\\], target = 12",
        "output": "\"85 \"",
        "explanation": "The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost( \"85 \") = 7 + 5 = 12."
      },
      {
        "input": "cost = \\[2,4,6,2,4,6,4,4,4\\], target = 5",
        "output": "\"0 \"",
        "explanation": "It is impossible to paint any integer with total cost equal to target."
      }
    ],
    "constraints": [
      "`cost.length == 9`",
      "`1 <= cost[i], target <= 5000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1450",
    "slug": "number-of-students-doing-homework-at-a-given-time",
    "title": "Number of Students Doing Homework at a Given Time",
    "difficulty": "Easy",
    "description": "Given two integer arrays `startTime` and `endTime` and given an integer `queryTime`. The `ith` student started doing their homework at the time `startTime[i]` and finished it at time `endTime[i]`. Return _the number of students_ doing their homework at time `queryTime`. More formally, return the number of students where `queryTime` lays in the interval `[startTime[i], endTime[i]]` inclusive.",
    "examples": [
      {
        "input": "startTime = \\[1,2,3\\], endTime = \\[3,2,7\\], queryTime = 4",
        "output": "1",
        "explanation": "We have 3 students where:"
      },
      {
        "input": "startTime = \\[4\\], endTime = \\[4\\], queryTime = 4",
        "output": "1",
        "explanation": "The only student was doing their homework at the queryTime."
      }
    ],
    "constraints": [
      "`startTime.length == endTime.length`",
      "`1 <= startTime.length <= 100`",
      "`1 <= startTime[i] <= endTime[i] <= 1000`",
      "`1 <= queryTime <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1451",
    "slug": "rearrange-words-in-a-sentence",
    "title": "Rearrange Words in a Sentence",
    "difficulty": "Medium",
    "description": "Given a sentence `text` (A _sentence_ is a string of space-separated words) in the following format: *  First letter is in upper case. *  Each word in `text` are separated by a single space. Your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order. Return the new text following the format shown above.",
    "examples": [
      {
        "input": "text =  \"Leetcode is cool \"",
        "output": "\"Is cool leetcode \"",
        "explanation": "There are 3 words,  \"Leetcode \" of length 8,  \"is \" of length 2 and  \"cool \" of length 4."
      },
      {
        "input": "text =  \"Keep calm and code on \"",
        "output": "\"On and keep calm code \"",
        "explanation": "Output is ordered as follows:"
      },
      {
        "input": "text =  \"To be or not to be \"",
        "output": "\"To be or to be not \""
      }
    ],
    "constraints": [
      "`text` begins with a capital letter and then contains lowercase letters and single space between words.",
      "`1 <= text.length <= 10^5`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1452",
    "slug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
    "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
    "difficulty": "Medium",
    "description": "Given the array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorites companies for the `ith` person (**indexed from 0**). _Return the indices of people whose list of favorite companies is not a **subset** of any other list of favorites companies_. You must return the indices in increasing order.",
    "examples": [
      {
        "input": "favoriteCompanies = \\[\\[ \"leetcode \", \"google \", \"facebook \"\\],\\[ \"google \", \"microsoft \"\\],\\[ \"google \", \"facebook \"\\],\\[ \"google \"\\],\\[ \"amazon \"\\]\\]",
        "output": "\\[0,1,4\\]",
        "explanation": ""
      },
      {
        "input": "favoriteCompanies = \\[\\[ \"leetcode \", \"google \", \"facebook \"\\],\\[ \"leetcode \", \"amazon \"\\],\\[ \"facebook \", \"google \"\\]\\]",
        "output": "\\[0,1\\]",
        "explanation": "In this case favoriteCompanies\\[2\\]=\\[ \"facebook \", \"google \"\\] is a subset of favoriteCompanies\\[0\\]=\\[ \"leetcode \", \"google \", \"facebook \"\\], therefore, the answer is \\[0,1\\]."
      },
      {
        "input": "favoriteCompanies = \\[\\[ \"leetcode \"\\],\\[ \"google \"\\],\\[ \"facebook \"\\],\\[ \"amazon \"\\]\\]",
        "output": "\\[0,1,2,3\\]"
      }
    ],
    "constraints": [
      "`1 <= favoriteCompanies.length <= 100`",
      "`1 <= favoriteCompanies[i].length <= 500`",
      "`1 <= favoriteCompanies[i][j].length <= 20`",
      "All strings in `favoriteCompanies[i]` are distinct.",
      "All lists of favorite companies are distinct, that is, If we sort alphabetically each list then `favoriteCompanies[i] != favoriteCompanies[j].`",
      "All strings consist of lowercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1453",
    "slug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
    "title": "Maximum Number of Darts Inside of a Circular Dartboard",
    "difficulty": "Hard",
    "description": "Alice is throwing `n` darts on a very large wall. You are given an array `darts` where `darts[i] = [xi, yi]` is the position of the `ith` dart that Alice threw on the wall. Bob knows the positions of the `n` darts on the wall. He wants to place a dartboard of radius `r` on the wall so that the maximum number of darts that Alice throws lies on the dartboard. Given the integer `r`, return _the maximum number of darts that can lie on the dartboard_.",
    "examples": [
      {
        "input": "darts = \\[\\[-2,0\\],\\[2,0\\],\\[0,2\\],\\[0,-2\\]\\], r = 2",
        "output": "4",
        "explanation": "Circle dartboard with center in (0,0) and radius = 2 contain all points."
      },
      {
        "input": "darts = \\[\\[-3,0\\],\\[3,0\\],\\[2,6\\],\\[5,4\\],\\[0,9\\],\\[7,8\\]\\], r = 5",
        "output": "5",
        "explanation": "Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8)."
      }
    ],
    "constraints": [
      "`1 <= darts.length <= 100`",
      "`darts[i].length == 2`",
      "`-104 <= xi, yi <= 104`",
      "All the `darts` are unique",
      "`1 <= r <= 5000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1455",
    "slug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
    "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "difficulty": "Easy",
    "description": "Given a `sentence` that consists of some words separated by a **single space**, and a `searchWord`, check if `searchWord` is a prefix of any word in `sentence`. Return _the index of the word in_ `sentence` _(**1-indexed**) where_ `searchWord` _is a prefix of this word_. If `searchWord` is a prefix of more than one word, return the index of the first word **(minimum index)**. If there is no such word return `-1`. A **prefix** of a string `s` is any leading contiguous substring of `s`.",
    "examples": [
      {
        "input": "sentence =  \"i love eating burger \", searchWord =  \"burg \"",
        "output": "4",
        "explanation": "\"burg \" is prefix of  \"burger \" which is the 4th word in the sentence."
      },
      {
        "input": "sentence =  \"this problem is an easy problem \", searchWord =  \"pro \"",
        "output": "2",
        "explanation": "\"pro \" is prefix of  \"problem \" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index."
      },
      {
        "input": "sentence =  \"i am tired \", searchWord =  \"you \"",
        "output": "-1",
        "explanation": "\"you \" is not a prefix of any word in the sentence."
      }
    ],
    "constraints": [
      "`1 <= sentence.length <= 100`",
      "`1 <= searchWord.length <= 10`",
      "`sentence` consists of lowercase English letters and spaces.",
      "`searchWord` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1456",
    "slug": "maximum-number-of-vowels-in-a-substring-of-given-length",
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "difficulty": "Medium",
    "description": "Given a string `s` and an integer `k`, return _the maximum number of vowel letters in any substring of_ `s` _with length_ `k`. **Vowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.",
    "examples": [
      {
        "input": "s =  \"abciiidef \", k = 3",
        "output": "3",
        "explanation": "The substring  \"iii \" contains 3 vowel letters."
      },
      {
        "input": "s =  \"aeiou \", k = 2",
        "output": "2",
        "explanation": "Any substring of length 2 contains 2 vowels."
      },
      {
        "input": "s =  \"leetcode \", k = 3",
        "output": "2",
        "explanation": "\"lee \",  \"eet \" and  \"ode \" contain 2 vowels."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters.",
      "`1 <= k <= s.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1457",
    "slug": "pseudo-palindromic-paths-in-a-binary-tree",
    "title": "Pseudo-Palindromic Paths in a Binary Tree",
    "difficulty": "Medium",
    "description": "Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be **pseudo-palindromic** if at least one permutation of the node values in the path is a palindrome. _Return the number of **pseudo-palindromic** paths going from the root node to leaf nodes._",
    "examples": [
      {
        "input": "root = \\[2,3,1,3,1,null,1\\]",
        "output": "2",
        "explanation": "The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path \\[2,3,3\\], the green path \\[2,1,1\\], and the path \\[2,3,1\\]. Among these paths only red path and green path are pseudo-palindromic paths since the red path \\[2,3,3\\] can be rearranged in \\[3,2,3\\] (palindrome) and the green path \\[2,1,1\\] can be rearranged in \\[1,2,1\\] (palindrome)."
      },
      {
        "input": "root = \\[2,1,1,1,3,null,null,null,null,null,1\\]",
        "output": "1",
        "explanation": "The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path \\[2,1,1\\], the path \\[2,1,3,1\\], and the path \\[2,1\\]. Among these paths only the green path is pseudo-palindromic since \\[2,1,1\\] can be rearranged in \\[1,2,1\\] (palindrome)."
      },
      {
        "input": "root = \\[9\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 105]`.",
      "`1 <= Node.val <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1458",
    "slug": "max-dot-product-of-two-subsequences",
    "title": "Max Dot Product of Two Subsequences",
    "difficulty": "Hard",
    "description": "Given two arrays `nums1` and `nums2`. Return the maximum dot product between **non-empty** subsequences of nums1 and nums2 with the same length. A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, `[2,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,5,3]` is not).",
    "examples": [
      {
        "input": "nums1 = \\[2,1,-2,5\\], nums2 = \\[3,0,-6\\]",
        "output": "18",
        "explanation": "Take subsequence \\[2,-2\\] from nums1 and subsequence \\[3,-6\\] from nums2."
      },
      {
        "input": "nums1 = \\[3,-2\\], nums2 = \\[2,-6,7\\]",
        "output": "21",
        "explanation": "Take subsequence \\[3\\] from nums1 and subsequence \\[7\\] from nums2."
      },
      {
        "input": "nums1 = \\[-1,-1\\], nums2 = \\[1,1\\]",
        "output": "-1",
        "explanation": "Take subsequence \\[-1\\] from nums1 and subsequence \\[1\\] from nums2."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 500`",
      "`-1000 <= nums1[i], nums2[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1460",
    "slug": "make-two-arrays-equal-by-reversing-subarrays",
    "title": "Make Two Arrays Equal by Reversing Subarrays",
    "difficulty": "Easy",
    "description": "You are given two integer arrays of equal length `target` and `arr`. In one step, you can select any **non-empty subarray** of `arr` and reverse it. You are allowed to make any number of steps. Return `true` _if you can make_ `arr` _equal to_ `target` _or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "target = \\[1,2,3,4\\], arr = \\[2,4,1,3\\]",
        "output": "true",
        "explanation": "You can follow the next steps to convert arr to target:"
      },
      {
        "input": "target = \\[7\\], arr = \\[7\\]",
        "output": "true",
        "explanation": "arr is equal to target without any reverses."
      },
      {
        "input": "target = \\[3,7,9\\], arr = \\[3,7,11\\]",
        "output": "false",
        "explanation": "arr does not have value 9 and it can never be converted to target."
      }
    ],
    "constraints": [
      "`target.length == arr.length`",
      "`1 <= target.length <= 1000`",
      "`1 <= target[i] <= 1000`",
      "`1 <= arr[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1461",
    "slug": "check-if-a-string-contains-all-binary-codes-of-size-k",
    "title": "Check If a String Contains All Binary Codes of Size K",
    "difficulty": "Medium",
    "description": "Given a binary string `s` and an integer `k`, return `true` _if every binary code of length_ `k` _is a substring of_ `s`. Otherwise, return `false`.",
    "examples": [
      {
        "input": "s =  \"00110110 \", k = 2",
        "output": "true",
        "explanation": "The binary codes of length 2 are  \"00 \",  \"01 \",  \"10 \" and  \"11 \". They can be all found as substrings at indices 0, 1, 3 and 2 respectively."
      },
      {
        "input": "s =  \"0110 \", k = 1",
        "output": "true",
        "explanation": "The binary codes of length 1 are  \"0 \" and  \"1 \", it is clear that both exist as a substring."
      },
      {
        "input": "s =  \"0110 \", k = 2",
        "output": "false",
        "explanation": "The binary code  \"00 \" is of length 2 and does not exist in the array."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 5  105`",
      "`s[i]` is either `'0'` or `'1'`.",
      "`1 <= k <= 20`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1462",
    "slug": "course-schedule-iv",
    "title": "Course Schedule IV",
    "difficulty": "Medium",
    "description": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `ai` first if you want to take course `bi`. *  For example, the pair `[0, 1]` indicates that you have to take course `0` before you can take course `1`. Prerequisites can also be **indirect**. If course `a` is a prerequisite of course `b`, and course `b` is a prerequisite of course `c`, then course `a` is a prerequisite of course `c`. You are also given an array `queries` where `queries[j] = [uj, vj]`. For the `jth` query, you should answer whether course `uj` is a prerequisite of course `vj` or not. Return _a boolean array_ `answer`_, where_ `answer[j]` _is the answer to the_ `jth` _query._",
    "examples": [
      {
        "input": "numCourses = 2, prerequisites = \\[\\[1,0\\]\\], queries = \\[\\[0,1\\],\\[1,0\\]\\]",
        "output": "\\[false,true\\]",
        "explanation": "The pair \\[1, 0\\] indicates that you have to take course 1 before you can take course 0."
      },
      {
        "input": "numCourses = 2, prerequisites = \\[\\], queries = \\[\\[1,0\\],\\[0,1\\]\\]",
        "output": "\\[false,false\\]",
        "explanation": "There are no prerequisites, and each course is independent."
      },
      {
        "input": "numCourses = 3, prerequisites = \\[\\[1,2\\],\\[1,0\\],\\[2,0\\]\\], queries = \\[\\[1,0\\],\\[1,2\\]\\]",
        "output": "\\[true,true\\]"
      }
    ],
    "constraints": [
      "`2 <= numCourses <= 100`",
      "`0 <= prerequisites.length <= (numCourses  (numCourses - 1) / 2)`",
      "`prerequisites[i].length == 2`",
      "`0 <= ai, bi <= n - 1`",
      "`ai != bi`",
      "All the pairs `[ai, bi]` are unique.",
      "The prerequisites graph has no cycles.",
      "`1 <= queries.length <= 104`",
      "`0 <= ui, vi <= n - 1`",
      "`ui != vi`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1463",
    "slug": "cherry-pickup-ii",
    "title": "Cherry Pickup II",
    "difficulty": "Hard",
    "description": "You are given a `rows x cols` matrix `grid` representing a field of cherries where `grid[i][j]` represents the number of cherries that you can collect from the `(i, j)` cell. You have two robots that can collect cherries for you: *  **Robot #1** is located at the **top-left corner** `(0, 0)`, and *  **Robot #2** is located at the **top-right corner** `(0, cols - 1)`. Return _the maximum number of cherries collection using both robots by following the rules below_: *  From a cell `(i, j)`, robots can move to cell `(i + 1, j - 1)`, `(i + 1, j)`, or `(i + 1, j + 1)`. *  When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell. *  When both robots stay in the same cell, only one takes the cherries. *  Both robots cannot move outside of the grid at any moment. *  Both robots should reach the bottom row in `grid`.",
    "examples": [
      {
        "input": "grid = \\[\\[3,1,1\\],\\[2,5,1\\],\\[1,5,5\\],\\[2,1,1\\]\\]",
        "output": "24",
        "explanation": "Path of robot #1 and #2 are described in color green and blue respectively."
      },
      {
        "input": "grid = \\[\\[1,0,0,0,0,0,1\\],\\[2,0,0,0,0,3,0\\],\\[2,0,9,0,0,0,0\\],\\[0,3,0,5,4,0,0\\],\\[1,0,2,3,0,0,6\\]\\]",
        "output": "28",
        "explanation": "Path of robot #1 and #2 are described in color green and blue respectively."
      }
    ],
    "constraints": [
      "`rows == grid.length`",
      "`cols == grid[i].length`",
      "`2 <= rows, cols <= 70`",
      "`0 <= grid[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1464",
    "slug": "maximum-product-of-two-elements-in-an-array",
    "title": "Maximum Product of Two Elements in an Array",
    "difficulty": "Easy",
    "description": "Given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. _Return the maximum value of_ `(nums[i]-1)*(nums[j]-1)`.",
    "examples": [
      {
        "input": "nums = \\[3,4,5,2\\]",
        "output": "12",
        "explanation": "If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums\\[1\\]-1)\\*(nums\\[2\\]-1) = (4-1)\\*(5-1) = 3\\*4 = 12."
      },
      {
        "input": "nums = \\[1,5,4,5\\]",
        "output": "16",
        "explanation": "Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)\\*(5-1) = 16."
      },
      {
        "input": "nums = \\[3,7\\]",
        "output": "12"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 500`",
      "`1 <= nums[i] <= 10^3`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1465",
    "slug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
    "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
    "difficulty": "Medium",
    "description": "You are given a rectangular cake of size `h x w` and two arrays of integers `horizontalCuts` and `verticalCuts` where: *  `horizontalCuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, and *  `verticalCuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut. Return _the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays_ `horizontalCuts` _and_ `verticalCuts`. Since the answer can be a large number, return this **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "h = 5, w = 4, horizontalCuts = \\[1,2,4\\], verticalCuts = \\[1,3\\]",
        "output": "4",
        "explanation": "The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area."
      },
      {
        "input": "h = 5, w = 4, horizontalCuts = \\[3,1\\], verticalCuts = \\[1\\]",
        "output": "6",
        "explanation": "The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area."
      },
      {
        "input": "h = 5, w = 4, horizontalCuts = \\[3\\], verticalCuts = \\[3\\]",
        "output": "9"
      }
    ],
    "constraints": [
      "`2 <= h, w <= 109`",
      "`1 <= horizontalCuts.length <= min(h - 1, 105)`",
      "`1 <= verticalCuts.length <= min(w - 1, 105)`",
      "`1 <= horizontalCuts[i] < h`",
      "`1 <= verticalCuts[i] < w`",
      "All the elements in `horizontalCuts` are distinct.",
      "All the elements in `verticalCuts` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1466",
    "slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
    "title": "Reorder Routes to Make All Paths Lead to the City Zero",
    "difficulty": "Medium",
    "description": "There are `n` cities numbered from `0` to `n - 1` and `n - 1` roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow. Roads are represented by `connections` where `connections[i] = [ai, bi]` represents a road from city `ai` to city `bi`. This year, there will be a big event in the capital (city `0`), and many people want to travel to this city. Your task consists of reorienting some roads such that each city can visit the city `0`. Return the **minimum** number of edges changed. It's **guaranteed** that each city can reach city `0` after reorder.",
    "examples": [
      {
        "input": "n = 6, connections = \\[\\[0,1\\],\\[1,3\\],\\[2,3\\],\\[4,0\\],\\[4,5\\]\\]",
        "output": "3",
        "explanation": "Change the direction of edges show in red such that each node can reach the node 0 (capital)."
      },
      {
        "input": "n = 5, connections = \\[\\[1,0\\],\\[1,2\\],\\[3,2\\],\\[3,4\\]\\]",
        "output": "2",
        "explanation": "Change the direction of edges show in red such that each node can reach the node 0 (capital)."
      },
      {
        "input": "n = 3, connections = \\[\\[1,0\\],\\[2,0\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`2 <= n <= 5  104`",
      "`connections.length == n - 1`",
      "`connections[i].length == 2`",
      "`0 <= ai, bi <= n - 1`",
      "`ai != bi`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1467",
    "slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
    "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "difficulty": "Hard",
    "description": "Given `2n` balls of `k` distinct colors. You will be given an integer array `balls` of size `k` where `balls[i]` is the number of balls of color `i`. All the balls will be **shuffled uniformly at random**, then we will distribute the first `n` balls to the first box and the remaining `n` balls to the other box (Please read the explanation of the second example carefully). Please note that the two boxes are considered different. For example, if we have two balls of colors `a` and `b`, and two boxes `[]` and `()`, then the distribution `[a] (b)` is considered different than the distribution `[b] (a)` (Please read the explanation of the first example carefully). Return _the probability_ that the two boxes have the same number of distinct balls. Answers within `10-5` of the actual value will be accepted as correct.",
    "examples": [
      {
        "input": "balls = \\[1,1\\]",
        "output": "1.00000",
        "explanation": "Only 2 ways to divide the balls equally:"
      },
      {
        "input": "balls = \\[2,1,1\\]",
        "output": "0.66667",
        "explanation": "We have the set of balls \\[1, 1, 2, 3\\]"
      },
      {
        "input": "balls = \\[1,2,1,2\\]",
        "output": "0.60000",
        "explanation": "The set of balls is \\[1, 2, 2, 3, 4, 4\\]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box."
      }
    ],
    "constraints": [
      "`1 <= balls.length <= 8`",
      "`1 <= balls[i] <= 6`",
      "`sum(balls)` is even."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1469",
    "slug": "find-all-the-lonely-nodes",
    "title": "Find All The Lonely Nodes",
    "difficulty": "Easy",
    "description": "In a binary tree, a **lonely** node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node. Given the `root` of a binary tree, return _an array containing the values of all lonely nodes_ in the tree. Return the list **in any order**.",
    "examples": [
      {
        "input": "root = \\[1,2,3,null,4\\]",
        "output": "\\[4\\]",
        "explanation": "Light blue node is the only lonely node."
      },
      {
        "input": "root = \\[7,1,4,6,null,5,3,null,null,null,null,null,2\\]",
        "output": "\\[6,2\\]",
        "explanation": "Light blue nodes are lonely nodes."
      },
      {
        "input": "root = \\[11,99,88,77,null,null,66,55,null,null,44,33,null,null,22\\]",
        "output": "\\[77,55,33,66,44,22\\]",
        "explanation": "Nodes 99 and 88 share the same parent. Node 11 is the root."
      }
    ],
    "constraints": [
      "The number of nodes in the `tree` is in the range `[1, 1000].`",
      "`1 <= Node.val <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1470",
    "slug": "shuffle-the-array",
    "title": "Shuffle the Array",
    "difficulty": "Easy",
    "description": "Given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`. _Return the array in the form_ `[x1,y1,x2,y2,...,xn,yn]`.",
    "examples": [
      {
        "input": "nums = \\[2,5,1,3,4,7\\], n = 3",
        "output": "\\[2,3,5,4,1,7\\]",
        "explanation": "Since x1\\=2, x2\\=5, x3\\=1, y1\\=3, y2\\=4, y3\\=7 then the answer is \\[2,3,5,4,1,7\\]."
      },
      {
        "input": "nums = \\[1,2,3,4,4,3,2,1\\], n = 4",
        "output": "\\[1,4,2,3,3,2,4,1\\]"
      },
      {
        "input": "nums = \\[1,1,2,2\\], n = 2",
        "output": "\\[1,2,1,2\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 500`",
      "`nums.length == 2n`",
      "`1 <= nums[i] <= 10^3`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1471",
    "slug": "the-k-strongest-values-in-an-array",
    "title": "The k Strongest Values in an Array",
    "difficulty": "Medium",
    "description": "Given an array of integers `arr` and an integer `k`. A value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m| > |arr[j] - m|` where `m` is the **median** of the array. If `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than `arr[j]` if `arr[i] > arr[j]`. Return _a list of the strongest `k`_ values in the array. return the answer **in any arbitrary order**. **Median** is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position `((n - 1) / 2)` in the sorted list **(0-indexed)**. *  For `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. The median is `6`. *  For `arr = [-7, 22, 17,\u20093]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. The median is `3`.",
    "examples": [
      {
        "input": "arr = \\[1,2,3,4,5\\], k = 2",
        "output": "\\[5,1\\]",
        "explanation": "Median is 3, the elements of the array sorted by the strongest are \\[5,1,4,2,3\\]. The strongest 2 elements are \\[5, 1\\]. \\[1, 5\\] is also **accepted** answer."
      },
      {
        "input": "arr = \\[1,1,3,5,5\\], k = 2",
        "output": "\\[5,5\\]",
        "explanation": "Median is 3, the elements of the array sorted by the strongest are \\[5,5,1,1,3\\]. The strongest 2 elements are \\[5, 5\\]."
      },
      {
        "input": "arr = \\[6,7,11,7,6,8\\], k = 5",
        "output": "\\[11,8,6,6,7\\]",
        "explanation": "Median is 7, the elements of the array sorted by the strongest are \\[11,8,6,6,7,7\\]."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`-105 <= arr[i] <= 105`",
      "`1 <= k <= arr.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1472",
    "slug": "design-browser-history",
    "title": "Design Browser History",
    "difficulty": "Medium",
    "description": "You have a **browser** of one tab where you start on the `homepage` and you can visit another `url`, get back in the history number of `steps` or move forward in the history number of `steps`. Implement the `BrowserHistory` class: *  `BrowserHistory(string homepage)` Initializes the object with the `homepage` of the browser. *  `void visit(string url)` Visits `url` from the current page. It clears up all the forward history. *  `string back(int steps)` Move `steps` back in history. If you can only return `x` steps in the history and `steps > x`, you will return only `x` steps. Return the current `url` after moving back in history **at most** `steps`. *  `string forward(int steps)` Move `steps` forward in history. If you can only forward `x` steps in the history and `steps > x`, you will forward only `x` steps. Return the current `url` after forwarding in history **at most** `steps`.",
    "examples": [
      {
        "input": "",
        "output": "",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= homepage.length <= 20`",
      "`1 <= url.length <= 20`",
      "`1 <= steps <= 100`",
      "`homepage` and `url` consist of '.' or lower case English letters.",
      "At most `5000` calls will be made to `visit`, `back`, and `forward`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1473",
    "slug": "paint-house-iii",
    "title": "Paint House III",
    "difficulty": "Hard",
    "description": "There is a row of `m` houses in a small city, each house must be painted with one of the `n` colors (labeled from `1` to `n`), some houses that have been painted last summer should not be painted again. A neighborhood is a maximal group of continuous houses that are painted with the same color. *  For example: `houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`. Given an array `houses`, an `m x n` matrix `cost` and an integer `target` where: *  `houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet. *  `cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`. Return _the minimum cost of painting all the remaining houses in such a way that there are exactly_ `target` _neighborhoods_. If it is not possible, return `-1`.",
    "examples": [
      {
        "input": "houses = \\[0,0,0,0,0\\], cost = \\[\\[1,10\\],\\[10,1\\],\\[10,1\\],\\[1,10\\],\\[5,1\\]\\], m = 5, n = 2, target = 3",
        "output": "9",
        "explanation": "Paint houses of this way \\[1,2,2,1,1\\]"
      },
      {
        "input": "houses = \\[0,2,1,2,0\\], cost = \\[\\[1,10\\],\\[10,1\\],\\[10,1\\],\\[1,10\\],\\[5,1\\]\\], m = 5, n = 2, target = 3",
        "output": "11",
        "explanation": "Some houses are already painted, Paint the houses of this way \\[2,2,1,2,2\\]"
      },
      {
        "input": "houses = \\[3,1,2,3\\], cost = \\[\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\]\\], m = 4, n = 3, target = 3",
        "output": "-1",
        "explanation": "Houses are already painted with a total of 4 neighborhoods \\[{3},{1},{2},{3}\\] different of target = 3."
      }
    ],
    "constraints": [
      "`m == houses.length == cost.length`",
      "`n == cost[i].length`",
      "`1 <= m <= 100`",
      "`1 <= n <= 20`",
      "`1 <= target <= m`",
      "`0 <= houses[i] <= n`",
      "`1 <= cost[i][j] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1474",
    "slug": "delete-n-nodes-after-m-nodes-of-a-linked-list",
    "title": "Delete N Nodes After M Nodes of a Linked List",
    "difficulty": "Easy",
    "description": "You are given the `head` of a linked list and two integers `m` and `n`. Traverse the linked list and remove some nodes in the following way: *  Start with the head as the current node. *  Keep the first `m` nodes starting with the current node. *  Remove the next `n` nodes *  Keep repeating steps 2 and 3 until you reach the end of the list. Return _the head of the modified list after removing the mentioned nodes_.",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5,6,7,8,9,10,11,12,13\\], m = 2, n = 3",
        "output": "\\[1,2,6,7,11,12\\]",
        "explanation": "Keep the first (m = 2) nodes starting from the head of the linked List  (1 ->2) show in black nodes."
      },
      {
        "input": "head = \\[1,2,3,4,5,6,7,8,9,10,11\\], m = 1, n = 3",
        "output": "\\[1,5,9\\]",
        "explanation": "Head of linked list after removing nodes is returned."
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[1, 104]`.",
      "`1 <= Node.val <= 106`",
      "`1 <= m, n <= 1000`",
      "Follow up: Could you solve this problem by modifying the list in-place?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1475",
    "slug": "final-prices-with-a-special-discount-in-a-shop",
    "title": "Final Prices With a Special Discount in a Shop",
    "difficulty": "Easy",
    "description": "You are given an integer array `prices` where `prices[i]` is the price of the `ith` item in a shop. There is a special discount for items in the shop. If you buy the `ith` item, then you will receive a discount equivalent to `prices[j]` where `j` is the minimum index such that `j > i` and `prices[j] <= prices[i]`. Otherwise, you will not receive any discount at all. Return an integer array `answer` where `answer[i]` is the final price you will pay for the `ith` item of the shop, considering the special discount.",
    "examples": [
      {
        "input": "prices = \\[8,4,6,2,3\\]",
        "output": "\\[4,2,4,2,3\\]",
        "explanation": ""
      },
      {
        "input": "prices = \\[1,2,3,4,5\\]",
        "output": "\\[1,2,3,4,5\\]",
        "explanation": "In this case, for all items, you will not receive any discount at all."
      },
      {
        "input": "prices = \\[10,1,1,6\\]",
        "output": "\\[9,0,1,6\\]"
      }
    ],
    "constraints": [
      "`1 <= prices.length <= 500`",
      "`1 <= prices[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1476",
    "slug": "subrectangle-queries",
    "title": "Subrectangle Queries",
    "difficulty": "Medium",
    "description": "Implement the class `SubrectangleQueries` which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods: 1. `updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)` *  Updates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`. 2. `getValue(int row, int col)` *  Returns the current value of the coordinate `(row,col)` from the rectangle.",
    "examples": [],
    "constraints": [
      "There will be at most `500` operations considering both methods: `updateSubrectangle` and `getValue`.",
      "`1 <= rows, cols <= 100`",
      "`rows == rectangle.length`",
      "`cols == rectangle[i].length`",
      "`0 <= row1 <= row2 < rows`",
      "`0 <= col1 <= col2 < cols`",
      "`1 <= newValue, rectangle[i][j] <= 10^9`",
      "`0 <= row < rows`",
      "`0 <= col < cols`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1477",
    "slug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
    "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "difficulty": "Medium",
    "description": "You are given an array of integers `arr` and an integer `target`. You have to find **two non-overlapping sub-arrays** of `arr` each with a sum equal `target`. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is **minimum**. Return _the minimum sum of the lengths_ of the two required sub-arrays, or return `-1` if you cannot find such two sub-arrays.",
    "examples": [
      {
        "input": "arr = \\[3,2,2,4,3\\], target = 3",
        "output": "2",
        "explanation": "Only two sub-arrays have sum = 3 (\\[3\\] and \\[3\\]). The sum of their lengths is 2."
      },
      {
        "input": "arr = \\[7,3,4,7\\], target = 7",
        "output": "2",
        "explanation": "Although we have three non-overlapping sub-arrays of sum = 7 (\\[7\\], \\[3,4\\] and \\[7\\]), but we will choose the first and third sub-arrays as the sum of their lengths is 2."
      },
      {
        "input": "arr = \\[4,3,2,6,2,3,4\\], target = 6",
        "output": "-1",
        "explanation": "We have only one sub-array of sum = 6."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`1 <= arr[i] <= 1000`",
      "`1 <= target <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1478",
    "slug": "allocate-mailboxes",
    "title": "Allocate Mailboxes",
    "difficulty": "Hard",
    "description": "Given the array `houses` where `houses[i]` is the location of the `ith` house along a street and an integer `k`, allocate `k` mailboxes in the street. Return _the **minimum** total distance between each house and its nearest mailbox_. The test cases are generated so that the answer fits in a 32-bit integer.",
    "examples": [
      {
        "input": "houses = \\[1,4,8,10,20\\], k = 3",
        "output": "5",
        "explanation": "Allocate mailboxes in position 3, 9 and 20."
      },
      {
        "input": "houses = \\[2,3,5,12,18\\], k = 2",
        "output": "9",
        "explanation": "Allocate mailboxes in position 3 and 14."
      }
    ],
    "constraints": [
      "`1 <= k <= houses.length <= 100`",
      "`1 <= houses[i] <= 104`",
      "All the integers of `houses` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1480",
    "slug": "running-sum-of-1d-array",
    "title": "Running Sum of 1d Array",
    "difficulty": "Easy",
    "description": "Given an array `nums`. We define a running sum of an array as `runningSum[i] = sum(nums[0]...nums[i])`. Return the running sum of `nums`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "\\[1,3,6,10\\]",
        "explanation": "Running sum is obtained as follows: \\[1, 1+2, 1+2+3, 1+2+3+4\\]."
      },
      {
        "input": "nums = \\[1,1,1,1,1\\]",
        "output": "\\[1,2,3,4,5\\]",
        "explanation": "Running sum is obtained as follows: \\[1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1\\]."
      },
      {
        "input": "nums = \\[3,1,2,10,1\\]",
        "output": "\\[3,4,6,16,17\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`-10^6 <= nums[i] <= 10^6`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1481",
    "slug": "least-number-of-unique-integers-after-k-removals",
    "title": "Least Number of Unique Integers after K Removals",
    "difficulty": "Medium",
    "description": "Given an array of integers `arr` and an integer `k`. Find the _least number of unique integers_ after removing **exactly** `k` elements**.**",
    "examples": [
      {
        "input": "arr = \\[5,5,4\\], k = 1",
        "output": "1"
      },
      {
        "input": "arr = \\[4,3,1,1,3,3,2\\], k = 3",
        "output": "2"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 10^5`",
      "`1 <= arr[i] <= 10^9`",
      "`0 <= k <= arr.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1482",
    "slug": "minimum-number-of-days-to-make-m-bouquets",
    "title": "Minimum Number of Days to Make m Bouquets",
    "difficulty": "Medium",
    "description": "You are given an integer array `bloomDay`, an integer `m` and an integer `k`. You want to make `m` bouquets. To make a bouquet, you need to use `k` **adjacent flowers** from the garden. The garden consists of `n` flowers, the `ith` flower will bloom in the `bloomDay[i]` and then can be used in **exactly one** bouquet. Return _the minimum number of days you need to wait to be able to make_ `m` _bouquets from the garden_. If it is impossible to make m bouquets return `-1`.",
    "examples": [
      {
        "input": "bloomDay = \\[1,10,3,10,2\\], m = 3, k = 1",
        "output": "3",
        "explanation": "Let us see what happened in the first three days. x means flower bloomed and \\_ means flower did not bloom in the garden."
      },
      {
        "input": "bloomDay = \\[1,10,3,10,2\\], m = 3, k = 2",
        "output": "-1",
        "explanation": "We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1."
      },
      {
        "input": "bloomDay = \\[7,7,7,7,12,7,7\\], m = 2, k = 3",
        "output": "12",
        "explanation": "We need 2 bouquets each should have 3 flowers."
      }
    ],
    "constraints": [
      "`bloomDay.length == n`",
      "`1 <= n <= 105`",
      "`1 <= bloomDay[i] <= 109`",
      "`1 <= m <= 106`",
      "`1 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1483",
    "slug": "kth-ancestor-of-a-tree-node",
    "title": "Kth Ancestor of a Tree Node",
    "difficulty": "Hard",
    "description": "You are given a tree with `n` nodes numbered from `0` to `n - 1` in the form of a parent array `parent` where `parent[i]` is the parent of `ith` node. The root of the tree is node `0`. Find the `kth` ancestor of a given node. The `kth` ancestor of a tree node is the `kth` node in the path from that node to the root node. Implement the `TreeAncestor` class: *  `TreeAncestor(int n, int[] parent)` Initializes the object with the number of nodes in the tree and the parent array. *  `int getKthAncestor(int node, int k)` return the `kth` ancestor of the given node `node`. If there is no such ancestor, return `-1`.",
    "examples": [],
    "constraints": [
      "`1 <= k <= n <= 5  104`",
      "`parent.length == n`",
      "`parent[0] == -1`",
      "`0 <= parent[i] < n` for all `0 < i < n`",
      "`0 <= node < n`",
      "There will be at most `5  104` queries."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1485",
    "slug": "clone-binary-tree-with-random-pointer",
    "title": "Clone Binary Tree With Random Pointer",
    "difficulty": "Medium",
    "description": "A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null. Return a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the tree. The tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of `[val, random_index]` where: *  `val`: an integer representing `Node.val` *  `random_index`: the index of the node (in the input) where the random pointer points to, or `null` if it does not point to any node. You will be given the tree in class `Node` and you should return the cloned tree in class `NodeCopy`. `NodeCopy` class is just a clone of `Node` class with the same attributes and constructors.",
    "examples": [
      {
        "input": "root = \\[\\[1,null\\],null,\\[4,3\\],\\[7,0\\]\\]",
        "output": "\\[\\[1,null\\],null,\\[4,3\\],\\[7,0\\]\\]",
        "explanation": "The original binary tree is \\[1,null,4,7\\]."
      },
      {
        "input": "root = \\[\\[1,4\\],null,\\[1,0\\],null,\\[1,5\\],\\[1,5\\]\\]",
        "output": "\\[\\[1,4\\],null,\\[1,0\\],null,\\[1,5\\],\\[1,5\\]\\]",
        "explanation": "The random pointer of a node can be the node itself."
      },
      {
        "input": "root = \\[\\[1,6\\],\\[2,5\\],\\[3,4\\],\\[4,3\\],\\[5,2\\],\\[6,1\\],\\[7,0\\]\\]",
        "output": "\\[\\[1,6\\],\\[2,5\\],\\[3,4\\],\\[4,3\\],\\[5,2\\],\\[6,1\\],\\[7,0\\]\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the `tree` is in the range `[0, 1000].`",
      "`1 <= Node.val <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1486",
    "slug": "xor-operation-in-an-array",
    "title": "XOR Operation in an Array",
    "difficulty": "Easy",
    "description": "You are given an integer `n` and an integer `start`. Define an array `nums` where `nums[i] = start + 2 * i` (**0-indexed**) and `n == nums.length`. Return _the bitwise XOR of all elements of_ `nums`.",
    "examples": [
      {
        "input": "n = 5, start = 0",
        "output": "8",
        "explanation": "Array nums is equal to \\[0, 2, 4, 6, 8\\] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8."
      },
      {
        "input": "n = 4, start = 3",
        "output": "8",
        "explanation": "Array nums is equal to \\[3, 5, 7, 9\\] where (3 ^ 5 ^ 7 ^ 9) = 8."
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`",
      "`0 <= start <= 1000`",
      "`n == nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1487",
    "slug": "making-file-names-unique",
    "title": "Making File Names Unique",
    "difficulty": "Medium",
    "description": "Given an array of strings `names` of size `n`. You will create `n` folders in your file system **such that**, at the `ith` minute, you will create a folder with the name `names[i]`. Since two files **cannot** have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of `(k)`, where, `k` is the **smallest positive integer** such that the obtained name remains unique. Return _an array of strings of length_ `n` where `ans[i]` is the actual name the system will assign to the `ith` folder when you create it.",
    "examples": [
      {
        "input": "names = \\[ \"pes \", \"fifa \", \"gta \", \"pes(2019) \"\\]",
        "output": "\\[ \"pes \", \"fifa \", \"gta \", \"pes(2019) \"\\]",
        "explanation": "Let's see how the file system creates folder names:"
      },
      {
        "input": "names = \\[ \"gta \", \"gta(1) \", \"gta \", \"avalon \"\\]",
        "output": "\\[ \"gta \", \"gta(1) \", \"gta(2) \", \"avalon \"\\]",
        "explanation": "Let's see how the file system creates folder names:"
      },
      {
        "input": "names = \\[ \"onepiece \", \"onepiece(1) \", \"onepiece(2) \", \"onepiece(3) \", \"onepiece \"\\]",
        "output": "\\[ \"onepiece \", \"onepiece(1) \", \"onepiece(2) \", \"onepiece(3) \", \"onepiece(4) \"\\]",
        "explanation": "When the last folder is created, the smallest positive valid k is 4, and it becomes  \"onepiece(4) \"."
      }
    ],
    "constraints": [
      "`1 <= names.length <= 5  104`",
      "`1 <= names[i].length <= 20`",
      "`names[i]` consists of lowercase English letters, digits, and/or round brackets."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1488",
    "slug": "avoid-flood-in-the-city",
    "title": "Avoid Flood in The City",
    "difficulty": "Medium",
    "description": "Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the `nth` lake, the `nth` lake becomes full of water. If it rains over a lake that is **full of water**, there will be a **flood**. Your goal is to avoid floods in any lake. Given an integer array `rains` where: *  `rains[i] > 0` means there will be rains over the `rains[i]` lake. *  `rains[i] == 0` means there are no rains this day and you can choose **one lake** this day and **dry it**. Return _an array `ans`_ where: *  `ans.length == rains.length` *  `ans[i] == -1` if `rains[i] > 0`. *  `ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`. If there are multiple valid answers return **any** of them. If it is impossible to avoid flood return **an empty array**. Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.",
    "examples": [
      {
        "input": "rains = \\[1,2,3,4\\]",
        "output": "\\[-1,-1,-1,-1\\]",
        "explanation": "After the first day full lakes are \\[1\\]"
      },
      {
        "input": "rains = \\[1,2,0,0,2,1\\]",
        "output": "\\[-1,-1,2,1,-1,-1\\]",
        "explanation": "After the first day full lakes are \\[1\\]"
      },
      {
        "input": "rains = \\[1,2,0,1,2\\]",
        "output": "\\[\\]",
        "explanation": "After the second day, full lakes are  \\[1,2\\]. We have to dry one lake in the third day."
      }
    ],
    "constraints": [
      "`1 <= rains.length <= 105`",
      "`0 <= rains[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1489",
    "slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
    "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "difficulty": "Hard",
    "description": "Given a weighted undirected connected graph with `n` vertices numbered from `0` to `n - 1`, and an array `edges` where `edges[i] = [ai, bi, weighti]` represents a bidirectional and weighted edge between nodes `ai` and `bi`. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight. Find _all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST)_. An MST edge whose deletion from the graph would cause the MST weight to increase is called a _critical edge_. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all. Note that you can return the indices of the edges in any order.",
    "examples": [
      {
        "input": "n = 5, edges = \\[\\[0,1,1\\],\\[1,2,1\\],\\[2,3,2\\],\\[0,3,2\\],\\[0,4,3\\],\\[3,4,3\\],\\[1,4,6\\]\\]",
        "output": "\\[\\[0,1\\],\\[2,3,4,5\\]\\]",
        "explanation": "The figure above describes the graph."
      },
      {
        "input": "n = 4, edges = \\[\\[0,1,1\\],\\[1,2,1\\],\\[2,3,1\\],\\[0,3,1\\]\\]",
        "output": "\\[\\[\\],\\[0,1,2,3\\]\\]",
        "explanation": "We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical."
      }
    ],
    "constraints": [
      "`2 <= n <= 100`",
      "`1 <= edges.length <= min(200, n  (n - 1) / 2)`",
      "`edges[i].length == 3`",
      "`0 <= ai < bi < n`",
      "`1 <= weighti <= 1000`",
      "All pairs `(ai, bi)` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1490",
    "slug": "clone-n-ary-tree",
    "title": "Clone N-ary Tree",
    "difficulty": "Medium",
    "description": "Given a `root` of an N-ary tree, return a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the tree. Each node in the n-ary tree contains a val (`int`) and a list (`List[Node]`) of its children. class Node { public int val; public List children; } _Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._",
    "examples": [
      {
        "input": "root = \\[1,null,3,2,4,null,5,6\\]",
        "output": "\\[1,null,3,2,4,null,5,6\\]"
      },
      {
        "input": "root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]",
        "output": "\\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]"
      }
    ],
    "constraints": [
      "The depth of the n-ary tree is less than or equal to `1000`.",
      "The total number of nodes is between `[0, 104]`.",
      "Follow up: Can your solution work for the [graph problem](https://leetcode.com/problems/clone-graph/)?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1491",
    "slug": "average-salary-excluding-the-minimum-and-maximum-salary",
    "title": "Average Salary Excluding the Minimum and Maximum Salary",
    "difficulty": "Easy",
    "description": "You are given an array of **unique** integers `salary` where `salary[i]` is the salary of the `ith` employee. Return _the average salary of employees excluding the minimum and maximum salary_. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "salary = \\[4000,3000,1000,2000\\]",
        "output": "2500.00000",
        "explanation": "Minimum salary and maximum salary are 1000 and 4000 respectively."
      },
      {
        "input": "salary = \\[1000,2000,3000\\]",
        "output": "2000.00000",
        "explanation": "Minimum salary and maximum salary are 1000 and 3000 respectively."
      }
    ],
    "constraints": [
      "`3 <= salary.length <= 100`",
      "`1000 <= salary[i] <= 106`",
      "All the integers of `salary` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1492",
    "slug": "the-kth-factor-of-n",
    "title": "The kth Factor of n",
    "difficulty": "Medium",
    "description": "You are given two positive integers `n` and `k`. A factor of an integer `n` is defined as an integer `i` where `n % i == 0`. Consider a list of all factors of `n` sorted in **ascending order**, return _the_ `kth` _factor_ in this list or return `-1` if `n` has less than `k` factors.",
    "examples": [
      {
        "input": "n = 12, k = 3",
        "output": "3",
        "explanation": "Factors list is \\[1, 2, 3, 4, 6, 12\\], the 3rd factor is 3."
      },
      {
        "input": "n = 7, k = 2",
        "output": "7",
        "explanation": "Factors list is \\[1, 7\\], the 2nd factor is 7."
      },
      {
        "input": "n = 4, k = 4",
        "output": "-1",
        "explanation": "Factors list is \\[1, 2, 4\\], there is only 3 factors. We should return -1."
      }
    ],
    "constraints": [
      "`1 <= k <= n <= 1000`",
      "Follow up:"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1493",
    "slug": "longest-subarray-of-1s-after-deleting-one-element",
    "title": "Longest Subarray of 1's After Deleting One Element",
    "difficulty": "Medium",
    "description": "Given a binary array `nums`, you should delete one element from it. Return _the size of the longest non-empty subarray containing only_ `1`_'s in the resulting array_. Return `0` if there is no such subarray.",
    "examples": [
      {
        "input": "nums = \\[1,1,0,1\\]",
        "output": "3",
        "explanation": "After deleting the number in position 2, \\[1,1,1\\] contains 3 numbers with value of 1's."
      },
      {
        "input": "nums = \\[0,1,1,1,0,1,1,0,1\\]",
        "output": "5",
        "explanation": "After deleting the number in position 4, \\[0,1,1,1,1,1,0,1\\] longest subarray with value of 1's is \\[1,1,1,1,1\\]."
      },
      {
        "input": "nums = \\[1,1,1\\]",
        "output": "2",
        "explanation": "You must delete one element."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`nums[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1494",
    "slug": "parallel-courses-ii",
    "title": "Parallel Courses II",
    "difficulty": "Hard",
    "description": "You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [prevCoursei, nextCoursei]`, representing a prerequisite relationship between course `prevCoursei` and course `nextCoursei`: course `prevCoursei` has to be taken before course `nextCoursei`. Also, you are given the integer `k`. In one semester, you can take **at most** `k` courses as long as you have taken all the prerequisites in the **previous** semesters for the courses you are taking. Return _the **minimum** number of semesters needed to take all courses_. The testcases will be generated such that it is possible to take every course.",
    "examples": [
      {
        "input": "n = 4, relations = \\[\\[2,1\\],\\[3,1\\],\\[1,4\\]\\], k = 2",
        "output": "3",
        "explanation": "The figure above represents the given graph."
      },
      {
        "input": "n = 5, relations = \\[\\[2,1\\],\\[3,1\\],\\[4,1\\],\\[1,5\\]\\], k = 2",
        "output": "4",
        "explanation": "The figure above represents the given graph."
      }
    ],
    "constraints": [
      "`1 <= n <= 15`",
      "`1 <= k <= n`",
      "`0 <= relations.length <= n  (n-1) / 2`",
      "`relations[i].length == 2`",
      "`1 <= prevCoursei, nextCoursei <= n`",
      "`prevCoursei != nextCoursei`",
      "All the pairs `[prevCoursei, nextCoursei]` are unique.",
      "The given graph is a directed acyclic graph."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1496",
    "slug": "path-crossing",
    "title": "Path Crossing",
    "difficulty": "Easy",
    "description": "Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`. Return `true` _if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited_. Return `false` otherwise.",
    "examples": [
      {
        "input": "path =  \"NES \"",
        "output": "false",
        "explanation": "Notice that the path doesn't cross any point more than once."
      },
      {
        "input": "path =  \"NESWW \"",
        "output": "true",
        "explanation": "Notice that the path visits the origin twice."
      }
    ],
    "constraints": [
      "`1 <= path.length <= 104`",
      "`path[i]` is either `'N'`, `'S'`, `'E'`, or `'W'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1498",
    "slug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
    "title": "Number of Subsequences That Satisfy the Given Sum Condition",
    "difficulty": "Medium",
    "description": "You are given an array of integers `nums` and an integer `target`. Return _the number of **non-empty** subsequences of_ `nums` _such that the sum of the minimum and maximum element on it is less or equal to_ `target`. Since the answer may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "nums = \\[3,5,6,7\\], target = 9",
        "output": "4",
        "explanation": "There are 4 subsequences that satisfy the condition."
      },
      {
        "input": "nums = \\[3,3,6,8\\], target = 10",
        "output": "6",
        "explanation": "There are 6 subsequences that satisfy the condition. (nums can have repeated numbers)."
      },
      {
        "input": "nums = \\[2,3,3,4,6,7\\], target = 12",
        "output": "61",
        "explanation": "There are 63 non-empty subsequences, two of them do not satisfy the condition (\\[6,7\\], \\[7\\])."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 106`",
      "`1 <= target <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1499",
    "slug": "max-value-of-equation",
    "title": "Max Value of Equation",
    "difficulty": "Hard",
    "description": "You are given an array `points` containing the coordinates of points on a 2D plane, sorted by the x-values, where `points[i] = [xi, yi]` such that `xi < xj` for all `1 <= i < j <= points.length`. You are also given an integer `k`. Return _the maximum value of the equation_ `yi + yj + |xi - xj|` where `|xi - xj| <= k` and `1 <= i < j <= points.length`. It is guaranteed that there exists at least one pair of points that satisfy the constraint `|xi - xj| <= k`.",
    "examples": [
      {
        "input": "points = \\[\\[1,3\\],\\[2,0\\],\\[5,10\\],\\[6,-10\\]\\], k = 1",
        "output": "4",
        "explanation": "The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1."
      },
      {
        "input": "points = \\[\\[0,0\\],\\[3,0\\],\\[9,2\\]\\], k = 3",
        "output": "3",
        "explanation": "Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3."
      }
    ],
    "constraints": [
      "`2 <= points.length <= 105`",
      "`points[i].length == 2`",
      "`-108 <= xi, yi <= 108`",
      "`0 <= k <= 2  108`",
      "`xi < xj` for all `1 <= i < j <= points.length`",
      "`xi` form a strictly increasing sequence."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1500",
    "slug": "design-a-file-sharing-system",
    "title": "Design a File Sharing System",
    "difficulty": "Medium",
    "description": "We will use a file-sharing system to share a very large file which consists of `m` small **chunks** with IDs from `1` to `m`. When users join the system, the system should assign **a unique** ID to them. The unique ID should be used **once** for each user, but when a user leaves the system, the ID can be **reused** again. Users can request a certain chunk of the file, the system should return a list of IDs of all the users who own this chunk. If the user receives a non-empty list of IDs, they receive the requested chunk successfully. Implement the `FileSharing` class: *  `FileSharing(int m)` Initializes the object with a file of `m` chunks. *  `int join(int[] ownedChunks)`: A new user joined the system owning some chunks of the file, the system should assign an id to the user which is the **smallest positive integer** not taken by any other user. Return the assigned id. *  `void leave(int userID)`: The user with `userID` will leave the system, you cannot take file chunks from them anymore. *  `int[] request(int userID, int chunkID)`: The user `userID` requested the file chunk with `chunkID`. Return a list of the IDs of all users that own this chunk sorted in ascending order.",
    "examples": [
      {
        "input": "",
        "output": "",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= m <= 105`",
      "`0 <= ownedChunks.length <= min(100, m)`",
      "`1 <= ownedChunks[i] <= m`",
      "Values of `ownedChunks` are unique.",
      "`1 <= chunkID <= m`",
      "`userID` is guaranteed to be a user in the system if you assign the IDs correctly.",
      "At most `104` calls will be made to `join`, `leave` and `request`.",
      "Each call to `leave` will have a matching call for `join`."
    ],
    "note": null,
    "follow_up": ""
  },
  {
    "id": "1502",
    "slug": "can-make-arithmetic-progression-from-sequence",
    "title": "Can Make Arithmetic Progression From Sequence",
    "difficulty": "Easy",
    "description": "A sequence of numbers is called an **arithmetic progression** if the difference between any two consecutive elements is the same. Given an array of numbers `arr`, return `true` _if the array can be rearranged to form an **arithmetic progression**. Otherwise, return_ `false`.",
    "examples": [
      {
        "input": "arr = \\[3,5,1\\]",
        "output": "true",
        "explanation": "We can reorder the elements as \\[1,3,5\\] or \\[5,3,1\\] with differences 2 and -2 respectively, between each consecutive elements."
      },
      {
        "input": "arr = \\[1,2,4\\]",
        "output": "false",
        "explanation": "There is no way to reorder the elements to obtain an arithmetic progression."
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 1000`",
      "`-106 <= arr[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1503",
    "slug": "last-moment-before-all-ants-fall-out-of-a-plank",
    "title": "Last Moment Before All Ants Fall Out of a Plank",
    "difficulty": "Medium",
    "description": "We have a wooden plank of the length `n` **units**. Some ants are walking on the plank, each ant moves with a speed of **1 unit per second**. Some of the ants move to the **left**, the other move to the **right**. When two ants moving in two **different** directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time. When an ant reaches **one end** of the plank at a time `t`, it falls out of the plank immediately. Given an integer `n` and two integer arrays `left` and `right`, the positions of the ants moving to the left and the right, return _the moment when the last ant(s) fall out of the plank_.",
    "examples": [
      {
        "input": "n = 4, left = \\[4,3\\], right = \\[0,1\\]",
        "output": "4",
        "explanation": "In the image above:"
      },
      {
        "input": "n = 7, left = \\[\\], right = \\[0,1,2,3,4,5,6,7\\]",
        "output": "7",
        "explanation": "All ants are going to the right, the ant at index 0 needs 7 seconds to fall."
      },
      {
        "input": "n = 7, left = \\[0,1,2,3,4,5,6,7\\], right = \\[\\]",
        "output": "7",
        "explanation": "All ants are going to the left, the ant at index 7 needs 7 seconds to fall."
      }
    ],
    "constraints": [
      "`1 <= n <= 104`",
      "`0 <= left.length <= n + 1`",
      "`0 <= left[i] <= n`",
      "`0 <= right.length <= n + 1`",
      "`0 <= right[i] <= n`",
      "`1 <= left.length + right.length <= n + 1`",
      "All values of `left` and `right` are unique, and each value can appear only in one of the two arrays."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1504",
    "slug": "count-submatrices-with-all-ones",
    "title": "Count Submatrices With All Ones",
    "difficulty": "Medium",
    "description": "Given an `m x n` binary matrix `mat`, _return the number of **submatrices** that have all ones_.",
    "examples": [
      {
        "input": "mat = \\[\\[1,0,1\\],\\[1,1,0\\],\\[1,1,0\\]\\]",
        "output": "13",
        "explanation": ""
      },
      {
        "input": "mat = \\[\\[0,1,1,0\\],\\[0,1,1,1\\],\\[1,1,1,0\\]\\]",
        "output": "24",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= m, n <= 150`",
      "`mat[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1505",
    "slug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
    "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
    "difficulty": "Hard",
    "description": "You are given a string `num` representing **the digits** of a very large integer and an integer `k`. You are allowed to swap any two adjacent digits of the integer **at most** `k` times. Return _the minimum integer you can obtain also as a string_.",
    "examples": [
      {
        "input": "num =  \"4321 \", k = 4",
        "output": "\"1342 \"",
        "explanation": "The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown."
      },
      {
        "input": "num =  \"100 \", k = 1",
        "output": "\"010 \"",
        "explanation": "It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros."
      },
      {
        "input": "num =  \"36789 \", k = 1000",
        "output": "\"36789 \"",
        "explanation": "We can keep the number without any swaps."
      }
    ],
    "constraints": [
      "`1 <= num.length <= 3  104`",
      "`num` consists of only digits and does not contain leading zeros.",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1506",
    "slug": "find-root-of-n-ary-tree",
    "title": "Find Root of N-Ary Tree",
    "difficulty": "Medium",
    "description": "You are given all the nodes of an **[N-ary tree](https://leetcode.com/explore/learn/card/n-ary-tree/)** as an array of `Node` objects, where each node has a **unique value**. Return _the **root** of the N-ary tree_. **Custom testing:** An N-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the `null` value (see examples). For example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`. The testing will be done in the following way: 1. The **input data** should be provided as a serialization of the tree. 2. The driver code will construct the tree from the serialized input data and put each `Node` object into an array **in an arbitrary order**. 3. The driver code will pass the array to `findRoot`, and your function should find and return the root `Node` object in the array. 4. The driver code will take the returned `Node` object and serialize it. If the serialized value and the input data are the **same**, the test **passes**.",
    "examples": [
      {
        "input": "tree = \\[1,null,3,2,4,null,5,6\\]",
        "output": "\\[1,null,3,2,4,null,5,6\\]",
        "explanation": "The tree from the input data is shown above."
      },
      {
        "input": "tree = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]",
        "output": "\\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]"
      }
    ],
    "constraints": [
      "The total number of nodes is between `[1, 5  104]`.",
      "Each node has a unique value.",
      "Follow up:",
      "Could you solve this problem in constant space complexity with a linear time algorithm?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1507",
    "slug": "reformat-date",
    "title": "Reformat Date",
    "difficulty": "Easy",
    "description": "Given a `date` string in the form `Day Month Year`, where: *  `Day` is in the set `{ \"1st \", \"2nd \", \"3rd \", \"4th \", ..., \"30th \", \"31st \"}`. *  `Month` is in the set `{ \"Jan \", \"Feb \", \"Mar \", \"Apr \", \"May \", \"Jun \", \"Jul \", \"Aug \", \"Sep \", \"Oct \", \"Nov \", \"Dec \"}`. *  `Year` is in the range `[1900, 2100]`. Convert the date string to the format `YYYY-MM-DD`, where: *  `YYYY` denotes the 4 digit year. *  `MM` denotes the 2 digit month. *  `DD` denotes the 2 digit day.",
    "examples": [
      {
        "input": "date =  \"20th Oct 2052 \"",
        "output": "\"2052-10-20 \""
      },
      {
        "input": "date =  \"6th Jun 1933 \"",
        "output": "\"1933-06-06 \""
      },
      {
        "input": "date =  \"26th May 1960 \"",
        "output": "\"1960-05-26 \""
      }
    ],
    "constraints": [
      "The given dates are guaranteed to be valid, so no error handling is necessary."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1508",
    "slug": "range-sum-of-sorted-subarray-sums",
    "title": "Range Sum of Sorted Subarray Sums",
    "difficulty": "Medium",
    "description": "You are given the array `nums` consisting of `n` positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of `n * (n + 1) / 2` numbers. _Return the sum of the numbers from index_ `left` _to index_ `right` (**indexed from 1**)_, inclusive, in the new array._ Since the answer can be a huge number return it modulo `109 + 7`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\], n = 4, left = 1, right = 5",
        "output": "13",
        "explanation": "All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array \\[1, 2, 3, 3, 4, 5, 6, 7, 9, 10\\]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13."
      },
      {
        "input": "nums = \\[1,2,3,4\\], n = 4, left = 3, right = 4",
        "output": "6",
        "explanation": "The given array is the same as example 1. We have the new array \\[1, 2, 3, 3, 4, 5, 6, 7, 9, 10\\]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6."
      },
      {
        "input": "nums = \\[1,2,3,4\\], n = 4, left = 1, right = 10",
        "output": "50"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 100`",
      "`1 <= left <= right <= n  (n + 1) / 2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1509",
    "slug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
    "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. In one move, you can choose one element of `nums` and change it to **any value**. Return _the minimum difference between the largest and smallest value of `nums` **after performing at most three moves**_.",
    "examples": [
      {
        "input": "nums = \\[5,3,2,4\\]",
        "output": "0",
        "explanation": "We can make at most 3 moves."
      },
      {
        "input": "nums = \\[1,5,0,10,14\\]",
        "output": "1",
        "explanation": "We can make at most 3 moves."
      },
      {
        "input": "nums = \\[3,100,20\\]",
        "output": "0",
        "explanation": "We can make at most 3 moves."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1510",
    "slug": "stone-game-iv",
    "title": "Stone Game IV",
    "difficulty": "Hard",
    "description": "Alice and Bob take turns playing a game, with Alice starting first. Initially, there are `n` stones in a pile. On each player's turn, that player makes a _move_ consisting of removing **any** non-zero **square number** of stones in the pile. Also, if a player cannot make a move, he/she loses the game. Given a positive integer `n`, return `true` if and only if Alice wins the game otherwise return `false`, assuming both players play optimally.",
    "examples": [
      {
        "input": "n = 1",
        "output": "true",
        "explanation": "Alice can remove 1 stone winning the game because Bob doesn't have any moves."
      },
      {
        "input": "n = 2",
        "output": "false",
        "explanation": "Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0)."
      },
      {
        "input": "n = 4",
        "output": "true",
        "explanation": "n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0)."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1512",
    "slug": "number-of-good-pairs",
    "title": "Number of Good Pairs",
    "difficulty": "Easy",
    "description": "Given an array of integers `nums`, return _the number of **good pairs**_. A pair `(i, j)` is called _good_ if `nums[i] == nums[j]` and `i` < `j`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,1,1,3\\]",
        "output": "4",
        "explanation": "There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed."
      },
      {
        "input": "nums = \\[1,1,1,1\\]",
        "output": "6",
        "explanation": "Each pair in the array are _good_."
      },
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1513",
    "slug": "number-of-substrings-with-only-1s",
    "title": "Number of Substrings With Only 1s",
    "difficulty": "Medium",
    "description": "Given a binary string `s`, return _the number of substrings with all characters_ `1`_'s_. Since the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      {
        "input": "s =  \"0110111 \"",
        "output": "9",
        "explanation": "There are 9 substring in total with only 1's characters."
      },
      {
        "input": "s =  \"101 \"",
        "output": "2",
        "explanation": "Substring  \"1 \" is shown 2 times in s."
      },
      {
        "input": "s =  \"111111 \"",
        "output": "21",
        "explanation": "Each substring contains only 1's characters."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1514",
    "slug": "path-with-maximum-probability",
    "title": "Path with Maximum Probability",
    "difficulty": "Medium",
    "description": "You are given an undirected weighted graph of `n` nodes (0-indexed), represented by an edge list where `edges[i] = [a, b]` is an undirected edge connecting the nodes `a` and `b` with a probability of success of traversing that edge `succProb[i]`. Given two nodes `start` and `end`, find the path with the maximum probability of success to go from `start` to `end` and return its success probability. If there is no path from `start` to `end`, **return 0**. Your answer will be accepted if it differs from the correct answer by at most **1e-5**.",
    "examples": [
      {
        "input": "n = 3, edges = \\[\\[0,1\\],\\[1,2\\],\\[0,2\\]\\], succProb = \\[0.5,0.5,0.2\\], start = 0, end = 2",
        "output": "0.25000",
        "explanation": "There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 \\* 0.5 = 0.25."
      },
      {
        "input": "n = 3, edges = \\[\\[0,1\\],\\[1,2\\],\\[0,2\\]\\], succProb = \\[0.5,0.5,0.3\\], start = 0, end = 2",
        "output": "0.30000"
      },
      {
        "input": "n = 3, edges = \\[\\[0,1\\]\\], succProb = \\[0.5\\], start = 0, end = 2",
        "output": "0.00000",
        "explanation": "There is no path between 0 and 2."
      }
    ],
    "constraints": [
      "`2 <= n <= 10^4`",
      "`0 <= start, end < n`",
      "`start != end`",
      "`0 <= a, b < n`",
      "`a != b`",
      "`0 <= succProb.length == edges.length <= 210^4`",
      "`0 <= succProb[i] <= 1`",
      "There is at most one edge between every two nodes."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1515",
    "slug": "best-position-for-a-service-centre",
    "title": "Best Position for a Service Centre",
    "difficulty": "Hard",
    "description": "A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that **the sum of the euclidean distances to all customers is minimum**. Given an array `positions` where `positions[i] = [xi, yi]` is the position of the `ith` customer on the map, return _the minimum sum of the euclidean distances_ to all customers. In other words, you need to choose the position of the service center `[xcentre, ycentre]` such that the following formula is minimized: Answers within `10-5` of the actual value will be accepted.",
    "examples": [
      {
        "input": "positions = \\[\\[0,1\\],\\[1,0\\],\\[1,2\\],\\[2,1\\]\\]",
        "output": "4.00000",
        "explanation": "As shown, you can see that choosing \\[xcentre, ycentre\\] = \\[1, 1\\] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve."
      },
      {
        "input": "positions = \\[\\[1,1\\],\\[3,3\\]\\]",
        "output": "2.82843",
        "explanation": "The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843"
      }
    ],
    "constraints": [
      "`1 <= positions.length <= 50`",
      "`positions[i].length == 2`",
      "`0 <= xi, yi <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1516",
    "slug": "move-sub-tree-of-n-ary-tree",
    "title": "Move Sub-Tree of N-Ary Tree",
    "difficulty": "Hard",
    "description": "Given the `root` of an N-ary tree of unique values, and two nodes of the tree `p` and `q`. You should move the subtree of the node `p` to become a direct child of node `q`. If `p` is already a direct child of `q`, do not change anything. Node `p` **must be** the last child in the children list of node `q`. Return _the root of the tree_ after adjusting it. There are 3 cases for nodes `p` and `q`: 1. Node `q` is in the sub-tree of node `p`. 2. Node `p` is in the sub-tree of node `q`. 3. Neither node `p` is in the sub-tree of node `q` nor node `q` is in the sub-tree of node `p`. In cases 2 and 3, you just need to move `p` (with its sub-tree) to be a child of `q`, but in case 1 the tree may be disconnected, thus you need to reconnect the tree again. **Please read the examples carefully before solving this problem.** _Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._ For example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.",
    "examples": [
      {
        "input": "root = \\[1,null,2,3,null,4,5,null,6,null,7,8\\], p = 4, q = 1",
        "output": "\\[1,null,2,3,4,null,5,null,6,null,7,8\\]",
        "explanation": "This example follows the second case as node p is in the sub-tree of node q. We move node p with its sub-tree to be a direct child of node q."
      },
      {
        "input": "root = \\[1,null,2,3,null,4,5,null,6,null,7,8\\], p = 7, q = 4",
        "output": "\\[1,null,2,3,null,4,5,null,6,null,7,8\\]",
        "explanation": "Node 7 is already a direct child of node 4. We don't change anything."
      },
      {
        "input": "root = \\[1,null,2,3,null,4,5,null,6,null,7,8\\], p = 3, q = 8",
        "output": "\\[1,null,2,null,4,5,null,7,8,null,null,null,3,null,6\\]",
        "explanation": "This example follows case 3 because node p is not in the sub-tree of node q and vice-versa. We can move node 3 with its sub-tree and make it as node 8's child."
      }
    ],
    "constraints": [
      "The total number of nodes is between `[2, 1000]`.",
      "Each node has a unique value.",
      "`p != null`",
      "`q != null`",
      "`p` and `q` are two different nodes (i.e. `p != q`)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1518",
    "slug": "water-bottles",
    "title": "Water Bottles",
    "difficulty": "Easy",
    "description": "There are `numBottles` water bottles that are initially full of water. You can exchange `numExchange` empty water bottles from the market with one full water bottle. The operation of drinking a full water bottle turns it into an empty bottle. Given the two integers `numBottles` and `numExchange`, return _the **maximum** number of water bottles you can drink_.",
    "examples": [
      {
        "input": "numBottles = 9, numExchange = 3",
        "output": "13",
        "explanation": "You can exchange 3 empty bottles to get 1 full water bottle."
      },
      {
        "input": "numBottles = 15, numExchange = 4",
        "output": "19",
        "explanation": "You can exchange 4 empty bottles to get 1 full water bottle."
      }
    ],
    "constraints": [
      "`1 <= numBottles <= 100`",
      "`2 <= numExchange <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1519",
    "slug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
    "title": "Number of Nodes in the Sub-Tree With the Same Label",
    "difficulty": "Medium",
    "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. The **root** of the tree is the node `0`, and each node of the tree has **a label** which is a lower-case character given in the string `labels` (i.e. The node with the number `i` has the label `labels[i]`). The `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree. Return _an array of size `n`_ where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`. A subtree of a tree `T` is the tree consisting of a node in `T` and all of its descendant nodes.",
    "examples": [
      {
        "input": "n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,4\\],\\[1,5\\],\\[2,3\\],\\[2,6\\]\\], labels =  \"abaedcd \"",
        "output": "\\[2,1,1,1,1,1,1\\]",
        "explanation": "Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree."
      },
      {
        "input": "n = 4, edges = \\[\\[0,1\\],\\[1,2\\],\\[0,3\\]\\], labels =  \"bbbb \"",
        "output": "\\[4,2,1,1\\]",
        "explanation": "The sub-tree of node 2 contains only node 2, so the answer is 1."
      },
      {
        "input": "n = 5, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,3\\],\\[0,4\\]\\], labels =  \"aabab \"",
        "output": "\\[3,2,1,1,1\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "`labels.length == n`",
      "`labels` is consisting of only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1520",
    "slug": "maximum-number-of-non-overlapping-substrings",
    "title": "Maximum Number of Non-Overlapping Substrings",
    "difficulty": "Hard",
    "description": "Given a string `s` of lowercase letters, you need to find the maximum number of **non-empty** substrings of `s` that meet the following conditions: 1. The substrings do not overlap, that is for any two substrings `s[i..j]` and `s[x..y]`, either `j < x` or `i > y` is true. 2. A substring that contains a certain character `c` must also contain all occurrences of `c`. Find _the maximum number of substrings that meet the above conditions_. If there are multiple solutions with the same number of substrings, _return the one with minimum total length._ It can be shown that there exists a unique solution of minimum total length. Notice that you can return the substrings in **any** order.",
    "examples": [
      {
        "input": "s =  \"adefaddaccc \"",
        "output": "\\[ \"e \", \"f \", \"ccc \"\\]",
        "explanation": "The following are all the possible substrings that meet the conditions:"
      },
      {
        "input": "s =  \"abbaccd \"",
        "output": "\\[ \"d \", \"bb \", \"cc \"\\]",
        "explanation": "Notice that while the set of substrings \\[ \"d \", \"abba \", \"cc \"\\] also has length 3, it's considered incorrect since it has larger total length."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1521",
    "slug": "find-a-value-of-a-mysterious-function-closest-to-target",
    "title": "Find a Value of a Mysterious Function Closest to Target",
    "difficulty": "Hard",
    "description": "Winston was given the above mysterious function `func`. He has an integer array `arr` and an integer `target` and he wants to find the values `l` and `r` that make the value `|func(arr, l, r) - target|` minimum possible. Return _the minimum possible value_ of `|func(arr, l, r) - target|`. Notice that `func` should be called with the values `l` and `r` where `0 <= l, r < arr.length`.",
    "examples": [
      {
        "input": "arr = \\[9,12,3,7,15\\], target = 5",
        "output": "2",
        "explanation": "Calling func with all the pairs of \\[l,r\\] = \\[\\[0,0\\],\\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\],\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[0,2\\],\\[1,3\\],\\[2,4\\],\\[0,3\\],\\[1,4\\],\\[0,4\\]\\], Winston got the following results \\[9,12,3,7,15,8,0,3,7,0,0,3,0,0,0\\]. The value closest to 5 is 7 and 3, thus the minimum difference is 2."
      },
      {
        "input": "arr = \\[1000000,1000000,1000000\\], target = 1",
        "output": "999999",
        "explanation": "Winston called the func with all possible values of \\[l,r\\] and he always got 1000000, thus the min difference is 999999."
      },
      {
        "input": "arr = \\[1,2,4,8,16\\], target = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`1 <= arr[i] <= 106`",
      "`0 <= target <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1522",
    "slug": "diameter-of-n-ary-tree",
    "title": "Diameter of N-Ary Tree",
    "difficulty": "Medium",
    "description": "Given a `root` of an [N-ary tree](https://leetcode.com/articles/introduction-to-n-ary-trees/), you need to compute the length of the diameter of the tree. The diameter of an N-ary tree is the length of the **longest** path between any two nodes in the tree. This path may or may not pass through the root. (_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)_",
    "examples": [
      {
        "input": "root = \\[1,null,3,2,4,null,5,6\\]",
        "output": "3",
        "explanation": "Diameter is shown in red color."
      },
      {
        "input": "root = \\[1,null,2,null,3,4,null,5,null,6\\]",
        "output": "4"
      },
      {
        "input": "root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]",
        "output": "7"
      }
    ],
    "constraints": [
      "The depth of the n-ary tree is less than or equal to `1000`.",
      "The total number of nodes is between `[1, 104]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1523",
    "slug": "count-odd-numbers-in-an-interval-range",
    "title": "Count Odd Numbers in an Interval Range",
    "difficulty": "Easy",
    "description": "Given two non-negative integers `low` and `high`. Return the _count of odd numbers between_ `low` _and_ `high` _(inclusive)_.",
    "examples": [
      {
        "input": "low = 3, high = 7",
        "output": "3",
        "explanation": "The odd numbers between 3 and 7 are \\[3,5,7\\]."
      },
      {
        "input": "low = 8, high = 10",
        "output": "1",
        "explanation": "The odd numbers between 8 and 10 are \\[9\\]."
      }
    ],
    "constraints": [
      "`0 <= low <= high <= 10^9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1524",
    "slug": "number-of-sub-arrays-with-odd-sum",
    "title": "Number of Sub-arrays With Odd Sum",
    "difficulty": "Medium",
    "description": "Given an array of integers `arr`, return _the number of subarrays with an **odd** sum_. Since the answer can be very large, return it modulo `109 + 7`.",
    "examples": [
      {
        "input": "arr = \\[1,3,5\\]",
        "output": "4",
        "explanation": "All subarrays are \\[\\[1\\],\\[1,3\\],\\[1,3,5\\],\\[3\\],\\[3,5\\],\\[5\\]\\]"
      },
      {
        "input": "arr = \\[2,4,6\\]",
        "output": "0",
        "explanation": "All subarrays are \\[\\[2\\],\\[2,4\\],\\[2,4,6\\],\\[4\\],\\[4,6\\],\\[6\\]\\]"
      },
      {
        "input": "arr = \\[1,2,3,4,5,6,7\\]",
        "output": "16"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`1 <= arr[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1525",
    "slug": "number-of-good-ways-to-split-a-string",
    "title": "Number of Good Ways to Split a String",
    "difficulty": "Medium",
    "description": "You are given a string `s`. A split is called **good** if you can split `s` into two non-empty strings `sleft` and `sright` where their concatenation is equal to `s` (i.e., `sleft + sright = s`) and the number of distinct letters in `sleft` and `sright` is the same. Return _the number of **good splits** you can make in `s`_.",
    "examples": [
      {
        "input": "s =  \"aacaba \"",
        "output": "2",
        "explanation": "There are 5 ways to split ` \"aacaba \"` and 2 of them are good."
      },
      {
        "input": "s =  \"abcd \"",
        "output": "1",
        "explanation": "Split the string as follows ( \"ab \",  \"cd \")."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1526",
    "slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
    "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
    "difficulty": "Hard",
    "description": "You are given an integer array `target`. You have an integer array `initial` of the same size as `target` with all elements initially zeros. In one operation you can choose **any** subarray from `initial` and increment each value by one. Return _the minimum number of operations to form a_ `target` _array from_ `initial`. The test cases are generated so that the answer fits in a 32-bit integer.",
    "examples": [
      {
        "input": "target = \\[1,2,3,2,1\\]",
        "output": "3",
        "explanation": "We need at least 3 operations to form the target array from the initial array."
      },
      {
        "input": "target = \\[3,1,1,2\\]",
        "output": "4",
        "explanation": "\\[**0,0,0,0**\\] -> \\[1,1,1,**1**\\] -> \\[**1**,1,1,2\\] -> \\[**2**,1,1,2\\] -> \\[3,1,1,2\\]"
      },
      {
        "input": "target = \\[3,1,5,4,2\\]",
        "output": "7",
        "explanation": "\\[**0,0,0,0,0**\\] -> \\[**1**,1,1,1,1\\] -> \\[**2**,1,1,1,1\\] -> \\[3,1,**1,1,1**\\] -> \\[3,1,**2,2**,2\\] -> \\[3,1,**3,3**,2\\] -> \\[3,1,**4**,4,2\\] -> \\[3,1,5,4,2\\]."
      }
    ],
    "constraints": [
      "`1 <= target.length <= 105`",
      "`1 <= target[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1528",
    "slug": "shuffle-string",
    "title": "Shuffle String",
    "difficulty": "Easy",
    "description": "You are given a string `s` and an integer array `indices` of the **same length**. The string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string. Return _the shuffled string_.",
    "examples": [
      {
        "input": "s =  \"codeleet \", `indices` = \\[4,5,6,7,0,2,1,3\\]",
        "output": "\"leetcode \"",
        "explanation": "As shown,  \"codeleet \" becomes  \"leetcode \" after shuffling."
      },
      {
        "input": "s =  \"abc \", `indices` = \\[0,1,2\\]",
        "output": "\"abc \"",
        "explanation": "After shuffling, each character remains in its position."
      }
    ],
    "constraints": [
      "`s.length == indices.length == n`",
      "`1 <= n <= 100`",
      "`s` consists of only lowercase English letters.",
      "`0 <= indices[i] < n`",
      "All values of `indices` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1529",
    "slug": "minimum-suffix-flips",
    "title": "Minimum Suffix Flips",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** binary string `target` of length `n`. You have another binary string `s` of length `n` that is initially set to all zeros. You want to make `s` equal to `target`. In one operation, you can pick an index `i` where `0 <= i < n` and flip all bits in the **inclusive** range `[i, n - 1]`. Flip means changing `'0'` to `'1'` and `'1'` to `'0'`. Return _the minimum number of operations needed to make_ `s` _equal to_ `target`.",
    "examples": [
      {
        "input": "target =  \"10111 \"",
        "output": "3",
        "explanation": "Initially, s =  \"00000 \"."
      },
      {
        "input": "target =  \"101 \"",
        "output": "3",
        "explanation": "Initially, s =  \"000 \"."
      },
      {
        "input": "target =  \"00000 \"",
        "output": "0",
        "explanation": "We do not need any operations since the initial s already equals target."
      }
    ],
    "constraints": [
      "`n == target.length`",
      "`1 <= n <= 105`",
      "`target[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1530",
    "slug": "number-of-good-leaf-nodes-pairs",
    "title": "Number of Good Leaf Nodes Pairs",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary tree and an integer `distance`. A pair of two different **leaf** nodes of a binary tree is said to be good if the length of **the shortest path** between them is less than or equal to `distance`. Return _the number of good leaf node pairs_ in the tree.",
    "examples": [
      {
        "input": "root = \\[1,2,3,null,4\\], distance = 3",
        "output": "1",
        "explanation": "The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair."
      },
      {
        "input": "root = \\[1,2,3,4,5,6,7\\], distance = 3",
        "output": "2",
        "explanation": "The good pairs are \\[4,5\\] and \\[6,7\\] with shortest path = 2. The pair \\[4,6\\] is not good because the length of ther shortest path between them is 4."
      },
      {
        "input": "root = \\[7,1,4,6,null,5,3,null,null,null,null,null,2\\], distance = 3",
        "output": "1",
        "explanation": "The only good pair is \\[2,5\\]."
      }
    ],
    "constraints": [
      "The number of nodes in the `tree` is in the range `[1, 210].`",
      "`1 <= Node.val <= 100`",
      "`1 <= distance <= 10`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1531",
    "slug": "string-compression-ii",
    "title": "String Compression II",
    "difficulty": "Hard",
    "description": "[Run-length encoding](http://en.wikipedia.org/wiki/Run-length_encoding) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string `\"aabccc \"` we replace `\"aa \"` by `\"a2 \"` and replace `\"ccc \"` by `\"c3 \"`. Thus the compressed string becomes `\"a2bc3 \"`. Notice that in this problem, we are not adding `'1'` after single characters. Given a string `s` and an integer `k`. You need to delete **at most** `k` characters from `s` such that the run-length encoded version of `s` has minimum length. Find the _minimum length of the run-length encoded version of_ `s` _after deleting at most_ `k` _characters_.",
    "examples": [
      {
        "input": "s =  \"aaabcccd \", k = 2",
        "output": "4",
        "explanation": "Compressing s without deleting anything will give us  \"a3bc3d \" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s =  \"abcccd \" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be  \"a3c3 \" of length 4."
      },
      {
        "input": "s =  \"aabbaa \", k = 2",
        "output": "2",
        "explanation": "If we delete both 'b' characters, the resulting compressed string would be  \"a4 \" of length 2."
      },
      {
        "input": "s =  \"aaaaaaaaaaa \", k = 0",
        "output": "3",
        "explanation": "Since k is zero, we cannot delete anything. The compressed string is  \"a11 \" of length 3."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`0 <= k <= s.length`",
      "`s` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1533",
    "slug": "find-the-index-of-the-large-integer",
    "title": "Find the Index of the Large Integer",
    "difficulty": "Medium",
    "description": "We have an integer array `arr`, where all the integers in `arr` are equal except for one integer which is **larger** than the rest of the integers. You will not be given direct access to the array, instead, you will have an **API** `ArrayReader` which have the following functions: *  `int compareSub(int l, int r, int x, int y)`: where `0 <= l, r, x, y < ArrayReader.length()`, `l <= r and` `x <= y`. The function compares the sum of sub-array `arr[l..r]` with the sum of the sub-array `arr[x..y]` and returns: *  **1** if `arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y]`. *  **0** if `arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]`. *  **\\-1** if `arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y]`. *  `int length()`: Returns the size of the array. You are allowed to call `compareSub()` **20 times** at most. You can assume both functions work in `O(1)` time. Return _the index of the array `arr` which has the largest integer_.",
    "examples": [
      {
        "input": "arr = \\[7,7,7,7,10,7,7,7\\]",
        "output": "4",
        "explanation": "The following calls to the API"
      },
      {
        "input": "nums = \\[6,6,12\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 5  105`",
      "`1 <= arr[i] <= 100`",
      "All elements of `arr` are equal except for one element which is larger than all other elements.",
      "Follow up:",
      "What if there are two numbers in `arr` that are bigger than all other numbers?",
      "What if there is one number that is bigger than other numbers and one number that is smaller than other numbers?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1534",
    "slug": "count-good-triplets",
    "title": "Count Good Triplets",
    "difficulty": "Easy",
    "description": "Given an array of integers `arr`, and three integers `a`, `b` and `c`. You need to find the number of good triplets. A triplet `(arr[i], arr[j], arr[k])` is **good** if the following conditions are true: *  `0 <= i < j < k < arr.length` *  `|arr[i] - arr[j]| <= a` *  `|arr[j] - arr[k]| <= b` *  `|arr[i] - arr[k]| <= c` Where `|x|` denotes the absolute value of `x`. Return _the number of good triplets_.",
    "examples": [
      {
        "input": "arr = \\[3,0,1,1,9,7\\], a = 7, b = 2, c = 3",
        "output": "4",
        "explanation": "There are 4 good triplets: \\[(3,0,1), (3,0,1), (3,1,1), (0,1,1)\\]."
      },
      {
        "input": "arr = \\[1,1,2,2,3\\], a = 0, b = 0, c = 1",
        "output": "0",
        "explanation": "No triplet satisfies all conditions."
      }
    ],
    "constraints": [
      "`3 <= arr.length <= 100`",
      "`0 <= arr[i] <= 1000`",
      "`0 <= a, b, c <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1535",
    "slug": "find-the-winner-of-an-array-game",
    "title": "Find the Winner of an Array Game",
    "difficulty": "Medium",
    "description": "Given an integer array `arr` of **distinct** integers and an integer `k`. A game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0`, and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds. Return _the integer which will win the game_. It is **guaranteed** that there will be a winner of the game.",
    "examples": [
      {
        "input": "arr = \\[2,1,3,5,4,6,7\\], k = 2",
        "output": "5",
        "explanation": "Let's see the rounds of the game:"
      },
      {
        "input": "arr = \\[3,2,1\\], k = 10",
        "output": "3",
        "explanation": "3 will win the first 10 rounds consecutively."
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 105`",
      "`1 <= arr[i] <= 106`",
      "`arr` contains distinct integers.",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1536",
    "slug": "minimum-swaps-to-arrange-a-binary-grid",
    "title": "Minimum Swaps to Arrange a Binary Grid",
    "difficulty": "Medium",
    "description": "Given an `n x n` binary `grid`, in one step you can choose two **adjacent rows** of the grid and swap them. A grid is said to be **valid** if all the cells above the main diagonal are **zeros**. Return _the minimum number of steps_ needed to make the grid valid, or **\\-1** if the grid cannot be valid. The main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and ends at cell `(n, n)`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,0,1\\],\\[1,1,0\\],\\[1,0,0\\]\\]",
        "output": "3"
      },
      {
        "input": "grid = \\[\\[0,1,1,0\\],\\[0,1,1,0\\],\\[0,1,1,0\\],\\[0,1,1,0\\]\\]",
        "output": "-1",
        "explanation": "All rows are similar, swaps have no effect on the grid."
      },
      {
        "input": "grid = \\[\\[1,0,0\\],\\[1,1,0\\],\\[1,1,1\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == grid.length` `== grid[i].length`",
      "`1 <= n <= 200`",
      "`grid[i][j]` is either `0` or `1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1537",
    "slug": "get-the-maximum-score",
    "title": "Get the Maximum Score",
    "difficulty": "Hard",
    "description": "You are given two **sorted** arrays of distinct integers `nums1` and `nums2.` A **valid path** is defined as follows: *  Choose array `nums1` or `nums2` to traverse (from index-0). *  Traverse the current array from left to right. *  If you are reading any value that is present in `nums1` and `nums2` you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path). The **score** is defined as the sum of uniques values in a valid path. Return _the maximum score you can obtain of all possible **valid paths**_. Since the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      {
        "input": "nums1 = \\[2,4,5,8,10\\], nums2 = \\[4,6,8,9\\]",
        "output": "30",
        "explanation": "Valid paths:"
      },
      {
        "input": "nums1 = \\[1,3,5,7,9\\], nums2 = \\[3,5,100\\]",
        "output": "109",
        "explanation": "Maximum sum is obtained with the path **\\[1,3,5,100\\]**."
      },
      {
        "input": "nums1 = \\[1,2,3,4,5\\], nums2 = \\[6,7,8,9,10\\]",
        "output": "40",
        "explanation": "There are no common elements between nums1 and nums2."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 105`",
      "`1 <= nums1[i], nums2[i] <= 107`",
      "`nums1` and `nums2` are strictly increasing."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1538",
    "slug": "guess-the-majority-in-a-hidden-array",
    "title": "Guess the Majority in a Hidden Array",
    "difficulty": "Medium",
    "description": "We have an integer array `nums`, where all the integers in `nums` are **0** or **1**. You will not be given direct access to the array, instead, you will have an **API** `ArrayReader` which have the following functions: *  `int query(int a, int b, int c, int d)`: where `0 <= a < b < c < d < ArrayReader.length()`. The function returns the distribution of the value of the 4 elements and returns: *  **4** : if the values of the 4 elements are the same (0 or 1). *  **2** : if three elements have a value equal to 0 and one element has value equal to 1 or vice versa. *  **0** : if two element have a value equal to 0 and two elements have a value equal to 1. *  `int length()`: Returns the size of the array. You are allowed to call `query()` **2 \\* n times** at most where n is equal to `ArrayReader.length()`. Return **any** index of the most frequent value in `nums`, in case of tie, return -1.",
    "examples": [
      {
        "input": "nums = \\[0,0,1,0,1,1,1,1\\]",
        "output": "5",
        "explanation": "The following calls to the API"
      },
      {
        "input": "nums = \\[0,0,1,1,0\\]",
        "output": "0"
      },
      {
        "input": "nums = \\[1,0,1,0,1,0,1,0\\]",
        "output": "-1"
      }
    ],
    "constraints": [
      "`5 <= nums.length <= 105`",
      "`0 <= nums[i] <= 1`",
      "Follow up: What is the minimum number of calls needed to find the majority element?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1539",
    "slug": "kth-missing-positive-number",
    "title": "Kth Missing Positive Number",
    "difficulty": "Easy",
    "description": "Given an array `arr` of positive integers sorted in a **strictly increasing order**, and an integer `k`. Return _the_ `kth` _**positive** integer that is **missing** from this array._",
    "examples": [
      {
        "input": "arr = \\[2,3,4,7,11\\], k = 5",
        "output": "9",
        "explanation": "The missing positive integers are \\[1,5,6,8,9,10,12,13,...\\]. The 5th missing positive integer is 9."
      },
      {
        "input": "arr = \\[1,2,3,4\\], k = 2",
        "output": "6",
        "explanation": "The missing positive integers are \\[5,6,7,...\\]. The 2nd missing positive integer is 6."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 1000`",
      "`1 <= arr[i] <= 1000`",
      "`1 <= k <= 1000`",
      "`arr[i] < arr[j]` for `1 <= i < j <= arr.length`",
      "Follow up:"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1540",
    "slug": "can-convert-string-in-k-moves",
    "title": "Can Convert String in K Moves",
    "difficulty": "Medium",
    "description": "Given two strings `s` and `t`, your goal is to convert `s` into `t` in `k` moves or less. During the `ith` (`1 <= i <= k`) move you can: *  Choose any index `j` (1-indexed) from `s`, such that `1 <= j <= s.length` and `j` has not been chosen in any previous move, and shift the character at that index `i` times. *  Do nothing. Shifting a character means replacing it by the next letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Shifting a character by `i` means applying the shift operations `i` times. Remember that any index `j` can be picked at most once. Return `true` if it's possible to convert `s` into `t` in no more than `k` moves, otherwise return `false`.",
    "examples": [
      {
        "input": "s =  \"input \", t =  \"ouput \", k = 9",
        "output": "true",
        "explanation": "In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'."
      },
      {
        "input": "s =  \"abc \", t =  \"bcd \", k = 10",
        "output": "false",
        "explanation": "We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s."
      },
      {
        "input": "s =  \"aab \", t =  \"bbb \", k = 27",
        "output": "true",
        "explanation": "In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'."
      }
    ],
    "constraints": [
      "`1 <= s.length, t.length <= 10^5`",
      "`0 <= k <= 10^9`",
      "`s`, `t` contain only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1541",
    "slug": "minimum-insertions-to-balance-a-parentheses-string",
    "title": "Minimum Insertions to Balance a Parentheses String",
    "difficulty": "Medium",
    "description": "Given a parentheses string `s` containing only the characters `'('` and `')'`. A parentheses string is **balanced** if: *  Any left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`. *  Left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`. In other words, we treat `'('` as an opening parenthesis and `'))'` as a closing parenthesis. *  For example, `\"()) \"`, `\"())(()))) \"` and `\"(())()))) \"` are balanced, `\")() \"`, `\"())) \"` and `\"(())) \"` are not balanced. You can insert the characters `'('` and `')'` at any position of the string to balance it if needed. Return _the minimum number of insertions_ needed to make `s` balanced.",
    "examples": [
      {
        "input": "s =  \"(())) \"",
        "output": "1",
        "explanation": "The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be  \"(()))) \" which is balanced."
      },
      {
        "input": "s =  \"()) \"",
        "output": "0",
        "explanation": "The string is already balanced."
      },
      {
        "input": "s =  \"))())( \"",
        "output": "3",
        "explanation": "Add '(' to match the first '))', Add '))' to match the last '('."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of `'('` and `')'` only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1542",
    "slug": "find-longest-awesome-substring",
    "title": "Find Longest Awesome Substring",
    "difficulty": "Hard",
    "description": "You are given a string `s`. An **awesome** substring is a non-empty substring of `s` such that we can make any number of swaps in order to make it a palindrome. Return _the length of the maximum length **awesome substring** of_ `s`.",
    "examples": [
      {
        "input": "s =  \"3242415 \"",
        "output": "5",
        "explanation": "\"24241 \" is the longest awesome substring, we can form the palindrome  \"24142 \" with some swaps."
      },
      {
        "input": "s =  \"12345678 \"",
        "output": "1"
      },
      {
        "input": "s =  \"213123 \"",
        "output": "6",
        "explanation": "\"213123 \" is the longest awesome substring, we can form the palindrome  \"231132 \" with some swaps."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists only of digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1544",
    "slug": "make-the-string-great",
    "title": "Make The String Great",
    "difficulty": "Easy",
    "description": "Given a string `s` of lower and upper case English letters. A good string is a string which doesn't have **two adjacent characters** `s[i]` and `s[i + 1]` where: *  `0 <= i <= s.length - 2` *  `s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or **vice-versa**. To make the string good, you can choose **two adjacent** characters that make the string bad and remove them. You can keep doing this until the string becomes good. Return _the string_ after making it good. The answer is guaranteed to be unique under the given constraints. **Notice** that an empty string is also good.",
    "examples": [
      {
        "input": "s =  \"leEeetcode \"",
        "output": "\"leetcode \"",
        "explanation": "In the first step, either you choose i = 1 or i = 2, both will result  \"leEeetcode \" to be reduced to  \"leetcode \"."
      },
      {
        "input": "s =  \"abBAcC \"",
        "output": "\" \"",
        "explanation": "We have many possible scenarios, and all lead to the same answer. For example:"
      },
      {
        "input": "s =  \"s \"",
        "output": "\"s \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` contains only lower and upper case English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1545",
    "slug": "find-kth-bit-in-nth-binary-string",
    "title": "Find Kth Bit in Nth Binary String",
    "difficulty": "Medium",
    "description": "Given two positive integers `n` and `k`, the binary string `Sn` is formed as follows: *  `S1 = \"0 \"` *  `Si = Si - 1 + \"1 \" + reverse(invert(Si - 1))` for `i > 1` Where `+` denotes the concatenation operation, `reverse(x)` returns the reversed string `x`, and `invert(x)` inverts all the bits in `x` (`0` changes to `1` and `1` changes to `0`). For example, the first four strings in the above sequence are: *  `S1 = \"0 \"` *  `S2 = \"0**1**1 \"` *  `S3 = \"011**1**001 \"` *  `S4 = \"0111001**1**0110001 \"` Return _the_ `kth` _bit_ _in_ `Sn`. It is guaranteed that `k` is valid for the given `n`.",
    "examples": [
      {
        "input": "n = 3, k = 1",
        "output": "\"0 \"",
        "explanation": "S3 is  \"**0**111001 \"."
      },
      {
        "input": "n = 4, k = 11",
        "output": "\"1 \"",
        "explanation": "S4 is  \"0111001101**1**0001 \"."
      }
    ],
    "constraints": [
      "`1 <= n <= 20`",
      "`1 <= k <= 2n - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1546",
    "slug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
    "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
    "difficulty": "Medium",
    "description": "Given an array `nums` and an integer `target`, return _the maximum number of **non-empty** **non-overlapping** subarrays such that the sum of values in each subarray is equal to_ `target`.",
    "examples": [
      {
        "input": "nums = \\[1,1,1,1,1\\], target = 2",
        "output": "2",
        "explanation": "There are 2 non-overlapping subarrays \\[**1,1**,1,**1,1**\\] with sum equals to target(2)."
      },
      {
        "input": "nums = \\[-1,3,5,1,4,2,-9\\], target = 6",
        "output": "2",
        "explanation": "There are 3 subarrays with sum equal to 6."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-104 <= nums[i] <= 104`",
      "`0 <= target <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1547",
    "slug": "minimum-cost-to-cut-a-stick",
    "title": "Minimum Cost to Cut a Stick",
    "difficulty": "Hard",
    "description": "Given a wooden stick of length `n` units. The stick is labelled from `0` to `n`. For example, a stick of length **6** is labelled as follows: Given an integer array `cuts` where `cuts[i]` denotes a position you should perform a cut at. You should perform the cuts in order, you can change the order of the cuts as you wish. The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation. Return _the minimum total cost_ of the cuts.",
    "examples": [
      {
        "input": "n = 7, cuts = \\[1,3,4,5\\]",
        "output": "16",
        "explanation": "Using cuts order = \\[1, 3, 4, 5\\] as in the input leads to the following scenario:"
      },
      {
        "input": "n = 9, cuts = \\[5,6,1,4,2\\]",
        "output": "22",
        "explanation": "If you try the given cuts ordering the cost will be 25."
      }
    ],
    "constraints": [
      "`2 <= n <= 106`",
      "`1 <= cuts.length <= min(n - 1, 100)`",
      "`1 <= cuts[i] <= n - 1`",
      "All the integers in `cuts` array are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1548",
    "slug": "the-most-similar-path-in-a-graph",
    "title": "The Most Similar Path in a Graph",
    "difficulty": "Hard",
    "description": "We have `n` cities and `m` bi-directional `roads` where `roads[i] = [ai, bi]` connects city `ai` with city `bi`. Each city has a name consisting of exactly three upper-case English letters given in the string array `names`. Starting at any city `x`, you can reach any city `y` where `y != x` (i.e., the cities and the roads are forming an undirected connected graph). You will be given a string array `targetPath`. You should find a path in the graph of the **same length** and with the **minimum edit distance** to `targetPath`. You need to return _the order of the nodes in the path with the minimum edit distance_. The path should be of the same length of `targetPath` and should be valid (i.e., there should be a direct road between `ans[i]` and `ans[i + 1]`). If there are multiple answers return any one of them. The **edit distance** is defined as follows:",
    "examples": [
      {
        "input": "n = 5, roads = \\[\\[0,2\\],\\[0,3\\],\\[1,2\\],\\[1,3\\],\\[1,4\\],\\[2,4\\]\\], names = \\[ \"ATL \", \"PEK \", \"LAX \", \"DXB \", \"HND \"\\], targetPath = \\[ \"ATL \", \"DXB \", \"HND \", \"LAX \"\\]",
        "output": "\\[0,2,4,2\\]",
        "explanation": "\\[0,2,4,2\\], \\[0,3,0,2\\] and \\[0,3,1,2\\] are accepted answers."
      },
      {
        "input": "n = 4, roads = \\[\\[1,0\\],\\[2,0\\],\\[3,0\\],\\[2,1\\],\\[3,1\\],\\[3,2\\]\\], names = \\[ \"ATL \", \"PEK \", \"LAX \", \"DXB \"\\], targetPath = \\[ \"ABC \", \"DEF \", \"GHI \", \"JKL \", \"MNO \", \"PQR \", \"STU \", \"VWX \"\\]",
        "output": "\\[0,1,0,1,0,1,0,1\\]",
        "explanation": "Any path in this graph has edit distance = 8 with targetPath."
      },
      {
        "input": "n = 6, roads = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,5\\]\\], names = \\[ \"ATL \", \"PEK \", \"LAX \", \"ATL \", \"DXB \", \"HND \"\\], targetPath = \\[ \"ATL \", \"DXB \", \"HND \", \"DXB \", \"ATL \", \"LAX \", \"PEK \"\\]",
        "output": "\\[3,4,5,4,3,2,1\\]",
        "explanation": "\\[3,4,5,4,3,2,1\\] is the only path with edit distance = 0 with targetPath."
      }
    ],
    "constraints": [
      "`2 <= n <= 100`",
      "`m == roads.length`",
      "`n - 1 <= m <= (n  (n - 1) / 2)`",
      "`0 <= ai, bi <= n - 1`",
      "`ai != bi`",
      "The graph is guaranteed to be connected and each pair of nodes may have at most one direct road.",
      "`names.length == n`",
      "`names[i].length == 3`",
      "`names[i]` consists of upper-case English letters.",
      "There can be two cities with the same name.",
      "`1 <= targetPath.length <= 100`",
      "`targetPath[i].length == 3`",
      "`targetPath[i]` consists of upper-case English letters.",
      "Follow up: If each node can be visited only once in the path, What should you change in your solution?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1550",
    "slug": "three-consecutive-odds",
    "title": "Three Consecutive Odds",
    "difficulty": "Easy",
    "description": "Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.",
    "examples": [
      {
        "input": "arr = \\[2,6,4,1\\]",
        "output": "false",
        "explanation": "There are no three consecutive odds."
      },
      {
        "input": "arr = \\[1,2,34,3,4,5,7,23,12\\]",
        "output": "true",
        "explanation": "\\[5,7,23\\] are three consecutive odds."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 1000`",
      "`1 <= arr[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1551",
    "slug": "minimum-operations-to-make-array-equal",
    "title": "Minimum Operations to Make Array Equal",
    "difficulty": "Medium",
    "description": "You have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e., `0 <= i < n`). In one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e., perform `arr[x] -=1` and `arr[y] += 1`). The goal is to make all the elements of the array **equal**. It is **guaranteed** that all the elements of the array can be made equal using some operations. Given an integer `n`, the length of the array, return _the minimum number of operations_ needed to make all the elements of arr equal.",
    "examples": [
      {
        "input": "n = 3",
        "output": "2",
        "explanation": "arr = \\[1, 3, 5\\]"
      },
      {
        "input": "n = 6",
        "output": "9"
      }
    ],
    "constraints": [
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1552",
    "slug": "magnetic-force-between-two-balls",
    "title": "Magnetic Force Between Two Balls",
    "difficulty": "Medium",
    "description": "In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has `n` empty baskets, the `ith` basket is at `position[i]`, Morty has `m` balls and needs to distribute the balls into the baskets such that the **minimum magnetic force** between any two balls is **maximum**. Rick stated that magnetic force between two different balls at positions `x` and `y` is `|x - y|`. Given the integer array `position` and the integer `m`. Return _the required force_.",
    "examples": [
      {
        "input": "position = \\[1,2,3,4,7\\], m = 3",
        "output": "3",
        "explanation": "Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs \\[3, 3, 6\\]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3."
      },
      {
        "input": "position = \\[5,4,3,2,1,1000000000\\], m = 2",
        "output": "999999999",
        "explanation": "We can use baskets 1 and 1000000000."
      }
    ],
    "constraints": [
      "`n == position.length`",
      "`2 <= n <= 105`",
      "`1 <= position[i] <= 109`",
      "All integers in `position` are distinct.",
      "`2 <= m <= position.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1553",
    "slug": "minimum-number-of-days-to-eat-n-oranges",
    "title": "Minimum Number of Days to Eat N Oranges",
    "difficulty": "Hard",
    "description": "There are `n` oranges in the kitchen and you decided to eat some of these oranges every day as follows: *  Eat one orange. *  If the number of remaining oranges `n` is divisible by `2` then you can eat `n / 2` oranges. *  If the number of remaining oranges `n` is divisible by `3` then you can eat `2 * (n / 3)` oranges. You can only choose one of the actions per day. Given the integer `n`, return _the minimum number of days to eat_ `n` _oranges_.",
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "You have 10 oranges."
      },
      {
        "input": "n = 6",
        "output": "3",
        "explanation": "You have 6 oranges."
      }
    ],
    "constraints": [
      "`1 <= n <= 2  109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1554",
    "slug": "strings-differ-by-one-character",
    "title": "Strings Differ by One Character",
    "difficulty": "Medium",
    "description": "Given a list of strings `dict` where all the strings are of the same length. Return `true` if there are 2 strings that only differ by 1 character in the same index, otherwise return `false`.",
    "examples": [
      {
        "input": "dict = \\[ \"abcd \", \"acbd \",  \"aacd \"\\]",
        "output": "true",
        "explanation": "Strings  \"a**b**cd \" and  \"a**a**cd \" differ only by one character in the index 1."
      },
      {
        "input": "dict = \\[ \"ab \", \"cd \", \"yz \"\\]",
        "output": "false"
      },
      {
        "input": "dict = \\[ \"abcd \", \"cccc \", \"abyd \", \"abab \"\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "The number of characters in `dict <= 105`",
      "`dict[i].length == dict[j].length`",
      "`dict[i]` should be unique.",
      "`dict[i]` contains only lowercase English letters.",
      "Follow up: Could you solve this problem in `O(n  m)` where n is the length of `dict` and `m` is the length of each string."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1556",
    "slug": "thousand-separator",
    "title": "Thousand Separator",
    "difficulty": "Easy",
    "description": "Given an integer `n`, add a dot ( \". \") as the thousands separator and return it in string format.",
    "examples": [
      {
        "input": "n = 987",
        "output": "\"987 \""
      },
      {
        "input": "n = 1234",
        "output": "\"1.234 \""
      }
    ],
    "constraints": [
      "`0 <= n <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1557",
    "slug": "minimum-number-of-vertices-to-reach-all-nodes",
    "title": "Minimum Number of Vertices to Reach All Nodes",
    "difficulty": "Medium",
    "description": "Given a **directed acyclic graph**, with `n` vertices numbered from `0` to `n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a directed edge from node `fromi` to node `toi`. Find _the smallest set of vertices from which all nodes in the graph are reachable_. It's guaranteed that a unique solution exists. Notice that you can return the vertices in any order.",
    "examples": [
      {
        "input": "n = 6, edges = \\[\\[0,1\\],\\[0,2\\],\\[2,5\\],\\[3,4\\],\\[4,2\\]\\]",
        "output": "\\[0,3\\]",
        "explanation": "It's not possible to reach all the nodes from a single vertex. From 0 we can reach \\[0,1,2,5\\]. From 3 we can reach \\[3,4,2,5\\]. So we output \\[0,3\\]."
      },
      {
        "input": "n = 5, edges = \\[\\[0,1\\],\\[2,1\\],\\[3,1\\],\\[1,4\\],\\[2,4\\]\\]",
        "output": "\\[0,2,3\\]",
        "explanation": "Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4."
      }
    ],
    "constraints": [
      "`2 <= n <= 10^5`",
      "`1 <= edges.length <= min(10^5, n  (n - 1) / 2)`",
      "`edges[i].length == 2`",
      "`0 <= fromi, toi < n`",
      "All pairs `(fromi, toi)` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1558",
    "slug": "minimum-numbers-of-function-calls-to-make-target-array",
    "title": "Minimum Numbers of Function Calls to Make Target Array",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. You have an integer array `arr` of the same length with all values set to `0` initially. You also have the following `modify` function: You want to use the modify function to covert `arr` to `nums` using the minimum number of calls. Return _the minimum number of function calls to make_ `nums` _from_ `arr`. The test cases are generated so that the answer fits in a **32-bit** signed integer.",
    "examples": [
      {
        "input": "nums = \\[1,5\\]",
        "output": "5",
        "explanation": "Increment by 1 (second element): \\[0, 0\\] to get \\[0, 1\\] (1 operation)."
      },
      {
        "input": "nums = \\[2,2\\]",
        "output": "3",
        "explanation": "Increment by 1 (both elements) \\[0, 0\\] -> \\[0, 1\\] -> \\[1, 1\\] (2 operations)."
      },
      {
        "input": "nums = \\[4,2,5\\]",
        "output": "6",
        "explanation": "(initial)\\[0,0,0\\] -> \\[1,0,0\\] -> \\[1,0,1\\] -> \\[2,0,2\\] -> \\[2,1,2\\] -> \\[4,2,4\\] -> **\\[4,2,5\\]**(nums)."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1559",
    "slug": "detect-cycles-in-2d-grid",
    "title": "Detect Cycles in 2D Grid",
    "difficulty": "Medium",
    "description": "Given a 2D array of characters `grid` of size `m x n`, you need to find if there exists any cycle consisting of the **same value** in `grid`. A cycle is a path of **length 4 or more** in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the **same value** of the current cell. Also, you cannot move to the cell that you visited in your last move. For example, the cycle `(1, 1) -> (1, 2) -> (1, 1)` is invalid because from `(1, 2)` we visited `(1, 1)` which was the last visited cell. Return `true` if any cycle of the same value exists in `grid`, otherwise, return `false`.",
    "examples": [
      {
        "input": "grid = \\[\\[ \"a \", \"a \", \"a \", \"a \"\\],\\[ \"a \", \"b \", \"b \", \"a \"\\],\\[ \"a \", \"b \", \"b \", \"a \"\\],\\[ \"a \", \"a \", \"a \", \"a \"\\]\\]",
        "output": "true",
        "explanation": "There are two valid cycles shown in different colors in the image below:"
      },
      {
        "input": "grid = \\[\\[ \"c \", \"c \", \"c \", \"a \"\\],\\[ \"c \", \"d \", \"c \", \"c \"\\],\\[ \"c \", \"c \", \"e \", \"c \"\\],\\[ \"f \", \"c \", \"c \", \"c \"\\]\\]",
        "output": "true",
        "explanation": "There is only one valid cycle highlighted in the image below:"
      },
      {
        "input": "grid = \\[\\[ \"a \", \"b \", \"b \"\\],\\[ \"b \", \"z \", \"b \"\\],\\[ \"b \", \"b \", \"a \"\\]\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 500`",
      "`grid` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1560",
    "slug": "most-visited-sector-in-a-circular-track",
    "title": "Most Visited Sector in  a Circular Track",
    "difficulty": "Easy",
    "description": "Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]` Return _an array of the most visited sectors_ sorted in **ascending** order. Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).",
    "examples": [
      {
        "input": "n = 4, rounds = \\[1,3,1,2\\]",
        "output": "\\[1,2\\]",
        "explanation": "The marathon starts at sector 1. The order of the visited sectors is as follows:"
      },
      {
        "input": "n = 2, rounds = \\[2,1,2,1,2,1,2,1,2\\]",
        "output": "\\[2\\]"
      },
      {
        "input": "n = 7, rounds = \\[1,3,5,7\\]",
        "output": "\\[1,2,3,4,5,6,7\\]"
      }
    ],
    "constraints": [
      "`2 <= n <= 100`",
      "`1 <= m <= 100`",
      "`rounds.length == m + 1`",
      "`1 <= rounds[i] <= n`",
      "`rounds[i] != rounds[i + 1]` for `0 <= i < m`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1561",
    "slug": "maximum-number-of-coins-you-can-get",
    "title": "Maximum Number of Coins You Can Get",
    "difficulty": "Medium",
    "description": "There are `3n` piles of coins of varying size, you and your friends will take piles of coins as follows: *  In each step, you will choose **any** `3` piles of coins (not necessarily consecutive). *  Of your choice, Alice will pick the pile with the maximum number of coins. *  You will pick the next pile with the maximum number of coins. *  Your friend Bob will pick the last pile. *  Repeat until there are no more piles of coins. Given an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile. Return the maximum number of coins that you can have.",
    "examples": [
      {
        "input": "piles = \\[2,4,1,2,7,8\\]",
        "output": "9",
        "explanation": "Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with **7** coins and Bob the last one."
      },
      {
        "input": "piles = \\[2,4,5\\]",
        "output": "4"
      },
      {
        "input": "piles = \\[9,8,7,6,5,1,2,3,4\\]",
        "output": "18"
      }
    ],
    "constraints": [
      "`3 <= piles.length <= 105`",
      "`piles.length % 3 == 0`",
      "`1 <= piles[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1562",
    "slug": "find-latest-group-of-size-m",
    "title": "Find Latest Group of Size M",
    "difficulty": "Medium",
    "description": "Given an array `arr` that represents a permutation of numbers from `1` to `n`. You have a binary string of size `n` that initially has all its bits set to zero. At each step `i` (assuming both the binary string and `arr` are 1-indexed) from `1` to `n`, the bit at position `arr[i]` is set to `1`. You are also given an integer `m`. Find the latest step at which there exists a group of ones of length `m`. A group of ones is a contiguous substring of `1`'s such that it cannot be extended in either direction. Return _the latest step at which there exists a group of ones of length **exactly**_ `m`. _If no such group exists, return_ `-1`.",
    "examples": [
      {
        "input": "arr = \\[3,5,1,2,4\\], m = 1",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "arr = \\[3,1,5,4,2\\], m = 2",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == arr.length`",
      "`1 <= m <= n <= 105`",
      "`1 <= arr[i] <= n`",
      "All integers in `arr` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1563",
    "slug": "stone-game-v",
    "title": "Stone Game V",
    "difficulty": "Hard",
    "description": "There are several stones **arranged in a row**, and each stone has an associated value which is an integer given in the array `stoneValue`. In each round of the game, Alice divides the row into **two non-empty rows** (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row. The game ends when there is only **one stone remaining**. Alice's is initially **zero**. Return _the maximum score that Alice can obtain_.",
    "examples": [
      {
        "input": "stoneValue = \\[6,2,3,4,5,5\\]",
        "output": "18",
        "explanation": "In the first round, Alice divides the row to \\[6,2,3\\], \\[4,5,5\\]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11."
      },
      {
        "input": "stoneValue = \\[7,7,7,7,7,7,7\\]",
        "output": "28"
      },
      {
        "input": "stoneValue = \\[4\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= stoneValue.length <= 500`",
      "`1 <= stoneValue[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1564",
    "slug": "put-boxes-into-the-warehouse-i",
    "title": "Put Boxes Into the Warehouse I",
    "difficulty": "Medium",
    "description": "You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labelled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room. Boxes are put into the warehouse by the following rules: *  Boxes cannot be stacked. *  You can rearrange the insertion order of the boxes. *  Boxes can only be pushed into the warehouse from left to right only. *  If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room. Return _the maximum number of boxes you can put into the warehouse._",
    "examples": [
      {
        "input": "boxes = \\[4,3,4,1\\], warehouse = \\[5,3,3,4,1\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "boxes = \\[1,2,2,3,4\\], warehouse = \\[3,4,1,2\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "boxes = \\[1,2,3\\], warehouse = \\[1,2,3,4\\]",
        "output": "1",
        "explanation": "Since the first room in the warehouse is of height 1, we can only put boxes of height 1."
      }
    ],
    "constraints": [
      "`n == warehouse.length`",
      "`1 <= boxes.length, warehouse.length <= 105`",
      "`1 <= boxes[i], warehouse[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1566",
    "slug": "detect-pattern-of-length-m-repeated-k-or-more-times",
    "title": "Detect Pattern of Length M Repeated K or More Times",
    "difficulty": "Easy",
    "description": "Given an array of positive integers `arr`, find a pattern of length `m` that is repeated `k` or more times. A **pattern** is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times **consecutively** without overlapping. A pattern is defined by its length and the number of repetitions. Return `true` _if there exists a pattern of length_ `m` _that is repeated_ `k` _or more times, otherwise return_ `false`.",
    "examples": [
      {
        "input": "arr = \\[1,2,4,4,4,4\\], m = 1, k = 3",
        "output": "true",
        "explanation": "The pattern **(4)** of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less."
      },
      {
        "input": "arr = \\[1,2,1,2,1,1,1,3\\], m = 2, k = 2",
        "output": "true",
        "explanation": "The pattern **(1,2)** of length 2 is repeated 2 consecutive times. Another valid pattern **(2,1) is** also repeated 2 times."
      },
      {
        "input": "arr = \\[1,2,1,2,1,3\\], m = 2, k = 3",
        "output": "false",
        "explanation": "The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times."
      }
    ],
    "constraints": [
      "`2 <= arr.length <= 100`",
      "`1 <= arr[i] <= 100`",
      "`1 <= m <= 100`",
      "`2 <= k <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1567",
    "slug": "maximum-length-of-subarray-with-positive-product",
    "title": "Maximum Length of Subarray With Positive Product",
    "difficulty": "Medium",
    "description": "Given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive. A subarray of an array is a consecutive sequence of zero or more values taken out of that array. Return _the maximum length of a subarray with positive product_.",
    "examples": [
      {
        "input": "nums = \\[1,-2,-3,4\\]",
        "output": "4",
        "explanation": "The array nums already has a positive product of 24."
      },
      {
        "input": "nums = \\[0,1,-2,-3,-4\\]",
        "output": "3",
        "explanation": "The longest subarray with positive product is \\[1,-2,-3\\] which has a product of 6."
      },
      {
        "input": "nums = \\[-1,-2,-3,0,1\\]",
        "output": "2",
        "explanation": "The longest subarray with positive product is \\[-1,-2\\] or \\[-2,-3\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1568",
    "slug": "minimum-number-of-days-to-disconnect-island",
    "title": "Minimum Number of Days to Disconnect Island",
    "difficulty": "Hard",
    "description": "You are given an `m x n` binary grid `grid` where `1` represents land and `0` represents water. An **island** is a maximal **4-directionally** (horizontal or vertical) connected group of `1`'s. The grid is said to be **connected** if we have **exactly one island**, otherwise is said **disconnected**. In one day, we are allowed to change **any** single land cell `(1)` into a water cell `(0)`. Return _the minimum number of days to disconnect the grid_.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1,1,0\\],\\[0,1,1,0\\],\\[0,0,0,0\\]\\]",
        "output": "2",
        "explanation": "We need at least 2 days to get a disconnected grid."
      },
      {
        "input": "grid = \\[\\[1,1\\]\\]",
        "output": "2",
        "explanation": "Grid of full water is also disconnected (\\[\\[1,1\\]\\] -> \\[\\[0,0\\]\\]), 0 islands."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 30`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1569",
    "slug": "number-of-ways-to-reorder-array-to-get-same-bst",
    "title": "Number of Ways to Reorder Array to Get Same BST",
    "difficulty": "Hard",
    "description": "Given an array `nums` that represents a permutation of integers from `1` to `n`. We are going to construct a binary search tree (BST) by inserting the elements of `nums` in order into an initially empty BST. Find the number of different ways to reorder `nums` so that the constructed BST is identical to that formed from the original array `nums`. *  For example, given `nums = [2,1,3]`, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array `[2,3,1]` also yields the same BST but `[3,2,1]` yields a different BST. Return _the number of ways to reorder_ `nums` _such that the BST formed is identical to the original BST formed from_ `nums`. Since the answer may be very large, **return it modulo** `109 + 7`.",
    "examples": [
      {
        "input": "nums = \\[2,1,3\\]",
        "output": "1",
        "explanation": "We can reorder nums to be \\[2,3,1\\] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST."
      },
      {
        "input": "nums = \\[3,4,5,1,2\\]",
        "output": "5",
        "explanation": "The following 5 arrays will yield the same BST:"
      },
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "0",
        "explanation": "There are no other orderings of nums that will yield the same BST."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= nums.length`",
      "All integers in `nums` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1570",
    "slug": "dot-product-of-two-sparse-vectors",
    "title": "Dot Product of Two Sparse Vectors",
    "difficulty": "Medium",
    "description": "Given two sparse vectors, compute their dot product. Implement class `SparseVector`: *  `SparseVector(nums)` Initializes the object with the vector `nums` *  `dotProduct(vec)` Compute the dot product between the instance of _SparseVector_ and `vec` A **sparse vector** is a vector that has mostly zero values, you should store the sparse vector **efficiently** and compute the dot product between two _SparseVector_. **Follow up:** What if only one of the vectors is sparse?",
    "examples": [
      {
        "input": "nums1 = \\[1,0,0,2,3\\], nums2 = \\[0,3,0,4,0\\]",
        "output": "8",
        "explanation": "v1 = SparseVector(nums1) , v2 = SparseVector(nums2)"
      },
      {
        "input": "nums1 = \\[0,1,0,0,0\\], nums2 = \\[0,0,0,0,2\\]",
        "output": "0",
        "explanation": "v1 = SparseVector(nums1) , v2 = SparseVector(nums2)"
      },
      {
        "input": "nums1 = \\[0,1,0,0,2,0,0\\], nums2 = \\[1,0,0,0,3,0,4\\]",
        "output": "6"
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`1 <= n <= 10^5`",
      "`0 <= nums1[i], nums2[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1572",
    "slug": "matrix-diagonal-sum",
    "title": "Matrix Diagonal Sum",
    "difficulty": "Easy",
    "description": "Given a square matrix `mat`, return the sum of the matrix diagonals. Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.",
    "examples": [
      {
        "input": "mat = \\[\\[**1**,2,**3**\\],",
        "output": "25",
        "explanation": "Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25"
      },
      {
        "input": "mat = \\[\\[**1**,1,1,**1**\\],",
        "output": "8"
      },
      {
        "input": "mat = \\[\\[**5**\\]\\]",
        "output": "5"
      }
    ],
    "constraints": [
      "`n == mat.length == mat[i].length`",
      "`1 <= n <= 100`",
      "`1 <= mat[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1573",
    "slug": "number-of-ways-to-split-a-string",
    "title": "Number of Ways to Split a String",
    "difficulty": "Medium",
    "description": "Given a binary string `s`, you can split `s` into 3 **non-empty** strings `s1`, `s2`, and `s3` where `s1 + s2 + s3 = s`. Return the number of ways `s` can be split such that the number of ones is the same in `s1`, `s2`, and `s3`. Since the answer may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "s =  \"10101 \"",
        "output": "4",
        "explanation": "There are four ways to split s in 3 parts where each part contain the same number of letters '1'."
      },
      {
        "input": "s =  \"1001 \"",
        "output": "0"
      },
      {
        "input": "s =  \"0000 \"",
        "output": "3",
        "explanation": "There are three ways to split s in 3 parts."
      }
    ],
    "constraints": [
      "`3 <= s.length <= 105`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1574",
    "slug": "shortest-subarray-to-be-removed-to-make-array-sorted",
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "difficulty": "Medium",
    "description": "Given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are **non-decreasing**. Return _the length of the shortest subarray to remove_. A **subarray** is a contiguous subsequence of the array.",
    "examples": [
      {
        "input": "arr = \\[1,2,3,10,4,2,3,5\\]",
        "output": "3",
        "explanation": "The shortest subarray we can remove is \\[10,4,2\\] of length 3. The remaining elements after that will be \\[1,2,3,3,5\\] which are sorted."
      },
      {
        "input": "arr = \\[5,4,3,2,1\\]",
        "output": "4",
        "explanation": "Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either \\[5,4,3,2\\] or \\[4,3,2,1\\]."
      },
      {
        "input": "arr = \\[1,2,3\\]",
        "output": "0",
        "explanation": "The array is already non-decreasing. We do not need to remove any elements."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`0 <= arr[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1575",
    "slug": "count-all-possible-routes",
    "title": "Count All Possible Routes",
    "difficulty": "Hard",
    "description": "You are given an array of **distinct** positive integers locations where `locations[i]` represents the position of city `i`. You are also given integers `start`, `finish` and `fuel` representing the starting city, ending city, and the initial amount of fuel you have, respectively. At each step, if you are at city `i`, you can pick any city `j` such that `j != i` and `0 <= j < locations.length` and move to city `j`. Moving from city `i` to city `j` reduces the amount of fuel you have by `|locations[i] - locations[j]|`. Please notice that `|x|` denotes the absolute value of `x`. Notice that `fuel` **cannot** become negative at any point in time, and that you are **allowed** to visit any city more than once (including `start` and `finish`). Return _the count of all possible routes from_ `start` _to_ `finish`. Since the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      {
        "input": "locations = \\[2,3,6,8,4\\], start = 1, finish = 3, fuel = 5",
        "output": "4",
        "explanation": "The following are all possible routes, each uses 5 units of fuel:"
      },
      {
        "input": "locations = \\[4,3,1\\], start = 1, finish = 0, fuel = 6",
        "output": "5",
        "explanation": "The following are all possible routes:"
      },
      {
        "input": "locations = \\[5,2,1\\], start = 0, finish = 2, fuel = 3",
        "output": "0",
        "explanation": "It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel."
      }
    ],
    "constraints": [
      "`2 <= locations.length <= 100`",
      "`1 <= locations[i] <= 109`",
      "All integers in `locations` are distinct.",
      "`0 <= start, finish < locations.length`",
      "`1 <= fuel <= 200`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1576",
    "slug": "replace-all-s-to-avoid-consecutive-repeating-characters",
    "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
    "difficulty": "Easy",
    "description": "Given a string `s` containing only lowercase English letters and the `'?'` character, convert **all** the `'?'` characters into lowercase letters such that the final string does not contain any **consecutive repeating** characters. You **cannot** modify the non `'?'` characters. It is **guaranteed** that there are no consecutive repeating characters in the given string **except** for `'?'`. Return _the final string after all the conversions (possibly zero) have been made_. If there is more than one solution, return **any of them**. It can be shown that an answer is always possible with the given constraints.",
    "examples": [
      {
        "input": "s =  \"?zs \"",
        "output": "\"azs \"",
        "explanation": "There are 25 solutions for this problem. From  \"azs \" to  \"yzs \", all are valid. Only  \"z \" is an invalid modification as the string will consist of consecutive repeating characters in  \"zzs \"."
      },
      {
        "input": "s =  \"ubv?w \"",
        "output": "\"ubvaw \"",
        "explanation": "There are 24 solutions for this problem. Only  \"v \" and  \"w \" are invalid modifications as the strings will consist of consecutive repeating characters in  \"ubvvw \" and  \"ubvww \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consist of lowercase English letters and `'?'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1577",
    "slug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
    "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "difficulty": "Medium",
    "description": "Given two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules: *  Type 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`. *  Type 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.",
    "examples": [
      {
        "input": "nums1 = \\[7,4\\], nums2 = \\[5,2,8,9\\]",
        "output": "1",
        "explanation": "Type 1: (1, 1, 2), nums1\\[1\\]2 = nums2\\[1\\] \\* nums2\\[2\\]. (42 = 2 \\* 8)."
      },
      {
        "input": "nums1 = \\[1,1\\], nums2 = \\[1,1,1\\]",
        "output": "9",
        "explanation": "All Triplets are valid, because 12 = 1 \\* 1."
      },
      {
        "input": "nums1 = \\[7,7,8,3\\], nums2 = \\[1,2,9,7\\]",
        "output": "2",
        "explanation": "There are 2 valid triplets."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 1000`",
      "`1 <= nums1[i], nums2[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1578",
    "slug": "minimum-time-to-make-rope-colorful",
    "title": "Minimum Time to Make Rope Colorful",
    "difficulty": "Medium",
    "description": "Alice has `n` balloons arranged on a rope. You are given a **0-indexed** string `colors` where `colors[i]` is the color of the `ith` balloon. Alice wants the rope to be **colorful**. She does not want **two consecutive balloons** to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it **colorful**. You are given a **0-indexed** integer array `neededTime` where `neededTime[i]` is the time (in seconds) that Bob needs to remove the `ith` balloon from the rope. Return _the **minimum time** Bob needs to make the rope **colorful**_.",
    "examples": [
      {
        "input": "colors =  \"abaac \", neededTime = \\[1,2,3,4,5\\]",
        "output": "3",
        "explanation": "In the above image, 'a' is blue, 'b' is red, and 'c' is green."
      },
      {
        "input": "colors =  \"abc \", neededTime = \\[1,2,3\\]",
        "output": "0",
        "explanation": "The rope is already colorful. Bob does not need to remove any balloons from the rope."
      },
      {
        "input": "colors =  \"aabaa \", neededTime = \\[1,2,3,4,1\\]",
        "output": "2",
        "explanation": "Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove."
      }
    ],
    "constraints": [
      "`n == colors.length == neededTime.length`",
      "`1 <= n <= 105`",
      "`1 <= neededTime[i] <= 104`",
      "`colors` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1579",
    "slug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
    "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
    "difficulty": "Hard",
    "description": "Alice and Bob have an undirected graph of `n` nodes and three types of edges: *  Type 1: Can be traversed by Alice only. *  Type 2: Can be traversed by Bob only. *  Type 3: Can be traversed by both Alice and Bob. Given an array `edges` where `edges[i] = [typei, ui, vi]` represents a bidirectional edge of type `typei` between nodes `ui` and `vi`, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes. Return _the maximum number of edges you can remove, or return_ `-1` _if Alice and Bob cannot fully traverse the graph._",
    "examples": [
      {
        "input": "n = 4, edges = \\[\\[3,1,2\\],\\[3,2,3\\],\\[1,1,3\\],\\[1,2,4\\],\\[1,1,2\\],\\[2,3,4\\]\\]",
        "output": "2",
        "explanation": "If we remove the 2 edges \\[1,1,2\\] and \\[1,1,3\\]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2."
      },
      {
        "input": "n = 4, edges = \\[\\[3,1,2\\],\\[3,2,3\\],\\[1,1,4\\],\\[2,1,4\\]\\]",
        "output": "0",
        "explanation": "Notice that removing any edge will not make the graph fully traversable by Alice and Bob."
      },
      {
        "input": "n = 4, edges = \\[\\[3,2,3\\],\\[1,1,2\\],\\[2,3,4\\]\\]",
        "output": "-1",
        "explanation": "In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`1 <= edges.length <= min(105, 3  n  (n - 1) / 2)`",
      "`edges[i].length == 3`",
      "`1 <= typei <= 3`",
      "`1 <= ui < vi <= n`",
      "All tuples `(typei, ui, vi)` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1580",
    "slug": "put-boxes-into-the-warehouse-ii",
    "title": "Put Boxes Into the Warehouse II",
    "difficulty": "Medium",
    "description": "You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labeled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room. Boxes are put into the warehouse by the following rules: *  Boxes cannot be stacked. *  You can rearrange the insertion order of the boxes. *  Boxes can be pushed into the warehouse from **either side** (left or right) *  If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room. Return _the maximum number of boxes you can put into the warehouse._",
    "examples": [
      {
        "input": "boxes = \\[1,2,2,3,4\\], warehouse = \\[3,4,1,2\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "boxes = \\[3,5,5,2\\], warehouse = \\[2,1,3,4,5\\]",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == warehouse.length`",
      "`1 <= boxes.length, warehouse.length <= 105`",
      "`1 <= boxes[i], warehouse[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1582",
    "slug": "special-positions-in-a-binary-matrix",
    "title": "Special Positions in a Binary Matrix",
    "difficulty": "Easy",
    "description": "Given an `m x n` binary matrix `mat`, return _the number of special positions in_ `mat`_._ A position `(i, j)` is called **special** if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are **0-indexed**).",
    "examples": [
      {
        "input": "mat = \\[\\[1,0,0\\],\\[0,0,1\\],\\[1,0,0\\]\\]",
        "output": "1",
        "explanation": "(1, 2) is a special position because mat\\[1\\]\\[2\\] == 1 and all other elements in row 1 and column 2 are 0."
      },
      {
        "input": "mat = \\[\\[1,0,0\\],\\[0,1,0\\],\\[0,0,1\\]\\]",
        "output": "3",
        "explanation": "(0, 0), (1, 1) and (2, 2) are special positions."
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 100`",
      "`mat[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1583",
    "slug": "count-unhappy-friends",
    "title": "Count Unhappy Friends",
    "difficulty": "Medium",
    "description": "You are given a list of `preferences` for `n` friends, where `n` is always **even**. For each person `i`, `preferences[i]` contains a list of friends **sorted** in the **order of preference**. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from `0` to `n-1`. All the friends are divided into pairs. The pairings are given in a list `pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi` is paired with `xi`. However, this pairing may cause some of the friends to be unhappy. A friend `x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is paired with `v` but: *  `x` prefers `u` over `y`, and *  `u` prefers `x` over `v`. Return _the number of unhappy friends_.",
    "examples": [
      {
        "input": "n = 4, preferences = \\[\\[1, 2, 3\\], \\[3, 2, 0\\], \\[3, 1, 0\\], \\[1, 2, 0\\]\\], pairs = \\[\\[0, 1\\], \\[2, 3\\]\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "n = 2, preferences = \\[\\[1\\], \\[0\\]\\], pairs = \\[\\[1, 0\\]\\]",
        "output": "0",
        "explanation": "Both friends 0 and 1 are happy."
      },
      {
        "input": "n = 4, preferences = \\[\\[1, 3, 2\\], \\[2, 3, 0\\], \\[1, 3, 0\\], \\[0, 2, 1\\]\\], pairs = \\[\\[1, 3\\], \\[0, 2\\]\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`2 <= n <= 500`",
      "`n` is even.",
      "`preferences.length == n`",
      "`preferences[i].length == n - 1`",
      "`0 <= preferences[i][j] <= n - 1`",
      "`preferences[i]` does not contain `i`.",
      "All values in `preferences[i]` are unique.",
      "`pairs.length == n/2`",
      "`pairs[i].length == 2`",
      "`xi != yi`",
      "`0 <= xi, yi <= n - 1`",
      "Each person is contained in exactly one pair."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1584",
    "slug": "min-cost-to-connect-all-points",
    "title": "Min Cost to Connect All Points",
    "difficulty": "Medium",
    "description": "You are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`. The cost of connecting two points `[xi, yi]` and `[xj, yj]` is the **manhattan distance** between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the absolute value of `val`. Return _the minimum cost to make all points connected._ All points are connected if there is **exactly one** simple path between any two points.",
    "examples": [
      {
        "input": "points = \\[\\[0,0\\],\\[2,2\\],\\[3,10\\],\\[5,2\\],\\[7,0\\]\\]",
        "output": "20",
        "explanation": ""
      },
      {
        "input": "points = \\[\\[3,12\\],\\[-2,5\\],\\[-4,1\\]\\]",
        "output": "18"
      }
    ],
    "constraints": [
      "`1 <= points.length <= 1000`",
      "`-106 <= xi, yi <= 106`",
      "All pairs `(xi, yi)` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1585",
    "slug": "check-if-string-is-transformable-with-substring-sort-operations",
    "title": "Check If String Is Transformable With Substring Sort Operations",
    "difficulty": "Hard",
    "description": "Given two strings `s` and `t`, transform string `s` into string `t` using the following operation any number of times: *  Choose a **non-empty** substring in `s` and sort it in place so the characters are in **ascending order**. *  For example, applying the operation on the underlined substring in `\"14234 \"` results in `\"12344 \"`. Return `true` if _it is possible to transform `s` into `t`_. Otherwise, return `false`. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"84532 \", t =  \"34852 \"",
        "output": "true",
        "explanation": "You can transform s into t using the following sort operations:"
      },
      {
        "input": "s =  \"34521 \", t =  \"23415 \"",
        "output": "true",
        "explanation": "You can transform s into t using the following sort operations:"
      },
      {
        "input": "s =  \"12345 \", t =  \"12435 \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`s.length == t.length`",
      "`1 <= s.length <= 105`",
      "`s` and `t` consist of only digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1586",
    "slug": "binary-search-tree-iterator-ii",
    "title": "Binary Search Tree Iterator II",
    "difficulty": "Medium",
    "description": "Implement the `BSTIterator` class that represents an iterator over the **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** of a binary search tree (BST): *  `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST. *  `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`. *  `int next()` Moves the pointer to the right, then returns the number at the pointer. *  `boolean hasPrev()` Returns `true` if there exists a number in the traversal to the left of the pointer, otherwise returns `false`. *  `int prev()` Moves the pointer to the left, then returns the number at the pointer. Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST. You may assume that `next()` and `prev()` calls will always be valid. That is, there will be at least a next/previous number in the in-order traversal when `next()`/`prev()` is called.",
    "examples": [],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 105]`.",
      "`0 <= Node.val <= 106`",
      "At most `105` calls will be made to `hasNext`, `next`, `hasPrev`, and `prev`.",
      "Follow up: Could you solve the problem without precalculating the values of the tree?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1588",
    "slug": "sum-of-all-odd-length-subarrays",
    "title": "Sum of All Odd Length Subarrays",
    "difficulty": "Easy",
    "description": "Given an array of positive integers `arr`, return _the sum of all possible **odd-length subarrays** of_ `arr`. A **subarray** is a contiguous subsequence of the array.",
    "examples": [
      {
        "input": "arr = \\[1,4,2,5,3\\]",
        "output": "58",
        "explanation": "The odd-length subarrays of arr and their sums are:"
      },
      {
        "input": "arr = \\[1,2\\]",
        "output": "3",
        "explanation": "There are only 2 subarrays of odd length, \\[1\\] and \\[2\\]. Their sum is 3."
      },
      {
        "input": "arr = \\[10,11,12\\]",
        "output": "66"
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 100`",
      "`1 <= arr[i] <= 1000`",
      "Follow up:"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1589",
    "slug": "maximum-sum-obtained-of-any-permutation",
    "title": "Maximum Sum Obtained of Any Permutation",
    "difficulty": "Medium",
    "description": "We have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. The `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are _0-indexed_. Return _the maximum total sum of all requests **among all permutations** of_ `nums`. Since the answer may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4,5\\], requests = \\[\\[1,3\\],\\[0,1\\]\\]",
        "output": "19",
        "explanation": "One permutation of nums is \\[2,1,3,4,5\\] with the following result:"
      },
      {
        "input": "nums = \\[1,2,3,4,5,6\\], requests = \\[\\[0,1\\]\\]",
        "output": "11",
        "explanation": "A permutation with the max total sum is \\[6,5,4,3,2,1\\] with request sums \\[11\\]."
      },
      {
        "input": "nums = \\[1,2,3,4,5,10\\], requests = \\[\\[0,2\\],\\[1,3\\],\\[1,1\\]\\]",
        "output": "47",
        "explanation": "A permutation with the max total sum is \\[4,10,5,3,2,1\\] with request sums \\[19,18,10\\]."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`0 <= nums[i] <= 105`",
      "`1 <= requests.length <= 105`",
      "`requests[i].length == 2`",
      "`0 <= starti <= endi < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1590",
    "slug": "make-sum-divisible-by-p",
    "title": "Make Sum Divisible by P",
    "difficulty": "Medium",
    "description": "Given an array of positive integers `nums`, remove the **smallest** subarray (possibly **empty**) such that the **sum** of the remaining elements is divisible by `p`. It is **not** allowed to remove the whole array. Return _the length of the smallest subarray that you need to remove, or_ `-1` _if it's impossible_. A **subarray** is defined as a contiguous block of elements in the array.",
    "examples": [
      {
        "input": "nums = \\[3,1,4,2\\], p = 6",
        "output": "1",
        "explanation": "The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray \\[4\\], and the sum of the remaining elements is 6, which is divisible by 6."
      },
      {
        "input": "nums = \\[6,3,5,2\\], p = 9",
        "output": "2",
        "explanation": "We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray \\[5,2\\], leaving us with \\[6,3\\] with sum 9."
      },
      {
        "input": "nums = \\[1,2,3\\], p = 3",
        "output": "0",
        "explanation": "Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`",
      "`1 <= p <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1591",
    "slug": "strange-printer-ii",
    "title": "Strange Printer II",
    "difficulty": "Hard",
    "description": "There is a strange printer with the following two special requirements: *  On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle. *  Once the printer has used a color for the above operation, **the same color cannot be used again**. You are given a `m x n` matrix `targetGrid`, where `targetGrid[row][col]` is the color in the position `(row, col)` of the grid. Return `true` _if it is possible to print the matrix_ `targetGrid`_,_ _otherwise, return_ `false`.",
    "examples": [
      {
        "input": "targetGrid = \\[\\[1,1,1,1\\],\\[1,2,2,1\\],\\[1,2,2,1\\],\\[1,1,1,1\\]\\]",
        "output": "true"
      },
      {
        "input": "targetGrid = \\[\\[1,1,1,1\\],\\[1,1,3,3\\],\\[1,1,3,4\\],\\[5,5,1,4\\]\\]",
        "output": "true"
      },
      {
        "input": "targetGrid = \\[\\[1,2,1\\],\\[2,1,2\\],\\[1,2,1\\]\\]",
        "output": "false",
        "explanation": "It is impossible to form targetGrid because it is not allowed to print the same color in different turns."
      }
    ],
    "constraints": [
      "`m == targetGrid.length`",
      "`n == targetGrid[i].length`",
      "`1 <= m, n <= 60`",
      "`1 <= targetGrid[row][col] <= 60`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1592",
    "slug": "rearrange-spaces-between-words",
    "title": "Rearrange Spaces Between Words",
    "difficulty": "Easy",
    "description": "You are given a string `text` of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that `text` **contains at least one word**. Rearrange the spaces so that there is an **equal** number of spaces between every pair of adjacent words and that number is **maximized**. If you cannot redistribute all the spaces equally, place the **extra spaces at the end**, meaning the returned string should be the same length as `text`. Return _the string after rearranging the spaces_.",
    "examples": [
      {
        "input": "text =  \"  this   is  a sentence  \"",
        "output": "\"this   is   a   sentence \"",
        "explanation": "There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces."
      },
      {
        "input": "text =  \" practice   makes   perfect \"",
        "output": "\"practice   makes   perfect  \"",
        "explanation": "There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string."
      }
    ],
    "constraints": [
      "`1 <= text.length <= 100`",
      "`text` consists of lowercase English letters and `' '`.",
      "`text` contains at least one word."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1593",
    "slug": "split-a-string-into-the-max-number-of-unique-substrings",
    "title": "Split a String Into the Max Number of Unique Substrings",
    "difficulty": "Medium",
    "description": "Given a string `s`, return _the maximum number of unique substrings that the given string can be split into_. You can split string `s` into any list of **non-empty substrings**, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are **unique**. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"ababccc \"",
        "output": "5"
      },
      {
        "input": "s =  \"aba \"",
        "output": "2"
      },
      {
        "input": "s =  \"aa \"",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 16`",
      "`s` contains only lower case English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1594",
    "slug": "maximum-non-negative-product-in-a-matrix",
    "title": "Maximum Non Negative Product in a Matrix",
    "difficulty": "Medium",
    "description": "You are given a `m x n` matrix `grid`. Initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only **move right or down** in the matrix. Among all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(m - 1, n - 1)`, find the path with the **maximum non-negative product**. The product of a path is the product of all integers in the grid cells visited along the path. Return the _maximum non-negative product **modulo**_ `109 + 7`. _If the maximum product is **negative**, return_ `-1`. Notice that the modulo is performed after getting the maximum product.",
    "examples": [
      {
        "input": "grid = \\[\\[-1,-2,-3\\],\\[-2,-3,-3\\],\\[-3,-3,-2\\]\\]",
        "output": "-1",
        "explanation": "It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1."
      },
      {
        "input": "grid = \\[\\[1,-2,1\\],\\[1,-2,1\\],\\[3,-4,1\\]\\]",
        "output": "8",
        "explanation": "Maximum non-negative product is shown (1 \\* 1 \\* -2 \\* -4 \\* 1 = 8)."
      },
      {
        "input": "grid = \\[\\[1,3\\],\\[0,-4\\]\\]",
        "output": "0",
        "explanation": "Maximum non-negative product is shown (1 \\* 0 \\* -4 = 0)."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 15`",
      "`-4 <= grid[i][j] <= 4`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1595",
    "slug": "minimum-cost-to-connect-two-groups-of-points",
    "title": "Minimum Cost to Connect Two Groups of Points",
    "difficulty": "Hard",
    "description": "You are given two groups of points where the first group has `size1` points, the second group has `size2` points, and `size1 >= size2`. The `cost` of the connection between any two points are given in an `size1 x size2` matrix where `cost[i][j]` is the cost of connecting point `i` of the first group and point `j` of the second group. The groups are connected if **each point in both groups is connected to one or more points in the opposite group**. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group. Return _the minimum cost it takes to connect the two groups_.",
    "examples": [
      {
        "input": "cost = \\[\\[15, 96\\], \\[36, 2\\]\\]",
        "output": "17"
      },
      {
        "input": "cost = \\[\\[1, 3, 5\\], \\[4, 1, 1\\], \\[1, 5, 3\\]\\]",
        "output": "4"
      },
      {
        "input": "cost = \\[\\[2, 5, 1\\], \\[3, 4, 7\\], \\[8, 1, 2\\], \\[6, 2, 4\\], \\[3, 8, 8\\]\\]",
        "output": "10"
      }
    ],
    "constraints": [
      "`size1 == cost.length`",
      "`size2 == cost[i].length`",
      "`1 <= size1, size2 <= 12`",
      "`size1 >= size2`",
      "`0 <= cost[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1597",
    "slug": "build-binary-expression-tree-from-infix-expression",
    "title": "Build Binary Expression Tree From Infix Expression",
    "difficulty": "Hard",
    "description": "A **[binary expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree)** is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with 2 children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division). For each internal node with operator `o`, the [**infix expression**](https://en.wikipedia.org/wiki/Infix_notation) it represents is `(A o B)`, where `A` is the expression the left subtree represents and `B` is the expression the right subtree represents. You are given a string `s`, an **infix expression** containing operands, the operators described above, and parentheses `'('` and `')'`. Return _any valid **binary expression tree**, whose **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** reproduces_ `s` _after omitting the parenthesis from it._ **Please note that order of operations applies in** `s`**.** That is, expressions in parentheses are evaluated first, and multiplication and division happen before addition and subtraction. Operands must also appear in the **same order** in both `s` and the in-order traversal of the tree.",
    "examples": [
      {
        "input": "s =  \"3\\*4-2\\*5 \"",
        "output": "\\[-,\\*,\\*,3,4,2,5\\]",
        "explanation": "The tree above is the only valid tree whose inorder traversal produces s."
      },
      {
        "input": "s =  \"2-3/(5\\*2)+1 \"",
        "output": "\\[+,-,1,2,/,null,null,null,null,3,\\*,null,null,5,2\\]",
        "explanation": "The inorder traversal of the tree above is 2-3/5\\*2+1 which is the same as s without the parenthesis. The tree also produces the correct result and its operands are in the same order as they appear in s."
      },
      {
        "input": "s =  \"1+2+3+4+5 \"",
        "output": "\\[+,+,5,+,4,null,null,+,3,null,null,1,2\\]",
        "explanation": "The tree \\[+,+,5,+,+,null,null,1,2,3,4\\] is also one of many other valid trees."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consists of digits and the characters `'+'`, `'-'`, `''`, and `'/'`.",
      "Operands in `s` are exactly 1 digit.",
      "It is guaranteed that `s` is a valid expression."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1598",
    "slug": "crawler-log-folder",
    "title": "Crawler Log Folder",
    "difficulty": "Easy",
    "description": "The Leetcode file system keeps a log each time some user performs a _change folder_ operation. The operations are described below: *  `\"../ \"` : Move to the parent folder of the current folder. (If you are already in the main folder, **remain in the same folder**). *  `\"./ \"` : Remain in the same folder. *  `\"x/ \"` : Move to the child folder named `x` (This folder is **guaranteed to always exist**). You are given a list of strings `logs` where `logs[i]` is the operation performed by the user at the `ith` step. The file system starts in the main folder, then the operations in `logs` are performed. Return _the minimum number of operations needed to go back to the main folder after the change folder operations._",
    "examples": [
      {
        "input": "logs = \\[ \"d1/ \", \"d2/ \", \"../ \", \"d21/ \", \"./ \"\\]",
        "output": "2",
        "explanation": "Use this change folder operation  \"../ \" 2 times and go back to the main folder."
      },
      {
        "input": "logs = \\[ \"d1/ \", \"d2/ \", \"./ \", \"d3/ \", \"../ \", \"d31/ \"\\]",
        "output": "3"
      },
      {
        "input": "logs = \\[ \"d1/ \", \"../ \", \"../ \", \"../ \"\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= logs.length <= 103`",
      "`2 <= logs[i].length <= 10`",
      "`logs[i]` contains lowercase English letters, digits, `'.'`, and `'/'`.",
      "`logs[i]` follows the format described in the statement.",
      "Folder names consist of lowercase English letters and digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1599",
    "slug": "maximum-profit-of-operating-a-centennial-wheel",
    "title": "Maximum Profit of Operating a Centennial Wheel",
    "difficulty": "Medium",
    "description": "You are the operator of a Centennial Wheel that has **four gondolas**, and each gondola has room for **up** **to** **four people**. You have the ability to rotate the gondolas **counterclockwise**, which costs you `runningCost` dollars. You are given an array `customers` of length `n` where `customers[i]` is the number of new customers arriving just before the `ith` rotation (0-indexed). This means you **must rotate the wheel** `i` **times before the** `customers[i]` **customers arrive**. **You cannot make customers wait if there is room in the gondola**. Each customer pays `boardingCost` dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again. You can stop the wheel at any time, including **before** **serving** **all** **customers**. If you decide to stop serving customers, **all subsequent rotations are free** in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait **for the next rotation**. Return _the minimum number of rotations you need to perform to maximize your profit._ If there is **no scenario** where the profit is positive, return `-1`.",
    "examples": [
      {
        "input": "customers = \\[8,3\\], boardingCost = 5, runningCost = 6",
        "output": "3",
        "explanation": "The numbers written on the gondolas are the number of people currently there."
      },
      {
        "input": "customers = \\[10,9,6\\], boardingCost = 6, runningCost = 4",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "customers = \\[3,4,0,5,1\\], boardingCost = 1, runningCost = 92",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == customers.length`",
      "`1 <= n <= 105`",
      "`0 <= customers[i] <= 50`",
      "`1 <= boardingCost, runningCost <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1600",
    "slug": "throne-inheritance",
    "title": "Throne Inheritance",
    "difficulty": "Medium",
    "description": "A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born. The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function `Successor(x, curOrder)`, which given a person `x` and the inheritance order so far, returns who should be the next person after `x` in the order of inheritance. Successor(x, curOrder): if x has no children or all of x's children are in curOrder: if x is the king return null else return Successor(x's parent, curOrder) else return x's oldest child who's not in curOrder For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack. 1. In the beginning, `curOrder` will be `[ \"king \"]`. 2. Calling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[ \"king \", \"Alice \"]`. 3. Calling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[ \"king \", \"Alice \", \"Jack \"]`. 4. Calling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[ \"king \", \"Alice \", \"Jack \", \"Bob \"]`. 5. Calling `Successor(Bob, curOrder)` will return `null`. Thus the order of inheritance will be `[ \"king \", \"Alice \", \"Jack \", \"Bob \"]`. Using the above function, we can always obtain a unique order of inheritance. Implement the `ThroneInheritance` class: *  `ThroneInheritance(string kingName)` Initializes an object of the `ThroneInheritance` class. The name of the king is given as part of the constructor. *  `void birth(string parentName, string childName)` Indicates that `parentName` gave birth to `childName`. *  `void death(string name)` Indicates the death of `name`. The death of the person doesn't affect the `Successor` function nor the current inheritance order. You can treat it as just marking the person as dead. *  `string[] getInheritanceOrder()` Returns a list representing the current order of inheritance **excluding** dead people.",
    "examples": [],
    "constraints": [
      "`1 <= kingName.length, parentName.length, childName.length, name.length <= 15`",
      "`kingName`, `parentName`, `childName`, and `name` consist of lowercase English letters only.",
      "All arguments `childName` and `kingName` are distinct.",
      "All `name` arguments of `death` will be passed to either the constructor or as `childName` to `birth` first.",
      "For each call to `birth(parentName, childName)`, it is guaranteed that `parentName` is alive.",
      "At most `105` calls will be made to `birth` and `death`.",
      "At most `10` calls will be made to `getInheritanceOrder`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1601",
    "slug": "maximum-number-of-achievable-transfer-requests",
    "title": "Maximum Number of Achievable Transfer Requests",
    "difficulty": "Hard",
    "description": "We have `n` buildings numbered from `0` to `n - 1`. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in. You are given an array `requests` where `requests[i] = [fromi, toi]` represents an employee's request to transfer from building `fromi` to building `toi`. **All buildings are full**, so a list of requests is achievable only if for each building, the **net change in employee transfers is zero**. This means the number of employees **leaving** is **equal** to the number of employees **moving in**. For example if `n = 3` and two employees are leaving building `0`, one is leaving building `1`, and one is leaving building `2`, there should be two employees moving to building `0`, one employee moving to building `1`, and one employee moving to building `2`. Return _the maximum number of achievable requests_.",
    "examples": [
      {
        "input": "n = 5, requests = \\[\\[0,1\\],\\[1,0\\],\\[0,1\\],\\[1,2\\],\\[2,0\\],\\[3,4\\]\\]",
        "output": "5"
      },
      {
        "input": "n = 3, requests = \\[\\[0,0\\],\\[1,2\\],\\[2,1\\]\\]",
        "output": "3"
      },
      {
        "input": "n = 4, requests = \\[\\[0,3\\],\\[3,1\\],\\[1,2\\],\\[2,0\\]\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= n <= 20`",
      "`1 <= requests.length <= 16`",
      "`requests[i].length == 2`",
      "`0 <= fromi, toi < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1602",
    "slug": "find-nearest-right-node-in-binary-tree",
    "title": "Find Nearest Right Node in Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree and a node `u` in the tree, return _the **nearest** node on the **same level** that is to the **right** of_ `u`_, or return_ `null` _if_ `u` _is the rightmost node in its level_.",
    "examples": [
      {
        "input": "root = \\[1,2,3,null,4,5,6\\], u = 4",
        "output": "5",
        "explanation": "The nearest node on the same level to the right of node 4 is node 5."
      },
      {
        "input": "root = \\[3,null,4,2\\], u = 2",
        "output": "null",
        "explanation": "There are no nodes to the right of 2."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 105]`.",
      "`1 <= Node.val <= 105`",
      "All values in the tree are distinct.",
      "`u` is a node in the binary tree rooted at `root`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1603",
    "slug": "design-parking-system",
    "title": "Design Parking System",
    "difficulty": "Easy",
    "description": "Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size. Implement the `ParkingSystem` class: *  `ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor. *  `bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. **A car can only park in a parking space of its** `carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.",
    "examples": [],
    "constraints": [
      "`0 <= big, medium, small <= 1000`",
      "`carType` is `1`, `2`, or `3`",
      "At most `1000` calls will be made to `addCar`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1604",
    "slug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
    "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "difficulty": "Medium",
    "description": "LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an **alert** if any worker uses the key-card **three or more times** in a one-hour period. You are given a list of strings `keyName` and `keyTime` where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time when their key-card was used **in a** **single day**. Access times are given in the **24-hour time format \"HH:MM \"**, such as `\"23:51 \"` and `\"09:49 \"`. Return a _list of unique worker names who received an alert for frequent keycard use_. Sort the names in **ascending order alphabetically**. Notice that `\"10:00 \"` - `\"11:00 \"` is considered to be within a one-hour period, while `\"22:51 \"` - `\"23:52 \"` is not considered to be within a one-hour period.",
    "examples": [
      {
        "input": "keyName = \\[ \"daniel \", \"daniel \", \"daniel \", \"luis \", \"luis \", \"luis \", \"luis \"\\], keyTime = \\[ \"10:00 \", \"10:40 \", \"11:00 \", \"09:00 \", \"11:00 \", \"13:00 \", \"15:00 \"\\]",
        "output": "\\[ \"daniel \"\\]",
        "explanation": "\"daniel \" used the keycard 3 times in a one-hour period ( \"10:00 \", \"10:40 \",  \"11:00 \")."
      },
      {
        "input": "keyName = \\[ \"alice \", \"alice \", \"alice \", \"bob \", \"bob \", \"bob \", \"bob \"\\], keyTime = \\[ \"12:01 \", \"12:00 \", \"18:00 \", \"21:00 \", \"21:20 \", \"21:30 \", \"23:00 \"\\]",
        "output": "\\[ \"bob \"\\]",
        "explanation": "\"bob \" used the keycard 3 times in a one-hour period ( \"21:00 \", \"21:20 \",  \"21:30 \")."
      }
    ],
    "constraints": [
      "`1 <= keyName.length, keyTime.length <= 105`",
      "`keyName.length == keyTime.length`",
      "`keyTime[i]` is in the format \"HH:MM \".",
      "`[keyName[i], keyTime[i]]` is unique.",
      "`1 <= keyName[i].length <= 10`",
      "`keyName[i] contains only lowercase English letters.`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1605",
    "slug": "find-valid-matrix-given-row-and-column-sums",
    "title": "Find Valid Matrix Given Row and Column Sums",
    "difficulty": "Medium",
    "description": "You are given two arrays `rowSum` and `colSum` of non-negative integers where `rowSum[i]` is the sum of the elements in the `ith` row and `colSum[j]` is the sum of the elements of the `jth` column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column. Find any matrix of **non-negative** integers of size `rowSum.length x colSum.length` that satisfies the `rowSum` and `colSum` requirements. Return _a 2D array representing **any** matrix that fulfills the requirements_. It's guaranteed that **at least one** matrix that fulfills the requirements exists.",
    "examples": [
      {
        "input": "rowSum = \\[3,8\\], colSum = \\[4,7\\]",
        "output": "\\[\\[3,0\\],",
        "explanation": ""
      },
      {
        "input": "rowSum = \\[5,7,10\\], colSum = \\[8,6,8\\]",
        "output": "\\[\\[0,5,0\\],"
      }
    ],
    "constraints": [
      "`1 <= rowSum.length, colSum.length <= 500`",
      "`0 <= rowSum[i], colSum[i] <= 108`",
      "`sum(rowSum) == sum(colSum)`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1606",
    "slug": "find-servers-that-handled-most-number-of-requests",
    "title": "Find Servers That Handled Most Number of Requests",
    "difficulty": "Hard",
    "description": "You have `k` servers numbered from `0` to `k-1` that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but **cannot handle more than one request at a time**. The requests are assigned to servers according to a specific algorithm: *  The `ith` (0-indexed) request arrives. *  If all servers are busy, the request is dropped (not handled at all). *  If the `(i % k)th` server is available, assign the request to that server. *  Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the `ith` server is busy, try to assign the request to the `(i+1)th` server, then the `(i+2)th` server, and so on. You are given a **strictly increasing** array `arrival` of positive integers, where `arrival[i]` represents the arrival time of the `ith` request, and another array `load`, where `load[i]` represents the load of the `ith` request (the time it takes to complete). Your goal is to find the **busiest server(s)**. A server is considered **busiest** if it handled the most number of requests successfully among all the servers. Return _a list containing the IDs (0-indexed) of the **busiest server(s)**_. You may return the IDs in any order.",
    "examples": [
      {
        "input": "k = 3, arrival = \\[1,2,3,4,5\\], load = \\[5,2,3,3,3\\]",
        "output": "\\[1\\]",
        "explanation": ""
      },
      {
        "input": "k = 3, arrival = \\[1,2,3,4\\], load = \\[1,2,1,2\\]",
        "output": "\\[0\\]",
        "explanation": ""
      },
      {
        "input": "k = 3, arrival = \\[1,2,3\\], load = \\[10,12,11\\]",
        "output": "\\[0,1,2\\]",
        "explanation": "Each server handles a single request, so they are all considered the busiest."
      }
    ],
    "constraints": [
      "`1 <= k <= 105`",
      "`1 <= arrival.length, load.length <= 105`",
      "`arrival.length == load.length`",
      "`1 <= arrival[i], load[i] <= 109`",
      "`arrival` is strictly increasing."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1608",
    "slug": "special-array-with-x-elements-greater-than-or-equal-x",
    "title": "Special Array With X Elements Greater Than or Equal X",
    "difficulty": "Easy",
    "description": "You are given an array `nums` of non-negative integers. `nums` is considered **special** if there exists a number `x` such that there are **exactly** `x` numbers in `nums` that are **greater than or equal to** `x`. Notice that `x` **does not** have to be an element in `nums`. Return `x` _if the array is **special**, otherwise, return_ `-1`. It can be proven that if `nums` is special, the value for `x` is **unique**.",
    "examples": [
      {
        "input": "nums = \\[3,5\\]",
        "output": "2",
        "explanation": "There are 2 values (3 and 5) that are greater than or equal to 2."
      },
      {
        "input": "nums = \\[0,0\\]",
        "output": "-1",
        "explanation": "No numbers fit the criteria for x."
      },
      {
        "input": "nums = \\[0,4,3,0,4\\]",
        "output": "3",
        "explanation": "There are 3 values that are greater than or equal to 3."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`0 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1609",
    "slug": "even-odd-tree",
    "title": "Even Odd Tree",
    "difficulty": "Medium",
    "description": "A binary tree is named **Even-Odd** if it meets the following conditions: *  The root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc. *  For every **even-indexed** level, all nodes at the level have **odd** integer values in **strictly increasing** order (from left to right). *  For every **odd-indexed** level, all nodes at the level have **even** integer values in **strictly decreasing** order (from left to right). Given the `root` of a binary tree, _return_ `true` _if the binary tree is **Even-Odd**, otherwise return_ `false`_._",
    "examples": [
      {
        "input": "root = \\[1,10,4,3,null,7,9,12,8,6,null,null,2\\]",
        "output": "true",
        "explanation": "The node values on each level are:"
      },
      {
        "input": "root = \\[5,4,2,3,3,7\\]",
        "output": "false",
        "explanation": "The node values on each level are:"
      },
      {
        "input": "root = \\[5,9,1,3,5,7\\]",
        "output": "false",
        "explanation": "Node values in the level 1 should be even integers."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 105]`.",
      "`1 <= Node.val <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1610",
    "slug": "maximum-number-of-visible-points",
    "title": "Maximum Number of Visible Points",
    "difficulty": "Hard",
    "description": "You are given an array `points`, an integer `angle`, and your `location`, where `location = [posx, posy]` and `points[i] = [xi, yi]` both denote **integral coordinates** on the X-Y plane. Initially, you are facing directly east from your position. You **cannot move** from your position, but you can **rotate**. In other words, `posx` and `posy` cannot be changed. Your field of view in **degrees** is represented by `angle`, determining how wide you can see from any given view direction. Let `d` be the amount in degrees that you rotate counterclockwise. Then, your field of view is the **inclusive** range of angles `[d - angle/2, d + angle/2]`. Your browser does not support the video tag or this video format. You can **see** some set of points if, for each point, the **angle** formed by the point, your position, and the immediate east direction from your position is **in your field of view**. There can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points. Return _the maximum number of points you can see_.",
    "examples": [
      {
        "input": "points = \\[\\[2,1\\],\\[2,2\\],\\[3,3\\]\\], angle = 90, location = \\[1,1\\]",
        "output": "3",
        "explanation": "The shaded region represents your field of view. All points can be made visible in your field of view, including \\[3,3\\] even though \\[2,2\\] is in front and in the same line of sight."
      },
      {
        "input": "points = \\[\\[2,1\\],\\[2,2\\],\\[3,4\\],\\[1,1\\]\\], angle = 90, location = \\[1,1\\]",
        "output": "4",
        "explanation": "All points can be made visible in your field of view, including the one at your location."
      },
      {
        "input": "points = \\[\\[1,0\\],\\[2,1\\]\\], angle = 13, location = \\[1,1\\]",
        "output": "1",
        "explanation": "You can only see one of the two points, as shown above."
      }
    ],
    "constraints": [
      "`1 <= points.length <= 105`",
      "`points[i].length == 2`",
      "`location.length == 2`",
      "`0 <= angle < 360`",
      "`0 <= posx, posy, xi, yi <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1611",
    "slug": "minimum-one-bit-operations-to-make-integers-zero",
    "title": "Minimum One Bit Operations to Make Integers Zero",
    "difficulty": "Hard",
    "description": "Given an integer `n`, you must transform it into `0` using the following operations any number of times: *  Change the rightmost (`0th`) bit in the binary representation of `n`. *  Change the `ith` bit in the binary representation of `n` if the `(i-1)th` bit is set to `1` and the `(i-2)th` through `0th` bits are set to `0`. Return _the minimum number of operations to transform_ `n` _into_ `0`_._",
    "examples": [
      {
        "input": "n = 3",
        "output": "2",
        "explanation": "The binary representation of 3 is  \"11 \"."
      },
      {
        "input": "n = 6",
        "output": "4",
        "explanation": "The binary representation of 6 is  \"110 \"."
      }
    ],
    "constraints": [
      "`0 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1612",
    "slug": "check-if-two-expression-trees-are-equivalent",
    "title": "Check If Two Expression Trees are Equivalent",
    "difficulty": "Medium",
    "description": "A **[binary expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree)** is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (variables), and internal nodes (nodes with two children) correspond to the operators. In this problem, we only consider the `'+'` operator (i.e. addition). You are given the roots of two binary expression trees, `root1` and `root2`. Return `true` _if the two binary expression trees are equivalent_. Otherwise, return `false`. Two binary expression trees are equivalent if they **evaluate to the same value** regardless of what the variables are set to.",
    "examples": [
      {
        "input": "root1 = \\[x\\], root2 = \\[x\\]",
        "output": "true"
      },
      {
        "input": "root1 = \\[+,a,+,null,null,b,c\\], root2 = \\[+,+,a,b,c\\]",
        "output": "true"
      },
      {
        "input": "root1 = \\[+,a,+,null,null,b,c\\], root2 = \\[+,+,a,b,d\\]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in both trees are equal, odd and, in the range `[1, 4999]`.",
      "`Node.val` is `'+'` or a lower-case English letter.",
      "It's guaranteed that the tree given is a valid binary expression tree.",
      "Follow up: What will you change in your solution if the tree also supports the `'-'` operator (i.e. subtraction)?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1614",
    "slug": "maximum-nesting-depth-of-the-parentheses",
    "title": "Maximum Nesting Depth of the Parentheses",
    "difficulty": "Easy",
    "description": "A string is a **valid parentheses string** (denoted **VPS**) if it meets one of the following: *  It is an empty string `\" \"`, or a single character not equal to `\"( \"` or `\") \"`, *  It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are **VPS**'s, or *  It can be written as `(A)`, where `A` is a **VPS**. We can similarly define the **nesting depth** `depth(S)` of any VPS `S` as follows: *  `depth( \" \") = 0` *  `depth(C) = 0`, where `C` is a string with a single character not equal to `\"( \"` or `\") \"`. *  `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are **VPS**'s. *  `depth( \"( \" + A + \") \") = 1 + depth(A)`, where `A` is a **VPS**. For example, `\" \"`, `\"()() \"`, and `\"()(()()) \"` are **VPS**'s (with nesting depths 0, 1, and 2), and `\")( \"` and `\"(() \"` are not **VPS**'s. Given a **VPS** represented as string `s`, return _the **nesting depth** of_ `s`.",
    "examples": [
      {
        "input": "s =  \"(1+(2\\*3)+((8)/4))+1 \"",
        "output": "3",
        "explanation": "Digit 8 is inside of 3 nested parentheses in the string."
      },
      {
        "input": "s =  \"(1)+((2))+(((3))) \"",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consists of digits `0-9` and characters `'+'`, `'-'`, `''`, `'/'`, `'('`, and `')'`.",
      "It is guaranteed that parentheses expression `s` is a VPS."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1615",
    "slug": "maximal-network-rank",
    "title": "Maximal Network Rank",
    "difficulty": "Medium",
    "description": "There is an infrastructure of `n` cities with some number of `roads` connecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a bidirectional road between cities `ai` and `bi`. The **network rank** of **two different cities** is defined as the total number of **directly** connected roads to **either** city. If a road is directly connected to both cities, it is only counted **once**. The **maximal network rank** of the infrastructure is the **maximum network rank** of all pairs of different cities. Given the integer `n` and the array `roads`, return _the **maximal network rank** of the entire infrastructure_.",
    "examples": [
      {
        "input": "n = 4, roads = \\[\\[0,1\\],\\[0,3\\],\\[1,2\\],\\[1,3\\]\\]",
        "output": "4",
        "explanation": "The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once."
      },
      {
        "input": "n = 5, roads = \\[\\[0,1\\],\\[0,3\\],\\[1,2\\],\\[1,3\\],\\[2,3\\],\\[2,4\\]\\]",
        "output": "5",
        "explanation": "There are 5 roads that are connected to cities 1 or 2."
      },
      {
        "input": "n = 8, roads = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[2,4\\],\\[5,6\\],\\[5,7\\]\\]",
        "output": "5",
        "explanation": "The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected."
      }
    ],
    "constraints": [
      "`2 <= n <= 100`",
      "`0 <= roads.length <= n  (n - 1) / 2`",
      "`roads[i].length == 2`",
      "`0 <= ai, bi <= n-1`",
      "`ai != bi`",
      "Each pair of cities has at most one road connecting them."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1616",
    "slug": "split-two-strings-to-make-palindrome",
    "title": "Split Two Strings to Make Palindrome",
    "difficulty": "Medium",
    "description": "You are given two strings `a` and `b` of the same length. Choose an index and split both strings **at the same index**, splitting `a` into two strings: `aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into two strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if `aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome. When you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or `sprefix` is allowed to be empty. For example, if `s = \"abc \"`, then `\" \" + \"abc \"`, `\"a \" + \"bc \"`, `\"ab \" + \"c \"` , and `\"abc \" + \" \"` are valid splits. Return `true` _if it is possible to form_ _a palindrome string, otherwise return_ `false`. **Notice** that `x + y` denotes the concatenation of strings `x` and `y`.",
    "examples": [
      {
        "input": "a =  \"x \", b =  \"y \"",
        "output": "true"
      },
      {
        "input": "a =  \"xbdef \", b =  \"xecab \"",
        "output": "false"
      },
      {
        "input": "a =  \"ulacfd \", b =  \"jizalu \"",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= a.length, b.length <= 105`",
      "`a.length == b.length`",
      "`a` and `b` consist of lowercase English letters"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1617",
    "slug": "count-subtrees-with-max-distance-between-cities",
    "title": "Count Subtrees With Max Distance Between Cities",
    "difficulty": "Hard",
    "description": "There are `n` cities numbered from `1` to `n`. You are given an array `edges` of size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge between cities `ui` and `vi`. There exists a unique path between each pair of cities. In other words, the cities form a **tree**. A **subtree** is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other. For each `d` from `1` to `n-1`, find the number of subtrees in which the **maximum distance** between any two cities in the subtree is equal to `d`. Return _an array of size_ `n-1` _where the_ `dth` _element **(1-indexed)** is the number of subtrees in which the **maximum distance** between any two cities is equal to_ `d`. **Notice** that the **distance** between the two cities is the number of edges in the path between them.",
    "examples": [
      {
        "input": "n = 4, edges = \\[\\[1,2\\],\\[2,3\\],\\[2,4\\]\\]",
        "output": "\\[3,4,0\\]",
        "explanation": ""
      },
      {
        "input": "n = 2, edges = \\[\\[1,2\\]\\]",
        "output": "\\[1\\]"
      },
      {
        "input": "n = 3, edges = \\[\\[1,2\\],\\[2,3\\]\\]",
        "output": "\\[2,1\\]"
      }
    ],
    "constraints": [
      "`2 <= n <= 15`",
      "`edges.length == n-1`",
      "`edges[i].length == 2`",
      "`1 <= ui, vi <= n`",
      "All pairs `(ui, vi)` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1618",
    "slug": "maximum-font-to-fit-a-sentence-in-a-screen",
    "title": "Maximum Font to Fit a Sentence in a Screen",
    "difficulty": "Medium",
    "description": "You are given a string `text`. We want to display `text` on a screen of width `w` and height `h`. You can choose any font size from array `fonts`, which contains the available font sizes **in ascending order**. You can use the `FontInfo` interface to get the width and height of any character at any available font size. The `FontInfo` interface is defined as such: interface FontInfo { // Returns the width of character ch on the screen using font size fontSize. // O(1) per call public int getWidth(int fontSize, char ch); // Returns the height of any character on the screen using font size fontSize. // O(1) per call public int getHeight(int fontSize); } The calculated width of `text` for some `fontSize` is the **sum** of every `getWidth(fontSize, text[i])` call for each `0 <= i < text.length` (**0-indexed**). The calculated height of `text` for some `fontSize` is `getHeight(fontSize)`. Note that `text` is displayed on a **single line**. It is guaranteed that `FontInfo` will return the same value if you call `getHeight` or `getWidth` with the same parameters. It is also guaranteed that for any font size `fontSize` and any character `ch`: *  `getHeight(fontSize) <= getHeight(fontSize+1)` *  `getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)` Return _the maximum font size you can use to display_ `text` _on the screen_. If `text` cannot fit on the display with any font size, return `-1`.",
    "examples": [
      {
        "input": "text =  \"helloworld \", w = 80, h = 20, fonts = \\[6,8,10,12,14,16,18,24,36\\]",
        "output": "6"
      },
      {
        "input": "text =  \"leetcode \", w = 1000, h = 50, fonts = \\[1,2,4\\]",
        "output": "4"
      },
      {
        "input": "text =  \"easyquestion \", w = 100, h = 100, fonts = \\[10,15,20,25\\]",
        "output": "-1"
      }
    ],
    "constraints": [
      "`1 <= text.length <= 50000`",
      "`text` contains only lowercase English letters.",
      "`1 <= w <= 107`",
      "`1 <= h <= 104`",
      "`1 <= fonts.length <= 105`",
      "`1 <= fonts[i] <= 105`",
      "`fonts` is sorted in ascending order and does not contain duplicates."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1619",
    "slug": "mean-of-array-after-removing-some-elements",
    "title": "Mean of Array After Removing Some Elements",
    "difficulty": "Easy",
    "description": "Given an integer array `arr`, return _the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements._ Answers within `10-5` of the **actual answer** will be considered accepted.",
    "examples": [
      {
        "input": "arr = \\[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3\\]",
        "output": "2.00000",
        "explanation": "After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2."
      },
      {
        "input": "arr = \\[6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0\\]",
        "output": "4.00000"
      },
      {
        "input": "arr = \\[6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4\\]",
        "output": "4.77778"
      }
    ],
    "constraints": [
      "`20 <= arr.length <= 1000`",
      "`arr.length` is a multiple of `20`.",
      "`0 <= arr[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1620",
    "slug": "coordinate-with-maximum-network-quality",
    "title": "Coordinate With Maximum Network Quality",
    "difficulty": "Medium",
    "description": "You are given an array of network towers `towers`, where `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location `(xi, yi)` and quality factor `qi`. All the coordinates are **integral coordinates** on the X-Y plane, and the distance between the two coordinates is the **Euclidean distance**. You are also given an integer `radius` where a tower is **reachable** if the distance is **less than or equal to** `radius`. Outside that distance, the signal becomes garbled, and the tower is **not reachable**. The signal quality of the `ith` tower at a coordinate `(x, y)` is calculated with the formula `\u230aqi / (1 + d)\u230b`, where `d` is the distance between the tower and the coordinate. The **network quality** at a coordinate is the sum of the signal qualities from all the **reachable** towers. Return _the array_ `[cx, cy]` _representing the **integral** coordinate_ `(cx, cy)` _where the **network quality** is maximum. If there are multiple coordinates with the same **network quality**, return the lexicographically minimum **non-negative** coordinate._",
    "examples": [
      {
        "input": "towers = \\[\\[1,2,5\\],\\[2,1,7\\],\\[3,1,9\\]\\], radius = 2",
        "output": "\\[2,1\\]",
        "explanation": "At coordinate (2, 1) the total quality is 13."
      },
      {
        "input": "towers = \\[\\[23,11,21\\]\\], radius = 9",
        "output": "\\[23,11\\]",
        "explanation": "Since there is only one tower, the network quality is highest right at the tower's location."
      },
      {
        "input": "towers = \\[\\[1,2,13\\],\\[2,1,7\\],\\[0,1,9\\]\\], radius = 2",
        "output": "\\[1,2\\]",
        "explanation": "Coordinate (1, 2) has the highest network quality."
      }
    ],
    "constraints": [
      "`1 <= towers.length <= 50`",
      "`towers[i].length == 3`",
      "`0 <= xi, yi, qi <= 50`",
      "`1 <= radius <= 50`"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "1621",
    "slug": "number-of-sets-of-k-non-overlapping-line-segments",
    "title": "Number of Sets of K Non-Overlapping Line Segments",
    "difficulty": "Medium",
    "description": "Given `n` points on a 1-D plane, where the `ith` point (from `0` to `n-1`) is at `x = i`, find the number of ways we can draw **exactly** `k` **non-overlapping** line segments such that each segment covers two or more points. The endpoints of each segment must have **integral coordinates**. The `k` line segments **do not** have to cover all `n` points, and they are **allowed** to share endpoints. Return _the number of ways we can draw_ `k` _non-overlapping line segments__._ Since this number can be huge, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 4, k = 2",
        "output": "5",
        "explanation": "The two line segments are shown in red and blue."
      },
      {
        "input": "n = 3, k = 1",
        "output": "3",
        "explanation": "The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}."
      },
      {
        "input": "n = 30, k = 7",
        "output": "796297179",
        "explanation": "The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179."
      }
    ],
    "constraints": [
      "`2 <= n <= 1000`",
      "`1 <= k <= n-1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1622",
    "slug": "fancy-sequence",
    "title": "Fancy Sequence",
    "difficulty": "Hard",
    "description": "Write an API that generates fancy sequences using the `append`, `addAll`, and `multAll` operations. Implement the `Fancy` class: *  `Fancy()` Initializes the object with an empty sequence. *  `void append(val)` Appends an integer `val` to the end of the sequence. *  `void addAll(inc)` Increments all existing values in the sequence by an integer `inc`. *  `void multAll(m)` Multiplies all existing values in the sequence by an integer `m`. *  `int getIndex(idx)` Gets the current value at index `idx` (0-indexed) of the sequence **modulo** `109 + 7`. If the index is greater or equal than the length of the sequence, return `-1`.",
    "examples": [],
    "constraints": [
      "`1 <= val, inc, m <= 100`",
      "`0 <= idx <= 105`",
      "At most `105` calls total will be made to `append`, `addAll`, `multAll`, and `getIndex`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1624",
    "slug": "largest-substring-between-two-equal-characters",
    "title": "Largest Substring Between Two Equal Characters",
    "difficulty": "Easy",
    "description": "Given a string `s`, return _the length of the longest substring between two equal characters, excluding the two characters._ If there is no such substring return `-1`. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"aa \"",
        "output": "0",
        "explanation": "The optimal substring here is an empty substring between the two `'a's`."
      },
      {
        "input": "s =  \"abca \"",
        "output": "2",
        "explanation": "The optimal substring here is  \"bc \"."
      },
      {
        "input": "s =  \"cbzxy \"",
        "output": "-1",
        "explanation": "There are no characters that appear twice in s."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 300`",
      "`s` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1625",
    "slug": "lexicographically-smallest-string-after-applying-operations",
    "title": "Lexicographically Smallest String After Applying Operations",
    "difficulty": "Medium",
    "description": "You are given a string `s` of **even length** consisting of digits from `0` to `9`, and two integers `a` and `b`. You can apply either of the following two operations any number of times and in any order on `s`: *  Add `a` to all odd indices of `s` **(0-indexed)**. Digits post `9` are cycled back to `0`. For example, if `s = \"3456 \"` and `a = 5`, `s` becomes `\"3951 \"`. *  Rotate `s` to the right by `b` positions. For example, if `s = \"3456 \"` and `b = 1`, `s` becomes `\"6345 \"`. Return _the **lexicographically smallest** string you can obtain by applying the above operations any number of times on_ `s`. A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"0158 \"` is lexicographically smaller than `\"0190 \"` because the first position they differ is at the third letter, and `'5'` comes before `'9'`.",
    "examples": [
      {
        "input": "s =  \"5525 \", a = 9, b = 2",
        "output": "\"2050 \"",
        "explanation": "We can apply the following operations:"
      },
      {
        "input": "s =  \"74 \", a = 5, b = 1",
        "output": "\"24 \"",
        "explanation": "We can apply the following operations:"
      },
      {
        "input": "s =  \"0011 \", a = 4, b = 2",
        "output": "\"0011 \"",
        "explanation": "There are no sequence of operations that will give us a lexicographically smaller string than  \"0011 \"."
      }
    ],
    "constraints": [
      "`2 <= s.length <= 100`",
      "`s.length` is even.",
      "`s` consists of digits from `0` to `9` only.",
      "`1 <= a <= 9`",
      "`1 <= b <= s.length - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1626",
    "slug": "best-team-with-no-conflicts",
    "title": "Best Team With No Conflicts",
    "difficulty": "Medium",
    "description": "You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the **sum** of scores of all the players in the team. However, the basketball team is not allowed to have **conflicts**. A **conflict** exists if a younger player has a **strictly higher** score than an older player. A conflict does **not** occur between players of the same age. Given two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return _the highest overall score of all possible basketball teams_.",
    "examples": [
      {
        "input": "scores = \\[1,3,5,10,15\\], ages = \\[1,2,3,4,5\\]",
        "output": "34",
        "explanation": "You can choose all the players."
      },
      {
        "input": "scores = \\[4,5,6,5\\], ages = \\[2,1,2,1\\]",
        "output": "16",
        "explanation": "It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age."
      },
      {
        "input": "scores = \\[1,2,3,5\\], ages = \\[8,9,10,1\\]",
        "output": "6",
        "explanation": "It is best to choose the first 3 players."
      }
    ],
    "constraints": [
      "`1 <= scores.length, ages.length <= 1000`",
      "`scores.length == ages.length`",
      "`1 <= scores[i] <= 106`",
      "`1 <= ages[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1627",
    "slug": "graph-connectivity-with-threshold",
    "title": "Graph Connectivity With Threshold",
    "difficulty": "Hard",
    "description": "We have `n` cities labeled from `1` to `n`. Two different cities with labels `x` and `y` are directly connected by a bidirectional road if and only if `x` and `y` share a common divisor **strictly greater** than some `threshold`. More formally, cities with labels `x` and `y` have a road between them if there exists an integer `z` such that all of the following are true: *  `x % z == 0`, *  `y % z == 0`, and *  `z > threshold`. Given the two integers, `n` and `threshold`, and an array of `queries`, you must determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are connected directly or indirectly. (i.e. there is some path between them). Return _an array_ `answer`_, where_ `answer.length == queries.length` _and_ `answer[i]` _is_ `true` _if for the_ `ith` _query, there is a path between_ `ai` _and_ `bi`_, or_ `answer[i]` _is_ `false` _if there is no path._",
    "examples": [
      {
        "input": "n = 6, threshold = 2, queries = \\[\\[1,4\\],\\[2,5\\],\\[3,6\\]\\]",
        "output": "\\[false,false,true\\]",
        "explanation": "The divisors for each number:"
      },
      {
        "input": "n = 6, threshold = 0, queries = \\[\\[4,5\\],\\[3,4\\],\\[3,2\\],\\[2,6\\],\\[1,3\\]\\]",
        "output": "\\[true,true,true,true,true\\]",
        "explanation": "The divisors for each number are the same as the previous example. However, since the threshold is 0,"
      },
      {
        "input": "n = 5, threshold = 1, queries = \\[\\[4,5\\],\\[4,5\\],\\[3,2\\],\\[2,3\\],\\[3,4\\]\\]",
        "output": "\\[false,false,false,false,false\\]",
        "explanation": "Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected."
      }
    ],
    "constraints": [
      "`2 <= n <= 104`",
      "`0 <= threshold <= n`",
      "`1 <= queries.length <= 105`",
      "`queries[i].length == 2`",
      "`1 <= ai, bi <= cities`",
      "`ai != bi`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1628",
    "slug": "design-an-expression-tree-with-evaluate-function",
    "title": "Design an Expression Tree With Evaluate Function",
    "difficulty": "Medium",
    "description": "Given the `postfix` tokens of an arithmetic expression, build and return _the binary expression tree that represents this expression._ **Postfix** notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. For example, the postfix tokens of the expression `4*(5-(7+2))` are represented in the array `postfix = [ \"4 \", \"5 \", \"7 \", \"2 \", \"+ \", \"- \", \"* \"]`. The class `Node` is an interface you should use to implement the binary expression tree. The returned tree will be tested using the `evaluate` function, which is supposed to evaluate the tree's value. You should not remove the `Node` class; however, you can modify it as you wish, and you can define other classes to implement it if needed. A **[binary expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree)** is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with two children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division). It's guaranteed that no subtree will yield a value that exceeds `109` in absolute value, and all the operations are valid (i.e., no division by zero). **Follow up:** Could you design the expression tree such that it is more modular? For example, is your design able to support additional operators without making changes to your existing `evaluate` implementation?",
    "examples": [
      {
        "input": "s = \\[ \"3 \", \"4 \", \"+ \", \"2 \", \"\\* \", \"7 \", \"/ \"\\]",
        "output": "2",
        "explanation": "this expression evaluates to the above binary tree with expression (`(3+4)*2)/7) = 14/7 = 2.`"
      },
      {
        "input": "s = \\[ \"4 \", \"5 \", \"2 \", \"7 \", \"+ \", \"- \", \"\\* \"\\]",
        "output": "-16",
        "explanation": "this expression evaluates to the above binary tree with expression 4\\*(5-`(2+7)) = 4*(-4) = -16.`"
      }
    ],
    "constraints": [
      "`1 <= s.length < 100`",
      "`s.length` is odd.",
      "`s` consists of numbers and the characters `'+'`, `'-'`, `''`, and `'/'`.",
      "If `s[i]` is a number, its integer representation is no more than `105`.",
      "It is guaranteed that `s` is a valid expression.",
      "The absolute value of the result and intermediate values will not exceed `109`.",
      "It is guaranteed that no expression will include division by zero."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1629",
    "slug": "slowest-key",
    "title": "Slowest Key",
    "difficulty": "Easy",
    "description": "A newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time. You are given a string `keysPressed` of length `n`, where `keysPressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was released. Both arrays are **0-indexed**. The `0th` key was pressed at the time `0`, and every subsequent key was pressed at the **exact** time the previous key was released. The tester wants to know the key of the keypress that had the **longest duration**. The `ith` keypress had a **duration** of `releaseTimes[i] - releaseTimes[i - 1]`, and the `0th` keypress had a duration of `releaseTimes[0]`. Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key **may not** have had the same **duration**. _Return the key of the keypress that had the **longest duration**. If there are multiple such keypresses, return the lexicographically largest key of the keypresses._",
    "examples": [
      {
        "input": "releaseTimes = \\[9,29,49,50\\], keysPressed =  \"cbcd \"",
        "output": "\"c \"",
        "explanation": "The keypresses were as follows:"
      },
      {
        "input": "releaseTimes = \\[12,23,36,46,62\\], keysPressed =  \"spuda \"",
        "output": "\"a \"",
        "explanation": "The keypresses were as follows:"
      }
    ],
    "constraints": [
      "`releaseTimes.length == n`",
      "`keysPressed.length == n`",
      "`2 <= n <= 1000`",
      "`1 <= releaseTimes[i] <= 109`",
      "`releaseTimes[i] < releaseTimes[i+1]`",
      "`keysPressed` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1630",
    "slug": "arithmetic-subarrays",
    "title": "Arithmetic Subarrays",
    "difficulty": "Medium",
    "description": "A sequence of numbers is called **arithmetic** if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence `s` is arithmetic if and only if `s[i+1] - s[i] == s[1] - s[0]` for all valid `i`. For example, these are **arithmetic** sequences: 1, 3, 5, 7, 9 7, 7, 7, 7 3, -1, -5, -9 The following sequence is not **arithmetic**: 1, 1, 2, 5, 7 You are given an array of `n` integers, `nums`, and two arrays of `m` integers each, `l` and `r`, representing the `m` range queries, where the `ith` query is the range `[l[i], r[i]]`. All the arrays are **0-indexed**. Return _a list of_ `boolean` _elements_ `answer`_, where_ `answer[i]` _is_ `true` _if the subarray_ `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` _can be **rearranged** to form an **arithmetic** sequence, and_ `false` _otherwise._",
    "examples": [
      {
        "input": "nums = `[4,6,5,9,3,7]`, l = `[0,0,2]`, r = `[2,3,5]`",
        "output": "`[true,false,true]`",
        "explanation": ""
      },
      {
        "input": "nums = \\[-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10\\], l = \\[0,1,6,4,8,7\\], r = \\[4,4,9,7,9,10\\]",
        "output": "\\[false,true,false,false,true,true\\]"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`m == l.length`",
      "`m == r.length`",
      "`2 <= n <= 500`",
      "`1 <= m <= 500`",
      "`0 <= l[i] < r[i] < n`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1631",
    "slug": "path-with-minimum-effort",
    "title": "Path With Minimum Effort",
    "difficulty": "Medium",
    "description": "You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e., **0-indexed**). You can move **up**, **down**, **left**, or **right**, and you wish to find a route that requires the minimum **effort**. A route's **effort** is the **maximum absolute difference** in heights between two consecutive cells of the route. Return _the minimum **effort** required to travel from the top-left cell to the bottom-right cell._",
    "examples": [
      {
        "input": "heights = \\[\\[1,2,2\\],\\[3,8,2\\],\\[5,3,5\\]\\]",
        "output": "2",
        "explanation": "The route of \\[1,3,5,3,5\\] has a maximum absolute difference of 2 in consecutive cells."
      },
      {
        "input": "heights = \\[\\[1,2,3\\],\\[3,8,4\\],\\[5,3,5\\]\\]",
        "output": "1",
        "explanation": "The route of \\[1,2,3,4,5\\] has a maximum absolute difference of 1 in consecutive cells, which is better than route \\[1,3,5,3,5\\]."
      },
      {
        "input": "heights = \\[\\[1,2,1,1,1\\],\\[1,2,1,2,1\\],\\[1,2,1,2,1\\],\\[1,2,1,2,1\\],\\[1,1,1,2,1\\]\\]",
        "output": "0",
        "explanation": "This route does not require any effort."
      }
    ],
    "constraints": [
      "`rows == heights.length`",
      "`columns == heights[i].length`",
      "`1 <= rows, columns <= 100`",
      "`1 <= heights[i][j] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1632",
    "slug": "rank-transform-of-a-matrix",
    "title": "Rank Transform of a Matrix",
    "difficulty": "Hard",
    "description": "Given an `m x n` `matrix`, return _a new matrix_ `answer` _where_ `answer[row][col]` _is the_ _**rank** of_ `matrix[row][col]`. The **rank** is an **integer** that represents how large an element is compared to other elements. It is calculated using the following rules: *  The rank is an integer starting from `1`. *  If two elements `p` and `q` are in the **same row or column**, then: *  If `p < q` then `rank(p) < rank(q)` *  If `p == q` then `rank(p) == rank(q)` *  If `p > q` then `rank(p) > rank(q)` *  The **rank** should be as **small** as possible. The test cases are generated so that `answer` is unique under the given rules.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,2\\],\\[3,4\\]\\]",
        "output": "\\[\\[1,2\\],\\[2,3\\]\\]",
        "explanation": ""
      },
      {
        "input": "matrix = \\[\\[7,7\\],\\[7,7\\]\\]",
        "output": "\\[\\[1,1\\],\\[1,1\\]\\]"
      },
      {
        "input": "matrix = \\[\\[20,-21,14\\],\\[-19,4,19\\],\\[22,-47,24\\],\\[-19,4,19\\]\\]",
        "output": "\\[\\[4,2,3\\],\\[1,3,4\\],\\[5,1,6\\],\\[1,3,4\\]\\]"
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 500`",
      "`-109 <= matrix[row][col] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1634",
    "slug": "add-two-polynomials-represented-as-linked-lists",
    "title": "Add Two Polynomials Represented as Linked Lists",
    "difficulty": "Medium",
    "description": "A polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression. Each node has three attributes: *  `coefficient`: an integer representing the number multiplier of the term. The coefficient of the term `**9**x4` is `9`. *  `power`: an integer representing the exponent. The power of the term `9x**4**` is `4`. *  `next`: a pointer to the next node in the list, or `null` if it is the last node of the list. For example, the polynomial `5x3 + 4x - 7` is represented by the polynomial linked list illustrated below: The polynomial linked list must be in its standard form: the polynomial must be in **strictly** descending order by its `power` value. Also, terms with a `coefficient` of `0` are omitted. Given two polynomial linked list heads, `poly1` and `poly2`, add the polynomials together and return _the head of the sum of the polynomials_. **`PolyNode` format:** The input/output format is as a list of `n` nodes, where each node is represented as its `[coefficient, power]`. For example, the polynomial `5x3 + 4x - 7` would be represented as: `[[5,3],[4,1],[-7,0]]`.",
    "examples": [
      {
        "input": "poly1 = \\[\\[1,1\\]\\], poly2 = \\[\\[1,0\\]\\]",
        "output": "\\[\\[1,1\\],\\[1,0\\]\\]",
        "explanation": "poly1 = x. poly2 = 1. The sum is x + 1."
      },
      {
        "input": "poly1 = \\[\\[2,2\\],\\[4,1\\],\\[3,0\\]\\], poly2 = \\[\\[3,2\\],\\[-4,1\\],\\[-1,0\\]\\]",
        "output": "\\[\\[5,2\\],\\[2,0\\]\\]",
        "explanation": "poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. The sum is 5x2 + 2. Notice that we omit the  \"0x \" term."
      },
      {
        "input": "poly1 = \\[\\[1,2\\]\\], poly2 = \\[\\[-1,2\\]\\]",
        "output": "\\[\\]",
        "explanation": "The sum is 0. We return an empty list."
      }
    ],
    "constraints": [
      "`0 <= n <= 104`",
      "`-109 <= PolyNode.coefficient <= 109`",
      "`PolyNode.coefficient != 0`",
      "`0 <= PolyNode.power <= 109`",
      "`PolyNode.power > PolyNode.next.power`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1636",
    "slug": "sort-array-by-increasing-frequency",
    "title": "Sort Array by Increasing Frequency",
    "difficulty": "Easy",
    "description": "Given an array of integers `nums`, sort the array in **increasing** order based on the frequency of the values. If multiple values have the same frequency, sort them in **decreasing** order. Return the _sorted array_.",
    "examples": [
      {
        "input": "nums = \\[1,1,2,2,2,3\\]",
        "output": "\\[3,1,1,2,2,2\\]",
        "explanation": "'3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3."
      },
      {
        "input": "nums = \\[2,3,1,3,2\\]",
        "output": "\\[1,3,3,2,2\\]",
        "explanation": "'2' and '3' both have a frequency of 2, so they are sorted in decreasing order."
      },
      {
        "input": "nums = \\[-1,1,-6,4,5,-6,1,4,1\\]",
        "output": "\\[5,-1,4,4,-6,-6,1,1,1\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`-100 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1637",
    "slug": "widest-vertical-area-between-two-points-containing-no-points",
    "title": "Widest Vertical Area Between Two Points Containing No Points",
    "difficulty": "Medium",
    "description": "Given `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return _the **widest vertical area** between two points such that no points are inside the area._ A **vertical area** is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The **widest vertical area** is the one with the maximum width. Note that points **on the edge** of a vertical area **are not** considered included in the area.",
    "examples": [
      {
        "input": "points = \\[\\[8,7\\],\\[9,9\\],\\[7,4\\],\\[9,7\\]\\]",
        "output": "1",
        "explanation": "Both the red and the blue area are optimal."
      },
      {
        "input": "points = \\[\\[3,1\\],\\[9,0\\],\\[1,0\\],\\[1,4\\],\\[5,3\\],\\[8,8\\]\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`n == points.length`",
      "`2 <= n <= 105`",
      "`points[i].length == 2`",
      "`0 <= xi, yi <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1638",
    "slug": "count-substrings-that-differ-by-one-character",
    "title": "Count Substrings That Differ by One Character",
    "difficulty": "Medium",
    "description": "Given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a **single character** by a different character such that the resulting substring is a substring of `t`. In other words, find the number of substrings in `s` that differ from some substring in `t` by **exactly** one character. For example, the underlined substrings in `\"computer \"` and `\"computation \"` only differ by the `'e'`/`'a'`, so this is a valid way. Return _the number of substrings that satisfy the condition above._ A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"aba \", t =  \"baba \"",
        "output": "6",
        "explanation": "The following are the pairs of substrings from s and t that differ by exactly 1 character:"
      },
      {
        "input": "s =  \"ab \", t =  \"bb \"",
        "output": "3",
        "explanation": "The following are the pairs of substrings from s and t that differ by 1 character:"
      }
    ],
    "constraints": [
      "`1 <= s.length, t.length <= 100`",
      "`s` and `t` consist of lowercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1639",
    "slug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
    "title": "Number of Ways to Form a Target String Given a Dictionary",
    "difficulty": "Hard",
    "description": "You are given a list of strings of the **same length** `words` and a string `target`. Your task is to form `target` using the given `words` under the following rules: *  `target` should be formed from left to right. *  To form the `ith` character (**0-indexed**) of `target`, you can choose the `kth` character of the `jth` string in `words` if `target[i] = words[j][k]`. *  Once you use the `kth` character of the `jth` string of `words`, you **can no longer** use the `xth` character of any string in `words` where `x <= k`. In other words, all characters to the left of or at index `k` become unusuable for every string. *  Repeat the process until you form the string `target`. **Notice** that you can use **multiple characters** from the **same string** in `words` provided the conditions above are met. Return _the number of ways to form `target` from `words`_. Since the answer may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "words = \\[ \"acca \", \"bbbb \", \"caca \"\\], target =  \"aba \"",
        "output": "6",
        "explanation": "There are 6 ways to form target."
      },
      {
        "input": "words = \\[ \"abba \", \"baab \"\\], target =  \"bab \"",
        "output": "4",
        "explanation": "There are 4 ways to form target."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length <= 1000`",
      "All strings in `words` have the same length.",
      "`1 <= target.length <= 1000`",
      "`words[i]` and `target` contain only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1640",
    "slug": "check-array-formation-through-concatenation",
    "title": "Check Array Formation Through Concatenation",
    "difficulty": "Easy",
    "description": "You are given an array of **distinct** integers `arr` and an array of integer arrays `pieces`, where the integers in `pieces` are **distinct**. Your goal is to form `arr` by concatenating the arrays in `pieces` **in any order**. However, you are **not** allowed to reorder the integers in each array `pieces[i]`. Return `true` _if it is possible_ _to form the array_ `arr` _from_ `pieces`. Otherwise, return `false`.",
    "examples": [
      {
        "input": "arr = \\[15,88\\], pieces = \\[\\[88\\],\\[15\\]\\]",
        "output": "true",
        "explanation": "Concatenate \\[15\\] then \\[88\\]"
      },
      {
        "input": "arr = \\[49,18,16\\], pieces = \\[\\[16,18,49\\]\\]",
        "output": "false",
        "explanation": "Even though the numbers match, we cannot reorder pieces\\[0\\]."
      },
      {
        "input": "arr = \\[91,4,64,78\\], pieces = \\[\\[78\\],\\[4,64\\],\\[91\\]\\]",
        "output": "true",
        "explanation": "Concatenate \\[91\\] then \\[4,64\\] then \\[78\\]"
      }
    ],
    "constraints": [
      "`1 <= pieces.length <= arr.length <= 100`",
      "`sum(pieces[i].length) == arr.length`",
      "`1 <= pieces[i].length <= arr.length`",
      "`1 <= arr[i], pieces[i][j] <= 100`",
      "The integers in `arr` are distinct.",
      "The integers in `pieces` are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1641",
    "slug": "count-sorted-vowel-strings",
    "title": "Count Sorted Vowel Strings",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _the number of strings of length_ `n` _that consist only of vowels (_`a`_,_ `e`_,_ `i`_,_ `o`_,_ `u`_) and are **lexicographically sorted**._ A string `s` is **lexicographically sorted** if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.",
    "examples": [
      {
        "input": "n = 1",
        "output": "5",
        "explanation": "The 5 sorted strings that consist of vowels only are `[ \"a \", \"e \", \"i \", \"o \", \"u \"].`"
      },
      {
        "input": "n = 2",
        "output": "15",
        "explanation": "The 15 sorted strings that consist of vowels only are"
      },
      {
        "input": "n = 33",
        "output": "66045"
      }
    ],
    "constraints": [
      "`1 <= n <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1642",
    "slug": "furthest-building-you-can-reach",
    "title": "Furthest Building You Can Reach",
    "difficulty": "Medium",
    "description": "You are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`. You start your journey from building `0` and move to the next building by possibly using bricks or ladders. While moving from building `i` to building `i+1` (**0-indexed**), *  If the current building's height is **greater than or equal** to the next building's height, you do **not** need a ladder or bricks. *  If the current building's height is **less than** the next building's height, you can either use **one ladder** or `(h[i+1] - h[i])` **bricks**. _Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally._",
    "examples": [
      {
        "input": "heights = \\[4,2,7,6,9,14,12\\], bricks = 5, ladders = 1",
        "output": "4",
        "explanation": "Starting at building 0, you can follow these steps:"
      },
      {
        "input": "heights = \\[4,12,2,7,3,18,20,3,19\\], bricks = 10, ladders = 2",
        "output": "7"
      },
      {
        "input": "heights = \\[14,3,19,3\\], bricks = 17, ladders = 0",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= heights.length <= 105`",
      "`1 <= heights[i] <= 106`",
      "`0 <= bricks <= 109`",
      "`0 <= ladders <= heights.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1643",
    "slug": "kth-smallest-instructions",
    "title": "Kth Smallest Instructions",
    "difficulty": "Hard",
    "description": "Bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row, column)`. He can only travel **right** and **down**. You are going to help Bob by providing **instructions** for him to reach `destination`. The **instructions** are represented as a string, where each character is either: *  `'H'`, meaning move horizontally (go **right**), or *  `'V'`, meaning move vertically (go **down**). Multiple **instructions** will lead Bob to `destination`. For example, if `destination` is `(2, 3)`, both `\"HHHVV \"` and `\"HVHVH \"` are valid **instructions**. However, Bob is very picky. Bob has a lucky number `k`, and he wants the `kth` **lexicographically smallest instructions** that will lead him to `destination`. `k` is **1-indexed**. Given an integer array `destination` and an integer `k`, return _the_ `kth` _**lexicographically smallest instructions** that will take Bob to_ `destination`.",
    "examples": [
      {
        "input": "destination = \\[2,3\\], k = 1",
        "output": "\"HHHVV \"",
        "explanation": "All the instructions that reach (2, 3) in lexicographic order are as follows:"
      },
      {
        "input": "destination = \\[2,3\\], k = 2",
        "output": "\"HHVHV \""
      },
      {
        "input": "destination = \\[2,3\\], k = 3",
        "output": "\"HHVVH \""
      }
    ],
    "constraints": [
      "`destination.length == 2`",
      "`1 <= row, column <= 15`",
      "`1 <= k <= nCr(row + column, row)`, where `nCr(a, b)` denotes `a` choose `b`\u200b\u200b\u200b\u200b\u200b."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1644",
    "slug": "lowest-common-ancestor-of-a-binary-tree-ii",
    "title": "Lowest Common Ancestor of a Binary Tree II",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the lowest common ancestor (LCA) of two given nodes,_ `p` _and_ `q`. If either node `p` or `q` **does not exist** in the tree, return `null`. All values of the nodes in the tree are **unique**. According to the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of two nodes `p` and `q` in a binary tree `T` is the lowest node that has both `p` and `q` as **descendants** (where we allow **a node to be a descendant of itself**) \". A **descendant** of a node `x` is a node `y` that is on the path from node `x` to some leaf node.",
    "examples": [
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 1",
        "output": "3",
        "explanation": "The LCA of nodes 5 and 1 is 3."
      },
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 4",
        "output": "5",
        "explanation": "The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA."
      },
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 10",
        "output": "null",
        "explanation": "Node 10 does not exist in the tree, so return null."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-109 <= Node.val <= 109`",
      "All `Node.val` are unique.",
      "`p != q`",
      "Follow up: Can you find the LCA traversing the tree, without checking nodes existence?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1646",
    "slug": "get-maximum-in-generated-array",
    "title": "Get Maximum in Generated Array",
    "difficulty": "Easy",
    "description": "You are given an integer `n`. A **0-indexed** integer array `nums` of length `n + 1` is generated in the following way: *  `nums[0] = 0` *  `nums[1] = 1` *  `nums[2 * i] = nums[i]` when `2 <= 2 * i <= n` *  `nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n` Return _the **maximum** integer in the array_ `nums`\u200b\u200b\u200b.",
    "examples": [
      {
        "input": "n = 7",
        "output": "3",
        "explanation": "According to the given rules:"
      },
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "According to the given rules, nums = \\[0,1,1\\]. The maximum is max(0,1,1) = 1."
      },
      {
        "input": "n = 3",
        "output": "2",
        "explanation": "According to the given rules, nums = \\[0,1,1,2\\]. The maximum is max(0,1,1,2) = 2."
      }
    ],
    "constraints": [
      "`0 <= n <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1647",
    "slug": "minimum-deletions-to-make-character-frequencies-unique",
    "title": "Minimum Deletions to Make Character Frequencies Unique",
    "difficulty": "Medium",
    "description": "A string `s` is called **good** if there are no two different characters in `s` that have the same **frequency**. Given a string `s`, return _the **minimum** number of characters you need to delete to make_ `s` _**good**._ The **frequency** of a character in a string is the number of times it appears in the string. For example, in the string `\"aab \"`, the **frequency** of `'a'` is `2`, while the **frequency** of `'b'` is `1`.",
    "examples": [
      {
        "input": "s =  \"aab \"",
        "output": "0",
        "explanation": "`s` is already good."
      },
      {
        "input": "s =  \"aaabbbcc \"",
        "output": "2",
        "explanation": "You can delete two 'b's resulting in the good string  \"aaabcc \"."
      },
      {
        "input": "s =  \"ceabaacb \"",
        "output": "2",
        "explanation": "You can delete both 'c's resulting in the good string  \"eabaab \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1648",
    "slug": "sell-diminishing-valued-colored-balls",
    "title": "Sell Diminishing-Valued Colored Balls",
    "difficulty": "Medium",
    "description": "You have an `inventory` of different colored balls, and there is a customer that wants `orders` balls of **any** color. The customer weirdly values the colored balls. Each colored ball's value is the number of balls **of that color** you currently have in your `inventory`. For example, if you own `6` yellow balls, the customer would pay `6` for the first yellow ball. After the transaction, there are only `5` yellow balls left, so the next yellow ball is then valued at `5` (i.e., the value of the balls decreases as you sell more to the customer). You are given an integer array, `inventory`, where `inventory[i]` represents the number of balls of the `ith` color that you initially own. You are also given an integer `orders`, which represents the total number of balls that the customer wants. You can sell the balls **in any order**. Return _the **maximum** total value that you can attain after selling_ `orders` _colored balls_. As the answer may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "inventory = \\[2,5\\], orders = 4",
        "output": "14",
        "explanation": "Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3)."
      },
      {
        "input": "inventory = \\[3,5\\], orders = 6",
        "output": "19",
        "explanation": "Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2)."
      }
    ],
    "constraints": [
      "`1 <= inventory.length <= 105`",
      "`1 <= inventory[i] <= 109`",
      "`1 <= orders <= min(sum(inventory[i]), 109)`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1649",
    "slug": "create-sorted-array-through-instructions",
    "title": "Create Sorted Array through Instructions",
    "difficulty": "Hard",
    "description": "Given an integer array `instructions`, you are asked to create a sorted array from the elements in `instructions`. You start with an empty container `nums`. For each element from **left to right** in `instructions`, insert it into `nums`. The **cost** of each insertion is the **minimum** of the following: *  The number of elements currently in `nums` that are **strictly less than** `instructions[i]`. *  The number of elements currently in `nums` that are **strictly greater than** `instructions[i]`. For example, if inserting element `3` into `nums = [1,2,3,5]`, the **cost** of insertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`. Return _the **total cost** to insert all elements from_ `instructions` _into_ `nums`. Since the answer may be large, return it **modulo** `109 + 7`",
    "examples": [
      {
        "input": "instructions = \\[1,5,6,2\\]",
        "output": "1",
        "explanation": "Begin with nums = \\[\\]."
      },
      {
        "input": "instructions = \\[1,2,3,6,5,4\\]",
        "output": "3",
        "explanation": "Begin with nums = \\[\\]."
      },
      {
        "input": "instructions = \\[1,3,3,3,2,4,2,1,2\\]",
        "output": "4",
        "explanation": "Begin with nums = \\[\\]."
      }
    ],
    "constraints": [
      "`1 <= instructions.length <= 105`",
      "`1 <= instructions[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1650",
    "slug": "lowest-common-ancestor-of-a-binary-tree-iii",
    "title": "Lowest Common Ancestor of a Binary Tree III",
    "difficulty": "Medium",
    "description": "Given two nodes of a binary tree `p` and `q`, return _their lowest common ancestor (LCA)_. Each node will have a reference to its parent node. The definition for `Node` is below: class Node { public int val; public Node left; public Node right; public Node parent; } According to the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow **a node to be a descendant of itself**). \"",
    "examples": [
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 1",
        "output": "3",
        "explanation": "The LCA of nodes 5 and 1 is 3."
      },
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 4",
        "output": "5",
        "explanation": "The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition."
      },
      {
        "input": "root = \\[1,2\\], p = 1, q = 2",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 105]`.",
      "`-109 <= Node.val <= 109`",
      "All `Node.val` are unique.",
      "`p != q`",
      "`p` and `q` exist in the tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1652",
    "slug": "defuse-the-bomb",
    "title": "Defuse the Bomb",
    "difficulty": "Easy",
    "description": "You have a bomb to defuse, and your time is running out! Your informer will provide you with a **circular** array `code` of length of `n` and a key `k`. To decrypt the code, you must replace every number. All the numbers are replaced **simultaneously**. *  If `k > 0`, replace the `ith` number with the sum of the **next** `k` numbers. *  If `k < 0`, replace the `ith` number with the sum of the **previous** `k` numbers. *  If `k == 0`, replace the `ith` number with `0`. As `code` is circular, the next element of `code[n-1]` is `code[0]`, and the previous element of `code[0]` is `code[n-1]`. Given the **circular** array `code` and an integer key `k`, return _the decrypted code to defuse the bomb_!",
    "examples": [
      {
        "input": "code = \\[5,7,1,4\\], k = 3",
        "output": "\\[12,10,16,13\\]",
        "explanation": "Each number is replaced by the sum of the next 3 numbers. The decrypted code is \\[7+1+4, 1+4+5, 4+5+7, 5+7+1\\]. Notice that the numbers wrap around."
      },
      {
        "input": "code = \\[1,2,3,4\\], k = 0",
        "output": "\\[0,0,0,0\\]",
        "explanation": "When k is zero, the numbers are replaced by 0."
      },
      {
        "input": "code = \\[2,4,9,3\\], k = -2",
        "output": "\\[12,5,6,13\\]",
        "explanation": "The decrypted code is \\[3+9, 2+3, 4+2, 9+4\\]. Notice that the numbers wrap around again. If k is negative, the sum is of the **previous** numbers."
      }
    ],
    "constraints": [
      "`n == code.length`",
      "`1 <= n <= 100`",
      "`1 <= code[i] <= 100`",
      "`-(n - 1) <= k <= n - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1653",
    "slug": "minimum-deletions-to-make-string-balanced",
    "title": "Minimum Deletions to Make String Balanced",
    "difficulty": "Medium",
    "description": "You are given a string `s` consisting only of characters `'a'` and `'b'`\u200b\u200b\u200b\u200b. You can delete any number of characters in `s` to make `s` **balanced**. `s` is **balanced** if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`. Return _the **minimum** number of deletions needed to make_ `s` _**balanced**_.",
    "examples": [
      {
        "input": "s =  \"aababbab \"",
        "output": "2",
        "explanation": "You can either:"
      },
      {
        "input": "s =  \"bbaaaaabb \"",
        "output": "2",
        "explanation": "The only solution is to delete the first two characters."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is `'a'` or `'b'`\u200b\u200b."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1654",
    "slug": "minimum-jumps-to-reach-home",
    "title": "Minimum Jumps to Reach Home",
    "difficulty": "Medium",
    "description": "A certain bug's home is on the x-axis at position `x`. Help them get there from position `0`. The bug jumps according to the following rules: *  It can jump exactly `a` positions **forward** (to the right). *  It can jump exactly `b` positions **backward** (to the left). *  It cannot jump backward twice in a row. *  It cannot jump to any `forbidden` positions. The bug may jump forward **beyond** its home, but it **cannot jump** to positions numbered with **negative** integers. Given an array of integers `forbidden`, where `forbidden[i]` means that the bug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and `x`, return _the minimum number of jumps needed for the bug to reach its home_. If there is no possible sequence of jumps that lands the bug on position `x`, return `-1.`",
    "examples": [
      {
        "input": "forbidden = \\[14,4,18,1,15\\], a = 3, b = 15, x = 9",
        "output": "3",
        "explanation": "3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home."
      },
      {
        "input": "forbidden = \\[8,3,16,6,12,20\\], a = 15, b = 13, x = 11",
        "output": "-1"
      },
      {
        "input": "forbidden = \\[1,6,2,14,5,17,4\\], a = 16, b = 9, x = 7",
        "output": "2",
        "explanation": "One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home."
      }
    ],
    "constraints": [
      "`1 <= forbidden.length <= 1000`",
      "`1 <= a, b, forbidden[i] <= 2000`",
      "`0 <= x <= 2000`",
      "All the elements in `forbidden` are distinct.",
      "Position `x` is not forbidden."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1655",
    "slug": "distribute-repeating-integers",
    "title": "Distribute Repeating Integers",
    "difficulty": "Hard",
    "description": "You are given an array of `n` integers, `nums`, where there are at most `50` unique values in the array. You are also given an array of `m` customer order quantities, `quantity`, where `quantity[i]` is the amount of integers the `ith` customer ordered. Determine if it is possible to distribute `nums` such that: *  The `ith` customer gets **exactly** `quantity[i]` integers, *  The integers the `ith` customer gets are **all equal**, and *  Every customer is satisfied. Return `true` _if it is possible to distribute_ `nums` _according to the above conditions_.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\], quantity = \\[2\\]",
        "output": "false",
        "explanation": "The 0th customer cannot be given two different integers."
      },
      {
        "input": "nums = \\[1,2,3,3\\], quantity = \\[2\\]",
        "output": "true",
        "explanation": "The 0th customer is given \\[3,3\\]. The integers \\[1,2\\] are not used."
      },
      {
        "input": "nums = \\[1,1,2,2\\], quantity = \\[2,2\\]",
        "output": "true",
        "explanation": "The 0th customer is given \\[1,1\\], and the 1st customer is given \\[2,2\\]."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`1 <= nums[i] <= 1000`",
      "`m == quantity.length`",
      "`1 <= m <= 10`",
      "`1 <= quantity[i] <= 105`",
      "There are at most `50` unique values in `nums`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1656",
    "slug": "design-an-ordered-stream",
    "title": "Design an Ordered Stream",
    "difficulty": "Easy",
    "description": "There is a stream of `n` `(idKey, value)` pairs arriving in an **arbitrary** order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`. Design a stream that returns the values in **increasing order of their IDs** by returning a **chunk** (list) of values after each insertion. The concatenation of all the **chunks** should result in a list of the sorted values. Implement the `OrderedStream` class: *  `OrderedStream(int n)` Constructs the stream to take `n` values. *  `String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the **largest possible chunk** of currently inserted values that appear next in the order.",
    "examples": [],
    "constraints": [
      "`1 <= n <= 1000`",
      "`1 <= id <= n`",
      "`value.length == 5`",
      "`value` consists only of lowercase letters.",
      "Each call to `insert` will have a unique `id.`",
      "Exactly `n` calls will be made to `insert`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1657",
    "slug": "determine-if-two-strings-are-close",
    "title": "Determine if Two Strings Are Close",
    "difficulty": "Medium",
    "description": "Two strings are considered **close** if you can attain one from the other using the following operations: *  Operation 1: Swap any two **existing** characters. *  For example, `abcde -> aecdb` *  Operation 2: Transform **every** occurrence of one **existing** character into another **existing** character, and do the same with the other character. *  For example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s) You can use the operations on either string as many times as necessary. Given two strings, `word1` and `word2`, return `true` _if_ `word1` _and_ `word2` _are **close**, and_ `false` _otherwise._",
    "examples": [
      {
        "input": "word1 =  \"abc \", word2 =  \"bca \"",
        "output": "true",
        "explanation": "You can attain word2 from word1 in 2 operations."
      },
      {
        "input": "word1 =  \"a \", word2 =  \"aa \"",
        "output": "false",
        "explanation": "It is impossible to attain word2 from word1, or vice versa, in any number of operations."
      },
      {
        "input": "word1 =  \"cabbba \", word2 =  \"abbccc \"",
        "output": "true",
        "explanation": "You can attain word2 from word1 in 3 operations."
      }
    ],
    "constraints": [
      "`1 <= word1.length, word2.length <= 105`",
      "`word1` and `word2` contain only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1658",
    "slug": "minimum-operations-to-reduce-x-to-zero",
    "title": "Minimum Operations to Reduce X to Zero",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an integer `x`. In one operation, you can either remove the leftmost or the rightmost element from the array `nums` and subtract its value from `x`. Note that this **modifies** the array for future operations. Return _the **minimum number** of operations to reduce_ `x` _to **exactly**_ `0` _if it is possible__, otherwise, return_ `-1`.",
    "examples": [
      {
        "input": "nums = \\[1,1,4,2,3\\], x = 5",
        "output": "2",
        "explanation": "The optimal solution is to remove the last two elements to reduce x to zero."
      },
      {
        "input": "nums = \\[5,6,7,8,9\\], x = 4",
        "output": "-1"
      },
      {
        "input": "nums = \\[3,2,20,1,1,3\\], x = 10",
        "output": "5",
        "explanation": "The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 104`",
      "`1 <= x <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1659",
    "slug": "maximize-grid-happiness",
    "title": "Maximize Grid Happiness",
    "difficulty": "Hard",
    "description": "You are given four integers, `m`, `n`, `introvertsCount`, and `extrovertsCount`. You have an `m x n` grid, and there are two types of people: introverts and extroverts. There are `introvertsCount` introverts and `extrovertsCount` extroverts. You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you **do not** have to have all the people living in the grid. The **happiness** of each person is calculated as follows: *  Introverts **start** with `120` happiness and **lose** `30` happiness for each neighbor (introvert or extrovert). *  Extroverts **start** with `40` happiness and **gain** `20` happiness for each neighbor (introvert or extrovert). Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell. The **grid happiness** is the **sum** of each person's happiness. Return _the **maximum possible grid happiness**._",
    "examples": [
      {
        "input": "m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2",
        "output": "240",
        "explanation": "Assume the grid is 1-indexed with coordinates (row, column)."
      },
      {
        "input": "m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1",
        "output": "260",
        "explanation": "Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1)."
      },
      {
        "input": "m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0",
        "output": "240"
      }
    ],
    "constraints": [
      "`1 <= m, n <= 5`",
      "`0 <= introvertsCount, extrovertsCount <= min(m  n, 6)`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1660",
    "slug": "correct-a-binary-tree",
    "title": "Correct a Binary Tree",
    "difficulty": "Medium",
    "description": "You have a binary tree with a small defect. There is **exactly one** invalid node where its right child incorrectly points to another node at the **same depth** but to the **invalid node's right**. Given the root of the binary tree with this defect, `root`, return _the root of the binary tree after **removing** this invalid node **and every node underneath it** (minus the node it incorrectly points to)._ **Custom testing:** The test input is read as 3 lines: *  `TreeNode root` *  `int fromNode` (**not available to** `correctBinaryTree`) *  `int toNode` (**not available to** `correctBinaryTree`) After the binary tree rooted at `root` is parsed, the `TreeNode` with value of `fromNode` will have its right child pointer pointing to the `TreeNode` with a value of `toNode`. Then, `root` is passed to `correctBinaryTree`.",
    "examples": [
      {
        "input": "root = \\[1,2,3\\], fromNode = 2, toNode = 3",
        "output": "\\[1,null,3\\]",
        "explanation": "The node with value 2 is invalid, so remove it."
      },
      {
        "input": "root = \\[8,3,1,7,null,9,4,2,null,null,null,5,6\\], fromNode = 7, toNode = 4",
        "output": "\\[8,3,1,null,null,9,4,null,null,5,6\\]",
        "explanation": "The node with value 7 is invalid, so remove it and the node underneath it, node 2."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[3, 104]`.",
      "`-109 <= Node.val <= 109`",
      "All `Node.val` are unique.",
      "`fromNode != toNode`",
      "`fromNode` and `toNode` will exist in the tree and will be on the same depth.",
      "`toNode` is to the right of `fromNode`.",
      "`fromNode.right` is `null` in the initial tree from the test data."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1662",
    "slug": "check-if-two-string-arrays-are-equivalent",
    "title": "Check If Two String Arrays are Equivalent",
    "difficulty": "Easy",
    "description": "Given two string arrays `word1` and `word2`, return `true` _if the two arrays **represent** the same string, and_ `false` _otherwise._ A string is **represented** by an array if the array elements concatenated **in order** forms the string.",
    "examples": [
      {
        "input": "word1 = \\[ \"ab \",  \"c \"\\], word2 = \\[ \"a \",  \"bc \"\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "word1 = \\[ \"a \",  \"cb \"\\], word2 = \\[ \"ab \",  \"c \"\\]",
        "output": "false"
      },
      {
        "input": "word1  = \\[ \"abc \",  \"d \",  \"defg \"\\], word2 = \\[ \"abcddefg \"\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= word1.length, word2.length <= 103`",
      "`1 <= word1[i].length, word2[i].length <= 103`",
      "`1 <= sum(word1[i].length), sum(word2[i].length) <= 103`",
      "`word1[i]` and `word2[i]` consist of lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1663",
    "slug": "smallest-string-with-a-given-numeric-value",
    "title": "Smallest String With A Given Numeric Value",
    "difficulty": "Medium",
    "description": "The **numeric value** of a **lowercase character** is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on. The **numeric value** of a **string** consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `\"abe \"` is equal to `1 + 2 + 5 = 8`. You are given two integers `n` and `k`. Return _the **lexicographically smallest string** with **length** equal to `n` and **numeric value** equal to `k`._ Note that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.",
    "examples": [
      {
        "input": "n = 3, k = 27",
        "output": "\"aay \"",
        "explanation": "The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3."
      },
      {
        "input": "n = 5, k = 73",
        "output": "\"aaszz \""
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`n <= k <= 26  n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1664",
    "slug": "ways-to-make-a-fair-array",
    "title": "Ways to Make a Fair Array",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. You can choose **exactly one** index (**0-indexed**) and remove the element. Notice that the index of the elements may change after the removal. For example, if `nums = [6,1,7,4,1]`: *  Choosing to remove index `1` results in `nums = [6,7,4,1]`. *  Choosing to remove index `2` results in `nums = [6,1,4,1]`. *  Choosing to remove index `4` results in `nums = [6,1,7,4]`. An array is **fair** if the sum of the odd-indexed values equals the sum of the even-indexed values. Return the _**number** of indices that you could choose such that after the removal,_ `nums` _is **fair**._",
    "examples": [
      {
        "input": "nums = \\[2,1,6,4\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,1,1\\]",
        "output": "3",
        "explanation": "You can remove any index and the remaining array is fair."
      },
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "0",
        "explanation": "You cannot make a fair array after removing any index."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1665",
    "slug": "minimum-initial-energy-to-finish-tasks",
    "title": "Minimum Initial Energy to Finish Tasks",
    "difficulty": "Hard",
    "description": "You are given an array `tasks` where `tasks[i] = [actuali, minimumi]`: *  `actuali` is the actual amount of energy you **spend to finish** the `ith` task. *  `minimumi` is the minimum amount of energy you **require to begin** the `ith` task. For example, if the task is `[10, 12]` and your current energy is `11`, you cannot start this task. However, if your current energy is `13`, you can complete this task, and your energy will be `3` after finishing it. You can finish the tasks in **any order** you like. Return _the **minimum** initial amount of energy you will need_ _to finish all the tasks_.",
    "examples": [
      {
        "input": "tasks = \\[\\[1,2\\],\\[2,4\\],\\[4,8\\]\\]",
        "output": "8",
        "explanation": ""
      },
      {
        "input": "tasks = \\[\\[1,3\\],\\[2,4\\],\\[10,11\\],\\[10,12\\],\\[8,9\\]\\]",
        "output": "32",
        "explanation": ""
      },
      {
        "input": "tasks = \\[\\[1,7\\],\\[2,8\\],\\[3,9\\],\\[4,10\\],\\[5,11\\],\\[6,12\\]\\]",
        "output": "27",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= tasks.length <= 105`",
      "`1 <= actual\u200bi <= minimumi <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1666",
    "slug": "change-the-root-of-a-binary-tree",
    "title": "Change the Root of a Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree and a `leaf` node, reroot the tree so that the `leaf` is the new root. You can reroot the tree with the following steps for each node `cur` on the path **starting from the** `leaf` up to the `root`\u200b\u200b\u200b **excluding the root**: 1. If `cur` has a left child, then that child becomes `cur`'s right child. 2. `cur`'s original parent becomes `cur`'s left child. Note that in this process the original parent's pointer to `cur` becomes `null`, making it have at most one child. Return _the new root_ _of the rerooted tree._",
    "examples": [
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], leaf = 7",
        "output": "\\[7,2,null,5,4,3,6,null,null,null,1,null,null,0,8\\]"
      },
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], leaf = 0",
        "output": "\\[0,1,null,3,8,5,null,null,null,6,2,null,null,7,4\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 100]`.",
      "`-109 <= Node.val <= 109`",
      "All `Node.val` are unique.",
      "`leaf` exist in the tree."
    ],
    "note": "Ensure that your solution sets the `Node.parent` pointers correctly after rerooting or you will receive \"Wrong Answer \".",
    "follow_up": null
  },
  {
    "id": "1668",
    "slug": "maximum-repeating-substring",
    "title": "Maximum Repeating Substring",
    "difficulty": "Easy",
    "description": "For a string `sequence`, a string `word` is **`k`\\-repeating** if `word` concatenated `k` times is a substring of `sequence`. The `word`'s **maximum `k`\\-repeating value** is the highest value `k` where `word` is `k`\\-repeating in `sequence`. If `word` is not a substring of `sequence`, `word`'s maximum `k`\\-repeating value is `0`. Given strings `sequence` and `word`, return _the **maximum `k`\\-repeating value** of `word` in `sequence`_.",
    "examples": [
      {
        "input": "sequence =  \"ababc \", word =  \"ab \"",
        "output": "2"
      },
      {
        "input": "sequence =  \"ababc \", word =  \"ba \"",
        "output": "1"
      },
      {
        "input": "sequence =  \"ababc \", word =  \"ac \"",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= sequence.length <= 100`",
      "`1 <= word.length <= 100`",
      "`sequence` and `word` contains only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1669",
    "slug": "merge-in-between-linked-lists",
    "title": "Merge In Between Linked Lists",
    "difficulty": "Medium",
    "description": "You are given two linked lists: `list1` and `list2` of sizes `n` and `m` respectively. Remove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2` in their place. The blue edges and nodes in the following figure indicate the result: _Build the result list and return its head._",
    "examples": [
      {
        "input": "list1 = \\[0,1,2,3,4,5\\], a = 3, b = 4, list2 = \\[1000000,1000001,1000002\\]",
        "output": "\\[0,1,2,1000000,1000001,1000002,5\\]",
        "explanation": "We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result."
      },
      {
        "input": "list1 = \\[0,1,2,3,4,5,6\\], a = 2, b = 5, list2 = \\[1000000,1000001,1000002,1000003,1000004\\]",
        "output": "\\[0,1,1000000,1000001,1000002,1000003,1000004,6\\]",
        "explanation": "The blue edges and nodes in the above figure indicate the result."
      }
    ],
    "constraints": [
      "`3 <= list1.length <= 104`",
      "`1 <= a <= b < list1.length - 1`",
      "`1 <= list2.length <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1670",
    "slug": "design-front-middle-back-queue",
    "title": "Design Front Middle Back Queue",
    "difficulty": "Medium",
    "description": "Design a queue that supports `push` and `pop` operations in the front, middle, and back. Implement the `FrontMiddleBack` class: *  `FrontMiddleBack()` Initializes the queue. *  `void pushFront(int val)` Adds `val` to the **front** of the queue. *  `void pushMiddle(int val)` Adds `val` to the **middle** of the queue. *  `void pushBack(int val)` Adds `val` to the **back** of the queue. *  `int popFront()` Removes the **front** element of the queue and returns it. If the queue is empty, return `-1`. *  `int popMiddle()` Removes the **middle** element of the queue and returns it. If the queue is empty, return `-1`. *  `int popBack()` Removes the **back** element of the queue and returns it. If the queue is empty, return `-1`. **Notice** that when there are **two** middle position choices, the operation is performed on the **frontmost** middle position choice. For example: *  Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`. *  Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.",
    "examples": [
      {
        "input": "",
        "output": "",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= val <= 109`",
      "At most `1000` calls will be made to `pushFront`, `pushMiddle`, `pushBack`, `popFront`, `popMiddle`, and `popBack`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1671",
    "slug": "minimum-number-of-removals-to-make-mountain-array",
    "title": "Minimum Number of Removals to Make Mountain Array",
    "difficulty": "Hard",
    "description": "You may recall that an array `arr` is a **mountain array** if and only if: *  `arr.length >= 3` *  There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that: *  `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` *  `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` Given an integer array `nums`\u200b\u200b\u200b, return _the **minimum** number of elements to remove to make_ `nums_\u200b\u200b\u200b_` _a **mountain array**._",
    "examples": [
      {
        "input": "nums = \\[1,3,1\\]",
        "output": "0",
        "explanation": "The array itself is a mountain array so we do not need to remove any elements."
      },
      {
        "input": "nums = \\[2,1,1,5,6,2,3,1\\]",
        "output": "3",
        "explanation": "One solution is to remove the elements at indices 0, 1, and 5, making the array nums = \\[1,5,6,3,1\\]."
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 109`",
      "It is guaranteed that you can make a mountain array out of `nums`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1672",
    "slug": "richest-customer-wealth",
    "title": "Richest Customer Wealth",
    "difficulty": "Easy",
    "description": "You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b` customer has in the `j\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b bank. Return _the **wealth** that the richest customer has._ A customer's **wealth** is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum **wealth**.",
    "examples": [
      {
        "input": "accounts = \\[\\[1,2,3\\],\\[3,2,1\\]\\]",
        "output": "6"
      },
      {
        "input": "accounts = \\[\\[1,5\\],\\[7,3\\],\\[3,5\\]\\]",
        "output": "10"
      },
      {
        "input": "accounts = \\[\\[2,8,7\\],\\[7,1,3\\],\\[1,9,5\\]\\]",
        "output": "17"
      }
    ],
    "constraints": [
      "`m == accounts.length`",
      "`n == accounts[i].length`",
      "`1 <= m, n <= 50`",
      "`1 <= accounts[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1673",
    "slug": "find-the-most-competitive-subsequence",
    "title": "Find the Most Competitive Subsequence",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and a positive integer `k`, return _the most **competitive** subsequence of_ `nums` _of size_ `k`. An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array. We define that a subsequence `a` is more **competitive** than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number **less** than the corresponding number in `b`. For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.",
    "examples": [
      {
        "input": "nums = \\[3,5,2,6\\], k = 2",
        "output": "\\[2,6\\]",
        "explanation": "Among the set of every possible subsequence: {\\[3,5\\], \\[3,2\\], \\[3,6\\], \\[5,2\\], \\[5,6\\], \\[2,6\\]}, \\[2,6\\] is the most competitive."
      },
      {
        "input": "nums = \\[2,4,3,3,5,4,9,6\\], k = 4",
        "output": "\\[2,3,3,4\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 109`",
      "`1 <= k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1674",
    "slug": "minimum-moves-to-make-array-complementary",
    "title": "Minimum Moves to Make Array Complementary",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` of **even** length `n` and an integer `limit`. In one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive. The array `nums` is **complementary** if for all indices `i` (**0-indexed**), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`. Return the _**minimum** number of moves required to make_ `nums` _**complementary**_.",
    "examples": [
      {
        "input": "nums = \\[1,2,4,3\\], limit = 4",
        "output": "1",
        "explanation": "In 1 move, you can change nums to \\[1,2,2,3\\] (underlined elements are changed)."
      },
      {
        "input": "nums = \\[1,2,2,1\\], limit = 2",
        "output": "2",
        "explanation": "In 2 moves, you can change nums to \\[2,2,2,2\\]. You cannot change any number to 3 since 3 > limit."
      },
      {
        "input": "nums = \\[1,2,1,2\\], limit = 2",
        "output": "0",
        "explanation": "nums is already complementary."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`2 <= n <= 105`",
      "`1 <= nums[i] <= limit <= 105`",
      "`n` is even."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1675",
    "slug": "minimize-deviation-in-array",
    "title": "Minimize Deviation in Array",
    "difficulty": "Hard",
    "description": "You are given an array `nums` of `n` positive integers. You can perform two types of operations on any element of the array any number of times: *  If the element is **even**, **divide** it by `2`. *  For example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3,2].` *  If the element is **odd**, **multiply** it by `2`. *  For example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[2,2,3,4].` The **deviation** of the array is the **maximum difference** between any two elements in the array. Return _the **minimum deviation** the array can have after performing some number of operations._",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "1",
        "explanation": "You can transform the array to \\[1,2,3,2\\], then to \\[2,2,3,2\\], then the deviation will be 3 - 2 = 1."
      },
      {
        "input": "nums = \\[4,1,5,20,3\\]",
        "output": "3",
        "explanation": "You can transform the array after two operations to \\[4,2,5,5,3\\], then the deviation will be 5 - 2 = 3."
      },
      {
        "input": "nums = \\[2,10,8\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`2 <= n <= 5  104`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1676",
    "slug": "lowest-common-ancestor-of-a-binary-tree-iv",
    "title": "Lowest Common Ancestor of a Binary Tree IV",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree and an array of `TreeNode` objects `nodes`, return _the lowest common ancestor (LCA) of **all the nodes** in_ `nodes`. All the nodes will exist in the tree, and all values of the tree's nodes are **unique**. Extending the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of `n` nodes `p1`, `p2`, ..., `pn` in a binary tree `T` is the lowest node that has every `pi` as a **descendant** (where we allow **a node to be a descendant of itself**) for every valid `i` \". A **descendant** of a node `x` is a node `y` that is on the path from node `x` to some leaf node.",
    "examples": [
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], nodes = \\[4,7\\]",
        "output": "2",
        "explanation": "The lowest common ancestor of nodes 4 and 7 is node 2."
      },
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], nodes = \\[1\\]",
        "output": "1",
        "explanation": "The lowest common ancestor of a single node is the node itself."
      },
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], nodes = \\[7,6,2,4\\]",
        "output": "5",
        "explanation": "The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`-109 <= Node.val <= 109`",
      "All `Node.val` are unique.",
      "All `nodes[i]` will exist in the tree.",
      "All `nodes[i]` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1678",
    "slug": "goal-parser-interpretation",
    "title": "Goal Parser Interpretation",
    "difficulty": "Easy",
    "description": "You own a **Goal Parser** that can interpret a string `command`. The `command` consists of an alphabet of `\"G \"`, `\"() \"` and/or `\"(al) \"` in some order. The Goal Parser will interpret `\"G \"` as the string `\"G \"`, `\"() \"` as the string `\"o \"`, and `\"(al) \"` as the string `\"al \"`. The interpreted strings are then concatenated in the original order. Given the string `command`, return _the **Goal Parser**'s interpretation of_ `command`.",
    "examples": [
      {
        "input": "command =  \"G()(al) \"",
        "output": "\"Goal \"",
        "explanation": "The Goal Parser interprets the command as follows:"
      },
      {
        "input": "command =  \"G()()()()(al) \"",
        "output": "\"Gooooal \""
      },
      {
        "input": "command =  \"(al)G(al)()()G \"",
        "output": "\"alGalooG \""
      }
    ],
    "constraints": [
      "`1 <= command.length <= 100`",
      "`command` consists of `\"G \"`, `\"() \"`, and/or `\"(al) \"` in some order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1679",
    "slug": "max-number-of-k-sum-pairs",
    "title": "Max Number of K-Sum Pairs",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an integer `k`. In one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array. Return _the maximum number of operations you can perform on the array_.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\], k = 5",
        "output": "2",
        "explanation": "Starting with nums = \\[1,2,3,4\\]:"
      },
      {
        "input": "nums = \\[3,1,3,4,3\\], k = 6",
        "output": "1",
        "explanation": "Starting with nums = \\[3,1,3,4,3\\]:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1680",
    "slug": "concatenation-of-consecutive-binary-numbers",
    "title": "Concatenation of Consecutive Binary Numbers",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return _the **decimal value** of the binary string formed by concatenating the binary representations of_ `1` _to_ `n` _in order, **modulo**_ `109 + 7`.",
    "examples": [
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 3",
        "output": "27",
        "explanation": "In binary, 1, 2, and 3 corresponds to  \"1 \",  \"10 \", and  \"11 \"."
      },
      {
        "input": "n = 12",
        "output": "505379714"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1682",
    "slug": "longest-palindromic-subsequence-ii",
    "title": "Longest Palindromic Subsequence II",
    "difficulty": "Medium",
    "description": "A subsequence of a string `s` is considered a **good palindromic subsequence** if: *  It is a subsequence of `s`. *  It is a palindrome (has the same value if reversed). *  It has an **even** length. *  No two consecutive characters are equal, except the two middle ones. For example, if `s = \"abcabcabb \"`, then `\"abba \"` is considered a **good palindromic subsequence**, while `\"bcb \"` (not even length) and `\"bbbb \"` (has equal consecutive characters) are not. Given a string `s`, return _the **length** of the **longest good palindromic subsequence** in_ `s`.",
    "examples": [
      {
        "input": "s =  \"bbabab \"",
        "output": "4",
        "explanation": "The longest good palindromic subsequence of s is  \"baab \"."
      },
      {
        "input": "s =  \"dcbccacdb \"",
        "output": "4",
        "explanation": "The longest good palindromic subsequence of s is  \"dccd \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 250`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1684",
    "slug": "count-the-number-of-consistent-strings",
    "title": "Count the Number of Consistent Strings",
    "difficulty": "Easy",
    "description": "You are given a string `allowed` consisting of **distinct** characters and an array of strings `words`. A string is **consistent** if all characters in the string appear in the string `allowed`. Return _the number of **consistent** strings in the array_ `words`.",
    "examples": [
      {
        "input": "allowed =  \"ab \", words = \\[ \"ad \", \"bd \", \"aaab \", \"baa \", \"badab \"\\]",
        "output": "2",
        "explanation": "Strings  \"aaab \" and  \"baa \" are consistent since they only contain characters 'a' and 'b'."
      },
      {
        "input": "allowed =  \"abc \", words = \\[ \"a \", \"b \", \"c \", \"ab \", \"ac \", \"bc \", \"abc \"\\]",
        "output": "7",
        "explanation": "All strings are consistent."
      },
      {
        "input": "allowed =  \"cad \", words = \\[ \"cc \", \"acd \", \"b \", \"ba \", \"bac \", \"bad \", \"ac \", \"d \"\\]",
        "output": "4",
        "explanation": "Strings  \"cc \",  \"acd \",  \"ac \", and  \"d \" are consistent."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 104`",
      "`1 <= allowed.length <= 26`",
      "`1 <= words[i].length <= 10`",
      "The characters in `allowed` are distinct.",
      "`words[i]` and `allowed` contain only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1685",
    "slug": "sum-of-absolute-differences-in-a-sorted-array",
    "title": "Sum of Absolute Differences in a Sorted Array",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` sorted in **non-decreasing** order. Build and return _an integer array_ `result` _with the same length as_ `nums` _such that_ `result[i]` _is equal to the **summation of absolute differences** between_ `nums[i]` _and all the other elements in the array._ In other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j < nums.length` and `j != i` (**0-indexed**).",
    "examples": [
      {
        "input": "nums = \\[2,3,5\\]",
        "output": "\\[4,3,5\\]",
        "explanation": "Assuming the arrays are 0-indexed, then"
      },
      {
        "input": "nums = \\[1,4,6,8,10\\]",
        "output": "\\[24,15,13,15,21\\]"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`1 <= nums[i] <= nums[i + 1] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1686",
    "slug": "stone-game-vi",
    "title": "Stone Game VI",
    "difficulty": "Medium",
    "description": "Alice and Bob take turns playing a game, with Alice starting first. There are `n` stones in a pile. On each player's turn, they can **remove** a stone from the pile and receive points based on the stone's value. Alice and Bob may **value the stones differently**. You are given two integer arrays of length `n`, `aliceValues` and `bobValues`. Each `aliceValues[i]` and `bobValues[i]` represents how Alice and Bob, respectively, value the `ith` stone. The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play **optimally**. Both players know the other's values. Determine the result of the game, and: *  If Alice wins, return `1`. *  If Bob wins, return `-1`. *  If the game results in a draw, return `0`.",
    "examples": [
      {
        "input": "aliceValues = \\[1,3\\], bobValues = \\[2,1\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "aliceValues = \\[1,2\\], bobValues = \\[3,1\\]",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "aliceValues = \\[2,4,3\\], bobValues = \\[1,6,7\\]",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == aliceValues.length == bobValues.length`",
      "`1 <= n <= 105`",
      "`1 <= aliceValues[i], bobValues[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1687",
    "slug": "delivering-boxes-from-storage-to-ports",
    "title": "Delivering Boxes from Storage to Ports",
    "difficulty": "Hard",
    "description": "You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a **limit** on the **number of boxes** and the **total weight** that it can carry. You are given an array `boxes`, where `boxes[i] = [ports\u200b\u200bi\u200b, weighti]`, and three integers `portsCount`, `maxBoxes`, and `maxWeight`. *  `ports\u200b\u200bi` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box. *  `portsCount` is the number of ports. *  `maxBoxes` and `maxWeight` are the respective box and weight limits of the ship. The boxes need to be delivered **in the order they are given**. The ship will follow these steps: *  The ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints. *  For each loaded box **in order**, the ship will make a **trip** to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no **trip** is needed, and the box can immediately be delivered. *  The ship then makes a return **trip** to storage to take more boxes from the queue. The ship must end at storage after all the boxes have been delivered. Return _the **minimum** number of **trips** the ship needs to make to deliver all boxes to their respective ports._",
    "examples": [
      {
        "input": "boxes = \\[\\[1,1\\],\\[2,1\\],\\[1,1\\]\\], portsCount = 2, maxBoxes = 3, maxWeight = 3",
        "output": "4",
        "explanation": "The optimal strategy is as follows:"
      },
      {
        "input": "boxes = \\[\\[1,2\\],\\[3,3\\],\\[3,1\\],\\[3,1\\],\\[2,4\\]\\], portsCount = 3, maxBoxes = 3, maxWeight = 6",
        "output": "6",
        "explanation": "The optimal strategy is as follows:"
      },
      {
        "input": "boxes = \\[\\[1,4\\],\\[1,2\\],\\[2,1\\],\\[2,1\\],\\[3,2\\],\\[3,4\\]\\], portsCount = 3, maxBoxes = 6, maxWeight = 7",
        "output": "6",
        "explanation": "The optimal strategy is as follows:"
      }
    ],
    "constraints": [
      "`1 <= boxes.length <= 105`",
      "`1 <= portsCount, maxBoxes, maxWeight <= 105`",
      "`1 <= ports\u200b\u200bi <= portsCount`",
      "`1 <= weightsi <= maxWeight`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1688",
    "slug": "count-of-matches-in-tournament",
    "title": "Count of Matches in Tournament",
    "difficulty": "Easy",
    "description": "You are given an integer `n`, the number of teams in a tournament that has strange rules: *  If the current number of teams is **even**, each team gets paired with another team. A total of `n / 2` matches are played, and `n / 2` teams advance to the next round. *  If the current number of teams is **odd**, one team randomly advances in the tournament, and the rest gets paired. A total of `(n - 1) / 2` matches are played, and `(n - 1) / 2 + 1` teams advance to the next round. Return _the number of matches played in the tournament until a winner is decided._",
    "examples": [
      {
        "input": "n = 7",
        "output": "6",
        "explanation": "Details of the tournament:"
      },
      {
        "input": "n = 14",
        "output": "13",
        "explanation": "Details of the tournament:"
      }
    ],
    "constraints": [
      "`1 <= n <= 200`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1689",
    "slug": "partitioning-into-minimum-number-of-deci-binary-numbers",
    "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
    "difficulty": "Medium",
    "description": "A decimal number is called **deci-binary** if each of its digits is either `0` or `1` without any leading zeros. For example, `101` and `1100` are **deci-binary**, while `112` and `3001` are not. Given a string `n` that represents a positive decimal integer, return _the **minimum** number of positive **deci-binary** numbers needed so that they sum up to_ `n`_._",
    "examples": [
      {
        "input": "n =  \"32 \"",
        "output": "3",
        "explanation": "10 + 11 + 11 = 32"
      },
      {
        "input": "n =  \"82734 \"",
        "output": "8"
      },
      {
        "input": "n =  \"27346209830709182346 \"",
        "output": "9"
      }
    ],
    "constraints": [
      "`1 <= n.length <= 105`",
      "`n` consists of only digits.",
      "`n` does not contain any leading zeros and represents a positive integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1690",
    "slug": "stone-game-vii",
    "title": "Stone Game VII",
    "difficulty": "Medium",
    "description": "Alice and Bob take turns playing a game, with **Alice starting first**. There are `n` stones arranged in a row. On each player's turn, they can **remove** either the leftmost stone or the rightmost stone from the row and receive points equal to the **sum** of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove. Bob found that he will always lose this game (poor Bob, he always loses), so he decided to **minimize the score's difference**. Alice's goal is to **maximize the difference** in the score. Given an array of integers `stones` where `stones[i]` represents the value of the `ith` stone **from the left**, return _the **difference** in Alice and Bob's score if they both play **optimally**._",
    "examples": [
      {
        "input": "stones = \\[5,3,1,4,2\\]",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "stones = \\[7,90,5,1,100,10,10,2\\]",
        "output": "122"
      }
    ],
    "constraints": [
      "`n == stones.length`",
      "`2 <= n <= 1000`",
      "`1 <= stones[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1692",
    "slug": "count-ways-to-distribute-candies",
    "title": "Count Ways to Distribute Candies",
    "difficulty": "Hard",
    "description": "There are `n` **unique** candies (labeled `1` through `n`) and `k` bags. You are asked to distribute **all** the candies into the bags such that every bag has **at least** one candy. There can be multiple ways to distribute the candies. Two ways are considered **different** if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter. For example, `(1), (2,3)` and `(2), (1,3)` are considered different because candies `2` and `3` in the bag `(2,3)` in the first way are not in the same bag in the second way (they are split between the bags `(2)` and `(1,3)`). However, `(1), (2,3)` and `(3,2), (1)` are considered the same because the candies in each bag are all in the same bags in both ways. Given two integers, `n` and `k`, return _the **number** of different ways to distribute the candies_. As the answer may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 3, k = 2",
        "output": "3",
        "explanation": "You can distribute 3 candies into 2 bags in 3 ways:"
      },
      {
        "input": "n = 4, k = 2",
        "output": "7",
        "explanation": "You can distribute 4 candies into 2 bags in 7 ways:"
      },
      {
        "input": "n = 20, k = 5",
        "output": "206085257",
        "explanation": "You can distribute 20 candies into 5 bags in 1881780996 ways. 1881780996 modulo 109 + 7 = 206085257."
      }
    ],
    "constraints": [
      "`1 <= k <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1694",
    "slug": "reformat-phone-number",
    "title": "Reformat Phone Number",
    "difficulty": "Easy",
    "description": "You are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`. You would like to reformat the phone number in a certain manner. Firstly, **remove** all spaces and dashes. Then, **group** the digits from left to right into blocks of length 3 **until** there are 4 or fewer digits. The final digits are then grouped as follows: *  2 digits: A single block of length 2. *  3 digits: A single block of length 3. *  4 digits: Two blocks of length 2 each. The blocks are then joined by dashes. Notice that the reformatting process should **never** produce any blocks of length 1 and produce **at most** two blocks of length 2. Return _the phone number after formatting._",
    "examples": [
      {
        "input": "number =  \"1-23-45 6 \"",
        "output": "\"123-456 \"",
        "explanation": "The digits are  \"123456 \"."
      },
      {
        "input": "number =  \"123 4-567 \"",
        "output": "\"123-45-67 \"",
        "explanation": "The digits are  \"1234567 \"."
      },
      {
        "input": "number =  \"123 4-5678 \"",
        "output": "\"123-456-78 \"",
        "explanation": "The digits are  \"12345678 \"."
      }
    ],
    "constraints": [
      "`2 <= number.length <= 100`",
      "`number` consists of digits and the characters `'-'` and `' '`.",
      "There are at least two digits in `number`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1695",
    "slug": "maximum-erasure-value",
    "title": "Maximum Erasure Value",
    "difficulty": "Medium",
    "description": "You are given an array of positive integers `nums` and want to erase a subarray containing **unique elements**. The **score** you get by erasing the subarray is equal to the **sum** of its elements. Return _the **maximum score** you can get by erasing **exactly one** subarray._ An array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.",
    "examples": [
      {
        "input": "nums = \\[4,2,4,5,6\\]",
        "output": "17",
        "explanation": "The optimal subarray here is \\[2,4,5,6\\]."
      },
      {
        "input": "nums = \\[5,2,1,2,5,2,1,2,5\\]",
        "output": "8",
        "explanation": "The optimal subarray here is \\[5,2,1\\] or \\[1,2,5\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1696",
    "slug": "jump-game-vi",
    "title": "Jump Game VI",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` and an integer `k`. You are initially standing at index `0`. In one move, you can jump at most `k` steps forward without going outside the boundaries of the array. That is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` **inclusive**. You want to reach the last index of the array (index `n - 1`). Your **score** is the **sum** of all `nums[j]` for each index `j` you visited in the array. Return _the **maximum score** you can get_.",
    "examples": [
      {
        "input": "nums = \\[1,\\-1,-2,4,-7,3\\], k = 2",
        "output": "7",
        "explanation": "You can choose your jumps forming the subsequence \\[1,-1,4,3\\] (underlined above). The sum is 7."
      },
      {
        "input": "nums = \\[10,-5,-2,4,0,3\\], k = 3",
        "output": "17",
        "explanation": "You can choose your jumps forming the subsequence \\[10,4,3\\] (underlined above). The sum is 17."
      },
      {
        "input": "nums = \\[1,-5,-20,4,-1,3,-6,-3\\], k = 2",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length, k <= 105`",
      "`-104 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1697",
    "slug": "checking-existence-of-edge-length-limited-paths",
    "title": "Checking Existence of Edge Length Limited Paths",
    "difficulty": "Hard",
    "description": "An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be **multiple** edges between two nodes. Given an array `queries`, where `queries[j] = [pj, qj, limitj]`, your task is to determine for each `queries[j]` whether there is a path between `pj` and `qj` such that each edge on the path has a distance **strictly less than** `limitj` . Return _a **boolean array**_ `answer`_, where_ `answer.length == queries.length` _and the_ `jth` _value of_ `answer` _is_ `true` _if there is a path for_ `queries[j]` _is_ `true`_, and_ `false` _otherwise_.",
    "examples": [
      {
        "input": "n = 3, edgeList = \\[\\[0,1,2\\],\\[1,2,4\\],\\[2,0,8\\],\\[1,0,16\\]\\], queries = \\[\\[0,1,2\\],\\[0,2,5\\]\\]",
        "output": "\\[false,true\\]",
        "explanation": "The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16."
      },
      {
        "input": "n = 5, edgeList = \\[\\[0,1,10\\],\\[1,2,5\\],\\[2,3,9\\],\\[3,4,13\\]\\], queries = \\[\\[0,4,14\\],\\[1,4,13\\]\\]",
        "output": "\\[true,false\\]"
      }
    ],
    "constraints": [
      "`2 <= n <= 105`",
      "`1 <= edgeList.length, queries.length <= 105`",
      "`edgeList[i].length == 3`",
      "`queries[j].length == 3`",
      "`0 <= ui, vi, pj, qj <= n - 1`",
      "`ui != vi`",
      "`pj != qj`",
      "`1 <= disi, limitj <= 109`",
      "There may be multiple edges between two nodes."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1698",
    "slug": "number-of-distinct-substrings-in-a-string",
    "title": "Number of Distinct Substrings in a String",
    "difficulty": "Medium",
    "description": "Given a string `s`, return _the number of **distinct** substrings of_ `s`. A **substring** of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.",
    "examples": [
      {
        "input": "s =  \"aabbaba \"",
        "output": "21",
        "explanation": "The set of distinct strings is \\[ \"a \", \"b \", \"aa \", \"bb \", \"ab \", \"ba \", \"aab \", \"abb \", \"bab \", \"bba \", \"aba \", \"aabb \", \"abba \", \"bbab \", \"baba \", \"aabba \", \"abbab \", \"bbaba \", \"aabbab \", \"abbaba \", \"aabbaba \"\\]"
      },
      {
        "input": "s =  \"abcdefg \"",
        "output": "28"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of lowercase English letters.",
      "Follow up: Can you solve this problem in `O(n)` time complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1700",
    "slug": "number-of-students-unable-to-eat-lunch",
    "title": "Number of Students Unable to Eat Lunch",
    "difficulty": "Easy",
    "description": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches. The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a **stack**. At each step: *  If the student at the front of the queue **prefers** the sandwich on the top of the stack, they will **take it** and leave the queue. *  Otherwise, they will **leave it** and go to the queue's end. This continues until none of the queue students want to take the top sandwich and are thus unable to eat. You are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i\u200b\u200b\u200b\u200b\u200b\u200bth` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j\u200b\u200b\u200b\u200b\u200b\u200bth` student in the initial queue (`j = 0` is the front of the queue). Return _the number of students that are unable to eat._",
    "examples": [
      {
        "input": "students = \\[1,1,0,0\\], sandwiches = \\[0,1,0,1\\]",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "students = \\[1,1,1,0,0,1\\], sandwiches = \\[1,0,0,0,1,1\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= students.length, sandwiches.length <= 100`",
      "`students.length == sandwiches.length`",
      "`sandwiches[i]` is `0` or `1`.",
      "`students[i]` is `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1701",
    "slug": "average-waiting-time",
    "title": "Average Waiting Time",
    "difficulty": "Medium",
    "description": "There is a restaurant with a single chef. You are given an array `customers`, where `customers[i] = [arrivali, timei]:` *  `arrivali` is the arrival time of the `ith` customer. The arrival times are sorted in **non-decreasing** order. *  `timei` is the time needed to prepare the order of the `ith` customer. When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers **in the order they were given in the input**. Return _the **average** waiting time of all customers_. Solutions within `10-5` from the actual answer are considered accepted.",
    "examples": [
      {
        "input": "customers = \\[\\[1,2\\],\\[2,5\\],\\[4,3\\]\\]",
        "output": "5.00000",
        "explanation": ""
      },
      {
        "input": "customers = \\[\\[5,2\\],\\[5,4\\],\\[10,3\\],\\[20,1\\]\\]",
        "output": "3.25000",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= customers.length <= 105`",
      "`1 <= arrivali, timei <= 104`",
      "`arrivali <= arrivali+1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1702",
    "slug": "maximum-binary-string-after-change",
    "title": "Maximum Binary String After Change",
    "difficulty": "Medium",
    "description": "You are given a binary string `binary` consisting of only `0`'s or `1`'s. You can apply each of the following operations any number of times: *  Operation 1: If the number contains the substring `\"00 \"`, you can replace it with `\"10 \"`. *  For example, `\"00010 \" -> \"10010` \" *  Operation 2: If the number contains the substring `\"10 \"`, you can replace it with `\"01 \"`. *  For example, `\"00010 \" -> \"00001 \"` _Return the **maximum binary string** you can obtain after any number of operations. Binary string `x` is greater than binary string `y` if `x`'s decimal representation is greater than `y`'s decimal representation._",
    "examples": [
      {
        "input": "binary =  \"000110 \"",
        "output": "\"111011 \"",
        "explanation": "A valid transformation sequence can be:"
      },
      {
        "input": "binary =  \"01 \"",
        "output": "\"01 \"",
        "explanation": "\"01 \" cannot be transformed any further."
      }
    ],
    "constraints": [
      "`1 <= binary.length <= 105`",
      "`binary` consist of `'0'` and `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1703",
    "slug": "minimum-adjacent-swaps-for-k-consecutive-ones",
    "title": "Minimum Adjacent Swaps for K Consecutive Ones",
    "difficulty": "Hard",
    "description": "You are given an integer array, `nums`, and an integer `k`. `nums` comprises of only `0`'s and `1`'s. In one move, you can choose two **adjacent** indices and swap their values. Return _the **minimum** number of moves required so that_ `nums` _has_ `k` _**consecutive**_ `1`_'s_.",
    "examples": [
      {
        "input": "nums = \\[1,0,0,1,0,1\\], k = 2",
        "output": "1",
        "explanation": "In 1 move, nums could be \\[1,0,0,0,1,1\\] and have 2 consecutive 1's."
      },
      {
        "input": "nums = \\[1,0,0,0,0,0,1,1\\], k = 3",
        "output": "5",
        "explanation": "In 5 moves, the leftmost 1 can be shifted right until nums = \\[0,0,0,0,0,1,1,1\\]."
      },
      {
        "input": "nums = \\[1,1,0,1\\], k = 2",
        "output": "0",
        "explanation": "nums already has 2 consecutive 1's."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`nums[i]` is `0` or `1`.",
      "`1 <= k <= sum(nums)`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1704",
    "slug": "determine-if-string-halves-are-alike",
    "title": "Determine if String Halves Are Alike",
    "difficulty": "Easy",
    "description": "You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half. Two strings are **alike** if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters. Return `true` _if_ `a` _and_ `b` _are **alike**_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "s =  \"book \"",
        "output": "true",
        "explanation": "a =  \"bo \" and b =  \"ok \". a has 1 vowel and b has 1 vowel. Therefore, they are alike."
      },
      {
        "input": "s =  \"textbook \"",
        "output": "false",
        "explanation": "a =  \"text \" and b =  \"book \". a has 1 vowel whereas b has 2. Therefore, they are not alike."
      }
    ],
    "constraints": [
      "`2 <= s.length <= 1000`",
      "`s.length` is even.",
      "`s` consists of uppercase and lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1705",
    "slug": "maximum-number-of-eaten-apples",
    "title": "Maximum Number of Eaten Apples",
    "difficulty": "Medium",
    "description": "There is a special kind of apple tree that grows apples every day for `n` days. On the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`. You decided to eat **at most** one apple a day (to keep the doctors away). Note that you can keep eating after the first `n` days. Given two integer arrays `days` and `apples` of length `n`, return _the maximum number of apples you can eat._",
    "examples": [
      {
        "input": "apples = \\[1,2,3,5,2\\], days = \\[3,2,1,4,2\\]",
        "output": "7",
        "explanation": "You can eat 7 apples:"
      },
      {
        "input": "apples = \\[3,0,0,0,0,2\\], days = \\[3,0,0,0,0,2\\]",
        "output": "5",
        "explanation": "You can eat 5 apples:"
      }
    ],
    "constraints": [
      "`n == apples.length == days.length`",
      "`1 <= n <= 2  104`",
      "`0 <= apples[i], days[i] <= 2  104`",
      "`days[i] = 0` if and only if `apples[i] = 0`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1706",
    "slug": "where-will-the-ball-fall",
    "title": "Where Will the Ball Fall",
    "difficulty": "Medium",
    "description": "You have a 2-D `grid` of size `m x n` representing a box, and you have `n` balls. The box is open on the top and bottom sides. Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left. *  A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`. *  A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`. We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V \" shaped pattern between two boards or if a board redirects the ball into either wall of the box. Return _an array_ `answer` _of size_ `n` _where_ `answer[i]` _is the column that the ball falls out of at the bottom after dropping the ball from the_ `ith` _column at the top, or `-1` _if the ball gets stuck in the box_._",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,1,-1,-1\\],\\[1,1,1,-1,-1\\],\\[-1,-1,-1,1,1\\],\\[1,1,1,1,-1\\],\\[-1,-1,-1,-1,-1\\]\\]",
        "output": "\\[1,-1,-1,-1,-1\\]",
        "explanation": "This example is shown in the photo."
      },
      {
        "input": "grid = \\[\\[-1\\]\\]",
        "output": "\\[-1\\]",
        "explanation": "The ball gets stuck against the left wall."
      },
      {
        "input": "grid = \\[\\[1,1,1,1,1,1\\],\\[-1,-1,-1,-1,-1,-1\\],\\[1,1,1,1,1,1\\],\\[-1,-1,-1,-1,-1,-1\\]\\]",
        "output": "\\[0,1,2,3,4,-1\\]"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 100`",
      "`grid[i][j]` is `1` or `-1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1707",
    "slug": "maximum-xor-with-an-element-from-array",
    "title": "Maximum XOR With an Element From Array",
    "difficulty": "Hard",
    "description": "You are given an array `nums` consisting of non-negative integers. You are also given a `queries` array, where `queries[i] = [xi, mi]`. The answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and any element of `nums` that does not exceed `mi`. In other words, the answer is `max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements in `nums` are larger than `mi`, then the answer is `-1`. Return _an integer array_ `answer` _where_ `answer.length == queries.length` _and_ `answer[i]` _is the answer to the_ `ith` _query._",
    "examples": [
      {
        "input": "nums = \\[0,1,2,3,4\\], queries = \\[\\[3,1\\],\\[1,3\\],\\[5,6\\]\\]",
        "output": "\\[3,3,7\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[5,2,4,6,6,3\\], queries = \\[\\[12,4\\],\\[8,1\\],\\[6,3\\]\\]",
        "output": "\\[15,-1,5\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length, queries.length <= 105`",
      "`queries[i].length == 2`",
      "`0 <= nums[j], xi, mi <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1708",
    "slug": "largest-subarray-length-k",
    "title": "Largest Subarray Length K",
    "difficulty": "Easy",
    "description": "An array `A` is larger than some array `B` if for the first index `i` where `A[i] != B[i]`, `A[i] > B[i]`. For example, consider `0`\\-indexing: *  `[1,3,2,4] > [1,2,2,4]`, since at index `1`, `3 > 2`. *  `[1,4,4,4] < [2,1,1,1]`, since at index `0`, `1 < 2`. A subarray is a contiguous subsequence of the array. Given an integer array `nums` of **distinct** integers, return the **largest** subarray of `nums` of length `k`.",
    "examples": [
      {
        "input": "nums = \\[1,4,5,2,3\\], k = 3",
        "output": "\\[5,2,3\\]",
        "explanation": "The subarrays of size 3 are: \\[1,4,5\\], \\[4,5,2\\], and \\[5,2,3\\]."
      },
      {
        "input": "nums = \\[1,4,5,2,3\\], k = 4",
        "output": "\\[4,5,2,3\\]",
        "explanation": "The subarrays of size 4 are: \\[1,4,5,2\\], and \\[4,5,2,3\\]."
      },
      {
        "input": "nums = \\[1,4,5,2,3\\], k = 1",
        "output": "\\[5\\]"
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`",
      "All the integers of `nums` are unique.",
      "Follow up: What if the integers in `nums` are not distinct?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1710",
    "slug": "maximum-units-on-a-truck",
    "title": "Maximum Units on a Truck",
    "difficulty": "Easy",
    "description": "You are assigned to put some amount of boxes onto **one truck**. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`: *  `numberOfBoxesi` is the number of boxes of type `i`. *  `numberOfUnitsPerBoxi` is the number of units in each box of the type `i`. You are also given an integer `truckSize`, which is the **maximum** number of **boxes** that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed `truckSize`. Return _the **maximum** total number of **units** that can be put on the truck._",
    "examples": [
      {
        "input": "boxTypes = \\[\\[1,3\\],\\[2,2\\],\\[3,1\\]\\], truckSize = 4",
        "output": "8",
        "explanation": "There are:"
      },
      {
        "input": "boxTypes = \\[\\[5,10\\],\\[2,5\\],\\[4,7\\],\\[3,9\\]\\], truckSize = 10",
        "output": "91"
      }
    ],
    "constraints": [
      "`1 <= boxTypes.length <= 1000`",
      "`1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`",
      "`1 <= truckSize <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1711",
    "slug": "count-good-meals",
    "title": "Count Good Meals",
    "difficulty": "Medium",
    "description": "A **good meal** is a meal that contains **exactly two different food items** with a sum of deliciousness equal to a power of two. You can pick **any** two different foods to make a good meal. Given an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b`\u200b\u200b\u200b\u200b item of food, return _the number of different **good meals** you can make from this list modulo_ `109 + 7`. Note that items with different indices are considered different even if they have the same deliciousness value.",
    "examples": [
      {
        "input": "deliciousness = \\[1,3,5,7,9\\]",
        "output": "4",
        "explanation": "The good meals are (1,3), (1,7), (3,5) and, (7,9)."
      },
      {
        "input": "deliciousness = \\[1,1,1,3,3,3,7\\]",
        "output": "15",
        "explanation": "The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways."
      }
    ],
    "constraints": [
      "`1 <= deliciousness.length <= 105`",
      "`0 <= deliciousness[i] <= 220`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1712",
    "slug": "ways-to-split-array-into-three-subarrays",
    "title": "Ways to Split Array Into Three Subarrays",
    "difficulty": "Medium",
    "description": "A split of an integer array is **good** if: *  The array is split into three **non-empty** contiguous subarrays - named `left`, `mid`, `right` respectively from left to right. *  The sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`. Given `nums`, an array of **non-negative** integers, return _the number of **good** ways to split_ `nums`. As the number may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "nums = \\[1,1,1\\]",
        "output": "1",
        "explanation": "The only good way to split nums is \\[1\\] \\[1\\] \\[1\\]."
      },
      {
        "input": "nums = \\[1,2,2,2,5,0\\]",
        "output": "3",
        "explanation": "There are three good ways of splitting nums:"
      },
      {
        "input": "nums = \\[3,2,1\\]",
        "output": "0",
        "explanation": "There is no good way to split nums."
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 105`",
      "`0 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1713",
    "slug": "minimum-operations-to-make-a-subsequence",
    "title": "Minimum Operations to Make a Subsequence",
    "difficulty": "Hard",
    "description": "You are given an array `target` that consists of **distinct** integers and another integer array `arr` that **can** have duplicates. In one operation, you can insert any integer at any position in `arr`. For example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. Note that you can insert the integer at the very beginning or end of the array. Return _the **minimum** number of operations needed to make_ `target` _a **subsequence** of_ `arr`_._ A **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.",
    "examples": [
      {
        "input": "target = \\[5,1,3\\], `arr` = \\[9,4,2,3,4\\]",
        "output": "2",
        "explanation": "You can add 5 and 1 in such a way that makes `arr` = \\[5,9,4,1,2,3,4\\], then target will be a subsequence of `arr`."
      },
      {
        "input": "target = \\[6,4,8,1,3,2\\], `arr` = \\[4,7,6,2,3,8,6,1\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= target.length, arr.length <= 105`",
      "`1 <= target[i], arr[i] <= 109`",
      "`target` contains no duplicates."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1714",
    "slug": "sum-of-special-evenly-spaced-elements-in-array",
    "title": "Sum Of Special Evenly-Spaced Elements In Array",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** integer array `nums` consisting of `n` non-negative integers. You are also given an array `queries`, where `queries[i] = [xi, yi]`. The answer to the `ith` query is the sum of all `nums[j]` where `xi <= j < n` and `(j - xi)` is divisible by `yi`. Return _an array_ `answer` _where_ `answer.length == queries.length` _and_ `answer[i]` _is the answer to the_ `ith` _query **modulo**_ `109 + 7`.",
    "examples": [
      {
        "input": "nums = \\[0,1,2,3,4,5,6,7\\], queries = \\[\\[0,3\\],\\[5,1\\],\\[4,2\\]\\]",
        "output": "\\[9,18,10\\]",
        "explanation": "The answers of the queries are as follows:"
      },
      {
        "input": "nums = \\[100,200,101,201,102,202,103,203\\], queries = \\[\\[0,7\\]\\]",
        "output": "\\[303\\]"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 5  104`",
      "`0 <= nums[i] <= 109`",
      "`1 <= queries.length <= 1.5  105`",
      "`0 <= xi < n`",
      "`1 <= yi <= 5  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1716",
    "slug": "calculate-money-in-leetcode-bank",
    "title": "Calculate Money in Leetcode Bank",
    "difficulty": "Easy",
    "description": "Hercy wants to save money for his first car. He puts money in the Leetcode bank **every day**. He starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the **previous Monday**. Given `n`, return _the total amount of money he will have in the Leetcode bank at the end of the_ `nth` _day._",
    "examples": [
      {
        "input": "n = 4",
        "output": "10",
        "explanation": "After the 4th day, the total is 1 + 2 + 3 + 4 = 10."
      },
      {
        "input": "n = 10",
        "output": "37",
        "explanation": "After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2."
      },
      {
        "input": "n = 20",
        "output": "96",
        "explanation": "After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96."
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1717",
    "slug": "maximum-score-from-removing-substrings",
    "title": "Maximum Score From Removing Substrings",
    "difficulty": "Medium",
    "description": "You are given a string `s` and two integers `x` and `y`. You can perform two types of operations any number of times. *  Remove substring `\"ab \"` and gain `x` points. *  For example, when removing `\"ab \"` from `\"cabxbae \"` it becomes `\"cxbae \"`. *  Remove substring `\"ba \"` and gain `y` points. *  For example, when removing `\"ba \"` from `\"cabxbae \"` it becomes `\"cabxe \"`. Return _the maximum points you can gain after applying the above operations on_ `s`.",
    "examples": [
      {
        "input": "s =  \"cdbcbbaaabab \", x = 4, y = 5",
        "output": "19",
        "explanation": ""
      },
      {
        "input": "s =  \"aabbaaxybbaabb \", x = 5, y = 4",
        "output": "20"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`1 <= x, y <= 104`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1718",
    "slug": "construct-the-lexicographically-largest-valid-sequence",
    "title": "Construct the Lexicographically Largest Valid Sequence",
    "difficulty": "Medium",
    "description": "Given an integer `n`, find a sequence that satisfies all of the following: *  The integer `1` occurs once in the sequence. *  Each integer between `2` and `n` occurs twice in the sequence. *  For every integer `i` between `2` and `n`, the **distance** between the two occurrences of `i` is exactly `i`. The **distance** between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`. Return _the **lexicographically largest** sequence__. It is guaranteed that under the given constraints, there is always a solution._ A sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.",
    "examples": [
      {
        "input": "n = 3",
        "output": "\\[3,1,2,3,2\\]",
        "explanation": "\\[2,3,2,1,3\\] is also a valid sequence, but \\[3,1,2,3,2\\] is the lexicographically largest valid sequence."
      },
      {
        "input": "n = 5",
        "output": "\\[5,3,1,4,3,5,2,4,2\\]"
      }
    ],
    "constraints": [
      "`1 <= n <= 20`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1719",
    "slug": "number-of-ways-to-reconstruct-a-tree",
    "title": "Number Of Ways To Reconstruct A Tree",
    "difficulty": "Hard",
    "description": "You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and: *  There are no duplicates. *  `xi < yi` Let `ways` be the number of rooted trees that satisfy the following conditions: *  The tree consists of nodes whose values appeared in `pairs`. *  A pair `[xi, yi]` exists in `pairs` **if and only if** `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.",
    "examples": [
      {
        "input": "pairs = \\[\\[1,2\\],\\[2,3\\]\\]",
        "output": "1",
        "explanation": "There is exactly one valid rooted tree, which is shown in the above figure."
      },
      {
        "input": "pairs = \\[\\[1,2\\],\\[2,3\\],\\[1,3\\]\\]",
        "output": "2",
        "explanation": "There are multiple valid rooted trees. Three of them are shown in the above figures."
      },
      {
        "input": "pairs = \\[\\[1,2\\],\\[2,3\\],\\[2,4\\],\\[1,5\\]\\]",
        "output": "0",
        "explanation": "There are no valid rooted trees."
      }
    ],
    "constraints": [
      "`1 <= pairs.length <= 105`",
      "`1 <= xi < yi <= 500`",
      "The elements in `pairs` are unique."
    ],
    "note": "*    the tree does not have to be a binary tree.",
    "follow_up": null
  },
  {
    "id": "1720",
    "slug": "decode-xored-array",
    "title": "Decode XORed Array",
    "difficulty": "Easy",
    "description": "There is a **hidden** integer array `arr` that consists of `n` non-negative integers. It was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`. You are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`. Return _the original array_ `arr`. It can be proved that the answer exists and is unique.",
    "examples": [
      {
        "input": "encoded = \\[1,2,3\\], first = 1",
        "output": "\\[1,0,2,1\\]",
        "explanation": "If arr = \\[1,0,2,1\\], then first = 1 and encoded = \\[1 XOR 0, 0 XOR 2, 2 XOR 1\\] = \\[1,2,3\\]"
      },
      {
        "input": "encoded = \\[6,2,7,3\\], first = 4",
        "output": "\\[4,2,0,7,4\\]"
      }
    ],
    "constraints": [
      "`2 <= n <= 104`",
      "`encoded.length == n - 1`",
      "`0 <= encoded[i] <= 105`",
      "`0 <= first <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1721",
    "slug": "swapping-nodes-in-a-linked-list",
    "title": "Swapping Nodes in a Linked List",
    "difficulty": "Medium",
    "description": "You are given the `head` of a linked list, and an integer `k`. Return _the head of the linked list after **swapping** the values of the_ `kth` _node from the beginning and the_ `kth` _node from the end (the list is **1-indexed**)._",
    "examples": [
      {
        "input": "head = \\[1,2,3,4,5\\], k = 2",
        "output": "\\[1,4,3,2,5\\]"
      },
      {
        "input": "head = \\[7,9,6,6,7,8,3,0,9,5\\], k = 5",
        "output": "\\[7,9,6,6,8,7,3,0,9,5\\]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is `n`.",
      "`1 <= k <= n <= 105`",
      "`0 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1722",
    "slug": "minimize-hamming-distance-after-swap-operations",
    "title": "Minimize Hamming Distance After Swap Operations",
    "difficulty": "Medium",
    "description": "You are given two integer arrays, `source` and `target`, both of length `n`. You are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` **(0-indexed)** of array `source`. Note that you can swap elements at a specific pair of indices **multiple** times and in **any** order. The **Hamming distance** of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. Formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` **(0-indexed)**. Return _the **minimum Hamming distance** of_ `source` _and_ `target` _after performing **any** amount of swap operations on array_ `source`_._",
    "examples": [
      {
        "input": "source = \\[1,2,3,4\\], target = \\[2,1,4,5\\], allowedSwaps = \\[\\[0,1\\],\\[2,3\\]\\]",
        "output": "1",
        "explanation": "source can be transformed the following way:"
      },
      {
        "input": "source = \\[1,2,3,4\\], target = \\[1,3,2,4\\], allowedSwaps = \\[\\]",
        "output": "2",
        "explanation": "There are no allowed swaps."
      },
      {
        "input": "source = \\[5,1,2,4,3\\], target = \\[1,5,4,2,3\\], allowedSwaps = \\[\\[0,4\\],\\[4,2\\],\\[1,3\\],\\[1,4\\]\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`n == source.length == target.length`",
      "`1 <= n <= 105`",
      "`1 <= source[i], target[i] <= 105`",
      "`0 <= allowedSwaps.length <= 105`",
      "`allowedSwaps[i].length == 2`",
      "`0 <= ai, bi <= n - 1`",
      "`ai != bi`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1723",
    "slug": "find-minimum-time-to-finish-all-jobs",
    "title": "Find Minimum Time to Finish All Jobs",
    "difficulty": "Hard",
    "description": "You are given an integer array `jobs`, where `jobs[i]` is the amount of time it takes to complete the `ith` job. There are `k` workers that you can assign jobs to. Each job should be assigned to **exactly** one worker. The **working time** of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the **maximum working time** of any worker is **minimized**. _Return the **minimum** possible **maximum working time** of any assignment._",
    "examples": [
      {
        "input": "jobs = \\[3,2,3\\], k = 3",
        "output": "3",
        "explanation": "By assigning each person one job, the maximum time is 3."
      },
      {
        "input": "jobs = \\[1,2,4,7,8\\], k = 2",
        "output": "11",
        "explanation": "Assign the jobs the following way:"
      }
    ],
    "constraints": [
      "`1 <= k <= jobs.length <= 12`",
      "`1 <= jobs[i] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1724",
    "slug": "checking-existence-of-edge-length-limited-paths-ii",
    "title": "Checking Existence of Edge Length Limited Paths II",
    "difficulty": "Hard",
    "description": "An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be **multiple** edges between two nodes, and the graph may not be connected. Implement the `DistanceLimitedPathsExist` class: *  `DistanceLimitedPathsExist(int n, int[][] edgeList)` Initializes the class with an undirected graph. *  `boolean query(int p, int q, int limit)` Returns `true` if there exists a path from `p` to `q` such that each edge on the path has a distance **strictly less than** `limit`, and otherwise `false`.",
    "examples": [],
    "constraints": [
      "`2 <= n <= 104`",
      "`0 <= edgeList.length <= 104`",
      "`edgeList[i].length == 3`",
      "`0 <= ui, vi, p, q <= n-1`",
      "`ui != vi`",
      "`p != q`",
      "`1 <= disi, limit <= 109`",
      "At most `104` calls will be made to `query`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1725",
    "slug": "number-of-rectangles-that-can-form-the-largest-square",
    "title": "Number Of Rectangles That Can Form The Largest Square",
    "difficulty": "Easy",
    "description": "You are given an array `rectangles` where `rectangles[i] = [li, wi]` represents the `ith` rectangle of length `li` and width `wi`. You can cut the `ith` rectangle to form a square with a side length of `k` if both `k <= li` and `k <= wi`. For example, if you have a rectangle `[4,6]`, you can cut it to get a square with a side length of at most `4`. Let `maxLen` be the side length of the **largest** square you can obtain from any of the given rectangles. Return _the **number** of rectangles that can make a square with a side length of_ `maxLen`.",
    "examples": [
      {
        "input": "rectangles = \\[\\[5,8\\],\\[3,9\\],\\[5,12\\],\\[16,5\\]\\]",
        "output": "3",
        "explanation": "The largest squares you can get from each rectangle are of lengths \\[5,3,5,5\\]."
      },
      {
        "input": "rectangles = \\[\\[2,3\\],\\[3,7\\],\\[4,3\\],\\[3,7\\]\\]",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= rectangles.length <= 1000`",
      "`rectangles[i].length == 2`",
      "`1 <= li, wi <= 109`",
      "`li != wi`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1726",
    "slug": "tuple-with-same-product",
    "title": "Tuple with Same Product",
    "difficulty": "Medium",
    "description": "Given an array `nums` of **distinct** positive integers, return _the number of tuples_ `(a, b, c, d)` _such that_ `a * b = c * d` _where_ `a`_,_ `b`_,_ `c`_, and_ `d` _are elements of_ `nums`_, and_ `a != b != c != d`_._",
    "examples": [
      {
        "input": "nums = \\[2,3,4,6\\]",
        "output": "8",
        "explanation": "There are 8 valid tuples:"
      },
      {
        "input": "nums = \\[1,2,4,5,10\\]",
        "output": "16",
        "explanation": "There are 16 valid tuples:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 104`",
      "All elements in `nums` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1727",
    "slug": "largest-submatrix-with-rearrangements",
    "title": "Largest Submatrix With Rearrangements",
    "difficulty": "Medium",
    "description": "You are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the **columns** of the `matrix` in any order. Return _the area of the largest submatrix within_ `matrix` _where **every** element of the submatrix is_ `1` _after reordering the columns optimally._",
    "examples": [
      {
        "input": "matrix = \\[\\[0,0,1\\],\\[1,1,1\\],\\[1,0,1\\]\\]",
        "output": "4",
        "explanation": "You can rearrange the columns as shown above."
      },
      {
        "input": "matrix = \\[\\[1,0,1,0,1\\]\\]",
        "output": "3",
        "explanation": "You can rearrange the columns as shown above."
      },
      {
        "input": "matrix = \\[\\[1,1,0\\],\\[1,0,1\\]\\]",
        "output": "2",
        "explanation": "Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2."
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m  n <= 105`",
      "`matrix[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1728",
    "slug": "cat-and-mouse-ii",
    "title": "Cat and Mouse II",
    "difficulty": "Hard",
    "description": "A game is played by a cat and a mouse named Cat and Mouse. The environment is represented by a `grid` of size `rows x cols`, where each element is a wall, floor, player (Cat, Mouse), or food. *  Players are represented by the characters `'C'`(Cat)`,'M'`(Mouse). *  Floors are represented by the character `'.'` and can be walked on. *  Walls are represented by the character `'#'` and cannot be walked on. *  Food is represented by the character `'F'` and can be walked on. *  There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`. Mouse and Cat play according to the following rules: *  Mouse **moves first**, then they take turns to move. *  During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the `grid`. *  `catJump, mouseJump` are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length. *  Staying in the same position is allowed. *  Mouse can jump over Cat. The game can end in 4 ways: *  If Cat occupies the same position as Mouse, Cat wins. *  If Cat reaches the food first, Cat wins. *  If Mouse reaches the food first, Mouse wins. *  If Mouse cannot get to the food within 1000 turns, Cat wins. Given a `rows x cols` matrix `grid` and two integers `catJump` and `mouseJump`, return `true` _if Mouse can win the game if both Cat and Mouse play optimally, otherwise return_ `false`.",
    "examples": [
      {
        "input": "grid = \\[ \"####F \", \"#C... \", \"M.... \"\\], catJump = 1, mouseJump = 2",
        "output": "true",
        "explanation": "Cat cannot catch Mouse on its turn nor can it get the food before Mouse."
      },
      {
        "input": "grid = \\[ \"M.C...F \"\\], catJump = 1, mouseJump = 4",
        "output": "true"
      },
      {
        "input": "grid = \\[ \"M.C...F \"\\], catJump = 1, mouseJump = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "`rows == grid.length`",
      "`cols = grid[i].length`",
      "`1 <= rows, cols <= 8`",
      "`grid[i][j]` consist only of characters `'C'`, `'M'`, `'F'`, `'.'`, and `'#'`.",
      "There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.",
      "`1 <= catJump, mouseJump <= 8`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1730",
    "slug": "shortest-path-to-get-food",
    "title": "Shortest Path to Get Food",
    "difficulty": "Medium",
    "description": "You are starving and you want to eat food as quickly as possible. You want to find the shortest path to arrive at any food cell. You are given an `m x n` character matrix, `grid`, of these different types of cells: *  `'*'` is your location. There is **exactly one** `'*'` cell. *  `'#'` is a food cell. There may be **multiple** food cells. *  `'O'` is free space, and you can travel through these cells. *  `'X'` is an obstacle, and you cannot travel through these cells. You can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle. Return _the **length** of the shortest path for you to reach **any** food cell_. If there is no path for you to reach food, return `-1`.",
    "examples": [
      {
        "input": "grid = \\[\\[ \"X \", \"X \", \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"\\* \", \"O \", \"O \", \"O \", \"X \"\\],\\[ \"X \", \"O \", \"O \", \"# \", \"O \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \", \"X \", \"X \"\\]\\]",
        "output": "3",
        "explanation": "It takes 3 steps to reach the food."
      },
      {
        "input": "grid = \\[\\[ \"X \", \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"\\* \", \"X \", \"O \", \"X \"\\],\\[ \"X \", \"O \", \"X \", \"# \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \", \"X \"\\]\\]",
        "output": "-1",
        "explanation": "It is not possible to reach the food."
      },
      {
        "input": "grid = \\[\\[ \"X \", \"X \", \"X \", \"X \", \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"\\* \", \"O \", \"X \", \"O \", \"# \", \"O \", \"X \"\\],\\[ \"X \", \"O \", \"O \", \"X \", \"O \", \"O \", \"X \", \"X \"\\],\\[ \"X \", \"O \", \"O \", \"O \", \"O \", \"# \", \"O \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \", \"X \", \"X \", \"X \", \"X \"\\]\\]",
        "output": "6",
        "explanation": "There can be multiple food cells. It only takes 6 steps to reach the bottom food."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 200`",
      "`grid[row][col]` is `''`, `'X'`, `'O'`, or `'#'`.",
      "The `grid` contains exactly one `''`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1732",
    "slug": "find-the-highest-altitude",
    "title": "Find the Highest Altitude",
    "difficulty": "Easy",
    "description": "There is a biker going on a road trip. The road trip consists of `n + 1` points at different altitudes. The biker starts his trip on point `0` with altitude equal `0`. You are given an integer array `gain` of length `n` where `gain[i]` is the **net gain in altitude** between points `i`\u200b\u200b\u200b\u200b\u200b\u200b and `i + 1` for all (`0 <= i < n)`. Return _the **highest altitude** of a point._",
    "examples": [
      {
        "input": "gain = \\[-5,1,5,0,-7\\]",
        "output": "1",
        "explanation": "The altitudes are \\[0,-5,-4,1,1,-6\\]. The highest is 1."
      },
      {
        "input": "gain = \\[-4,-3,-2,-1,4,3,2\\]",
        "output": "0",
        "explanation": "The altitudes are \\[0,-4,-7,-9,-10,-6,-3,-1\\]. The highest is 0."
      }
    ],
    "constraints": [
      "`n == gain.length`",
      "`1 <= n <= 100`",
      "`-100 <= gain[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1733",
    "slug": "minimum-number-of-people-to-teach",
    "title": "Minimum Number of People to Teach",
    "difficulty": "Medium",
    "description": "On a social network consisting of `m` users and some friendships between users, two users can communicate with each other if they know a common language. You are given an integer `n`, an array `languages`, and an array `friendships` where: *  There are `n` languages numbered `1` through `n`, *  `languages[i]` is the set of languages the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b user knows, and *  `friendships[i] = [u\u200b\u200b\u200b\u200b\u200b\u200bi\u200b\u200b\u200b, v\u200b\u200b\u200b\u200b\u200b\u200bi]` denotes a friendship between the users `u\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bi`\u200b\u200b\u200b\u200b\u200b and `vi`. You can choose **one** language and teach it to some users so that all friends can communicate with each other. Return _the_ _**minimum**_ _number of users you need to teach._ Note that friendships are not transitive, meaning if `x` is a friend of `y` and `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of `z`.",
    "examples": [
      {
        "input": "n = 2, languages = \\[\\[1\\],\\[2\\],\\[1,2\\]\\], friendships = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]",
        "output": "1",
        "explanation": "You can either teach user 1 the second language or user 2 the first language."
      },
      {
        "input": "n = 3, languages = \\[\\[2\\],\\[1,3\\],\\[1,2\\],\\[3\\]\\], friendships = \\[\\[1,4\\],\\[1,2\\],\\[3,4\\],\\[2,3\\]\\]",
        "output": "2",
        "explanation": "Teach the third language to users 1 and 3, yielding two users to teach."
      }
    ],
    "constraints": [
      "`2 <= n <= 500`",
      "`languages.length == m`",
      "`1 <= m <= 500`",
      "`1 <= languages[i].length <= n`",
      "`1 <= languages[i][j] <= n`",
      "`1 <= u\u200b\u200b\u200b\u200b\u200b\u200bi < v\u200b\u200b\u200b\u200b\u200b\u200bi <= languages.length`",
      "`1 <= friendships.length <= 500`",
      "All tuples `(u\u200b\u200b\u200b\u200b\u200bi, v\u200b\u200b\u200b\u200b\u200b\u200bi)` are unique",
      "`languages[i]` contains only unique values"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1734",
    "slug": "decode-xored-permutation",
    "title": "Decode XORed Permutation",
    "difficulty": "Medium",
    "description": "There is an integer array `perm` that is a permutation of the first `n` positive integers, where `n` is always **odd**. It was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = perm[i] XOR perm[i + 1]`. For example, if `perm = [1,3,2]`, then `encoded = [2,1]`. Given the `encoded` array, return _the original array_ `perm`. It is guaranteed that the answer exists and is unique.",
    "examples": [
      {
        "input": "encoded = \\[3,1\\]",
        "output": "\\[1,2,3\\]",
        "explanation": "If perm = \\[1,2,3\\], then encoded = \\[1 XOR 2,2 XOR 3\\] = \\[3,1\\]"
      },
      {
        "input": "encoded = \\[6,5,4,6\\]",
        "output": "\\[2,4,1,5,3\\]"
      }
    ],
    "constraints": [
      "`3 <= n < 105`",
      "`n` is odd.",
      "`encoded.length == n - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1735",
    "slug": "count-ways-to-make-array-with-product",
    "title": "Count Ways to Make Array With Product",
    "difficulty": "Hard",
    "description": "You are given a 2D integer array, `queries`. For each `queries[i]`, where `queries[i] = [ni, ki]`, find the number of different ways you can place positive integers into an array of size `ni` such that the product of the integers is `ki`. As the number of ways may be too large, the answer to the `ith` query is the number of ways **modulo** `109 + 7`. Return _an integer array_ `answer` _where_ `answer.length == queries.length`_, and_ `answer[i]` _is the answer to the_ `ith` _query._",
    "examples": [
      {
        "input": "queries = \\[\\[2,6\\],\\[5,1\\],\\[73,660\\]\\]",
        "output": "\\[4,1,50734910\\]",
        "explanation": "Each query is independent."
      },
      {
        "input": "queries = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\],\\[5,5\\]\\]",
        "output": "\\[1,2,3,10,5\\]"
      }
    ],
    "constraints": [
      "`1 <= queries.length <= 104`",
      "`1 <= ni, ki <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1736",
    "slug": "latest-time-by-replacing-hidden-digits",
    "title": "Latest Time by Replacing Hidden Digits",
    "difficulty": "Easy",
    "description": "You are given a string `time` in the form of `hh:mm`, where some of the digits in the string are hidden (represented by `?`). The valid times are those inclusively between `00:00` and `23:59`. Return _the latest valid time you can get from_ `time` _by replacing the hidden_ _digits_.",
    "examples": [
      {
        "input": "time =  \"2?:?0 \"",
        "output": "\"23:50 \"",
        "explanation": "The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50."
      },
      {
        "input": "time =  \"0?:3? \"",
        "output": "\"09:39 \""
      },
      {
        "input": "time =  \"1?:22 \"",
        "output": "\"19:22 \""
      }
    ],
    "constraints": [
      "`time` is in the format `hh:mm`.",
      "It is guaranteed that you can produce a valid time from the given string."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1737",
    "slug": "change-minimum-characters-to-satisfy-one-of-three-conditions",
    "title": "Change Minimum Characters to Satisfy One of Three Conditions",
    "difficulty": "Medium",
    "description": "You are given two strings `a` and `b` that consist of lowercase letters. In one operation, you can change any character in `a` or `b` to **any lowercase letter**. Your goal is to satisfy **one** of the following three conditions: *  **Every** letter in `a` is **strictly less** than **every** letter in `b` in the alphabet. *  **Every** letter in `b` is **strictly less** than **every** letter in `a` in the alphabet. *  **Both** `a` and `b` consist of **only one** distinct letter. Return _the **minimum** number of operations needed to achieve your goal._",
    "examples": [
      {
        "input": "a =  \"aba \", b =  \"caa \"",
        "output": "2",
        "explanation": "Consider the best way to make each condition true:"
      },
      {
        "input": "a =  \"dabadd \", b =  \"cda \"",
        "output": "3",
        "explanation": "The best way is to make condition 1 true by changing b to  \"eee \"."
      }
    ],
    "constraints": [
      "`1 <= a.length, b.length <= 105`",
      "`a` and `b` consist only of lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1738",
    "slug": "find-kth-largest-xor-coordinate-value",
    "title": "Find Kth Largest XOR Coordinate Value",
    "difficulty": "Medium",
    "description": "You are given a 2D `matrix` of size `m x n`, consisting of non-negative integers. You are also given an integer `k`. The **value** of coordinate `(a, b)` of the matrix is the XOR of all `matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` **(0-indexed)**. Find the `kth` largest value **(1-indexed)** of all the coordinates of `matrix`.",
    "examples": [
      {
        "input": "matrix = \\[\\[5,2\\],\\[1,6\\]\\], k = 1",
        "output": "7",
        "explanation": "The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value."
      },
      {
        "input": "matrix = \\[\\[5,2\\],\\[1,6\\]\\], k = 2",
        "output": "5",
        "explanation": "The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value."
      },
      {
        "input": "matrix = \\[\\[5,2\\],\\[1,6\\]\\], k = 3",
        "output": "4",
        "explanation": "The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value."
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 1000`",
      "`0 <= matrix[i][j] <= 106`",
      "`1 <= k <= m  n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1739",
    "slug": "building-boxes",
    "title": "Building Boxes",
    "difficulty": "Hard",
    "description": "You have a cubic storeroom where the width, length, and height of the room are all equal to `n` units. You are asked to place `n` boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes: *  You can place the boxes anywhere on the floor. *  If box `x` is placed on top of the box `y`, then each side of the four vertical sides of the box `y` **must** either be adjacent to another box or to a wall. Given an integer `n`, return _the **minimum** possible number of boxes touching the floor._",
    "examples": [
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "The figure above is for the placement of the three boxes."
      },
      {
        "input": "n = 4",
        "output": "3",
        "explanation": "The figure above is for the placement of the four boxes."
      },
      {
        "input": "n = 10",
        "output": "6",
        "explanation": "The figure above is for the placement of the ten boxes."
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1740",
    "slug": "find-distance-in-a-binary-tree",
    "title": "Find Distance in a Binary Tree",
    "difficulty": "Medium",
    "description": "Given the root of a binary tree and two integers `p` and `q`, return _the **distance** between the nodes of value_ `p` _and value_ `q` _in the tree_. The **distance** between two nodes is the number of edges on the path from one to the other.",
    "examples": [
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 0",
        "output": "3",
        "explanation": "There are 3 edges between 5 and 0: 5-3-1-0."
      },
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 7",
        "output": "2",
        "explanation": "There are 2 edges between 5 and 7: 5-2-7."
      },
      {
        "input": "root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 5",
        "output": "0",
        "explanation": "The distance between a node and itself is 0."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 104]`.",
      "`0 <= Node.val <= 109`",
      "All `Node.val` are unique.",
      "`p` and `q` are values in the tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1742",
    "slug": "maximum-number-of-balls-in-a-box",
    "title": "Maximum Number of Balls in a Box",
    "difficulty": "Easy",
    "description": "You are working in a ball factory where you have `n` balls numbered from `lowLimit` up to `highLimit` **inclusive** (i.e., `n == highLimit - lowLimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`. Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`. Given two integers `lowLimit` and `highLimit`, return _the number of balls in the box with the most balls._",
    "examples": [
      {
        "input": "lowLimit = 1, highLimit = 10",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "lowLimit = 5, highLimit = 15",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "lowLimit = 19, highLimit = 28",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= lowLimit <= highLimit <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1743",
    "slug": "restore-the-array-from-adjacent-pairs",
    "title": "Restore the Array From Adjacent Pairs",
    "difficulty": "Medium",
    "description": "There is an integer array `nums` that consists of `n` **unique** elements, but you have forgotten it. However, you do remember every pair of adjacent elements in `nums`. You are given a 2D integer array `adjacentPairs` of size `n - 1` where each `adjacentPairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are adjacent in `nums`. It is guaranteed that every adjacent pair of elements `nums[i]` and `nums[i+1]` will exist in `adjacentPairs`, either as `[nums[i], nums[i+1]]` or `[nums[i+1], nums[i]]`. The pairs can appear **in any order**. Return _the original array_ `nums`_. If there are multiple solutions, return **any of them**_.",
    "examples": [
      {
        "input": "adjacentPairs = \\[\\[2,1\\],\\[3,4\\],\\[3,2\\]\\]",
        "output": "\\[1,2,3,4\\]",
        "explanation": "This array has all its adjacent pairs in adjacentPairs."
      },
      {
        "input": "adjacentPairs = \\[\\[4,-2\\],\\[1,4\\],\\[-3,1\\]\\]",
        "output": "\\[-2,4,1,-3\\]",
        "explanation": "There can be negative numbers."
      },
      {
        "input": "adjacentPairs = \\[\\[100000,-100000\\]\\]",
        "output": "\\[100000,-100000\\]"
      }
    ],
    "constraints": [
      "`nums.length == n`",
      "`adjacentPairs.length == n - 1`",
      "`adjacentPairs[i].length == 2`",
      "`2 <= n <= 105`",
      "`-105 <= nums[i], ui, vi <= 105`",
      "There exists some `nums` that has `adjacentPairs` as its pairs."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1744",
    "slug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
    "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
    "difficulty": "Medium",
    "description": "You are given a **(0-indexed)** array of positive integers `candiesCount` where `candiesCount[i]` represents the number of candies of the `ith` type you have. You are also given a 2D array `queries` where `queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]`. You play a game with the following rules: *  You start eating candies on day `**0**`. *  You **cannot** eat **any** candy of type `i` unless you have eaten **all** candies of type `i - 1`. *  You must eat **at least** **one** candy per day until you have eaten all the candies. Construct a boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` if you can eat a candy of type `favoriteTypei` on day `favoriteDayi` without eating **more than** `dailyCapi` candies on **any** day, and `false` otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2. Return _the constructed array_ `answer`.",
    "examples": [
      {
        "input": "candiesCount = \\[7,4,5,3,8\\], queries = \\[\\[0,2,2\\],\\[4,2,4\\],\\[2,13,1000000000\\]\\]",
        "output": "\\[true,false,true\\]",
        "explanation": ""
      },
      {
        "input": "candiesCount = \\[5,2,6,4,1\\], queries = \\[\\[3,1,2\\],\\[4,10,3\\],\\[3,10,100\\],\\[4,100,30\\],\\[1,3,1\\]\\]",
        "output": "\\[false,true,true,false,false\\]"
      }
    ],
    "constraints": [
      "`1 <= candiesCount.length <= 105`",
      "`1 <= candiesCount[i] <= 105`",
      "`1 <= queries.length <= 105`",
      "`queries[i].length == 3`",
      "`0 <= favoriteTypei < candiesCount.length`",
      "`0 <= favoriteDayi <= 109`",
      "`1 <= dailyCapi <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1745",
    "slug": "palindrome-partitioning-iv",
    "title": "Palindrome Partitioning IV",
    "difficulty": "Hard",
    "description": "Given a string `s`, return `true` _if it is possible to split the string_ `s` _into three **non-empty** palindromic substrings. Otherwise, return_ `false`.\u200b\u200b\u200b\u200b\u200b A string is said to be palindrome if it the same string when reversed.",
    "examples": [
      {
        "input": "s =  \"abcbdd \"",
        "output": "true"
      },
      {
        "input": "s =  \"bcbddxy \"",
        "output": "false",
        "explanation": "s cannot be split into 3 palindromes."
      }
    ],
    "constraints": [
      "`3 <= s.length <= 2000`",
      "`s`\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1746",
    "slug": "maximum-subarray-sum-after-one-operation",
    "title": "Maximum Subarray Sum After One Operation",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. You must perform **exactly one** operation where you can **replace** one element `nums[i]` with `nums[i] * nums[i]`. Return _the **maximum** possible subarray sum after **exactly one** operation_. The subarray must be non-empty.",
    "examples": [
      {
        "input": "nums = \\[2,-1,-4,-3\\]",
        "output": "17",
        "explanation": "You can perform the operation on index 2 (0-indexed) to make nums = \\[2,-1,**16**,-3\\]. Now, the maximum subarray sum is 2 + -1 + 16 = 17."
      },
      {
        "input": "nums = \\[1,-1,1,1,-1,-1,1\\]",
        "output": "4",
        "explanation": "You can perform the operation on index 1 (0-indexed) to make nums = \\[1,**1**,1,1,-1,-1,1\\]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-104 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1748",
    "slug": "sum-of-unique-elements",
    "title": "Sum of Unique Elements",
    "difficulty": "Easy",
    "description": "You are given an integer array `nums`. The unique elements of an array are the elements that appear **exactly once** in the array. Return _the **sum** of all the unique elements of_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,2\\]",
        "output": "4",
        "explanation": "The unique elements are \\[1,3\\], and the sum is 4."
      },
      {
        "input": "nums = \\[1,1,1,1,1\\]",
        "output": "0",
        "explanation": "There are no unique elements, and the sum is 0."
      },
      {
        "input": "nums = \\[1,2,3,4,5\\]",
        "output": "15",
        "explanation": "The unique elements are \\[1,2,3,4,5\\], and the sum is 15."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1749",
    "slug": "maximum-absolute-sum-of-any-subarray",
    "title": "Maximum Absolute Sum of Any Subarray",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. The **absolute sum** of a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... + numsr-1 + numsr)`. Return _the **maximum** absolute sum of any **(possibly empty)** subarray of_ `nums`. Note that `abs(x)` is defined as follows: *  If `x` is a negative integer, then `abs(x) = -x`. *  If `x` is a non-negative integer, then `abs(x) = x`.",
    "examples": [
      {
        "input": "nums = \\[1,-3,2,3,-4\\]",
        "output": "5",
        "explanation": "The subarray \\[2,3\\] has absolute sum = abs(2+3) = abs(5) = 5."
      },
      {
        "input": "nums = \\[2,-5,1,-4,3,-2\\]",
        "output": "8",
        "explanation": "The subarray \\[-5,1,-4\\] has absolute sum = abs(-5+1-4) = abs(-8) = 8."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-104 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1750",
    "slug": "minimum-length-of-string-after-deleting-similar-ends",
    "title": "Minimum Length of String After Deleting Similar Ends",
    "difficulty": "Medium",
    "description": "Given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You are asked to apply the following algorithm on the string any number of times: 1. Pick a **non-empty** prefix from the string `s` where all the characters in the prefix are equal. 2. Pick a **non-empty** suffix from the string `s` where all the characters in this suffix are equal. 3. The prefix and the suffix should not intersect at any index. 4. The characters from the prefix and suffix must be the same. 5. Delete both the prefix and the suffix. Return _the **minimum length** of_ `s` _after performing the above operation any number of times (possibly zero times)_.",
    "examples": [
      {
        "input": "s =  \"ca \"",
        "output": "2",
        "explanation": "You can't remove any characters, so the string stays as is."
      },
      {
        "input": "s =  \"cabaabac \"",
        "output": "0",
        "explanation": "An optimal sequence of operations is:"
      },
      {
        "input": "s =  \"aabccabba \"",
        "output": "3",
        "explanation": "An optimal sequence of operations is:"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` only consists of characters `'a'`, `'b'`, and `'c'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1751",
    "slug": "maximum-number-of-events-that-can-be-attended-ii",
    "title": "Maximum Number of Events That Can Be Attended II",
    "difficulty": "Hard",
    "description": "You are given an array of `events` where `events[i] = [startDayi, endDayi, valuei]`. The `ith` event starts at `startDayi` and ends at `endDayi`, and if you attend this event, you will receive a value of `valuei`. You are also given an integer `k` which represents the maximum number of events you can attend. You can only attend one event at a time. If you choose to attend an event, you must attend the **entire** event. Note that the end day is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends on the same day. Return _the **maximum sum** of values that you can receive by attending events._",
    "examples": [
      {
        "input": "events = \\[\\[1,2,4\\],\\[3,4,3\\],\\[2,3,1\\]\\], k = 2",
        "output": "7",
        "explanation": "Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7."
      },
      {
        "input": "events = \\[\\[1,2,4\\],\\[3,4,3\\],\\[2,3,10\\]\\], k = 2",
        "output": "10",
        "explanation": "Choose event 2 for a total value of 10."
      },
      {
        "input": "events = \\[\\[1,1,1\\],\\[2,2,2\\],\\[3,3,3\\],\\[4,4,4\\]\\], k = 3",
        "output": "9",
        "explanation": "Although the events do not overlap, you can only attend 3 events. Pick the highest valued three."
      }
    ],
    "constraints": [
      "`1 <= k <= events.length`",
      "`1 <= k  events.length <= 106`",
      "`1 <= startDayi <= endDayi <= 109`",
      "`1 <= valuei <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1752",
    "slug": "check-if-array-is-sorted-and-rotated",
    "title": "Check if Array Is Sorted and Rotated",
    "difficulty": "Easy",
    "description": "Given an array `nums`, return `true` _if the array was originally sorted in non-decreasing order, then rotated **some** number of positions (including zero)_. Otherwise, return `false`. There may be **duplicates** in the original array.",
    "examples": [
      {
        "input": "nums = \\[3,4,5,1,2\\]",
        "output": "true",
        "explanation": "\\[1,2,3,4,5\\] is the original sorted array."
      },
      {
        "input": "nums = \\[2,1,3,4\\]",
        "output": "false",
        "explanation": "There is no sorted array once rotated that can make nums."
      },
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "true",
        "explanation": "\\[1,2,3\\] is the original sorted array."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": "An array `A` rotated by `x` positions results in an array `B` of the same length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo operation.",
    "follow_up": null
  },
  {
    "id": "1753",
    "slug": "maximum-score-from-removing-stones",
    "title": "Maximum Score From Removing Stones",
    "difficulty": "Medium",
    "description": "You are playing a solitaire game with **three piles** of stones of sizes `a`\u200b\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two **different non-empty** piles, take one stone from each, and add `1` point to your score. The game stops when there are **fewer than two non-empty** piles (meaning there are no more available moves). Given three integers `a`\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b, return _the_ **_maximum_** _**score** you can get._",
    "examples": [
      {
        "input": "a = 2, b = 4, c = 6",
        "output": "6",
        "explanation": "The starting state is (2, 4, 6). One optimal set of moves is:"
      },
      {
        "input": "a = 4, b = 4, c = 6",
        "output": "7",
        "explanation": "The starting state is (4, 4, 6). One optimal set of moves is:"
      },
      {
        "input": "a = 1, b = 8, c = 8",
        "output": "8",
        "explanation": "One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty."
      }
    ],
    "constraints": [
      "`1 <= a, b, c <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1754",
    "slug": "largest-merge-of-two-strings",
    "title": "Largest Merge Of Two Strings",
    "difficulty": "Medium",
    "description": "You are given two strings `word1` and `word2`. You want to construct a string `merge` in the following way: while either `word1` or `word2` are non-empty, choose **one** of the following options: *  If `word1` is non-empty, append the **first** character in `word1` to `merge` and delete it from `word1`. *  For example, if `word1 = \"abc \"` and `merge = \"dv \"`, then after choosing this operation, `word1 = \"bc \"` and `merge = \"dva \"`. *  If `word2` is non-empty, append the **first** character in `word2` to `merge` and delete it from `word2`. *  For example, if `word2 = \"abc \"` and `merge = \" \"`, then after choosing this operation, `word2 = \"bc \"` and `merge = \"a \"`. Return _the lexicographically **largest**_ `merge` _you can construct_. A string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`. For example, `\"abcd \"` is lexicographically larger than `\"abcc \"` because the first position they differ is at the fourth character, and `d` is greater than `c`.",
    "examples": [
      {
        "input": "word1 =  \"cabaa \", word2 =  \"bcaaa \"",
        "output": "\"cbcabaaaaa \"",
        "explanation": "One way to get the lexicographically largest merge is:"
      },
      {
        "input": "word1 =  \"abcabc \", word2 =  \"abdcaba \"",
        "output": "\"abdcabcabcaba \""
      }
    ],
    "constraints": [
      "`1 <= word1.length, word2.length <= 3000`",
      "`word1` and `word2` consist only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1755",
    "slug": "closest-subsequence-sum",
    "title": "Closest Subsequence Sum",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` and an integer `goal`. You want to choose a subsequence of `nums` such that the sum of its elements is the closest possible to `goal`. That is, if the sum of the subsequence's elements is `sum`, then you want to **minimize the absolute difference** `abs(sum - goal)`. Return _the **minimum** possible value of_ `abs(sum - goal)`. Note that a subsequence of an array is an array formed by removing some elements **(possibly all or none)** of the original array.",
    "examples": [
      {
        "input": "nums = \\[5,-7,3,5\\], goal = 6",
        "output": "0",
        "explanation": "Choose the whole array as a subsequence, with a sum of 6."
      },
      {
        "input": "nums = \\[7,-9,15,-2\\], goal = -5",
        "output": "1",
        "explanation": "Choose the subsequence \\[7,-9,-2\\], with a sum of -4."
      },
      {
        "input": "nums = \\[1,2,3\\], goal = -7",
        "output": "7"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 40`",
      "`-107 <= nums[i] <= 107`",
      "`-109 <= goal <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1756",
    "slug": "design-most-recently-used-queue",
    "title": "Design Most Recently Used Queue",
    "difficulty": "Medium",
    "description": "Design a queue-like data structure that moves the most recently used element to the end of the queue. Implement the `MRUQueue` class: *  `MRUQueue(int n)` constructs the `MRUQueue` with `n` elements: `[1,2,3,...,n]`. *  `int fetch(int k)` moves the `kth` element **(1-indexed)** to the end of the queue and returns it.",
    "examples": [
      {
        "input": "",
        "output": "",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 2000`",
      "`1 <= k <= n`",
      "At most `2000` calls will be made to `fetch`.",
      "Follow up: Finding an `O(n)` algorithm per `fetch` is a bit easy. Can you find an algorithm with a better complexity for each `fetch` call?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1758",
    "slug": "minimum-changes-to-make-alternating-binary-string",
    "title": "Minimum Changes To Make Alternating Binary String",
    "difficulty": "Easy",
    "description": "You are given a string `s` consisting only of the characters `'0'` and `'1'`. In one operation, you can change any `'0'` to `'1'` or vice versa. The string is called alternating if no two adjacent characters are equal. For example, the string `\"010 \"` is alternating, while the string `\"0100 \"` is not. Return _the **minimum** number of operations needed to make_ `s` _alternating_.",
    "examples": [
      {
        "input": "s =  \"0100 \"",
        "output": "1",
        "explanation": "If you change the last character to '1', s will be  \"0101 \", which is alternating."
      },
      {
        "input": "s =  \"10 \"",
        "output": "0",
        "explanation": "s is already alternating."
      },
      {
        "input": "s =  \"1111 \"",
        "output": "2",
        "explanation": "You need two operations to reach  \"0101 \" or  \"1010 \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1759",
    "slug": "count-number-of-homogenous-substrings",
    "title": "Count Number of Homogenous Substrings",
    "difficulty": "Medium",
    "description": "Given a string `s`, return _the number of **homogenous** substrings of_ `s`_._ Since the answer may be too large, return it **modulo** `109 + 7`. A string is **homogenous** if all the characters of the string are the same. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"abbcccaa \"",
        "output": "13",
        "explanation": "The homogenous substrings are listed as below:"
      },
      {
        "input": "s =  \"xy \"",
        "output": "2",
        "explanation": "The homogenous substrings are  \"x \" and  \"y \"."
      },
      {
        "input": "s =  \"zzzzz \"",
        "output": "15"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1760",
    "slug": "minimum-limit-of-balls-in-a-bag",
    "title": "Minimum Limit of Balls in a Bag",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` where the `ith` bag contains `nums[i]` balls. You are also given an integer `maxOperations`. You can perform the following operation at most `maxOperations` times: *  Take any bag of balls and divide it into two new bags with a **positive** number of balls. *  For example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls. Your penalty is the **maximum** number of balls in a bag. You want to **minimize** your penalty after the operations. Return _the minimum possible penalty after performing the operations_.",
    "examples": [
      {
        "input": "nums = \\[9\\], maxOperations = 2",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,4,8,2\\], maxOperations = 4",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= maxOperations, nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1761",
    "slug": "minimum-degree-of-a-connected-trio-in-a-graph",
    "title": "Minimum Degree of a Connected Trio in a Graph",
    "difficulty": "Hard",
    "description": "You are given an undirected graph. You are given an integer `n` which is the number of nodes in the graph and an array `edges`, where each `edges[i] = [ui, vi]` indicates that there is an undirected edge between `ui` and `vi`. A **connected trio** is a set of **three** nodes where there is an edge between **every** pair of them. The **degree of a connected trio** is the number of edges where one endpoint is in the trio, and the other is not. Return _the **minimum** degree of a connected trio in the graph, or_ `-1` _if the graph has no connected trios._",
    "examples": [
      {
        "input": "n = 6, edges = \\[\\[1,2\\],\\[1,3\\],\\[3,2\\],\\[4,1\\],\\[5,2\\],\\[3,6\\]\\]",
        "output": "3",
        "explanation": "There is exactly one trio, which is \\[1,2,3\\]. The edges that form its degree are bolded in the figure above."
      },
      {
        "input": "n = 7, edges = \\[\\[1,3\\],\\[4,1\\],\\[4,3\\],\\[2,5\\],\\[5,6\\],\\[6,7\\],\\[7,5\\],\\[2,6\\]\\]",
        "output": "0",
        "explanation": "There are exactly three trios:"
      }
    ],
    "constraints": [
      "`2 <= n <= 400`",
      "`edges[i].length == 2`",
      "`1 <= edges.length <= n  (n-1) / 2`",
      "`1 <= ui, vi <= n`",
      "`ui != vi`",
      "There are no repeated edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1762",
    "slug": "buildings-with-an-ocean-view",
    "title": "Buildings With an Ocean View",
    "difficulty": "Medium",
    "description": "There are `n` buildings in a line. You are given an integer array `heights` of size `n` that represents the heights of the buildings in the line. The ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a **smaller** height. Return a list of indices **(0-indexed)** of buildings that have an ocean view, sorted in increasing order.",
    "examples": [
      {
        "input": "heights = \\[4,2,3,1\\]",
        "output": "\\[0,2,3\\]",
        "explanation": "Building 1 (0-indexed) does not have an ocean view because building 2 is taller."
      },
      {
        "input": "heights = \\[4,3,2,1\\]",
        "output": "\\[0,1,2,3\\]",
        "explanation": "All the buildings have an ocean view."
      },
      {
        "input": "heights = \\[1,3,2,4\\]",
        "output": "\\[3\\]",
        "explanation": "Only building 3 has an ocean view."
      }
    ],
    "constraints": [
      "`1 <= heights.length <= 105`",
      "`1 <= heights[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1763",
    "slug": "longest-nice-substring",
    "title": "Longest Nice Substring",
    "difficulty": "Easy",
    "description": "A string `s` is **nice** if, for every letter of the alphabet that `s` contains, it appears **both** in uppercase and lowercase. For example, `\"abABB \"` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `\"abA \"` is not because `'b'` appears, but `'B'` does not. Given a string `s`, return _the longest **substring** of `s` that is **nice**. If there are multiple, return the substring of the **earliest** occurrence. If there are none, return an empty string_.",
    "examples": [
      {
        "input": "s =  \"YazaAay \"",
        "output": "\"aAa \""
      },
      {
        "input": "s =  \"Bb \"",
        "output": "\"Bb \"",
        "explanation": "\"Bb \" is a nice string because both 'B' and 'b' appear. The whole string is a substring."
      },
      {
        "input": "s =  \"c \"",
        "output": "\" \"",
        "explanation": "There are no nice substrings."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consists of uppercase and lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1764",
    "slug": "form-array-by-concatenating-subarrays-of-another-array",
    "title": "Form Array by Concatenating Subarrays of Another Array",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `groups` of length `n`. You are also given an integer array `nums`. You are asked if you can choose `n` **disjoint** subarrays from the array `nums` such that the `ith` subarray is equal to `groups[i]` (**0-indexed**), and if `i > 0`, the `(i-1)th` subarray appears **before** the `ith` subarray in `nums` (i.e. the subarrays must be in the same order as `groups`). Return `true` _if you can do this task, and_ `false` _otherwise_. Note that the subarrays are **disjoint** if and only if there is no index `k` such that `nums[k]` belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.",
    "examples": [
      {
        "input": "groups = \\[\\[1,-1,-1\\],\\[3,-2,0\\]\\], nums = \\[1,-1,0,1,-1,-1,3,-2,0\\]",
        "output": "true",
        "explanation": "You can choose the 0th subarray as \\[1,-1,0,**1,-1,-1**,3,-2,0\\] and the 1st one as \\[1,-1,0,1,-1,-1,**3,-2,0**\\]."
      },
      {
        "input": "groups = \\[\\[10,-2\\],\\[1,2,3,4\\]\\], nums = \\[1,2,3,4,10,-2\\]",
        "output": "false",
        "explanation": "Note that choosing the subarrays \\[**1,2,3,4**,10,-2\\] and \\[1,2,3,4,**10,-2**\\] is incorrect because they are not in the same order as in groups."
      },
      {
        "input": "groups = \\[\\[1,2,3\\],\\[3,4\\]\\], nums = \\[7,7,1,2,3,4,7,7\\]",
        "output": "false",
        "explanation": "Note that choosing the subarrays \\[7,7,**1,2,3**,4,7,7\\] and \\[7,7,1,2,**3,4**,7,7\\] is invalid because they are not disjoint."
      }
    ],
    "constraints": [
      "`groups.length == n`",
      "`1 <= n <= 103`",
      "`1 <= groups[i].length, sum(groups[i].length) <= 103`",
      "`1 <= nums.length <= 103`",
      "`-107 <= groups[i][j], nums[k] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1765",
    "slug": "map-of-highest-peak",
    "title": "Map of Highest Peak",
    "difficulty": "Medium",
    "description": "You are given an integer matrix `isWater` of size `m x n` that represents a map of **land** and **water** cells. *  If `isWater[i][j] == 0`, cell `(i, j)` is a **land** cell. *  If `isWater[i][j] == 1`, cell `(i, j)` is a **water** cell. You must assign each cell a height in a way that follows these rules: *  The height of each cell must be non-negative. *  If the cell is a **water** cell, its height must be `0`. *  Any two adjacent cells must have an absolute height difference of **at most** `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching). Find an assignment of heights such that the maximum height in the matrix is **maximized**. Return _an integer matrix_ `height` _of size_ `m x n` _where_ `height[i][j]` _is cell_ `(i, j)`_'s height. If there are multiple solutions, return **any** of them_.",
    "examples": [
      {
        "input": "isWater = \\[\\[0,1\\],\\[0,0\\]\\]",
        "output": "\\[\\[1,0\\],\\[2,1\\]\\]",
        "explanation": "The image shows the assigned heights of each cell."
      },
      {
        "input": "isWater = \\[\\[0,0,1\\],\\[1,0,0\\],\\[0,0,0\\]\\]",
        "output": "\\[\\[1,1,0\\],\\[0,1,1\\],\\[1,2,2\\]\\]",
        "explanation": "A height of 2 is the maximum possible height of any assignment."
      }
    ],
    "constraints": [
      "`m == isWater.length`",
      "`n == isWater[i].length`",
      "`1 <= m, n <= 1000`",
      "`isWater[i][j]` is `0` or `1`.",
      "There is at least one water cell."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1766",
    "slug": "tree-of-coprimes",
    "title": "Tree of Coprimes",
    "difficulty": "Hard",
    "description": "There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. Each node has a value associated with it, and the **root** of the tree is node `0`. To represent this tree, you are given an integer array `nums` and a 2D array `edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree. Two values `x` and `y` are **coprime** if `gcd(x, y) == 1` where `gcd(x, y)` is the **greatest common divisor** of `x` and `y`. An ancestor of a node `i` is any other node on the shortest path from node `i` to the **root**. A node is **not** considered an ancestor of itself. Return _an array_ `ans` _of size_ `n`, _where_ `ans[i]` _is the closest ancestor to node_ `i` _such that_ `nums[i]` _and_ `nums[ans[i]]` are **coprime**, or `-1` _if there is no such ancestor_.",
    "examples": [
      {
        "input": "nums = \\[2,3,3,2\\], edges = \\[\\[0,1\\],\\[1,2\\],\\[1,3\\]\\]",
        "output": "\\[-1,0,0,1\\]",
        "explanation": "In the above figure, each node's value is in parentheses."
      },
      {
        "input": "nums = \\[5,6,10,2,3,6,15\\], edges = \\[\\[0,1\\],\\[0,2\\],\\[1,3\\],\\[1,4\\],\\[2,5\\],\\[2,6\\]\\]",
        "output": "\\[-1,0,-1,0,0,0,-1\\]"
      }
    ],
    "constraints": [
      "`nums.length == n`",
      "`1 <= nums[i] <= 50`",
      "`1 <= n <= 105`",
      "`edges.length == n - 1`",
      "`edges[j].length == 2`",
      "`0 <= uj, vj < n`",
      "`uj != vj`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1768",
    "slug": "merge-strings-alternately",
    "title": "Merge Strings Alternately",
    "difficulty": "Easy",
    "description": "You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string. Return _the merged string._",
    "examples": [
      {
        "input": "word1 =  \"abc \", word2 =  \"pqr \"",
        "output": "\"apbqcr \"",
        "explanation": "The merged string will be merged as so:"
      },
      {
        "input": "word1 =  \"ab \", word2 =  \"pqrs \"",
        "output": "\"apbqrs \"",
        "explanation": "Notice that as word2 is longer,  \"rs \" is appended to the end."
      },
      {
        "input": "word1 =  \"abcd \", word2 =  \"pq \"",
        "output": "\"apbqcd \"",
        "explanation": "Notice that as word1 is longer,  \"cd \" is appended to the end."
      }
    ],
    "constraints": [
      "`1 <= word1.length, word2.length <= 100`",
      "`word1` and `word2` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1769",
    "slug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
    "title": "Minimum Number of Operations to Move All Balls to Each Box",
    "difficulty": "Medium",
    "description": "You have `n` boxes. You are given a binary string `boxes` of length `n`, where `boxes[i]` is `'0'` if the `ith` box is **empty**, and `'1'` if it contains **one** ball. In one operation, you can move **one** ball from a box to an adjacent box. Box `i` is adjacent to box `j` if `abs(i - j) == 1`. Note that after doing so, there may be more than one ball in some boxes. Return an array `answer` of size `n`, where `answer[i]` is the **minimum** number of operations needed to move all the balls to the `ith` box. Each `answer[i]` is calculated considering the **initial** state of the boxes.",
    "examples": [
      {
        "input": "boxes =  \"110 \"",
        "output": "\\[1,1,3\\]",
        "explanation": "The answer for each box is as follows:"
      },
      {
        "input": "boxes =  \"001011 \"",
        "output": "\\[11,8,5,4,3,4\\]"
      }
    ],
    "constraints": [
      "`n == boxes.length`",
      "`1 <= n <= 2000`",
      "`boxes[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1770",
    "slug": "maximum-score-from-performing-multiplication-operations",
    "title": "Maximum Score from Performing Multiplication Operations",
    "difficulty": "Hard",
    "description": "You are given two **0-indexed** integer arrays `nums` and `multipliers` of size `n` and `m` respectively, where `n >= m`. You begin with a score of `0`. You want to perform **exactly** `m` operations. On the `ith` operation (**0-indexed**) you will: *  Choose one integer `x` from **either the start or the end** of the array `nums`. *  Add `multipliers[i] * x` to your score. *  Note that `multipliers[0]` corresponds to the first operation, `multipliers[1]` to the second operation, and so on. *  Remove `x` from `nums`. Return _the **maximum** score after performing_ `m` _operations._",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\], multipliers = \\[3,2,1\\]",
        "output": "14",
        "explanation": "An optimal solution is as follows:"
      },
      {
        "input": "nums = \\[-5,-3,-3,-2,7,1\\], multipliers = \\[-10,-5,3,4,6\\]",
        "output": "102",
        "explanation": "An optimal solution is as follows:"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`m == multipliers.length`",
      "`1 <= m <= 300`",
      "`m <= n <= 105`",
      "`-1000 <= nums[i], multipliers[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1771",
    "slug": "maximize-palindrome-length-from-subsequences",
    "title": "Maximize Palindrome Length From Subsequences",
    "difficulty": "Hard",
    "description": "You are given two strings, `word1` and `word2`. You want to construct a string in the following manner: *  Choose some **non-empty** subsequence `subsequence1` from `word1`. *  Choose some **non-empty** subsequence `subsequence2` from `word2`. *  Concatenate the subsequences: `subsequence1 + subsequence2`, to make the string. Return _the **length** of the longest **palindrome** that can be constructed in the described manner._ If no palindromes can be constructed, return `0`. A **subsequence** of a string `s` is a string that can be made by deleting some (possibly none) characters from `s` without changing the order of the remaining characters. A **palindrome** is a string that reads the same forward as well as backward.",
    "examples": [
      {
        "input": "word1 =  \"cacb \", word2 =  \"cbba \"",
        "output": "5",
        "explanation": "Choose  \"ab \" from word1 and  \"cba \" from word2 to make  \"abcba \", which is a palindrome."
      },
      {
        "input": "word1 =  \"ab \", word2 =  \"ab \"",
        "output": "3",
        "explanation": "Choose  \"ab \" from word1 and  \"a \" from word2 to make  \"aba \", which is a palindrome."
      },
      {
        "input": "word1 =  \"aa \", word2 =  \"bb \"",
        "output": "0",
        "explanation": "You cannot construct a palindrome from the described method, so return 0."
      }
    ],
    "constraints": [
      "`1 <= word1.length, word2.length <= 1000`",
      "`word1` and `word2` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1772",
    "slug": "sort-features-by-popularity",
    "title": "Sort Features by Popularity",
    "difficulty": "Medium",
    "description": "You are given a string array `features` where `features[i]` is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array `responses`, where each `responses[i]` is a string containing space-separated words. The **popularity** of a feature is the number of `responses[i]` that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in `features`. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity. Return _the features in sorted order._",
    "examples": [
      {
        "input": "features = \\[ \"cooler \", \"lock \", \"touch \"\\], responses = \\[ \"i like cooler cooler \", \"lock touch cool \", \"locker like touch \"\\]",
        "output": "\\[ \"touch \", \"cooler \", \"lock \"\\]",
        "explanation": "appearances( \"cooler \") = 1, appearances( \"lock \") = 1, appearances( \"touch \") = 2. Since  \"cooler \" and  \"lock \" both had 1 appearance,  \"cooler \" comes first because  \"cooler \" came first in the features array."
      },
      {
        "input": "features = \\[ \"a \", \"aa \", \"b \", \"c \"\\], responses = \\[ \"a \", \"a aa \", \"a a a a a \", \"b a \"\\]",
        "output": "\\[ \"a \", \"aa \", \"b \", \"c \"\\]"
      }
    ],
    "constraints": [
      "`1 <= features.length <= 104`",
      "`1 <= features[i].length <= 10`",
      "`features` contains no duplicates.",
      "`features[i]` consists of lowercase letters.",
      "`1 <= responses.length <= 102`",
      "`1 <= responses[i].length <= 103`",
      "`responses[i]` consists of lowercase letters and spaces.",
      "`responses[i]` contains no two consecutive spaces.",
      "`responses[i]` has no leading or trailing spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1773",
    "slug": "count-items-matching-a-rule",
    "title": "Count Items Matching a Rule",
    "difficulty": "Easy",
    "description": "You are given an array `items`, where each `items[i] = [typei, colori, namei]` describes the type, color, and name of the `ith` item. You are also given a rule represented by two strings, `ruleKey` and `ruleValue`. The `ith` item is said to match the rule if **one** of the following is true: *  `ruleKey == \"type \"` and `ruleValue == typei`. *  `ruleKey == \"color \"` and `ruleValue == colori`. *  `ruleKey == \"name \"` and `ruleValue == namei`. Return _the number of items that match the given rule_.",
    "examples": [
      {
        "input": "items = \\[\\[ \"phone \", \"blue \", \"pixel \"\\],\\[ \"computer \", \"silver \", \"lenovo \"\\],\\[ \"phone \", \"gold \", \"iphone \"\\]\\], ruleKey =  \"color \", ruleValue =  \"silver \"",
        "output": "1",
        "explanation": "There is only one item matching the given rule, which is \\[ \"computer \", \"silver \", \"lenovo \"\\]."
      },
      {
        "input": "items = \\[\\[ \"phone \", \"blue \", \"pixel \"\\],\\[ \"computer \", \"silver \", \"phone \"\\],\\[ \"phone \", \"gold \", \"iphone \"\\]\\], ruleKey =  \"type \", ruleValue =  \"phone \"",
        "output": "2",
        "explanation": "There are only two items matching the given rule, which are \\[ \"phone \", \"blue \", \"pixel \"\\] and \\[ \"phone \", \"gold \", \"iphone \"\\]. Note that the item \\[ \"computer \", \"silver \", \"phone \"\\] does not match."
      }
    ],
    "constraints": [
      "`1 <= items.length <= 104`",
      "`1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10`",
      "`ruleKey` is equal to either `\"type \"`, `\"color \"`, or `\"name \"`.",
      "All strings consist only of lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1774",
    "slug": "closest-dessert-cost",
    "title": "Closest Dessert Cost",
    "difficulty": "Medium",
    "description": "You would like to make dessert and are preparing to buy the ingredients. You have `n` ice cream base flavors and `m` types of toppings to choose from. You must follow these rules when making your dessert: *  There must be **exactly one** ice cream base. *  You can add **one or more** types of topping or have no toppings at all. *  There are **at most two** of **each type** of topping. You are given three inputs: *  `baseCosts`, an integer array of length `n`, where each `baseCosts[i]` represents the price of the `ith` ice cream base flavor. *  `toppingCosts`, an integer array of length `m`, where each `toppingCosts[i]` is the price of **one** of the `ith` topping. *  `target`, an integer representing your target price for dessert. You want to make a dessert with a total cost as close to `target` as possible. Return _the closest possible cost of the dessert to_ `target`. If there are multiple, return _the **lower** one._",
    "examples": [
      {
        "input": "baseCosts = \\[1,7\\], toppingCosts = \\[3,4\\], target = 10",
        "output": "10",
        "explanation": "Consider the following combination (all 0-indexed):"
      },
      {
        "input": "baseCosts = \\[2,3\\], toppingCosts = \\[4,5,100\\], target = 18",
        "output": "17",
        "explanation": "Consider the following combination (all 0-indexed):"
      },
      {
        "input": "baseCosts = \\[3,10\\], toppingCosts = \\[2,5\\], target = 9",
        "output": "8",
        "explanation": "It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost."
      }
    ],
    "constraints": [
      "`n == baseCosts.length`",
      "`m == toppingCosts.length`",
      "`1 <= n, m <= 10`",
      "`1 <= baseCosts[i], toppingCosts[i] <= 104`",
      "`1 <= target <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1775",
    "slug": "equal-sum-arrays-with-minimum-number-of-operations",
    "title": "Equal Sum Arrays With Minimum Number of Operations",
    "difficulty": "Medium",
    "description": "You are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. The values in the arrays are between `1` and `6`, inclusive. In one operation, you can change any integer's value in **any** of the arrays to **any** value between `1` and `6`, inclusive. Return _the minimum number of operations required to make the sum of values in_ `nums1` _equal to the sum of values in_ `nums2`_._ Return `-1`\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.",
    "examples": [
      {
        "input": "nums1 = \\[1,2,3,4,5,6\\], nums2 = \\[1,1,2,2,2,2\\]",
        "output": "3",
        "explanation": "You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed."
      },
      {
        "input": "nums1 = \\[1,1,1,1,1,1,1\\], nums2 = \\[6\\]",
        "output": "-1",
        "explanation": "There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal."
      },
      {
        "input": "nums1 = \\[6,6\\], nums2 = \\[1\\]",
        "output": "3",
        "explanation": "You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 105`",
      "`1 <= nums1[i], nums2[i] <= 6`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1776",
    "slug": "car-fleet-ii",
    "title": "Car Fleet II",
    "difficulty": "Hard",
    "description": "There are `n` cars traveling at different speeds in the same direction along a one-lane road. You are given an array `cars` of length `n`, where `cars[i] = [positioni, speedi]` represents: *  `positioni` is the distance between the `ith` car and the beginning of the road in meters. It is guaranteed that `positioni < positioni+1`. *  `speedi` is the initial speed of the `ith` car in meters per second. For simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the **slowest** car in the fleet. Return an array `answer`, where `answer[i]` is the time, in seconds, at which the `ith` car collides with the next car, or `-1` if the car does not collide with the next car. Answers within `10-5` of the actual answers are accepted.",
    "examples": [
      {
        "input": "cars = \\[\\[1,2\\],\\[2,1\\],\\[4,3\\],\\[7,2\\]\\]",
        "output": "\\[1.00000,-1.00000,3.00000,-1.00000\\]",
        "explanation": "After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s."
      },
      {
        "input": "cars = \\[\\[3,4\\],\\[5,4\\],\\[6,3\\],\\[9,1\\]\\]",
        "output": "\\[2.00000,1.00000,1.50000,-1.00000\\]"
      }
    ],
    "constraints": [
      "`1 <= cars.length <= 105`",
      "`1 <= positioni, speedi <= 106`",
      "`positioni < positioni+1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1778",
    "slug": "shortest-path-in-a-hidden-grid",
    "title": "Shortest Path in a Hidden Grid",
    "difficulty": "Medium",
    "description": "This is an **interactive problem**. There is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is **guaranteed** that the starting cell and the target cell are different, and neither of them is blocked. You want to find the minimum distance to the target cell. However, you **do not know** the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object. Thr `GridMaster` class has the following functions: *  `boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`. *  `void move(char direction)` Moves the robot in that direction. If this move would move the robot to a blocked cell or off the grid, the move will be **ignored**, and the robot will remain in the same position. *  `boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`. Note that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively. Return _the **minimum distance** between the robot's initial starting cell and the target cell. If there is no valid path between the cells, return_ `-1`. **Custom testing:** The test input is read as a 2D matrix `grid` of size `m x n` where: *  `grid[i][j] == -1` indicates that the robot is in cell `(i, j)` (the starting cell). *  `grid[i][j] == 0` indicates that the cell `(i, j)` is blocked. *  `grid[i][j] == 1` indicates that the cell `(i, j)` is empty. *  `grid[i][j] == 2` indicates that the cell `(i, j)` is the target cell. There is exactly one `-1` and `2` in `grid`. Remember that you will **not** have this information in your code.",
    "examples": [
      {
        "input": "grid = \\[\\[1,2\\],\\[-1,0\\]\\]",
        "output": "2",
        "explanation": "One possible interaction is described below:"
      },
      {
        "input": "grid = \\[\\[0,0,-1\\],\\[1,1,1\\],\\[2,0,0\\]\\]",
        "output": "4",
        "explanation": "The minimum distance between the robot and the target cell is 4."
      },
      {
        "input": "grid = \\[\\[-1,0\\],\\[0,2\\]\\]",
        "output": "-1",
        "explanation": "There is no path from the robot to the target cell."
      }
    ],
    "constraints": [
      "`1 <= n, m <= 500`",
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`grid[i][j]` is either `-1`, `0`, `1`, or `2`.",
      "There is exactly one `-1` in `grid`.",
      "There is exactly one `2` in `grid`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1779",
    "slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
    "title": "Find Nearest Point That Has the Same X or Y Coordinate",
    "difficulty": "Easy",
    "description": "You are given two integers, `x` and `y`, which represent your current location on a Cartesian grid: `(x, y)`. You are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point is **valid** if it shares the same x-coordinate or the same y-coordinate as your location. Return _the index **(0-indexed)** of the **valid** point with the smallest **Manhattan distance** from your current location_. If there are multiple, return _the valid point with the **smallest** index_. If there are no valid points, return `-1`. The **Manhattan distance** between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.",
    "examples": [
      {
        "input": "x = 3, y = 4, points = \\[\\[1,2\\],\\[3,1\\],\\[2,4\\],\\[2,3\\],\\[4,4\\]\\]",
        "output": "2",
        "explanation": "Of all the points, only \\[3,1\\], \\[2,4\\] and \\[4,4\\] are valid. Of the valid points, \\[2,4\\] and \\[4,4\\] have the smallest Manhattan distance from your current location, with a distance of 1. \\[2,4\\] has the smallest index, so return 2."
      },
      {
        "input": "x = 3, y = 4, points = \\[\\[3,4\\]\\]",
        "output": "0",
        "explanation": "The answer is allowed to be on the same location as your current location."
      },
      {
        "input": "x = 3, y = 4, points = \\[\\[2,3\\]\\]",
        "output": "-1",
        "explanation": "There are no valid points."
      }
    ],
    "constraints": [
      "`1 <= points.length <= 104`",
      "`points[i].length == 2`",
      "`1 <= x, y, ai, bi <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1780",
    "slug": "check-if-number-is-a-sum-of-powers-of-three",
    "title": "Check if Number is a Sum of Powers of Three",
    "difficulty": "Medium",
    "description": "Given an integer `n`, return `true` _if it is possible to represent_ `n` _as the sum of distinct powers of three._ Otherwise, return `false`. An integer `y` is a power of three if there exists an integer `x` such that `y == 3x`.",
    "examples": [
      {
        "input": "n = 12",
        "output": "true",
        "explanation": "12 = 31 + 32"
      },
      {
        "input": "n = 91",
        "output": "true",
        "explanation": "91 = 30 + 32 + 34"
      },
      {
        "input": "n = 21",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= n <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1781",
    "slug": "sum-of-beauty-of-all-substrings",
    "title": "Sum of Beauty of All Substrings",
    "difficulty": "Medium",
    "description": "The **beauty** of a string is the difference in frequencies between the most frequent and least frequent characters. *  For example, the beauty of `\"abaacc \"` is `3 - 1 = 2`. Given a string `s`, return _the sum of **beauty** of all of its substrings._",
    "examples": [
      {
        "input": "s =  \"aabcb \"",
        "output": "5",
        "explanation": "The substrings with non-zero beauty are \\[ \"aab \", \"aabc \", \"aabcb \", \"abcb \", \"bcb \"\\], each with beauty equal to 1."
      },
      {
        "input": "s =  \"aabcbaa \"",
        "output": "17"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1782",
    "slug": "count-pairs-of-nodes",
    "title": "Count Pairs Of Nodes",
    "difficulty": "Hard",
    "description": "You are given an undirected graph defined by an integer `n`, the number of nodes, and a 2D integer array `edges`, the edges in the graph, where `edges[i] = [ui, vi]` indicates that there is an **undirected** edge between `ui` and `vi`. You are also given an integer array `queries`. Let `incident(a, b)` be defined as the **number of edges** that are connected to **either** node `a` or `b`. The answer to the `jth` query is the **number of pairs** of nodes `(a, b)` that satisfy **both** of the following conditions: *  `a < b` *  `incident(a, b) > queries[j]` Return _an array_ `answers` _such that_ `answers.length == queries.length` _and_ `answers[j]` _is the answer of the_ `jth` _query_. Note that there can be **multiple edges** between the same two nodes.",
    "examples": [
      {
        "input": "n = 4, edges = \\[\\[1,2\\],\\[2,4\\],\\[1,3\\],\\[2,3\\],\\[2,1\\]\\], queries = \\[2,3\\]",
        "output": "\\[6,5\\]",
        "explanation": "The calculations for incident(a, b) are shown in the table above."
      },
      {
        "input": "n = 5, edges = \\[\\[1,5\\],\\[1,5\\],\\[3,4\\],\\[2,5\\],\\[1,3\\],\\[5,1\\],\\[2,3\\],\\[2,5\\]\\], queries = \\[1,2,3,4,5\\]",
        "output": "\\[10,10,9,8,6\\]"
      }
    ],
    "constraints": [
      "`2 <= n <= 2  104`",
      "`1 <= edges.length <= 105`",
      "`1 <= ui, vi <= n`",
      "`ui != vi`",
      "`1 <= queries.length <= 20`",
      "`0 <= queries[j] < edges.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1784",
    "slug": "check-if-binary-string-has-at-most-one-segment-of-ones",
    "title": "Check if Binary String Has at Most One Segment of Ones",
    "difficulty": "Easy",
    "description": "Given a binary string `s` **\u200b\u200b\u200b\u200b\u200bwithout leading zeros**, return `true`\u200b\u200b\u200b _if_ `s` _contains **at most one contiguous segment of ones**_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "s =  \"1001 \"",
        "output": "false",
        "explanation": "The ones do not form a contiguous segment."
      },
      {
        "input": "s =  \"110 \"",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s[i]`\u200b\u200b\u200b\u200b is either `'0'` or `'1'`.",
      "`s[0]` is `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1785",
    "slug": "minimum-elements-to-add-to-form-a-given-sum",
    "title": "Minimum Elements to Add to Form a Given Sum",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and two integers `limit` and `goal`. The array `nums` has an interesting property that `abs(nums[i]) <= limit`. Return _the minimum number of elements you need to add to make the sum of the array equal to_ `goal`. The array must maintain its property that `abs(nums[i]) <= limit`. Note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.",
    "examples": [
      {
        "input": "nums = \\[1,-1,1\\], limit = 3, goal = -4",
        "output": "2",
        "explanation": "You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4."
      },
      {
        "input": "nums = \\[1,-10,9,1\\], limit = 100, goal = 0",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= limit <= 106`",
      "`-limit <= nums[i] <= limit`",
      "`-109 <= goal <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1786",
    "slug": "number-of-restricted-paths-from-first-to-last-node",
    "title": "Number of Restricted Paths From First to Last Node",
    "difficulty": "Medium",
    "description": "There is an undirected weighted connected graph. You are given a positive integer `n` which denotes that the graph has `n` nodes labeled from `1` to `n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes that there is an edge between nodes `ui` and `vi` with weight equal to `weighti`. A path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2, ..., zk]` such that `z0 = start` and `zk = end` and there is an edge between `zi` and `zi+1` where `0 <= i <= k-1`. The distance of a path is the sum of the weights on the edges of the path. Let `distanceToLastNode(x)` denote the shortest distance of a path between node `n` and node `x`. A **restricted path** is a path that also satisfies that `distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`. Return _the number of restricted paths from node_ `1` _to node_ `n`. Since that number may be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 5, edges = \\[\\[1,2,3\\],\\[1,3,3\\],\\[2,3,1\\],\\[1,4,2\\],\\[5,2,2\\],\\[3,5,1\\],\\[5,4,10\\]\\]",
        "output": "3",
        "explanation": "Each circle contains the node number in black and its `distanceToLastNode value in blue.` The three restricted paths are:"
      },
      {
        "input": "n = 7, edges = \\[\\[1,3,1\\],\\[4,1,2\\],\\[7,3,4\\],\\[2,5,3\\],\\[5,6,1\\],\\[6,7,2\\],\\[7,5,3\\],\\[2,6,4\\]\\]",
        "output": "1",
        "explanation": "Each circle contains the node number in black and its `distanceToLastNode value in blue.` The only restricted path is 1 --> 3 --> 7."
      }
    ],
    "constraints": [
      "`1 <= n <= 2  104`",
      "`n - 1 <= edges.length <= 4  104`",
      "`edges[i].length == 3`",
      "`1 <= ui, vi <= n`",
      "`ui != vi`",
      "`1 <= weighti <= 105`",
      "There is at most one edge between any two nodes.",
      "There is at least one path between any two nodes."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1787",
    "slug": "make-the-xor-of-all-segments-equal-to-zero",
    "title": "Make the XOR of All Segments Equal to Zero",
    "difficulty": "Hard",
    "description": "You are given an array `nums`\u200b\u200b\u200b and an integer `k`\u200b\u200b\u200b\u200b\u200b. The XOR of a segment `[left, right]` where `left <= right` is the `XOR` of all the elements with indices between `left` and `right`, inclusive: `nums[left] XOR nums[left+1] XOR ... XOR nums[right]`. Return _the minimum number of elements to change in the array_ such that the `XOR` of all segments of size `k`\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.",
    "examples": [
      {
        "input": "nums = \\[1,2,0,3,0\\], k = 1",
        "output": "3",
        "explanation": "Modify the array from \\[**1**,**2**,0,**3**,0\\] to from \\[**0**,**0**,0,**0**,0\\]."
      },
      {
        "input": "nums = \\[3,4,5,2,1,7,3,4,7\\], k = 3",
        "output": "3",
        "explanation": "Modify the array from \\[3,4,**5**,**2**,**1**,7,3,4,7\\] to \\[3,4,**7**,**3**,**4**,7,3,4,7\\]."
      },
      {
        "input": "nums = \\[1,2,4,1,2,5,1,2,6\\], k = 3",
        "output": "3",
        "explanation": "Modify the array from \\[1,2,**4,**1,2,**5**,1,2,**6**\\] to \\[1,2,**3**,1,2,**3**,1,2,**3**\\]."
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 2000`",
      "`\u200b\u200b\u200b\u200b\u200b\u200b0 <= nums[i] < 210`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1788",
    "slug": "maximize-the-beauty-of-the-garden",
    "title": "Maximize the Beauty of the Garden",
    "difficulty": "Hard",
    "description": "There is a garden of `n` flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array `flowers` of size `n` and each `flowers[i]` represents the beauty of the `ith` flower. A garden is **valid** if it meets these conditions: *  The garden has at least two flowers. *  The first and the last flower of the garden have the same beauty value. As the appointed gardener, you have the ability to **remove** any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden **valid**. The beauty of the garden is the sum of the beauty of all the remaining flowers. Return the maximum possible beauty of some **valid** garden after you have removed any (possibly none) flowers.",
    "examples": [
      {
        "input": "flowers = \\[1,2,3,1,2\\]",
        "output": "8",
        "explanation": "You can produce the valid garden \\[2,3,1,2\\] to have a total beauty of 2 + 3 + 1 + 2 = 8."
      },
      {
        "input": "flowers = \\[100,1,1,-3,1\\]",
        "output": "3",
        "explanation": "You can produce the valid garden \\[1,1,1\\] to have a total beauty of 1 + 1 + 1 = 3."
      },
      {
        "input": "flowers = \\[-1,-2,0,-1\\]",
        "output": "-2",
        "explanation": "You can produce the valid garden \\[-1,-1\\] to have a total beauty of -1 + -1 = -2."
      }
    ],
    "constraints": [
      "`2 <= flowers.length <= 105`",
      "`-104 <= flowers[i] <= 104`",
      "It is possible to create a valid garden by removing some (possibly none) flowers."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1790",
    "slug": "check-if-one-string-swap-can-make-strings-equal",
    "title": "Check if One String Swap Can Make Strings Equal",
    "difficulty": "Easy",
    "description": "You are given two strings `s1` and `s2` of equal length. A **string swap** is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices. Return `true` _if it is possible to make both strings equal by performing **at most one string swap** on **exactly one** of the strings._ Otherwise, return `false`.",
    "examples": [
      {
        "input": "s1 =  \"bank \", s2 =  \"kanb \"",
        "output": "true",
        "explanation": "For example, swap the first character with the last character of s2 to make  \"bank \"."
      },
      {
        "input": "s1 =  \"attack \", s2 =  \"defend \"",
        "output": "false",
        "explanation": "It is impossible to make them equal with one string swap."
      },
      {
        "input": "s1 =  \"kelb \", s2 =  \"kelb \"",
        "output": "true",
        "explanation": "The two strings are already equal, so no string swap operation is required."
      }
    ],
    "constraints": [
      "`1 <= s1.length, s2.length <= 100`",
      "`s1.length == s2.length`",
      "`s1` and `s2` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1791",
    "slug": "find-center-of-star-graph",
    "title": "Find Center of Star Graph",
    "difficulty": "Easy",
    "description": "There is an undirected **star** graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one **center** node and **exactly** `n - 1` edges that connect the center node with every other node. You are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.",
    "examples": [
      {
        "input": "edges = \\[\\[1,2\\],\\[2,3\\],\\[4,2\\]\\]",
        "output": "2",
        "explanation": "As shown in the figure above, node 2 is connected to every other node, so 2 is the center."
      },
      {
        "input": "edges = \\[\\[1,2\\],\\[5,1\\],\\[1,3\\],\\[1,4\\]\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`3 <= n <= 105`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`1 <= ui, vi <= n`",
      "`ui != vi`",
      "The given `edges` represent a valid star graph."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1792",
    "slug": "maximum-average-pass-ratio",
    "title": "Maximum Average Pass Ratio",
    "difficulty": "Medium",
    "description": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam. You are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are **guaranteed** to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that **maximizes** the **average** pass ratio across **all** the classes. The **pass ratio** of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The **average pass ratio** is the sum of pass ratios of all the classes divided by the number of the classes. Return _the **maximum** possible average pass ratio after assigning the_ `extraStudents` _students._ Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "classes = \\[\\[1,2\\],\\[3,5\\],\\[2,2\\]\\], `extraStudents` = 2",
        "output": "0.78333",
        "explanation": "You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333."
      },
      {
        "input": "classes = \\[\\[2,4\\],\\[3,9\\],\\[4,5\\],\\[2,10\\]\\], `extraStudents` = 4",
        "output": "0.53485"
      }
    ],
    "constraints": [
      "`1 <= classes.length <= 105`",
      "`classes[i].length == 2`",
      "`1 <= passi <= totali <= 105`",
      "`1 <= extraStudents <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1793",
    "slug": "maximum-score-of-a-good-subarray",
    "title": "Maximum Score of a Good Subarray",
    "difficulty": "Hard",
    "description": "You are given an array of integers `nums` **(0-indexed)** and an integer `k`. The **score** of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A **good** subarray is a subarray where `i <= k <= j`. Return _the maximum possible **score** of a **good** subarray._",
    "examples": [
      {
        "input": "nums = \\[1,4,3,7,4,5\\], k = 3",
        "output": "15",
        "explanation": "The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) \\* (5-1+1) = 3 \\* 5 = 15."
      },
      {
        "input": "nums = \\[5,5,4,5,4,1,1,1\\], k = 0",
        "output": "20",
        "explanation": "The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) \\* (4-0+1) = 4 \\* 5 = 20."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 2  104`",
      "`0 <= k < nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1794",
    "slug": "count-pairs-of-equal-substrings-with-minimum-difference",
    "title": "Count Pairs of Equal Substrings With Minimum Difference",
    "difficulty": "Medium",
    "description": "You are given two strings `firstString` and `secondString` that are **0-indexed** and consist only of lowercase English letters. Count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions: *  `0 <= i <= j < firstString.length` *  `0 <= a <= b < secondString.length` *  The substring of `firstString` that starts at the `ith` character and ends at the `jth` character (inclusive) is **equal** to the substring of `secondString` that starts at the `ath` character and ends at the `bth` character (inclusive). *  `j - a` is the **minimum** possible value among all quadruples that satisfy the previous conditions. Return _the **number** of such quadruples_.",
    "examples": [
      {
        "input": "firstString =  \"abcd \", secondString =  \"bccda \"",
        "output": "1",
        "explanation": "The quadruple (0,0,4,4) is the only one that satisfies all the conditions and minimizes j - a."
      },
      {
        "input": "firstString =  \"ab \", secondString =  \"cd \"",
        "output": "0",
        "explanation": "There are no quadruples satisfying all the conditions."
      }
    ],
    "constraints": [
      "`1 <= firstString.length, secondString.length <= 2  105`",
      "Both strings consist only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1796",
    "slug": "second-largest-digit-in-a-string",
    "title": "Second Largest Digit in a String",
    "difficulty": "Easy",
    "description": "Given an alphanumeric string `s`, return _the **second largest** numerical digit that appears in_ `s`_, or_ `-1` _if it does not exist_. An **alphanumeric** string is a string consisting of lowercase English letters and digits.",
    "examples": [
      {
        "input": "s =  \"dfa12321afd \"",
        "output": "2",
        "explanation": "The digits that appear in s are \\[1, 2, 3\\]. The second largest digit is 2."
      },
      {
        "input": "s =  \"abc1111 \"",
        "output": "-1",
        "explanation": "The digits that appear in s are \\[1\\]. There is no second largest digit."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`s` consists of only lowercase English letters and/or digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1797",
    "slug": "design-authentication-manager",
    "title": "Design Authentication Manager",
    "difficulty": "Medium",
    "description": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire `timeToLive` seconds after the `currentTime`. If the token is renewed, the expiry time will be **extended** to expire `timeToLive` seconds after the (potentially different) `currentTime`. Implement the `AuthenticationManager` class: *  `AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`. *  `generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds. *  `renew(string tokenId, int currentTime)` renews the **unexpired** token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens. *  `countUnexpiredTokens(int currentTime)` returns the number of **unexpired** tokens at the given currentTime. Note that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countUnexpiredTokens`), the expiration takes place **before** the other actions.",
    "examples": [],
    "constraints": [
      "`1 <= timeToLive <= 108`",
      "`1 <= currentTime <= 108`",
      "`1 <= tokenId.length <= 5`",
      "`tokenId` consists only of lowercase letters.",
      "All calls to `generate` will contain unique values of `tokenId`.",
      "The values of `currentTime` across all the function calls will be strictly increasing.",
      "At most `2000` calls will be made to all functions combined."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1798",
    "slug": "maximum-number-of-consecutive-values-you-can-make",
    "title": "Maximum Number of Consecutive Values You Can Make",
    "difficulty": "Medium",
    "description": "You are given an integer array `coins` of length `n` which represents the `n` coins that you own. The value of the `ith` coin is `coins[i]`. You can **make** some value `x` if you can choose some of your `n` coins such that their values sum up to `x`. Return the _maximum number of consecutive integer values that you **can** **make** with your coins **starting** from and **including**_ `0`. Note that you may have multiple coins of the same value.",
    "examples": [
      {
        "input": "coins = \\[1,3\\]",
        "output": "2",
        "explanation": "You can make the following values:"
      },
      {
        "input": "coins = \\[1,1,1,4\\]",
        "output": "8",
        "explanation": "You can make the following values:"
      },
      {
        "input": "nums = \\[1,4,10,3,1\\]",
        "output": "20"
      }
    ],
    "constraints": [
      "`coins.length == n`",
      "`1 <= n <= 4  104`",
      "`1 <= coins[i] <= 4  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1799",
    "slug": "maximize-score-after-n-operations",
    "title": "Maximize Score After N Operations",
    "difficulty": "Hard",
    "description": "You are given `nums`, an array of positive integers of size `2 * n`. You must perform `n` operations on this array. In the `ith` operation **(1-indexed)**, you will: *  Choose two elements, `x` and `y`. *  Receive a score of `i * gcd(x, y)`. *  Remove `x` and `y` from `nums`. Return _the maximum score you can receive after performing_ `n` _operations._ The function `gcd(x, y)` is the greatest common divisor of `x` and `y`.",
    "examples": [
      {
        "input": "nums = \\[1,2\\]",
        "output": "1",
        "explanation": "The optimal choice of operations is:"
      },
      {
        "input": "nums = \\[3,4,6,8\\]",
        "output": "11",
        "explanation": "The optimal choice of operations is:"
      },
      {
        "input": "nums = \\[1,2,3,4,5,6\\]",
        "output": "14",
        "explanation": "The optimal choice of operations is:"
      }
    ],
    "constraints": [
      "`1 <= n <= 7`",
      "`nums.length == 2  n`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1800",
    "slug": "maximum-ascending-subarray-sum",
    "title": "Maximum Ascending Subarray Sum",
    "difficulty": "Easy",
    "description": "Given an array of positive integers `nums`, return the _maximum possible sum of an **ascending** subarray in_ `nums`. A subarray is defined as a contiguous sequence of numbers in an array. A subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is **ascending** if for all `i` where `l <= i < r`, `numsi < numsi+1`. Note that a subarray of size `1` is **ascending**.",
    "examples": [
      {
        "input": "nums = \\[10,20,30,5,10,50\\]",
        "output": "65",
        "explanation": "\\[5,10,50\\] is the ascending subarray with the maximum sum of 65."
      },
      {
        "input": "nums = \\[10,20,30,40,50\\]",
        "output": "150",
        "explanation": "\\[10,20,30,40,50\\] is the ascending subarray with the maximum sum of 150."
      },
      {
        "input": "nums = \\[12,17,15,13,10,11,12\\]",
        "output": "33",
        "explanation": "\\[10,11,12\\] is the ascending subarray with the maximum sum of 33."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1801",
    "slug": "number-of-orders-in-the-backlog",
    "title": "Number of Orders in the Backlog",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `orders`, where each `orders[i] = [pricei, amounti, orderTypei]` denotes that `amounti` orders have been placed of type `orderTypei` at the price `pricei`. The `orderTypei` is: *  `0` if it is a batch of `buy` orders, or *  `1` if it is a batch of `sell` orders. Note that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. All orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`. There is a **backlog** that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens: *  If the order is a `buy` order, you look at the `sell` order with the **smallest** price in the backlog. If that `sell` order's price is **smaller than or equal to** the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. Else, the `buy` order is added to the backlog. *  Vice versa, if the order is a `sell` order, you look at the `buy` order with the **largest** price in the backlog. If that `buy` order's price is **larger than or equal to** the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. Else, the `sell` order is added to the backlog. Return _the total **amount** of orders in the backlog after placing all the orders from the input_. Since this number can be large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "orders = \\[\\[10,5,0\\],\\[15,2,1\\],\\[25,1,1\\],\\[30,4,0\\]\\]",
        "output": "6",
        "explanation": "Here is what happens with the orders:"
      },
      {
        "input": "orders = \\[\\[7,1000000000,1\\],\\[15,3,0\\],\\[5,999999995,0\\],\\[5,1,1\\]\\]",
        "output": "999999984",
        "explanation": "Here is what happens with the orders:"
      }
    ],
    "constraints": [
      "`1 <= orders.length <= 105`",
      "`orders[i].length == 3`",
      "`1 <= pricei, amounti <= 109`",
      "`orderTypei` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1802",
    "slug": "maximum-value-at-a-given-index-in-a-bounded-array",
    "title": "Maximum Value at a Given Index in a Bounded Array",
    "difficulty": "Medium",
    "description": "You are given three positive integers: `n`, `index`, and `maxSum`. You want to construct an array `nums` (**0-indexed**) that satisfies the following conditions: *  `nums.length == n` *  `nums[i]` is a **positive** integer where `0 <= i < n`. *  `abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`. *  The sum of all the elements of `nums` does not exceed `maxSum`. *  `nums[index]` is **maximized**. Return `nums[index]` _of the constructed array_. Note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.",
    "examples": [
      {
        "input": "n = 4, index = 2,  maxSum = 6",
        "output": "2",
        "explanation": "nums = \\[1,2,**2**,1\\] is one array that satisfies all the conditions."
      },
      {
        "input": "n = 6, index = 1,  maxSum = 10",
        "output": "3"
      }
    ],
    "constraints": [
      "`1 <= n <= maxSum <= 109`",
      "`0 <= index < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1803",
    "slug": "count-pairs-with-xor-in-a-range",
    "title": "Count Pairs With XOR in a Range",
    "difficulty": "Hard",
    "description": "Given a **(0-indexed)** integer array `nums` and two integers `low` and `high`, return _the number of **nice pairs**_. A **nice pair** is a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] XOR nums[j]) <= high`.",
    "examples": [
      {
        "input": "nums = \\[1,4,2,7\\], low = 2, high = 6",
        "output": "6",
        "explanation": "All nice pairs (i, j) are as follows:"
      },
      {
        "input": "nums = \\[9,8,4,2,1\\], low = 5, high = 14",
        "output": "8",
        "explanation": "All nice pairs (i, j) are as follows:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2  104`",
      "`1 <= nums[i] <= 2  104`",
      "`1 <= low <= high <= 2  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1805",
    "slug": "number-of-different-integers-in-a-string",
    "title": "Number of Different Integers in a String",
    "difficulty": "Easy",
    "description": "You are given a string `word` that consists of digits and lowercase English letters. You will replace every non-digit character with a space. For example, `\"a123bc34d8ef34 \"` will become `\" 123 34 8 34 \"`. Notice that you are left with some integers that are separated by at least one space: `\"123 \"`, `\"34 \"`, `\"8 \"`, and `\"34 \"`. Return _the number of **different** integers after performing the replacement operations on_ `word`. Two integers are considered different if their decimal representations **without any leading zeros** are different.",
    "examples": [
      {
        "input": "word =  \"a123bc34d8ef34 \"",
        "output": "3",
        "explanation": "The three different integers are  \"123 \",  \"34 \", and  \"8 \". Notice that  \"34 \" is only counted once."
      },
      {
        "input": "word =  \"leet1234code234 \"",
        "output": "2"
      },
      {
        "input": "word =  \"a1b01c001 \"",
        "output": "1",
        "explanation": "The three integers  \"1 \",  \"01 \", and  \"001 \" all represent the same integer because"
      }
    ],
    "constraints": [
      "`1 <= word.length <= 1000`",
      "`word` consists of digits and lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1806",
    "slug": "minimum-number-of-operations-to-reinitialize-a-permutation",
    "title": "Minimum Number of Operations to Reinitialize a Permutation",
    "difficulty": "Medium",
    "description": "You are given an **even** integer `n`\u200b\u200b\u200b\u200b\u200b\u200b. You initially have a permutation `perm` of size `n`\u200b\u200b where `perm[i] == i`\u200b **(0-indexed)**\u200b\u200b\u200b\u200b. In one operation, you will create a new array `arr`, and for each `i`: *  If `i % 2 == 0`, then `arr[i] = perm[i / 2]`. *  If `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`. You will then assign `arr`\u200b\u200b\u200b\u200b to `perm`. Return _the minimum **non-zero** number of operations you need to perform on_ `perm` _to return the permutation to its initial value._",
    "examples": [
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "perm = \\[0,1\\] initially."
      },
      {
        "input": "n = 4",
        "output": "2",
        "explanation": "perm = \\[0,1,2,3\\] initially."
      },
      {
        "input": "n = 6",
        "output": "4"
      }
    ],
    "constraints": [
      "`2 <= n <= 1000`",
      "`n`\u200b\u200b\u200b\u200b\u200b\u200b is even."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1807",
    "slug": "evaluate-the-bracket-pairs-of-a-string",
    "title": "Evaluate the Bracket Pairs of a String",
    "difficulty": "Medium",
    "description": "You are given a string `s` that contains some bracket pairs, with each pair containing a **non-empty** key. *  For example, in the string `\"(name)is(age)yearsold \"`, there are **two** bracket pairs that contain the keys `\"name \"` and `\"age \"`. You know the values of a wide range of keys. This is represented by a 2D string array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates that key `keyi` has a value of `valuei`. You are tasked to evaluate **all** of the bracket pairs. When you evaluate a bracket pair that contains some key `keyi`, you will: *  Replace `keyi` and the bracket pair with the key's corresponding `valuei`. *  If you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `\"? \"` (without the quotation marks). Each key will appear at most once in your `knowledge`. There will not be any nested brackets in `s`. Return _the resulting string after evaluating **all** of the bracket pairs._",
    "examples": [
      {
        "input": "s =  \"(name)is(age)yearsold \", knowledge = \\[\\[ \"name \", \"bob \"\\],\\[ \"age \", \"two \"\\]\\]",
        "output": "\"bobistwoyearsold \"",
        "explanation": ""
      },
      {
        "input": "s =  \"hi(name) \", knowledge = \\[\\[ \"a \", \"b \"\\]\\]",
        "output": "\"hi? \"",
        "explanation": "As you do not know the value of the key  \"name \", replace  \"(name) \" with  \"? \"."
      },
      {
        "input": "s =  \"(a)(a)(a)aaa \", knowledge = \\[\\[ \"a \", \"yes \"\\]\\]",
        "output": "\"yesyesyesaaa \"",
        "explanation": "The same key can appear multiple times."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`0 <= knowledge.length <= 105`",
      "`knowledge[i].length == 2`",
      "`1 <= keyi.length, valuei.length <= 10`",
      "`s` consists of lowercase English letters and round brackets `'('` and `')'`.",
      "Every open bracket `'('` in `s` will have a corresponding close bracket `')'`.",
      "The key in each bracket pair of `s` will be non-empty.",
      "There will not be any nested bracket pairs in `s`.",
      "`keyi` and `valuei` consist of lowercase English letters.",
      "Each `keyi` in `knowledge` is unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1808",
    "slug": "maximize-number-of-nice-divisors",
    "title": "Maximize Number of Nice Divisors",
    "difficulty": "Hard",
    "description": "You are given a positive integer `primeFactors`. You are asked to construct a positive integer `n` that satisfies the following conditions: *  The number of prime factors of `n` (not necessarily distinct) is **at most** `primeFactors`. *  The number of nice divisors of `n` is maximized. Note that a divisor of `n` is **nice** if it is divisible by every prime factor of `n`. For example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are nice divisors, while `3` and `4` are not. Return _the number of nice divisors of_ `n`. Since that number can be too large, return it **modulo** `109 + 7`. Note that a prime number is a natural number greater than `1` that is not a product of two smaller natural numbers. The prime factors of a number `n` is a list of prime numbers such that their product equals `n`.",
    "examples": [
      {
        "input": "primeFactors = 5",
        "output": "6",
        "explanation": "200 is a valid value of n."
      },
      {
        "input": "primeFactors = 8",
        "output": "18"
      }
    ],
    "constraints": [
      "`1 <= primeFactors <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1810",
    "slug": "minimum-path-cost-in-a-hidden-grid",
    "title": "Minimum Path Cost in a Hidden Grid",
    "difficulty": "Medium",
    "description": "This is an **interactive problem**. There is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is **guaranteed** that the starting cell and the target cell are different, and neither of them is blocked. Each cell has a **cost** that you need to pay each time you **move** to the cell. The starting cell's cost is **not** applied before the robot moves. You want to find the minimum total cost to move the robot to the target cell. However, you **do not know** the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object. The `GridMaster` class has the following functions: *  `boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`. *  `int move(char direction)` Moves the robot in that direction and returns the cost of moving to that cell. If this move would move the robot to a blocked cell or off the grid, the move will be **ignored**, the robot will remain in the same position, and the function will return `-1`. *  `boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`. Note that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively. Return _the **minimum total cost** to get the robot from its initial starting cell to the target cell. If there is no valid path between the cells, return_ `-1`. **Custom testing:** The test input is read as a 2D matrix `grid` of size `m x n` and four integers `r1`, `c1`, `r2`, and `c2` where: *  `grid[i][j] == 0` indicates that the cell `(i, j)` is blocked. *  `grid[i][j] >= 1` indicates that the cell `(i, j)` is empty and `grid[i][j]` is the **cost** to move to that cell. *  `(r1, c1)` is the starting cell of the robot. *  `(r2, c2)` is the target cell of the robot. Remember that you will **not** have this information in your code.",
    "examples": [
      {
        "input": "grid = \\[\\[2,3\\],\\[1,1\\]\\], r1 = 0, c1 = 1, r2 = 1, c2 = 0",
        "output": "2",
        "explanation": "One possible interaction is described below:"
      },
      {
        "input": "grid = \\[\\[0,3,1\\],\\[3,4,2\\],\\[1,2,0\\]\\], r1 = 2, c1 = 0, r2 = 0, c2 = 2",
        "output": "9",
        "explanation": "The minimum cost path is (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2)."
      },
      {
        "input": "grid = \\[\\[1,0\\],\\[0,1\\]\\], r1 = 0, c1 = 0, r2 = 1, c2 = 1",
        "output": "-1",
        "explanation": "There is no path from the robot to the target cell."
      }
    ],
    "constraints": [
      "`1 <= n, m <= 100`",
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`0 <= grid[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1812",
    "slug": "determine-color-of-a-chessboard-square",
    "title": "Determine Color of a Chessboard Square",
    "difficulty": "Easy",
    "description": "You are given `coordinates`, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference. Return `true` _if the square is white, and_ `false` _if the square is black_. The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.",
    "examples": [
      {
        "input": "coordinates =  \"a1 \"",
        "output": "false",
        "explanation": "From the chessboard above, the square with coordinates  \"a1 \" is black, so return false."
      },
      {
        "input": "coordinates =  \"h3 \"",
        "output": "true",
        "explanation": "From the chessboard above, the square with coordinates  \"h3 \" is white, so return true."
      },
      {
        "input": "coordinates =  \"c7 \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`coordinates.length == 2`",
      "`'a' <= coordinates[0] <= 'h'`",
      "`'1' <= coordinates[1] <= '8'`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1813",
    "slug": "sentence-similarity-iii",
    "title": "Sentence Similarity III",
    "difficulty": "Medium",
    "description": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, `\"Hello World \"`, `\"HELLO \"`, `\"hello world hello world \"` are all sentences. Words consist of **only** uppercase and lowercase English letters. Two sentences `sentence1` and `sentence2` are **similar** if it is possible to insert an arbitrary sentence **(possibly empty)** inside one of these sentences such that the two sentences become equal. For example, `sentence1 = \"Hello my name is Jane \"` and `sentence2 = \"Hello Jane \"` can be made equal by inserting `\"my name is \"` between `\"Hello \"` and `\"Jane \"` in `sentence2`. Given two sentences `sentence1` and `sentence2`, return `true` _if_ `sentence1` _and_ `sentence2` _are similar._ Otherwise, return `false`.",
    "examples": [
      {
        "input": "sentence1 =  \"My name is Haley \", sentence2 =  \"My Haley \"",
        "output": "true",
        "explanation": "sentence2 can be turned to sentence1 by inserting  \"name is \" between  \"My \" and  \"Haley \"."
      },
      {
        "input": "sentence1 =  \"of \", sentence2 =  \"A lot of words \"",
        "output": "false",
        "explanation": "No single sentence can be inserted inside one of the sentences to make it equal to the other."
      },
      {
        "input": "sentence1 =  \"Eating right now \", sentence2 =  \"Eating \"",
        "output": "true",
        "explanation": "sentence2 can be turned to sentence1 by inserting  \"right now \" at the end of the sentence."
      }
    ],
    "constraints": [
      "`1 <= sentence1.length, sentence2.length <= 100`",
      "`sentence1` and `sentence2` consist of lowercase and uppercase English letters and spaces.",
      "The words in `sentence1` and `sentence2` are separated by a single space."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1814",
    "slug": "count-nice-pairs-in-an-array",
    "title": "Count Nice Pairs in an Array",
    "difficulty": "Medium",
    "description": "You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is **nice** if it satisfies all of the following conditions: *  `0 <= i < j < nums.length` *  `nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])` Return _the number of nice pairs of indices_. Since that number can be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "nums = \\[42,11,1,97\\]",
        "output": "2",
        "explanation": "The two pairs are:"
      },
      {
        "input": "nums = \\[13,10,35,24,76\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1815",
    "slug": "maximum-number-of-groups-getting-fresh-donuts",
    "title": "Maximum Number of Groups Getting Fresh Donuts",
    "difficulty": "Hard",
    "description": "There is a donuts shop that bakes donuts in batches of `batchSize`. They have a rule where they must serve **all** of the donuts of a batch before serving any donuts of the next batch. You are given an integer `batchSize` and an integer array `groups`, where `groups[i]` denotes that there is a group of `groups[i]` customers that will visit the shop. Each customer will get exactly one donut. When a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group. You can freely rearrange the ordering of the groups. Return _the **maximum** possible number of happy groups after rearranging the groups._",
    "examples": [
      {
        "input": "batchSize = 3, groups = \\[1,2,3,4,5,6\\]",
        "output": "4",
        "explanation": "You can arrange the groups as \\[6,2,4,5,1,3\\]. Then the 1st, 2nd, 4th, and 6th groups will be happy."
      },
      {
        "input": "batchSize = 4, groups = \\[1,3,2,5,2,2,1,6\\]",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= batchSize <= 9`",
      "`1 <= groups.length <= 30`",
      "`1 <= groups[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1816",
    "slug": "truncate-sentence",
    "title": "Truncate Sentence",
    "difficulty": "Easy",
    "description": "A **sentence** is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of **only** uppercase and lowercase English letters (no punctuation). *  For example, `\"Hello World \"`, `\"HELLO \"`, and `\"hello world hello world \"` are all sentences. You are given a sentence `s`\u200b\u200b\u200b\u200b\u200b\u200b and an integer `k`\u200b\u200b\u200b\u200b\u200b\u200b. You want to **truncate** `s`\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the **first** `k`\u200b\u200b\u200b\u200b\u200b\u200b words. Return `s`\u200b\u200b\u200b\u200b_\u200b\u200b after **truncating** it._",
    "examples": [
      {
        "input": "s =  \"Hello how are you Contestant \", k = 4",
        "output": "\"Hello how are you \"",
        "explanation": ""
      },
      {
        "input": "s =  \"What is the solution to this problem \", k = 4",
        "output": "\"What is the solution \"",
        "explanation": ""
      },
      {
        "input": "s =  \"chopper is not a tanuki \", k = 5",
        "output": "\"chopper is not a tanuki \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 500`",
      "`k` is in the range `[1, the number of words in s]`.",
      "`s` consist of only lowercase and uppercase English letters and spaces.",
      "The words in `s` are separated by a single space.",
      "There are no leading or trailing spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1817",
    "slug": "finding-the-users-active-minutes",
    "title": "Finding the Users Active Minutes",
    "difficulty": "Medium",
    "description": "You are given the logs for users' actions on LeetCode, and an integer `k`. The logs are represented by a 2D integer array `logs` where each `logs[i] = [IDi, timei]` indicates that the user with `IDi` performed an action at the minute `timei`. **Multiple users** can perform actions simultaneously, and a single user can perform **multiple actions** in the same minute. The **user active minutes (UAM)** for a given user is defined as the **number of unique minutes** in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it. You are to calculate a **1-indexed** array `answer` of size `k` such that, for each `j` (`1 <= j <= k`), `answer[j]` is the **number of users** whose **UAM** equals `j`. Return _the array_ `answer` _as described above_.",
    "examples": [
      {
        "input": "logs = \\[\\[0,5\\],\\[1,2\\],\\[0,2\\],\\[0,5\\],\\[1,3\\]\\], k = 5",
        "output": "\\[0,2,0,0,0\\]",
        "explanation": ""
      },
      {
        "input": "logs = \\[\\[1,1\\],\\[2,2\\],\\[2,3\\]\\], k = 4",
        "output": "\\[1,1,0,0\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= logs.length <= 104`",
      "`0 <= IDi <= 109`",
      "`1 <= timei <= 105`",
      "`k` is in the range `[The maximum UAM for a user, 105]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1818",
    "slug": "minimum-absolute-sum-difference",
    "title": "Minimum Absolute Sum Difference",
    "difficulty": "Medium",
    "description": "You are given two positive integer arrays `nums1` and `nums2`, both of length `n`. The **absolute sum difference** of arrays `nums1` and `nums2` is defined as the **sum** of `|nums1[i] - nums2[i]|` for each `0 <= i < n` (**0-indexed**). You can replace **at most one** element of `nums1` with **any** other element in `nums1` to **minimize** the absolute sum difference. Return the _minimum absolute sum difference **after** replacing at most one element in the array `nums1`._ Since the answer may be large, return it **modulo** `109 + 7`. `|x|` is defined as: *  `x` if `x >= 0`, or *  `-x` if `x < 0`.",
    "examples": [
      {
        "input": "nums1 = \\[1,7,5\\], nums2 = \\[2,3,5\\]",
        "output": "3",
        "explanation": "There are two possible optimal solutions:"
      },
      {
        "input": "nums1 = \\[2,4,6,8,10\\], nums2 = \\[2,4,6,8,10\\]",
        "output": "0",
        "explanation": "nums1 is equal to nums2 so no replacement is needed. This will result in an"
      },
      {
        "input": "nums1 = \\[1,10,4,4,2,7\\], nums2 = \\[9,3,5,1,7,4\\]",
        "output": "20",
        "explanation": "Replace the first element with the second: \\[**1**,10,4,4,2,7\\] => \\[**10**,10,4,4,2,7\\]."
      }
    ],
    "constraints": [
      "`n == nums1.length`",
      "`n == nums2.length`",
      "`1 <= n <= 105`",
      "`1 <= nums1[i], nums2[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1819",
    "slug": "number-of-different-subsequences-gcds",
    "title": "Number of Different Subsequences GCDs",
    "difficulty": "Hard",
    "description": "You are given an array `nums` that consists of positive integers. The **GCD** of a sequence of numbers is defined as the greatest integer that divides **all** the numbers in the sequence evenly. *  For example, the GCD of the sequence `[4,6,16]` is `2`. A **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array. *  For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`. Return _the **number** of **different** GCDs among all **non-empty** subsequences of_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[6,10,3\\]",
        "output": "5",
        "explanation": "The figure shows all the non-empty subsequences and their GCDs."
      },
      {
        "input": "nums = \\[5,15,40,5,6\\]",
        "output": "7"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 2  105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1820",
    "slug": "maximum-number-of-accepted-invitations",
    "title": "Maximum Number of Accepted Invitations",
    "difficulty": "Medium",
    "description": "There are `m` boys and `n` girls in a class attending an upcoming party. You are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. If `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. A boy can invite at most **one girl**, and a girl can accept at most **one invitation** from a boy. Return _the **maximum** possible number of accepted invitations._",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,1\\],",
        "output": "3",
        "explanation": "The invitations are sent as follows:"
      },
      {
        "input": "grid = \\[\\[1,0,1,0\\],",
        "output": "3",
        "explanation": "The invitations are sent as follows:"
      }
    ],
    "constraints": [
      "`grid.length == m`",
      "`grid[i].length == n`",
      "`1 <= m, n <= 200`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1822",
    "slug": "sign-of-the-product-of-an-array",
    "title": "Sign of the Product of an Array",
    "difficulty": "Easy",
    "description": "There is a function `signFunc(x)` that returns: *  `1` if `x` is positive. *  `-1` if `x` is negative. *  `0` if `x` is equal to `0`. You are given an integer array `nums`. Let `product` be the product of all values in the array `nums`. Return `signFunc(product)`.",
    "examples": [
      {
        "input": "nums = \\[-1,-2,-3,-4,3,2,1\\]",
        "output": "1",
        "explanation": "The product of all values in the array is 144, and signFunc(144) = 1"
      },
      {
        "input": "nums = \\[1,5,0,2,-3\\]",
        "output": "0",
        "explanation": "The product of all values in the array is 0, and signFunc(0) = 0"
      },
      {
        "input": "nums = \\[-1,1,-1,1,-1\\]",
        "output": "-1",
        "explanation": "The product of all values in the array is -1, and signFunc(-1) = -1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`-100 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1823",
    "slug": "find-the-winner-of-the-circular-game",
    "title": "Find the Winner of the Circular Game",
    "difficulty": "Medium",
    "description": "There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in **clockwise order**. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend. The rules of the game are as follows: 1. **Start** at the `1st` friend. 2. Count the next `k` friends in the clockwise direction **including** the friend you started at. The counting wraps around the circle and may count some friends more than once. 3. The last friend you counted leaves the circle and loses the game. 4. If there is still more than one friend in the circle, go back to step `2` **starting** from the friend **immediately clockwise** of the friend who just lost and repeat. 5. Else, the last friend in the circle wins the game. Given the number of friends, `n`, and an integer `k`, return _the winner of the game_.",
    "examples": [
      {
        "input": "n = 5, k = 2",
        "output": "3",
        "explanation": "Here are the steps of the game:"
      },
      {
        "input": "n = 6, k = 5",
        "output": "1",
        "explanation": "The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1."
      }
    ],
    "constraints": [
      "`1 <= k <= n <= 500`",
      "Follow up:"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1824",
    "slug": "minimum-sideway-jumps",
    "title": "Minimum Sideway Jumps",
    "difficulty": "Medium",
    "description": "There is a **3 lane road** of length `n` that consists of `n + 1` **points** labeled from `0` to `n`. A frog **starts** at point `0` in the **second** lane and wants to jump to point `n`. However, there could be obstacles along the way. You are given an array `obstacles` of length `n + 1` where each `obstacles[i]` (**ranging from 0 to 3**) describes an obstacle on the lane `obstacles[i]` at point `i`. If `obstacles[i] == 0`, there are no obstacles at point `i`. There will be **at most one** obstacle in the 3 lanes at each point. *  For example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2. The frog can only travel from point `i` to point `i + 1` on the same lane if there is not an obstacle on the lane at point `i + 1`. To avoid obstacles, the frog can also perform a **side jump** to jump to **another** lane (even if they are not adjacent) at the **same** point if there is no obstacle on the new lane. *  For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3. Return _the **minimum number of side jumps** the frog needs to reach **any lane** at point n starting from lane `2` at point 0._",
    "examples": [
      {
        "input": "obstacles = \\[0,1,2,3,0\\]",
        "output": "2",
        "explanation": "The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows)."
      },
      {
        "input": "obstacles = \\[0,1,1,3,3,0\\]",
        "output": "0",
        "explanation": "There are no obstacles on lane 2. No side jumps are required."
      },
      {
        "input": "obstacles = \\[0,2,1,0,3,0\\]",
        "output": "2",
        "explanation": "The optimal solution is shown by the arrows above. There are 2 side jumps."
      }
    ],
    "constraints": [
      "`obstacles.length == n + 1`",
      "`1 <= n <= 5  105`",
      "`0 <= obstacles[i] <= 3`",
      "`obstacles[0] == obstacles[n] == 0`"
    ],
    "note": "There will be no obstacles on points `0` and `n`.",
    "follow_up": null
  },
  {
    "id": "1825",
    "slug": "finding-mk-average",
    "title": "Finding MK Average",
    "difficulty": "Hard",
    "description": "You are given two integers, `m` and `k`, and a stream of integers. You are tasked to implement a data structure that calculates the **MKAverage** for the stream. The **MKAverage** can be calculated using these steps: 1. If the number of the elements in the stream is less than `m` you should consider the **MKAverage** to be `-1`. Otherwise, copy the last `m` elements of the stream to a separate container. 2. Remove the smallest `k` elements and the largest `k` elements from the container. 3. Calculate the average value for the rest of the elements **rounded down to the nearest integer**. Implement the `MKAverage` class: *  `MKAverage(int m, int k)` Initializes the **MKAverage** object with an empty stream and the two integers `m` and `k`. *  `void addElement(int num)` Inserts a new element `num` into the stream. *  `int calculateMKAverage()` Calculates and returns the **MKAverage** for the current stream **rounded down to the nearest integer**.",
    "examples": [],
    "constraints": [
      "`3 <= m <= 105`",
      "`1 <= k2 < m`",
      "`1 <= num <= 105`",
      "At most `105` calls will be made to `addElement` and `calculateMKAverage`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1826",
    "slug": "faulty-sensor",
    "title": "Faulty Sensor",
    "difficulty": "Easy",
    "description": "An experiment is being conducted in a lab. To ensure accuracy, there are **two** sensors collecting data simultaneously. You are given two arrays `sensor1` and `sensor2`, where `sensor1[i]` and `sensor2[i]` are the `ith` data points collected by the two sensors. However, this type of sensor has a chance of being defective, which causes **exactly one** data point to be dropped. After the data is dropped, all the data points to the **right** of the dropped data are **shifted** one place to the left, and the last data point is replaced with some **random value**. It is guaranteed that this random value will **not** be equal to the dropped value. *  For example, if the correct data is `[1,2,**3**,4,5]` and `3` is dropped, the sensor could return `[1,2,4,5,**7**]` (the last position can be **any** value, not just `7`). We know that there is a defect in **at most one** of the sensors. Return _the sensor number (_`1` _or_ `2`_) with the defect. If there is **no defect** in either sensor or if it is **impossible** to determine the defective sensor, return_ `-1`_._",
    "examples": [
      {
        "input": "sensor1 = \\[2,3,4,5\\], sensor2 = \\[2,1,3,4\\]",
        "output": "1",
        "explanation": "Sensor 2 has the correct values."
      },
      {
        "input": "sensor1 = \\[2,2,2,2,2\\], sensor2 = \\[2,2,2,2,5\\]",
        "output": "-1",
        "explanation": "It is impossible to determine which sensor has a defect."
      },
      {
        "input": "sensor1 = \\[2,3,2,2,3,2\\], sensor2 = \\[2,3,2,3,2,7\\]",
        "output": "2",
        "explanation": "Sensor 1 has the correct values."
      }
    ],
    "constraints": [
      "`sensor1.length == sensor2.length`",
      "`1 <= sensor1.length <= 100`",
      "`1 <= sensor1[i], sensor2[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1827",
    "slug": "minimum-operations-to-make-the-array-increasing",
    "title": "Minimum Operations to Make the Array Increasing",
    "difficulty": "Easy",
    "description": "You are given an integer array `nums` (**0-indexed**). In one operation, you can choose an element of the array and increment it by `1`. *  For example, if `nums = [1,2,3]`, you can choose to increment `nums[1]` to make `nums = [1,**3**,3]`. Return _the **minimum** number of operations needed to make_ `nums` _**strictly** **increasing**._ An array `nums` is **strictly increasing** if `nums[i] < nums[i+1]` for all `0 <= i < nums.length - 1`. An array of length `1` is trivially strictly increasing.",
    "examples": [
      {
        "input": "nums = \\[1,1,1\\]",
        "output": "3",
        "explanation": "You can do the following operations:"
      },
      {
        "input": "nums = \\[1,5,2,4,1\\]",
        "output": "14"
      },
      {
        "input": "nums = \\[8\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5000`",
      "`1 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1828",
    "slug": "queries-on-number-of-points-inside-a-circle",
    "title": "Queries on Number of Points Inside a Circle",
    "difficulty": "Medium",
    "description": "You are given an array `points` where `points[i] = [xi, yi]` is the coordinates of the `ith` point on a 2D plane. Multiple points can have the **same** coordinates. You are also given an array `queries` where `queries[j] = [xj, yj, rj]` describes a circle centered at `(xj, yj)` with a radius of `rj`. For each query `queries[j]`, compute the number of points **inside** the `jth` circle. Points **on the border** of the circle are considered **inside**. Return _an array_ `answer`_, where_ `answer[j]` _is the answer to the_ `jth` _query_.",
    "examples": [
      {
        "input": "points = \\[\\[1,3\\],\\[3,3\\],\\[5,3\\],\\[2,2\\]\\], queries = \\[\\[2,3,1\\],\\[4,3,1\\],\\[1,1,2\\]\\]",
        "output": "\\[3,2,2\\]",
        "explanation": "The points and circles are shown above."
      },
      {
        "input": "points = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\],\\[5,5\\]\\], queries = \\[\\[1,2,2\\],\\[2,2,2\\],\\[4,3,2\\],\\[4,3,3\\]\\]",
        "output": "\\[2,3,2,4\\]",
        "explanation": "The points and circles are shown above."
      }
    ],
    "constraints": [
      "`1 <= points.length <= 500`",
      "`points[i].length == 2`",
      "`0 <= x\u200b\u200b\u200b\u200b\u200b\u200bi, y\u200b\u200b\u200b\u200b\u200b\u200bi <= 500`",
      "`1 <= queries.length <= 500`",
      "`queries[j].length == 3`",
      "`0 <= xj, yj <= 500`",
      "`1 <= rj <= 500`",
      "All coordinates are integers.",
      "Follow up: Could you find the answer for each query in better complexity than `O(n)`?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1829",
    "slug": "maximum-xor-for-each-query",
    "title": "Maximum XOR for Each Query",
    "difficulty": "Medium",
    "description": "You are given a **sorted** array `nums` of `n` non-negative integers and an integer `maximumBit`. You want to perform the following query `n` **times**: 1. Find a non-negative integer `k < 2maximumBit` such that `nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k` is **maximized**. `k` is the answer to the `ith` query. 2. Remove the **last** element from the current array `nums`. Return _an array_ `answer`_, where_ `answer[i]` _is the answer to the_ `ith` _query_.",
    "examples": [
      {
        "input": "nums = \\[0,1,1,3\\], maximumBit = 2",
        "output": "\\[0,3,2,3\\]"
      },
      {
        "input": "nums = \\[2,3,4,7\\], maximumBit = 3",
        "output": "\\[5,2,6,5\\]"
      },
      {
        "input": "nums = \\[0,1,2,2,5,7\\], maximumBit = 3",
        "output": "\\[4,3,6,4,6,7\\]"
      }
    ],
    "constraints": [
      "`nums.length == n`",
      "`1 <= n <= 105`",
      "`1 <= maximumBit <= 20`",
      "`0 <= nums[i] < 2maximumBit`",
      "`nums`\u200b\u200b\u200b is sorted in ascending order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1830",
    "slug": "minimum-number-of-operations-to-make-string-sorted",
    "title": "Minimum Number of Operations to Make String Sorted",
    "difficulty": "Hard",
    "description": "You are given a string `s` (**0-indexed**)\u200b\u200b\u200b\u200b\u200b\u200b. You are asked to perform the following operation on `s`\u200b\u200b\u200b\u200b\u200b\u200b until you get a sorted string: 1. Find **the largest index** `i` such that `1 <= i < s.length` and `s[i] < s[i - 1]`. 2. Find **the largest index** `j` such that `i <= j < s.length` and `s[k] < s[i - 1]` for all the possible values of `k` in the range `[i, j]` inclusive. 3. Swap the two characters at indices `i - 1`\u200b\u200b\u200b\u200b and `j`\u200b\u200b\u200b\u200b\u200b. 4. Reverse the suffix starting at index `i`\u200b\u200b\u200b\u200b\u200b\u200b. Return _the number of operations needed to make the string sorted._ Since the answer can be too large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "s =  \"cba \"",
        "output": "5",
        "explanation": "The simulation goes as follows:"
      },
      {
        "input": "s =  \"aabaa \"",
        "output": "2",
        "explanation": "The simulation goes as follows:"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 3000`",
      "`s`\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1832",
    "slug": "check-if-the-sentence-is-pangram",
    "title": "Check if the Sentence Is Pangram",
    "difficulty": "Easy",
    "description": "A **pangram** is a sentence where every letter of the English alphabet appears at least once. Given a string `sentence` containing only lowercase English letters, return `true` _if_ `sentence` _is a **pangram**, or_ `false` _otherwise._",
    "examples": [
      {
        "input": "sentence =  \"thequickbrownfoxjumpsoverthelazydog \"",
        "output": "true",
        "explanation": "sentence contains at least one of every letter of the English alphabet."
      },
      {
        "input": "sentence =  \"leetcode \"",
        "output": "false"
      }
    ],
    "constraints": [
      "`1 <= sentence.length <= 1000`",
      "`sentence` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1833",
    "slug": "maximum-ice-cream-bars",
    "title": "Maximum Ice Cream Bars",
    "difficulty": "Medium",
    "description": "It is a sweltering summer day, and a boy wants to buy some ice cream bars. At the store, there are `n` ice cream bars. You are given an array `costs` of length `n`, where `costs[i]` is the price of the `ith` ice cream bar in coins. The boy initially has `coins` coins to spend, and he wants to buy as many ice cream bars as possible.",
    "examples": [
      {
        "input": "costs = \\[1,3,2,4,1\\], coins = 7",
        "output": "4",
        "explanation": "The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7."
      },
      {
        "input": "costs = \\[10,6,8,7,7,8\\], coins = 5",
        "output": "0",
        "explanation": "The boy cannot afford any of the ice cream bars."
      },
      {
        "input": "costs = \\[1,6,3,1,2,5\\], coins = 20",
        "output": "6",
        "explanation": "The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18."
      }
    ],
    "constraints": [
      "`costs.length == n`",
      "`1 <= n <= 105`",
      "`1 <= costs[i] <= 105`",
      "`1 <= coins <= 108`"
    ],
    "note": "The boy can buy the ice cream bars in any order.",
    "follow_up": null
  },
  {
    "id": "1834",
    "slug": "single-threaded-cpu",
    "title": "Single-Threaded CPU",
    "difficulty": "Medium",
    "description": "You are given `n`\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from `0` to `n - 1` represented by a 2D integer array `tasks`, where `tasks[i] = [enqueueTimei, processingTimei]` means that the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b task will be available to process at `enqueueTimei` and will take `processingTimei` to finish processing. You have a single-threaded CPU that can process **at most one** task at a time and will act in the following way: *  If the CPU is idle and there are no available tasks to process, the CPU remains idle. *  If the CPU is idle and there are available tasks, the CPU will choose the one with the **shortest processing time**. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index. *  Once a task is started, the CPU will **process the entire task** without stopping. *  The CPU can finish a task then start a new one instantly. Return _the order in which the CPU will process the tasks._",
    "examples": [
      {
        "input": "tasks = \\[\\[1,2\\],\\[2,4\\],\\[3,2\\],\\[4,1\\]\\]",
        "output": "\\[0,2,3,1\\]",
        "explanation": "The events go as follows:"
      },
      {
        "input": "tasks = \\[\\[7,10\\],\\[7,12\\],\\[7,5\\],\\[7,4\\],\\[7,2\\]\\]",
        "output": "\\[4,3,2,0,1\\]"
      }
    ],
    "constraints": [
      "`tasks.length == n`",
      "`1 <= n <= 105`",
      "`1 <= enqueueTimei, processingTimei <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1835",
    "slug": "find-xor-sum-of-all-pairs-bitwise-and",
    "title": "Find XOR Sum of All Pairs Bitwise AND",
    "difficulty": "Hard",
    "description": "The **XOR sum** of a list is the bitwise `XOR` of all its elements. If the list only contains one element, then its **XOR sum** will be equal to this element. *  For example, the **XOR sum** of `[1,2,3,4]` is equal to `1 XOR 2 XOR 3 XOR 4 = 4`, and the **XOR sum** of `[3]` is equal to `3`. You are given two **0-indexed** arrays `arr1` and `arr2` that consist only of non-negative integers. Consider the list containing the result of `arr1[i] AND arr2[j]` (bitwise `AND`) for every `(i, j)` pair where `0 <= i < arr1.length` and `0 <= j < arr2.length`. Return _the **XOR sum** of the aforementioned list_.",
    "examples": [
      {
        "input": "arr1 = \\[1,2,3\\], arr2 = \\[6,5\\]",
        "output": "0",
        "explanation": "The list = \\[1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5\\] = \\[0,1,2,0,2,1\\]."
      },
      {
        "input": "arr1 = \\[12\\], arr2 = \\[4\\]",
        "output": "4",
        "explanation": "The list = \\[12 AND 4\\] = \\[4\\]. The XOR sum = 4."
      }
    ],
    "constraints": [
      "`1 <= arr1.length, arr2.length <= 105`",
      "`0 <= arr1[i], arr2[j] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1836",
    "slug": "remove-duplicates-from-an-unsorted-linked-list",
    "title": "Remove Duplicates From an Unsorted Linked List",
    "difficulty": "Medium",
    "description": "Given the `head` of a linked list, find all the values that appear **more than once** in the list and delete the nodes that have any of those values. Return _the linked list after the deletions._",
    "examples": [
      {
        "input": "head = \\[1,2,3,2\\]",
        "output": "\\[1,3\\]",
        "explanation": "2 appears twice in the linked list, so all 2's should be deleted. After deleting all 2's, we are left with \\[1,3\\]."
      },
      {
        "input": "head = \\[2,1,1,2\\]",
        "output": "\\[\\]",
        "explanation": "2 and 1 both appear twice. All the elements should be deleted."
      },
      {
        "input": "head = \\[3,2,2,1,3,2,4\\]",
        "output": "\\[1,4\\]",
        "explanation": "3 appears twice and 2 appears three times. After deleting all 3's and 2's, we are left with \\[1,4\\]."
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[1, 105]`",
      "`1 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1837",
    "slug": "sum-of-digits-in-base-k",
    "title": "Sum of Digits in Base K",
    "difficulty": "Easy",
    "description": "Given an integer `n` (in base `10`) and a base `k`, return _the **sum** of the digits of_ `n` _**after** converting_ `n` _from base_ `10` _to base_ `k`. After converting, each digit should be interpreted as a base `10` number, and the sum should be returned in base `10`.",
    "examples": [
      {
        "input": "n = 34, k = 6",
        "output": "9",
        "explanation": "34 (base 10) expressed in base 6 is 54. 5 + 4 = 9."
      },
      {
        "input": "n = 10, k = 10",
        "output": "1",
        "explanation": "n is already in base 10. 1 + 0 = 1."
      }
    ],
    "constraints": [
      "`1 <= n <= 100`",
      "`2 <= k <= 10`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1838",
    "slug": "frequency-of-the-most-frequent-element",
    "title": "Frequency of the Most Frequent Element",
    "difficulty": "Medium",
    "description": "The **frequency** of an element is the number of times it occurs in an array. You are given an integer array `nums` and an integer `k`. In one operation, you can choose an index of `nums` and increment the element at that index by `1`. Return _the **maximum possible frequency** of an element after performing **at most**_ `k` _operations_.",
    "examples": [
      {
        "input": "nums = \\[1,2,4\\], k = 5",
        "output": "3",
        "explanation": "Increment the first element three times and the second element two times to make nums = \\[4,4,4\\]."
      },
      {
        "input": "nums = \\[1,4,8,13\\], k = 5",
        "output": "2",
        "explanation": "There are multiple optimal solutions:"
      },
      {
        "input": "nums = \\[3,9,6\\], k = 2",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`",
      "`1 <= k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1839",
    "slug": "longest-substring-of-all-vowels-in-order",
    "title": "Longest Substring Of All Vowels in Order",
    "difficulty": "Medium",
    "description": "A string is considered **beautiful** if it satisfies the following conditions: *  Each of the 5 English vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`) must appear **at least once** in it. *  The letters must be sorted in **alphabetical order** (i.e. all `'a'`s before `'e'`s, all `'e'`s before `'i'`s, etc.). For example, strings `\"aeiou \"` and `\"aaaaaaeiiiioou \"` are considered **beautiful**, but `\"uaeio \"`, `\"aeoiu \"`, and `\"aaaeeeooo \"` are **not beautiful**. Given a string `word` consisting of English vowels, return _the **length of the longest beautiful substring** of_ `word`_. If no such substring exists, return_ `0`. A **substring** is a contiguous sequence of characters in a string.",
    "examples": [
      {
        "input": "word =  \"aeiaaioaaaaeiiiiouuuooaauuaeiu \"",
        "output": "13",
        "explanation": "The longest beautiful substring in word is  \"aaaaeiiiiouuu \" of length 13."
      },
      {
        "input": "word =  \"aeeeiiiioooauuuaeiou \"",
        "output": "5",
        "explanation": "The longest beautiful substring in word is  \"aeiou \" of length 5."
      },
      {
        "input": "word =  \"a \"",
        "output": "0",
        "explanation": "There is no beautiful substring, so return 0."
      }
    ],
    "constraints": [
      "`1 <= word.length <= 5  105`",
      "`word` consists of characters `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1840",
    "slug": "maximum-building-height",
    "title": "Maximum Building Height",
    "difficulty": "Hard",
    "description": "You want to build `n` new buildings in a city. The new buildings will be built in a line and are labeled from `1` to `n`. However, there are city restrictions on the heights of the new buildings: *  The height of each building must be a non-negative integer. *  The height of the first building **must** be `0`. *  The height difference between any two adjacent buildings **cannot exceed** `1`. Additionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array `restrictions` where `restrictions[i] = [idi, maxHeighti]` indicates that building `idi` must have a height **less than or equal to** `maxHeighti`. It is guaranteed that each building will appear **at most once** in `restrictions`, and building `1` will **not** be in `restrictions`. Return _the **maximum possible height** of the **tallest** building_.",
    "examples": [
      {
        "input": "n = 5, restrictions = \\[\\[2,1\\],\\[4,1\\]\\]",
        "output": "2",
        "explanation": "The green area in the image indicates the maximum allowed height for each building."
      },
      {
        "input": "n = 6, restrictions = \\[\\]",
        "output": "5",
        "explanation": "The green area in the image indicates the maximum allowed height for each building."
      },
      {
        "input": "n = 10, restrictions = \\[\\[5,3\\],\\[2,5\\],\\[7,4\\],\\[10,3\\]\\]",
        "output": "5",
        "explanation": "The green area in the image indicates the maximum allowed height for each building."
      }
    ],
    "constraints": [
      "`2 <= n <= 109`",
      "`0 <= restrictions.length <= min(n - 1, 105)`",
      "`2 <= idi <= n`",
      "`idi` is unique.",
      "`0 <= maxHeighti <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1842",
    "slug": "next-palindrome-using-same-digits",
    "title": "Next Palindrome Using Same Digits",
    "difficulty": "Hard",
    "description": "You are given a numeric string `num`, representing a very large **palindrome**. Return _the **smallest palindrome larger than**_ `num` _that can be created by rearranging its digits. If no such palindrome exists, return an empty string_ `\" \"`. A **palindrome** is a number that reads the same backward as forward.",
    "examples": [
      {
        "input": "num =  \"1221 \"",
        "output": "\"2112 \"",
        "explanation": "The next palindrome larger than  \"1221 \" is  \"2112 \"."
      },
      {
        "input": "num =  \"32123 \"",
        "output": "\" \"",
        "explanation": "No palindromes larger than  \"32123 \" can be made by rearranging the digits."
      },
      {
        "input": "num =  \"45544554 \"",
        "output": "\"54455445 \"",
        "explanation": "The next palindrome larger than  \"45544554 \" is  \"54455445 \"."
      }
    ],
    "constraints": [
      "`1 <= num.length <= 105`",
      "`num` is a palindrome."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1844",
    "slug": "replace-all-digits-with-characters",
    "title": "Replace All Digits with Characters",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** string `s` that has lowercase English letters in its **even** indices and digits in its **odd** indices. There is a function `shift(c, x)`, where `c` is a character and `x` is a digit, that returns the `xth` character after `c`. *  For example, `shift('a', 5) = 'f'` and `shift('x', 0) = 'x'`. For every **odd** index `i`, you want to replace the digit `s[i]` with `shift(s[i-1], s[i])`. Return `s` _after replacing all digits. It is **guaranteed** that_ `shift(s[i-1], s[i])` _will never exceed_ `'z'`.",
    "examples": [
      {
        "input": "s =  \"a1c1e1 \"",
        "output": "\"abcdef \"",
        "explanation": "The digits are replaced as follows:"
      },
      {
        "input": "s =  \"a1b2c3d4e \"",
        "output": "\"abbdcfdhe \"",
        "explanation": "The digits are replaced as follows:"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consists only of lowercase English letters and digits.",
      "`shift(s[i-1], s[i]) <= 'z'` for all odd indices `i`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1845",
    "slug": "seat-reservation-manager",
    "title": "Seat Reservation Manager",
    "difficulty": "Medium",
    "description": "Design a system that manages the reservation state of `n` seats that are numbered from `1` to `n`. Implement the `SeatManager` class: *  `SeatManager(int n)` Initializes a `SeatManager` object that will manage `n` seats numbered from `1` to `n`. All seats are initially available. *  `int reserve()` Fetches the **smallest-numbered** unreserved seat, reserves it, and returns its number. *  `void unreserve(int seatNumber)` Unreserves the seat with the given `seatNumber`.",
    "examples": [],
    "constraints": [
      "`1 <= n <= 105`",
      "`1 <= seatNumber <= n`",
      "For each call to `reserve`, it is guaranteed that there will be at least one unreserved seat.",
      "For each call to `unreserve`, it is guaranteed that `seatNumber` will be reserved.",
      "At most `105` calls in total will be made to `reserve` and `unreserve`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1846",
    "slug": "maximum-element-after-decreasing-and-rearranging",
    "title": "Maximum Element After Decreasing and Rearranging",
    "difficulty": "Medium",
    "description": "You are given an array of positive integers `arr`. Perform some operations (possibly none) on `arr` so that it satisfies these conditions: *  The value of the **first** element in `arr` must be `1`. *  The absolute difference between any 2 adjacent elements must be **less than or equal to** `1`. In other words, `abs(arr[i] - arr[i - 1]) <= 1` for each `i` where `1 <= i < arr.length` (**0-indexed**). `abs(x)` is the absolute value of `x`. There are 2 types of operations that you can perform any number of times: *  **Decrease** the value of any element of `arr` to a **smaller positive integer**. *  **Rearrange** the elements of `arr` to be in any order. Return _the **maximum** possible value of an element in_ `arr` _after performing the operations to satisfy the conditions_.",
    "examples": [
      {
        "input": "arr = \\[2,2,1,2,1\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "arr = \\[100,1,1000\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "arr = \\[1,2,3,4,5\\]",
        "output": "5",
        "explanation": "The array already satisfies the conditions, and the largest element is 5."
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`1 <= arr[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1847",
    "slug": "closest-room",
    "title": "Closest Room",
    "difficulty": "Hard",
    "description": "There is a hotel with `n` rooms. The rooms are represented by a 2D integer array `rooms` where `rooms[i] = [roomIdi, sizei]` denotes that there is a room with room number `roomIdi` and size equal to `sizei`. Each `roomIdi` is guaranteed to be **unique**. You are also given `k` queries in a 2D array `queries` where `queries[j] = [preferredj, minSizej]`. The answer to the `jth` query is the room number `id` of a room such that: *  The room has a size of **at least** `minSizej`, and *  `abs(id - preferredj)` is **minimized**, where `abs(x)` is the absolute value of `x`. If there is a **tie** in the absolute difference, then use the room with the **smallest** such `id`. If there is **no such room**, the answer is `-1`. Return _an array_ `answer` _of length_ `k` _where_ `answer[j]` _contains the answer to the_ `jth` _query_.",
    "examples": [
      {
        "input": "rooms = \\[\\[2,2\\],\\[1,2\\],\\[3,2\\]\\], queries = \\[\\[3,1\\],\\[3,3\\],\\[5,2\\]\\]",
        "output": "\\[3,-1,3\\]",
        "explanation": "The answers to the queries are as follows:"
      },
      {
        "input": "rooms = \\[\\[1,4\\],\\[2,3\\],\\[3,5\\],\\[4,1\\],\\[5,2\\]\\], queries = \\[\\[2,3\\],\\[2,4\\],\\[2,5\\]\\]",
        "output": "\\[2,1,3\\]",
        "explanation": "The answers to the queries are as follows:"
      }
    ],
    "constraints": [
      "`n == rooms.length`",
      "`1 <= n <= 105`",
      "`k == queries.length`",
      "`1 <= k <= 104`",
      "`1 <= roomIdi, preferredj <= 107`",
      "`1 <= sizei, minSizej <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1848",
    "slug": "minimum-distance-to-the-target-element",
    "title": "Minimum Distance to the Target Element",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` **(0-indexed)** and two integers `target` and `start`, find an index `i` such that `nums[i] == target` and `abs(i - start)` is **minimized**. Note that `abs(x)` is the absolute value of `x`. Return `abs(i - start)`. It is **guaranteed** that `target` exists in `nums`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4,5\\], target = 5, start = 3",
        "output": "1",
        "explanation": "nums\\[4\\] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1."
      },
      {
        "input": "nums = \\[1\\], target = 1, start = 0",
        "output": "0",
        "explanation": "nums\\[0\\] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0."
      },
      {
        "input": "nums = \\[1,1,1,1,1,1,1,1,1,1\\], target = 1, start = 0",
        "output": "0",
        "explanation": "Every value of nums is 1, but nums\\[0\\] minimizes abs(i - start), which is abs(0 - 0) = 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 104`",
      "`0 <= start < nums.length`",
      "`target` is in `nums`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1849",
    "slug": "splitting-a-string-into-descending-consecutive-values",
    "title": "Splitting a String Into Descending Consecutive Values",
    "difficulty": "Medium",
    "description": "You are given a string `s` that consists of only digits. Check if we can split `s` into **two or more non-empty substrings** such that the **numerical values** of the substrings are in **descending order** and the **difference** between numerical values of every two **adjacent** **substrings** is equal to `1`. *  For example, the string `s = \"0090089 \"` can be split into `[ \"0090 \", \"089 \"]` with numerical values `[90,89]`. The values are in descending order and adjacent values differ by `1`, so this way is valid. *  Another example, the string `s = \"001 \"` can be split into `[ \"0 \", \"01 \"]`, `[ \"00 \", \"1 \"]`, or `[ \"0 \", \"0 \", \"1 \"]`. However all the ways are invalid because they have numerical values `[0,1]`, `[0,1]`, and `[0,0,1]` respectively, all of which are not in descending order. Return `true` _if it is possible to split_ `s`\u200b\u200b\u200b\u200b\u200b\u200b _as described above__, or_ `false` _otherwise._ A **substring** is a contiguous sequence of characters in a string.",
    "examples": [
      {
        "input": "s =  \"1234 \"",
        "output": "false",
        "explanation": "There is no valid way to split s."
      },
      {
        "input": "s =  \"050043 \"",
        "output": "true",
        "explanation": "s can be split into \\[ \"05 \",  \"004 \",  \"3 \"\\] with numerical values \\[5,4,3\\]."
      },
      {
        "input": "s =  \"9080701 \"",
        "output": "false",
        "explanation": "There is no valid way to split s."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 20`",
      "`s` only consists of digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1850",
    "slug": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
    "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
    "difficulty": "Medium",
    "description": "You are given a string `num`, representing a large integer, and an integer `k`. We call some integer **wonderful** if it is a **permutation** of the digits in `num` and is **greater in value** than `num`. There can be many wonderful integers. However, we only care about the **smallest-valued** ones. *  For example, when `num = \"5489355142 \"`: *  The 1st smallest wonderful integer is `\"5489355214 \"`. *  The 2nd smallest wonderful integer is `\"5489355241 \"`. *  The 3rd smallest wonderful integer is `\"5489355412 \"`. *  The 4th smallest wonderful integer is `\"5489355421 \"`. Return _the **minimum number of adjacent digit swaps** that needs to be applied to_ `num` _to reach the_ `kth` _**smallest wonderful** integer_. The tests are generated in such a way that `kth` smallest wonderful integer exists.",
    "examples": [
      {
        "input": "num =  \"5489355142 \", k = 4",
        "output": "2",
        "explanation": "The 4th smallest wonderful number is  \"5489355421 \". To get this number:"
      },
      {
        "input": "num =  \"11112 \", k = 4",
        "output": "4",
        "explanation": "The 4th smallest wonderful number is  \"21111 \". To get this number:"
      },
      {
        "input": "num =  \"00123 \", k = 1",
        "output": "1",
        "explanation": "The 1st smallest wonderful number is  \"00132 \". To get this number:"
      }
    ],
    "constraints": [
      "`2 <= num.length <= 1000`",
      "`1 <= k <= 1000`",
      "`num` only consists of digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1851",
    "slug": "minimum-interval-to-include-each-query",
    "title": "Minimum Interval to Include Each Query",
    "difficulty": "Hard",
    "description": "You are given a 2D integer array `intervals`, where `intervals[i] = [lefti, righti]` describes the `ith` interval starting at `lefti` and ending at `righti` **(inclusive)**. The **size** of an interval is defined as the number of integers it contains, or more formally `righti - lefti + 1`. You are also given an integer array `queries`. The answer to the `jth` query is the **size of the smallest interval** `i` such that `lefti <= queries[j] <= righti`. If no such interval exists, the answer is `-1`. Return _an array containing the answers to the queries_.",
    "examples": [
      {
        "input": "intervals = \\[\\[1,4\\],\\[2,4\\],\\[3,6\\],\\[4,4\\]\\], queries = \\[2,3,4,5\\]",
        "output": "\\[3,3,1,4\\]",
        "explanation": "The queries are processed as follows:"
      },
      {
        "input": "intervals = \\[\\[2,3\\],\\[2,5\\],\\[1,8\\],\\[20,25\\]\\], queries = \\[2,19,5,22\\]",
        "output": "\\[2,-1,4,6\\]",
        "explanation": "The queries are processed as follows:"
      }
    ],
    "constraints": [
      "`1 <= intervals.length <= 105`",
      "`1 <= queries.length <= 105`",
      "`intervals[i].length == 2`",
      "`1 <= lefti <= righti <= 107`",
      "`1 <= queries[j] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1852",
    "slug": "distinct-numbers-in-each-subarray",
    "title": "Distinct Numbers in Each Subarray",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and an integer `k`, you are asked to construct the array `ans` of size `n-k+1` where `ans[i]` is the number of **distinct** numbers in the subarray `nums[i:i+k-1] = [nums[i], nums[i+1], ..., nums[i+k-1]]`. Return _the array_ `ans`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,2,2,1,3\\], k = 3",
        "output": "\\[3,2,2,2,3\\]",
        "explanation": "The number of distinct elements in each subarray goes as follows:"
      },
      {
        "input": "nums = \\[1,1,1,1,2,3,4\\], k = 4",
        "output": "\\[1,2,3,4\\]",
        "explanation": "The number of distinct elements in each subarray goes as follows:"
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1854",
    "slug": "maximum-population-year",
    "title": "Maximum Population Year",
    "difficulty": "Easy",
    "description": "You are given a 2D integer array `logs` where each `logs[i] = [birthi, deathi]` indicates the birth and death years of the `ith` person. The **population** of some year `x` is the number of people alive during that year. The `ith` person is counted in year `x`'s population if `x` is in the **inclusive** range `[birthi, deathi - 1]`. Note that the person is **not** counted in the year that they die. Return _the **earliest** year with the **maximum population**_.",
    "examples": [
      {
        "input": "logs = \\[\\[1993,1999\\],\\[2000,2010\\]\\]",
        "output": "1993",
        "explanation": "The maximum population is 1, and 1993 is the earliest year with this population."
      },
      {
        "input": "logs = \\[\\[1950,1961\\],\\[1960,1971\\],\\[1970,1981\\]\\]",
        "output": "1960",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= logs.length <= 100`",
      "`1950 <= birthi < deathi <= 2050`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1855",
    "slug": "maximum-distance-between-a-pair-of-values",
    "title": "Maximum Distance Between a Pair of Values",
    "difficulty": "Medium",
    "description": "You are given two **non-increasing 0-indexed** integer arrays `nums1`\u200b\u200b\u200b\u200b\u200b\u200b and `nums2`\u200b\u200b\u200b\u200b\u200b\u200b. A pair of indices `(i, j)`, where `0 <= i < nums1.length` and `0 <= j < nums2.length`, is **valid** if both `i <= j` and `nums1[i] <= nums2[j]`. The **distance** of the pair is `j - i`\u200b\u200b\u200b\u200b. Return _the **maximum distance** of any **valid** pair_ `(i, j)`_. If there are no valid pairs, return_ `0`. An array `arr` is **non-increasing** if `arr[i-1] >= arr[i]` for every `1 <= i < arr.length`.",
    "examples": [
      {
        "input": "nums1 = \\[55,30,5,4,2\\], nums2 = \\[100,20,10,10,5\\]",
        "output": "2",
        "explanation": "The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4)."
      },
      {
        "input": "nums1 = \\[2,2,2\\], nums2 = \\[10,10,1\\]",
        "output": "1",
        "explanation": "The valid pairs are (0,0), (0,1), and (1,1)."
      },
      {
        "input": "nums1 = \\[30,29,19,5\\], nums2 = \\[25,25,25,25,25\\]",
        "output": "2",
        "explanation": "The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4)."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 105`",
      "`1 <= nums1[i], nums2[j] <= 105`",
      "Both `nums1` and `nums2` are non-increasing."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1856",
    "slug": "maximum-subarray-min-product",
    "title": "Maximum Subarray Min-Product",
    "difficulty": "Medium",
    "description": "The **min-product** of an array is equal to the **minimum value** in the array **multiplied by** the array's **sum**. *  For example, the array `[3,2,5]` (minimum value is `2`) has a min-product of `2 * (3+2+5) = 2 * 10 = 20`. Given an array of integers `nums`, return _the **maximum min-product** of any **non-empty subarray** of_ `nums`. Since the answer may be large, return it **modulo** `109 + 7`. Note that the min-product should be maximized **before** performing the modulo operation. Testcases are generated such that the maximum min-product **without** modulo will fit in a **64-bit signed integer**. A **subarray** is a **contiguous** part of an array.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,2\\]",
        "output": "14",
        "explanation": "The maximum min-product is achieved with the subarray \\[2,3,2\\] (minimum value is 2)."
      },
      {
        "input": "nums = \\[2,3,3,1,2\\]",
        "output": "18",
        "explanation": "The maximum min-product is achieved with the subarray \\[3,3\\] (minimum value is 3)."
      },
      {
        "input": "nums = \\[3,1,5,6,4,2\\]",
        "output": "60",
        "explanation": "The maximum min-product is achieved with the subarray \\[5,6,4\\] (minimum value is 4)."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1857",
    "slug": "largest-color-value-in-a-directed-graph",
    "title": "Largest Color Value in a Directed Graph",
    "difficulty": "Hard",
    "description": "There is a **directed graph** of `n` colored nodes and `m` edges. The nodes are numbered from `0` to `n - 1`. You are given a string `colors` where `colors[i]` is a lowercase English letter representing the **color** of the `ith` node in this graph (**0-indexed**). You are also given a 2D array `edges` where `edges[j] = [aj, bj]` indicates that there is a **directed edge** from node `aj` to node `bj`. A valid **path** in the graph is a sequence of nodes `x1 -> x2 -> x3 -> ... -> xk` such that there is a directed edge from `xi` to `xi+1` for every `1 <= i < k`. The **color value** of the path is the number of nodes that are colored the **most frequently** occurring color along that path. Return _the **largest color value** of any valid path in the given graph, or_ `-1` _if the graph contains a cycle_.",
    "examples": [
      {
        "input": "colors =  \"abaca \", edges = \\[\\[0,1\\],\\[0,2\\],\\[2,3\\],\\[3,4\\]\\]",
        "output": "3",
        "explanation": "The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored ` \"a \" (red in the above image)`."
      },
      {
        "input": "colors =  \"a \", edges = \\[\\[0,0\\]\\]",
        "output": "-1",
        "explanation": "There is a cycle from 0 to 0."
      }
    ],
    "constraints": [
      "`n == colors.length`",
      "`m == edges.length`",
      "`1 <= n <= 105`",
      "`0 <= m <= 105`",
      "`colors` consists of lowercase English letters.",
      "`0 <= aj, bj < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1858",
    "slug": "longest-word-with-all-prefixes",
    "title": "Longest Word With All Prefixes",
    "difficulty": "Medium",
    "description": "Given an array of strings `words`, find the **longest** string in `words` such that **every prefix** of it is also in `words`. *  For example, let `words = [ \"a \", \"app \", \"ap \"]`. The string `\"app \"` has prefixes `\"ap \"` and `\"a \"`, all of which are in `words`. Return _the string described above. If there is more than one string with the same length, return the **lexicographically smallest** one, and if no string exists, return_ `\" \"`.",
    "examples": [
      {
        "input": "words = \\[ \"k \", \"ki \", \"kir \", \"kira \",  \"kiran \"\\]",
        "output": "\"kiran \"",
        "explanation": "\"kiran \" has prefixes  \"kira \",  \"kir \",  \"ki \", and  \"k \", and all of them appear in words."
      },
      {
        "input": "words = \\[ \"a \",  \"banana \",  \"app \",  \"appl \",  \"ap \",  \"apply \",  \"apple \"\\]",
        "output": "\"apple \"",
        "explanation": "Both  \"apple \" and  \"apply \" have all their prefixes in words."
      },
      {
        "input": "words = \\[ \"abc \",  \"bc \",  \"ab \",  \"qwe \"\\]",
        "output": "\" \""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 105`",
      "`1 <= words[i].length <= 105`",
      "`1 <= sum(words[i].length) <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1859",
    "slug": "sorting-the-sentence",
    "title": "Sorting the Sentence",
    "difficulty": "Easy",
    "description": "A **sentence** is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters. A sentence can be **shuffled** by appending the **1-indexed word position** to each word then rearranging the words in the sentence. *  For example, the sentence `\"This is a sentence \"` can be shuffled as `\"sentence4 a3 is2 This1 \"` or `\"is2 sentence4 This1 a3 \"`. Given a **shuffled sentence** `s` containing no more than `9` words, reconstruct and return _the original sentence_.",
    "examples": [
      {
        "input": "s =  \"is2 sentence4 This1 a3 \"",
        "output": "\"This is a sentence \"",
        "explanation": "Sort the words in s to their original positions  \"This1 is2 a3 sentence4 \", then remove the numbers."
      },
      {
        "input": "s =  \"Myself2 Me1 I4 and3 \"",
        "output": "\"Me Myself and I \"",
        "explanation": "Sort the words in s to their original positions  \"Me1 Myself2 and3 I4 \", then remove the numbers."
      }
    ],
    "constraints": [
      "`2 <= s.length <= 200`",
      "`s` consists of lowercase and uppercase English letters, spaces, and digits from `1` to `9`.",
      "The number of words in `s` is between `1` and `9`.",
      "The words in `s` are separated by a single space.",
      "`s` contains no leading or trailing spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1860",
    "slug": "incremental-memory-leak",
    "title": "Incremental Memory Leak",
    "difficulty": "Medium",
    "description": "You are given two integers `memory1` and `memory2` representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second. At the `ith` second (starting from 1), `i` bits of memory are allocated to the stick with **more available memory** (or from the first memory stick if both have the same available memory). If neither stick has at least `i` bits of available memory, the program **crashes**. Return _an array containing_ `[crashTime, memory1crash, memory2crash]`_, where_ `crashTime` _is the time (in seconds) when the program crashed and_ `memory1crash` _and_ `memory2crash` _are the available bits of memory in the first and second sticks respectively_.",
    "examples": [
      {
        "input": "memory1 = 2, memory2 = 2",
        "output": "\\[3,1,0\\]",
        "explanation": "The memory is allocated as follows:"
      },
      {
        "input": "memory1 = 8, memory2 = 11",
        "output": "\\[6,0,4\\]",
        "explanation": "The memory is allocated as follows:"
      }
    ],
    "constraints": [
      "`0 <= memory1, memory2 <= 231 - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1861",
    "slug": "rotating-the-box",
    "title": "Rotating the Box",
    "difficulty": "Medium",
    "description": "You are given an `m x n` matrix of characters `box` representing a side-view of a box. Each cell of the box is one of the following: *  A stone `'#'` *  A stationary obstacle `'*'` *  Empty `'.'` The box is rotated **90 degrees clockwise**, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity **does not** affect the obstacles' positions, and the inertia from the box's rotation **does not** affect the stones' horizontal positions. It is **guaranteed** that each stone in `box` rests on an obstacle, another stone, or the bottom of the box. Return _an_ `n x m` _matrix representing the box after the rotation described above_.",
    "examples": [
      {
        "input": "box = \\[\\[ \"# \", \". \", \"# \"\\]\\]",
        "output": "\\[\\[ \". \"\\],"
      },
      {
        "input": "box = \\[\\[ \"# \", \". \", \"\\* \", \". \"\\],",
        "output": "\\[\\[ \"# \", \". \"\\],"
      },
      {
        "input": "box = \\[\\[ \"# \", \"# \", \"\\* \", \". \", \"\\* \", \". \"\\],",
        "output": "\\[\\[ \". \", \"# \", \"# \"\\],"
      }
    ],
    "constraints": [
      "`m == box.length`",
      "`n == box[i].length`",
      "`1 <= m, n <= 500`",
      "`box[i][j]` is either `'#'`, `''`, or `'.'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1862",
    "slug": "sum-of-floored-pairs",
    "title": "Sum of Floored Pairs",
    "difficulty": "Hard",
    "description": "Given an integer array `nums`, return the sum of `floor(nums[i] / nums[j])` for all pairs of indices `0 <= i, j < nums.length` in the array. Since the answer may be too large, return it **modulo** `109 + 7`. The `floor()` function returns the integer part of the division.",
    "examples": [
      {
        "input": "nums = \\[2,5,9\\]",
        "output": "10",
        "explanation": ""
      },
      {
        "input": "nums = \\[7,7,7,7,7,7,7\\]",
        "output": "49"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1863",
    "slug": "sum-of-all-subset-xor-totals",
    "title": "Sum of All Subset XOR Totals",
    "difficulty": "Easy",
    "description": "The **XOR total** of an array is defined as the bitwise `XOR` of **all its elements**, or `0` if the array is **empty**. *  For example, the **XOR total** of the array `[2,5,6]` is `2 XOR 5 XOR 6 = 1`. Given an array `nums`, return _the **sum** of all **XOR totals** for every **subset** of_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[1,3\\]",
        "output": "6",
        "explanation": "The 4 subsets of \\[1,3\\] are:"
      },
      {
        "input": "nums = \\[5,1,6\\]",
        "output": "28",
        "explanation": "The 8 subsets of \\[5,1,6\\] are:"
      },
      {
        "input": "nums = \\[3,4,5,6,7,8\\]",
        "output": "480",
        "explanation": "The sum of all XOR totals for every subset is 480."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 12`",
      "`1 <= nums[i] <= 20`"
    ],
    "note": "Subsets with the **same** elements should be counted **multiple** times.",
    "follow_up": null
  },
  {
    "id": "1864",
    "slug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
    "title": "Minimum Number of Swaps to Make the Binary String Alternating",
    "difficulty": "Medium",
    "description": "Given a binary string `s`, return _the **minimum** number of character swaps to make it **alternating**, or_ `-1` _if it is impossible._ The string is called **alternating** if no two adjacent characters are equal. For example, the strings `\"010 \"` and `\"1010 \"` are alternating, while the string `\"0100 \"` is not. Any two characters may be swapped, even if they are **not adjacent**.",
    "examples": [
      {
        "input": "s =  \"111000 \"",
        "output": "1",
        "explanation": "Swap positions 1 and 4:  \"111000 \" ->  \"101010 \""
      },
      {
        "input": "s =  \"010 \"",
        "output": "0",
        "explanation": "The string is already alternating, no swaps are needed."
      },
      {
        "input": "s =  \"1110 \"",
        "output": "-1"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1865",
    "slug": "finding-pairs-with-a-certain-sum",
    "title": "Finding Pairs With a Certain Sum",
    "difficulty": "Medium",
    "description": "You are given two integer arrays `nums1` and `nums2`. You are tasked to implement a data structure that supports queries of two types: 1. **Add** a positive integer to an element of a given index in the array `nums2`. 2. **Count** the number of pairs `(i, j)` such that `nums1[i] + nums2[j]` equals a given value (`0 <= i < nums1.length` and `0 <= j < nums2.length`). Implement the `FindSumPairs` class: *  `FindSumPairs(int[] nums1, int[] nums2)` Initializes the `FindSumPairs` object with two integer arrays `nums1` and `nums2`. *  `void add(int index, int val)` Adds `val` to `nums2[index]`, i.e., apply `nums2[index] += val`. *  `int count(int tot)` Returns the number of pairs `(i, j)` such that `nums1[i] + nums2[j] == tot`.",
    "examples": [],
    "constraints": [
      "`1 <= nums1.length <= 1000`",
      "`1 <= nums2.length <= 105`",
      "`1 <= nums1[i] <= 109`",
      "`1 <= nums2[i] <= 105`",
      "`0 <= index < nums2.length`",
      "`1 <= val <= 105`",
      "`1 <= tot <= 109`",
      "At most `1000` calls are made to `add` and `count` each."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1866",
    "slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
    "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
    "difficulty": "Hard",
    "description": "There are `n` uniquely-sized sticks whose lengths are integers from `1` to `n`. You want to arrange the sticks such that **exactly** `k` sticks are **visible** from the left. A stick is **visible** from the left if there are no **longer** sticks to the **left** of it. *  For example, if the sticks are arranged `[1,3,2,5,4]`, then the sticks with lengths `1`, `3`, and `5` are visible from the left. Given `n` and `k`, return _the **number** of such arrangements_. Since the answer may be large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 3, k = 2",
        "output": "3",
        "explanation": "\\[1,3,2\\], \\[2,3,1\\], and \\[2,1,3\\] are the only arrangements such that exactly 2 sticks are visible."
      },
      {
        "input": "n = 5, k = 5",
        "output": "1",
        "explanation": "\\[1,2,3,4,5\\] is the only arrangement such that all 5 sticks are visible."
      },
      {
        "input": "n = 20, k = 11",
        "output": "647427950",
        "explanation": "There are 647427950 (mod 109 \\+ 7) ways to rearrange the sticks such that exactly 11 sticks are visible."
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`",
      "`1 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1868",
    "slug": "product-of-two-run-length-encoded-arrays",
    "title": "Product of Two Run-Length Encoded Arrays",
    "difficulty": "Medium",
    "description": "**Run-length encoding** is a compression algorithm that allows for an integer array `nums` with many segments of **consecutive repeated** numbers to be represented by a (generally smaller) 2D array `encoded`. Each `encoded[i] = [vali, freqi]` describes the `ith` segment of repeated numbers in `nums` where `vali` is the value that is repeated `freqi` times. *  For example, `nums = [1,1,1,2,2,2,2,2]` is represented by the **run-length encoded** array `encoded = [[1,3],[2,5]]`. Another way to read this is \"three `1`'s followed by five `2`'s \". The **product** of two run-length encoded arrays `encoded1` and `encoded2` can be calculated using the following steps: 1. **Expand** both `encoded1` and `encoded2` into the full arrays `nums1` and `nums2` respectively. 2. Create a new array `prodNums` of length `nums1.length` and set `prodNums[i] = nums1[i] * nums2[i]`. 3. **Compress** `prodNums` into a run-length encoded array and return it. You are given two **run-length encoded** arrays `encoded1` and `encoded2` representing full arrays `nums1` and `nums2` respectively. Both `nums1` and `nums2` have the **same length**. Each `encoded1[i] = [vali, freqi]` describes the `ith` segment of `nums1`, and each `encoded2[j] = [valj, freqj]` describes the `jth` segment of `nums2`. Return _the **product** of_ `encoded1` _and_ `encoded2`.",
    "examples": [
      {
        "input": "encoded1 = \\[\\[1,3\\],\\[2,3\\]\\], encoded2 = \\[\\[6,3\\],\\[3,3\\]\\]",
        "output": "\\[\\[6,6\\]\\]",
        "explanation": "encoded1 expands to \\[1,1,1,2,2,2\\] and encoded2 expands to \\[6,6,6,3,3,3\\]."
      },
      {
        "input": "encoded1 = \\[\\[1,3\\],\\[2,1\\],\\[3,2\\]\\], encoded2 = \\[\\[2,3\\],\\[3,3\\]\\]",
        "output": "\\[\\[2,3\\],\\[6,1\\],\\[9,2\\]\\]",
        "explanation": "encoded1 expands to \\[1,1,1,2,3,3\\] and encoded2 expands to \\[2,2,2,3,3,3\\]."
      }
    ],
    "constraints": [
      "`1 <= encoded1.length, encoded2.length <= 105`",
      "`encoded1[i].length == 2`",
      "`encoded2[j].length == 2`",
      "`1 <= vali, freqi <= 104` for each `encoded1[i]`.",
      "`1 <= valj, freqj <= 104` for each `encoded2[j]`.",
      "The full arrays that `encoded1` and `encoded2` represent are the same length."
    ],
    "note": "Compression should be done such that the run-length encoded array has the **minimum** possible length.",
    "follow_up": null
  },
  {
    "id": "1869",
    "slug": "longer-contiguous-segments-of-ones-than-zeros",
    "title": "Longer Contiguous Segments of Ones than Zeros",
    "difficulty": "Easy",
    "description": "Given a binary string `s`, return `true` _if the **longest** contiguous segment of_ `1`'_s is **strictly longer** than the **longest** contiguous segment of_ `0`'_s in_ `s`, or return `false` _otherwise_. *  For example, in `s = \"110100010 \"` the longest continuous segment of `1`s has length `2`, and the longest continuous segment of `0`s has length `3`. Note that if there are no `0`'s, then the longest continuous segment of `0`'s is considered to have a length `0`. The same applies if there is no `1`'s.",
    "examples": [
      {
        "input": "s =  \"1101 \"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s =  \"111000 \"",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "s =  \"110100010 \"",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1870",
    "slug": "minimum-speed-to-arrive-on-time",
    "title": "Minimum Speed to Arrive on Time",
    "difficulty": "Medium",
    "description": "You are given a floating-point number `hour`, representing the amount of time you have to reach the office. To commute to the office, you must take `n` trains in sequential order. You are also given an integer array `dist` of length `n`, where `dist[i]` describes the distance (in kilometers) of the `ith` train ride. Each train can only depart at an integer hour, so you may need to wait in between each train ride. *  For example, if the `1st` train ride takes `1.5` hours, you must wait for an additional `0.5` hours before you can depart on the `2nd` train ride at the 2 hour mark. Return _the **minimum positive integer** speed **(in kilometers per hour)** that all the trains must travel at for you to reach the office on time, or_ `-1` _if it is impossible to be on time_. Tests are generated such that the answer will not exceed `107` and `hour` will have **at most two digits after the decimal point**.",
    "examples": [
      {
        "input": "dist = \\[1,3,2\\], hour = 6",
        "output": "1",
        "explanation": "At speed 1:"
      },
      {
        "input": "dist = \\[1,3,2\\], hour = 2.7",
        "output": "3",
        "explanation": "At speed 3:"
      },
      {
        "input": "dist = \\[1,3,2\\], hour = 1.9",
        "output": "-1",
        "explanation": "It is impossible because the earliest the third train can depart is at the 2 hour mark."
      }
    ],
    "constraints": [
      "`n == dist.length`",
      "`1 <= n <= 105`",
      "`1 <= dist[i] <= 105`",
      "`1 <= hour <= 109`",
      "There will be at most two digits after the decimal point in `hour`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1871",
    "slug": "jump-game-vii",
    "title": "Jump Game VII",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** binary string `s` and two integers `minJump` and `maxJump`. In the beginning, you are standing at index `0`, which is equal to `'0'`. You can move from index `i` to index `j` if the following conditions are fulfilled: *  `i + minJump <= j <= min(i + maxJump, s.length - 1)`, and *  `s[j] == '0'`. Return `true` _if you can reach index_ `s.length - 1` _in_ `s`_, or_ `false` _otherwise._",
    "examples": [
      {
        "input": "s =  \"011010 \", minJump = 2, maxJump = 3",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s =  \"01101110 \", minJump = 2, maxJump = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "`2 <= s.length <= 105`",
      "`s[i]` is either `'0'` or `'1'`.",
      "`s[0] == '0'`",
      "`1 <= minJump <= maxJump < s.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1872",
    "slug": "stone-game-viii",
    "title": "Stone Game VIII",
    "difficulty": "Hard",
    "description": "Alice and Bob take turns playing a game, with **Alice starting first**. There are `n` stones arranged in a row. On each player's turn, while the number of stones is **more than one**, they will do the following: 1. Choose an integer `x > 1`, and **remove** the leftmost `x` stones from the row. 2. Add the **sum** of the **removed** stones' values to the player's score. 3. Place a **new stone**, whose value is equal to that sum, on the left side of the row. The game stops when **only** **one** stone is left in the row. The **score difference** between Alice and Bob is `(Alice's score - Bob's score)`. Alice's goal is to **maximize** the score difference, and Bob's goal is the **minimize** the score difference. Given an integer array `stones` of length `n` where `stones[i]` represents the value of the `ith` stone **from the left**, return _the **score difference** between Alice and Bob if they both play **optimally**._",
    "examples": [
      {
        "input": "stones = \\[-1,2,-3,4,-5\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "stones = \\[7,-6,5,10,5,-2,-6\\]",
        "output": "13",
        "explanation": ""
      },
      {
        "input": "stones = \\[-10,-12\\]",
        "output": "-22",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == stones.length`",
      "`2 <= n <= 105`",
      "`-104 <= stones[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1874",
    "slug": "minimize-product-sum-of-two-arrays",
    "title": "Minimize Product Sum of Two Arrays",
    "difficulty": "Medium",
    "description": "The **product sum** of two equal-length arrays `a` and `b` is equal to the sum of `a[i] * b[i]` for all `0 <= i < a.length` (**0-indexed**). *  For example, if `a = [1,2,3,4]` and `b = [5,2,3,1]`, the **product sum** would be `1*5 + 2*2 + 3*3 + 4*1 = 22`. Given two arrays `nums1` and `nums2` of length `n`, return _the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in_ `nums1`.",
    "examples": [
      {
        "input": "nums1 = \\[5,3,4,2\\], nums2 = \\[4,2,2,5\\]",
        "output": "40",
        "explanation": "We can rearrange nums1 to become \\[3,5,4,2\\]. The product sum of \\[3,5,4,2\\] and \\[4,2,2,5\\] is 3\\*4 + 5\\*2 + 4\\*2 + 2\\*5 = 40."
      },
      {
        "input": "nums1 = \\[2,1,4,5,7\\], nums2 = \\[3,2,4,8,6\\]",
        "output": "65",
        "explanation": "We can rearrange nums1 to become \\[5,7,4,1,2\\]. The product sum of \\[5,7,4,1,2\\] and \\[3,2,4,8,6\\] is 5\\*3 + 7\\*2 + 4\\*4 + 1\\*8 + 2\\*6 = 65."
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`1 <= n <= 105`",
      "`1 <= nums1[i], nums2[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1876",
    "slug": "substrings-of-size-three-with-distinct-characters",
    "title": "Substrings of Size Three with Distinct Characters",
    "difficulty": "Easy",
    "description": "A string is **good** if there are no repeated characters. Given a string `s`\u200b\u200b\u200b\u200b\u200b, return _the number of **good substrings** of length **three** in_ `s`\u200b\u200b\u200b\u200b\u200b\u200b. Note that if there are multiple occurrences of the same substring, every occurrence should be counted. A **substring** is a contiguous sequence of characters in a string.",
    "examples": [
      {
        "input": "s =  \"xyzzaz \"",
        "output": "1",
        "explanation": "There are 4 substrings of size 3:  \"xyz \",  \"yzz \",  \"zza \", and  \"zaz \"."
      },
      {
        "input": "s =  \"aababcabc \"",
        "output": "4",
        "explanation": "There are 7 substrings of size 3:  \"aab \",  \"aba \",  \"bab \",  \"abc \",  \"bca \",  \"cab \", and  \"abc \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s`\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1877",
    "slug": "minimize-maximum-pair-sum-in-array",
    "title": "Minimize Maximum Pair Sum in Array",
    "difficulty": "Medium",
    "description": "The **pair sum** of a pair `(a,b)` is equal to `a + b`. The **maximum pair sum** is the largest **pair sum** in a list of pairs. *  For example, if we have pairs `(1,5)`, `(2,3)`, and `(4,4)`, the **maximum pair sum** would be `max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8`. Given an array `nums` of **even** length `n`, pair up the elements of `nums` into `n / 2` pairs such that: *  Each element of `nums` is in **exactly one** pair, and *  The **maximum pair sum** is **minimized**. Return _the minimized **maximum pair sum** after optimally pairing up the elements_.",
    "examples": [
      {
        "input": "nums = \\[3,5,2,3\\]",
        "output": "7",
        "explanation": "The elements can be paired up into pairs (3,3) and (5,2)."
      },
      {
        "input": "nums = \\[3,5,4,2,4,6\\]",
        "output": "8",
        "explanation": "The elements can be paired up into pairs (3,5), (4,4), and (6,2)."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`2 <= n <= 105`",
      "`n` is even.",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1878",
    "slug": "get-biggest-three-rhombus-sums-in-a-grid",
    "title": "Get Biggest Three Rhombus Sums in a Grid",
    "difficulty": "Medium",
    "description": "You are given an `m x n` integer matrix `grid`\u200b\u200b\u200b. A **rhombus sum** is the sum of the elements that form **the** **border** of a regular rhombus shape in `grid`\u200b\u200b\u200b. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each **rhombus sum**: Note that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner. Return _the biggest three **distinct rhombus sums** in the_ `grid` _in **descending order**__. If there are less than three distinct values, return all of them_.",
    "examples": [
      {
        "input": "grid = \\[\\[3,4,5,1,3\\],\\[3,3,4,2,3\\],\\[20,30,200,40,10\\],\\[1,5,5,4,1\\],\\[4,3,2,2,5\\]\\]",
        "output": "\\[228,216,211\\]",
        "explanation": "The rhombus shapes for the three biggest distinct rhombus sums are depicted above."
      },
      {
        "input": "grid = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]",
        "output": "\\[20,9,8\\]",
        "explanation": "The rhombus shapes for the three biggest distinct rhombus sums are depicted above."
      },
      {
        "input": "grid = \\[\\[7,7,7\\]\\]",
        "output": "\\[7\\]",
        "explanation": "All three possible rhombus sums are the same, so return \\[7\\]."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 50`",
      "`1 <= grid[i][j] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1879",
    "slug": "minimum-xor-sum-of-two-arrays",
    "title": "Minimum XOR Sum of Two Arrays",
    "difficulty": "Hard",
    "description": "You are given two integer arrays `nums1` and `nums2` of length `n`. The **XOR sum** of the two integer arrays is `(nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1])` (**0-indexed**). *  For example, the **XOR sum** of `[1,2,3]` and `[3,2,1]` is equal to `(1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4`. Rearrange the elements of `nums2` such that the resulting **XOR sum** is **minimized**. Return _the **XOR sum** after the rearrangement_.",
    "examples": [
      {
        "input": "nums1 = \\[1,2\\], nums2 = \\[2,3\\]",
        "output": "2",
        "explanation": "Rearrange `nums2` so that it becomes `[3,2]`."
      },
      {
        "input": "nums1 = \\[1,0,3\\], nums2 = \\[5,3,4\\]",
        "output": "8",
        "explanation": "Rearrange `nums2` so that it becomes `[5,4,3]`."
      }
    ],
    "constraints": [
      "`n == nums1.length`",
      "`n == nums2.length`",
      "`1 <= n <= 14`",
      "`0 <= nums1[i], nums2[i] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1880",
    "slug": "check-if-word-equals-summation-of-two-words",
    "title": "Check if Word Equals Summation of Two Words",
    "difficulty": "Easy",
    "description": "The **letter value** of a letter is its position in the alphabet **starting from 0** (i.e. `'a' -> 0`, `'b' -> 1`, `'c' -> 2`, etc.). The **numerical value** of some string of lowercase English letters `s` is the **concatenation** of the **letter values** of each letter in `s`, which is then **converted** into an integer. *  For example, if `s = \"acb \"`, we concatenate each letter's letter value, resulting in `\"021 \"`. After converting it, we get `21`. You are given three strings `firstWord`, `secondWord`, and `targetWord`, each consisting of lowercase English letters `'a'` through `'j'` **inclusive**. Return `true` _if the **summation** of the **numerical values** of_ `firstWord` _and_ `secondWord` _equals the **numerical value** of_ `targetWord`_, or_ `false` _otherwise._",
    "examples": [
      {
        "input": "firstWord =  \"acb \", secondWord =  \"cba \", targetWord =  \"cdb \"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "firstWord =  \"aaa \", secondWord =  \"a \", targetWord =  \"aab \"",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "firstWord =  \"aaa \", secondWord =  \"a \", targetWord =  \"aaaa \"",
        "output": "true",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= firstWord.length,` `secondWord.length,` `targetWord.length <= 8`",
      "`firstWord`, `secondWord`, and `targetWord` consist of lowercase English letters from `'a'` to `'j'` inclusive."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1881",
    "slug": "maximum-value-after-insertion",
    "title": "Maximum Value after Insertion",
    "difficulty": "Medium",
    "description": "You are given a very large integer `n`, represented as a string,\u200b\u200b\u200b\u200b\u200b\u200b and an integer digit `x`. The digits in `n` and the digit `x` are in the **inclusive** range `[1, 9]`, and `n` may represent a **negative** number. You want to **maximize** `n`**'s numerical value** by inserting `x` anywhere in the decimal representation of `n`\u200b\u200b\u200b\u200b\u200b\u200b. You **cannot** insert `x` to the left of the negative sign. *  For example, if `n = 73` and `x = 6`, it would be best to insert it between `7` and `3`, making `n = 763`. *  If `n = -55` and `x = 2`, it would be best to insert it before the first `5`, making `n = -255`. Return _a string representing the **maximum** value of_ `n`_\u200b\u200b\u200b\u200b\u200b\u200b after the insertion_.",
    "examples": [
      {
        "input": "n =  \"99 \", x = 9",
        "output": "\"999 \"",
        "explanation": "The result is the same regardless of where you insert 9."
      },
      {
        "input": "n =  \"-13 \", x = 2",
        "output": "\"-123 \"",
        "explanation": "You can make n one of {-213, -123, -132}, and the largest of those three is -123."
      }
    ],
    "constraints": [
      "`1 <= n.length <= 105`",
      "`1 <= x <= 9`",
      "The digits in `n`\u200b\u200b\u200b are in the range `[1, 9]`.",
      "`n` is a valid representation of an integer.",
      "In the case of a negative `n`,\u200b\u200b\u200b\u200b\u200b\u200b it will begin with `'-'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1882",
    "slug": "process-tasks-using-servers",
    "title": "Process Tasks Using Servers",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed** integer arrays `servers` and `tasks` of lengths `n`\u200b\u200b\u200b\u200b\u200b\u200b and `m`\u200b\u200b\u200b\u200b\u200b\u200b respectively. `servers[i]` is the **weight** of the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b server, and `tasks[j]` is the **time needed** to process the `j\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b task **in seconds**. Tasks are assigned to the servers using a **task queue**. Initially, all servers are free, and the queue is **empty**. At second `j`, the `jth` task is **inserted** into the queue (starting with the `0th` task being inserted at second `0`). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the **smallest weight**, and in case of a tie, it is assigned to a free server with the **smallest index**. If there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned **in order of insertion** following the weight and index priorities above. A server that is assigned task `j` at second `t` will be free again at second `t + tasks[j]`. Build an array `ans`\u200b\u200b\u200b\u200b of length `m`, where `ans[j]` is the **index** of the server the `j\u200b\u200b\u200b\u200b\u200b\u200bth` task will be assigned to. Return _the array_ `ans`\u200b\u200b\u200b\u200b.",
    "examples": [
      {
        "input": "servers = \\[3,3,2\\], tasks = \\[1,2,3,2,1,2\\]",
        "output": "\\[2,2,0,2,1,2\\]",
        "explanation": "Events in chronological order go as follows:"
      },
      {
        "input": "servers = \\[5,1,4,3,2\\], tasks = \\[2,1,2,4,5,2,1\\]",
        "output": "\\[1,4,1,4,1,3,2\\]",
        "explanation": "Events in chronological order go as follows:"
      }
    ],
    "constraints": [
      "`servers.length == n`",
      "`tasks.length == m`",
      "`1 <= n, m <= 2  105`",
      "`1 <= servers[i], tasks[j] <= 2  105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1883",
    "slug": "minimum-skips-to-arrive-at-meeting-on-time",
    "title": "Minimum Skips to Arrive at Meeting On Time",
    "difficulty": "Hard",
    "description": "You are given an integer `hoursBefore`, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through `n` roads. The road lengths are given as an integer array `dist` of length `n`, where `dist[i]` describes the length of the `ith` road in **kilometers**. In addition, you are given an integer `speed`, which is the speed (in **km/h**) you will travel at. After you travel road `i`, you must rest and wait for the **next integer hour** before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting. *  For example, if traveling a road takes `1.4` hours, you must wait until the `2` hour mark before traveling the next road. If traveling a road takes exactly `2` hours, you do not need to wait. However, you are allowed to **skip** some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks. *  For example, suppose traveling the first road takes `1.4` hours and traveling the second road takes `0.6` hours. Skipping the rest after the first road will mean you finish traveling the second road right at the `2` hour mark, letting you start traveling the third road immediately. Return _the **minimum number of skips required** to arrive at the meeting on time, or_ `-1` _if it is **impossible**_.",
    "examples": [
      {
        "input": "dist = \\[1,3,2\\], speed = 4, hoursBefore = 2",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "dist = \\[7,3,5,5\\], speed = 2, hoursBefore = 10",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "dist = \\[7,3,5,5\\], speed = 1, hoursBefore = 10",
        "output": "-1",
        "explanation": "It is impossible to arrive at the meeting on time even if you skip all the rests."
      }
    ],
    "constraints": [
      "`n == dist.length`",
      "`1 <= n <= 1000`",
      "`1 <= dist[i] <= 105`",
      "`1 <= speed <= 106`",
      "`1 <= hoursBefore <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1884",
    "slug": "egg-drop-with-2-eggs-and-n-floors",
    "title": "Egg Drop With 2 Eggs and N Floors",
    "difficulty": "Medium",
    "description": "You are given **two identical** eggs and you have access to a building with `n` floors labeled from `1` to `n`. You know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor **higher** than `f` will **break**, and any egg dropped **at or below** floor `f` will **not break**. In each move, you may take an **unbroken** egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may **reuse** it in future moves. Return _the **minimum number of moves** that you need to determine **with certainty** what the value of_ `f` is.",
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "We can drop the first egg from floor 1 and the second egg from floor 2."
      },
      {
        "input": "n = 100",
        "output": "14",
        "explanation": "One optimal strategy is:"
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1885",
    "slug": "count-pairs-in-two-arrays",
    "title": "Count Pairs in Two Arrays",
    "difficulty": "Medium",
    "description": "Given two integer arrays `nums1` and `nums2` of length `n`, count the pairs of indices `(i, j)` such that `i < j` and `nums1[i] + nums1[j] > nums2[i] + nums2[j]`. Return _the **number of pairs** satisfying the condition._",
    "examples": [
      {
        "input": "nums1 = \\[2,1,2,1\\], nums2 = \\[1,2,1,2\\]",
        "output": "1"
      },
      {
        "input": "nums1 = \\[1,10,6,2\\], nums2 = \\[1,4,1,5\\]",
        "output": "5"
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`1 <= n <= 105`",
      "`1 <= nums1[i], nums2[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1886",
    "slug": "determine-whether-matrix-can-be-obtained-by-rotation",
    "title": "Determine Whether Matrix Can Be Obtained By Rotation",
    "difficulty": "Easy",
    "description": "Given two `n x n` binary matrices `mat` and `target`, return `true` _if it is possible to make_ `mat` _equal to_ `target` _by **rotating**_ `mat` _in **90-degree increments**, or_ `false` _otherwise._",
    "examples": [
      {
        "input": "mat = \\[\\[0,1\\],\\[1,0\\]\\], target = \\[\\[1,0\\],\\[0,1\\]\\]",
        "output": "true",
        "explanation": "We can rotate mat 90 degrees clockwise to make mat equal target."
      },
      {
        "input": "mat = \\[\\[0,1\\],\\[1,1\\]\\], target = \\[\\[1,0\\],\\[0,1\\]\\]",
        "output": "false",
        "explanation": "It is impossible to make mat equal to target by rotating mat."
      },
      {
        "input": "mat = \\[\\[0,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\], target = \\[\\[1,1,1\\],\\[0,1,0\\],\\[0,0,0\\]\\]",
        "output": "true",
        "explanation": "We can rotate mat 90 degrees clockwise two times to make mat equal target."
      }
    ],
    "constraints": [
      "`n == mat.length == target.length`",
      "`n == mat[i].length == target[i].length`",
      "`1 <= n <= 10`",
      "`mat[i][j]` and `target[i][j]` are either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1887",
    "slug": "reduction-operations-to-make-the-array-elements-equal",
    "title": "Reduction Operations to Make the Array Elements Equal",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, your goal is to make all elements in `nums` equal. To complete one operation, follow these steps: 1. Find the **largest** value in `nums`. Let its index be `i` (**0-indexed**) and its value be `largest`. If there are multiple elements with the largest value, pick the smallest `i`. 2. Find the **next largest** value in `nums` **strictly smaller** than `largest`. Let its value be `nextLargest`. 3. Reduce `nums[i]` to `nextLargest`. Return _the number of operations to make all elements in_ `nums` _equal_.",
    "examples": [
      {
        "input": "nums = \\[5,1,3\\]",
        "output": "3",
        "explanation": "It takes 3 operations to make all elements in nums equal:"
      },
      {
        "input": "nums = \\[1,1,1\\]",
        "output": "0",
        "explanation": "All elements in nums are already equal."
      },
      {
        "input": "nums = \\[1,1,2,2,3\\]",
        "output": "4",
        "explanation": "It takes 4 operations to make all elements in nums equal:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 5  104`",
      "`1 <= nums[i] <= 5  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1888",
    "slug": "minimum-number-of-flips-to-make-the-binary-string-alternating",
    "title": "Minimum Number of Flips to Make the Binary String Alternating",
    "difficulty": "Medium",
    "description": "You are given a binary string `s`. You are allowed to perform two types of operations on the string in any sequence: *  **Type-1: Remove** the character at the start of the string `s` and **append** it to the end of the string. *  **Type-2: Pick** any character in `s` and **flip** its value, i.e., if its value is `'0'` it becomes `'1'` and vice-versa. Return _the **minimum** number of **type-2** operations you need to perform_ _such that_ `s` _becomes **alternating**._ The string is called **alternating** if no two adjacent characters are equal. *  For example, the strings `\"010 \"` and `\"1010 \"` are alternating, while the string `\"0100 \"` is not.",
    "examples": [
      {
        "input": "s =  \"111000 \"",
        "output": "2"
      },
      {
        "input": "s =  \"010 \"",
        "output": "0"
      },
      {
        "input": "s =  \"1110 \"",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1889",
    "slug": "minimum-space-wasted-from-packaging",
    "title": "Minimum Space Wasted From Packaging",
    "difficulty": "Hard",
    "description": "You have `n` packages that you are trying to place in boxes, **one package in each box**. There are `m` suppliers that each produce boxes of **different sizes** (with infinite supply). A package can be placed in a box if the size of the package is **less than or equal to** the size of the box. The package sizes are given as an integer array `packages`, where `packages[i]` is the **size** of the `ith` package. The suppliers are given as a 2D integer array `boxes`, where `boxes[j]` is an array of **box sizes** that the `jth` supplier produces. You want to choose a **single supplier** and use boxes from them such that the **total wasted space** is **minimized**. For each package in a box, we define the space **wasted** to be `size of the box - size of the package`. The **total wasted space** is the sum of the space wasted in **all** the boxes. *  For example, if you have to fit packages with sizes `[2,3,5]` and the supplier offers boxes of sizes `[4,8]`, you can fit the packages of size-`2` and size-`3` into two boxes of size-`4` and the package with size-`5` into a box of size-`8`. This would result in a waste of `(4-2) + (4-3) + (8-5) = 6`. Return _the **minimum total wasted space** by choosing the box supplier **optimally**, or_ `-1` _if it is **impossible** to fit all the packages inside boxes._ Since the answer may be **large**, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "packages = \\[2,3,5\\], boxes = \\[\\[4,8\\],\\[2,8\\]\\]",
        "output": "6"
      },
      {
        "input": "packages = \\[2,3,5\\], boxes = \\[\\[1,4\\],\\[2,3\\],\\[3,4\\]\\]",
        "output": "-1",
        "explanation": "There is no box that the package of size 5 can fit in."
      },
      {
        "input": "packages = \\[3,5,8,10,11,12\\], boxes = \\[\\[12\\],\\[11,9\\],\\[10,5,14\\]\\]",
        "output": "9",
        "explanation": "It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes."
      }
    ],
    "constraints": [
      "`n == packages.length`",
      "`m == boxes.length`",
      "`1 <= n <= 105`",
      "`1 <= m <= 105`",
      "`1 <= packages[i] <= 105`",
      "`1 <= boxes[j].length <= 105`",
      "`1 <= boxes[j][k] <= 105`",
      "`sum(boxes[j].length) <= 105`",
      "The elements in `boxes[j]` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1893",
    "slug": "check-if-all-the-integers-in-a-range-are-covered",
    "title": "Check if All the Integers in a Range Are Covered",
    "difficulty": "Easy",
    "description": "You are given a 2D integer array `ranges` and two integers `left` and `right`. Each `ranges[i] = [starti, endi]` represents an **inclusive** interval between `starti` and `endi`. Return `true` _if each integer in the inclusive range_ `[left, right]` _is covered by **at least one** interval in_ `ranges`. Return `false` _otherwise_. An integer `x` is covered by an interval `ranges[i] = [starti, endi]` if `starti <= x <= endi`.",
    "examples": [
      {
        "input": "ranges = \\[\\[1,2\\],\\[3,4\\],\\[5,6\\]\\], left = 2, right = 5",
        "output": "true",
        "explanation": "Every integer between 2 and 5 is covered:"
      },
      {
        "input": "ranges = \\[\\[1,10\\],\\[10,20\\]\\], left = 21, right = 21",
        "output": "false",
        "explanation": "21 is not covered by any range."
      }
    ],
    "constraints": [
      "`1 <= ranges.length <= 50`",
      "`1 <= starti <= endi <= 50`",
      "`1 <= left <= right <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1894",
    "slug": "find-the-student-that-will-replace-the-chalk",
    "title": "Find the Student that Will Replace the Chalk",
    "difficulty": "Medium",
    "description": "There are `n` students in a class numbered from `0` to `n - 1`. The teacher will give each student a problem starting with the student number `0`, then the student number `1`, and so on until the teacher reaches the student number `n - 1`. After that, the teacher will restart the process, starting with the student number `0` again. You are given a **0-indexed** integer array `chalk` and an integer `k`. There are initially `k` pieces of chalk. When the student number `i` is given a problem to solve, they will use `chalk[i]` pieces of chalk to solve that problem. However, if the current number of chalk pieces is **strictly less** than `chalk[i]`, then the student number `i` will be asked to **replace** the chalk. Return _the **index** of the student that will **replace** the chalk pieces_.",
    "examples": [
      {
        "input": "chalk = \\[5,1,5\\], k = 22",
        "output": "0",
        "explanation": "The students go in turns as follows:"
      },
      {
        "input": "chalk = \\[3,4,1,2\\], k = 25",
        "output": "1",
        "explanation": "The students go in turns as follows:"
      }
    ],
    "constraints": [
      "`chalk.length == n`",
      "`1 <= n <= 105`",
      "`1 <= chalk[i] <= 105`",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1895",
    "slug": "largest-magic-square",
    "title": "Largest Magic Square",
    "difficulty": "Medium",
    "description": "A `k x k` **magic square** is a `k x k` grid filled with integers such that every row sum, every column sum, and both diagonal sums are **all equal**. The integers in the magic square **do not have to be distinct**. Every `1 x 1` grid is trivially a **magic square**. Given an `m x n` integer `grid`, return _the **size** (i.e., the side length_ `k`_) of the **largest magic square** that can be found within this grid_.",
    "examples": [
      {
        "input": "grid = \\[\\[7,1,4,5,6\\],\\[2,5,1,6,4\\],\\[1,5,4,3,2\\],\\[1,2,7,3,4\\]\\]",
        "output": "3",
        "explanation": "The largest magic square has a size of 3."
      },
      {
        "input": "grid = \\[\\[5,1,3,1\\],\\[9,3,3,1\\],\\[1,3,3,8\\]\\]",
        "output": "2"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 50`",
      "`1 <= grid[i][j] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1896",
    "slug": "minimum-cost-to-change-the-final-value-of-expression",
    "title": "Minimum Cost to Change the Final Value of Expression",
    "difficulty": "Hard",
    "description": "You are given a **valid** boolean expression as a string `expression` consisting of the characters `'1'`,`'0'`,`'&'` (bitwise **AND** operator),`'|'` (bitwise **OR** operator),`'('`, and `')'`. *  For example, `\"()1|1 \"` and `\"(1)&() \"` are **not valid** while `\"1 \"`, `\"(((1))|(0)) \"`, and `\"1|(0&(1)) \"` are **valid** expressions. Return _the **minimum cost** to change the final value of the expression_. *  For example, if `expression = \"1|1|(0&0)&1 \"`, its **value** is `1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1`. We want to apply operations so that the **new** expression evaluates to `0`. The **cost** of changing the final value of an expression is the **number of operations** performed on the expression. The types of **operations** are described as follows: *  Turn a `'1'` into a `'0'`. *  Turn a `'0'` into a `'1'`. *  Turn a `'&'` into a `'|'`. *  Turn a `'|'` into a `'&'`.",
    "examples": [
      {
        "input": "expression =  \"1&(0|1) \"",
        "output": "1",
        "explanation": "We can turn  \"1&(0**|**1) \" into  \"1&(0**&**1) \" by changing the '|' to a '&' using 1 operation."
      },
      {
        "input": "expression =  \"(0&0)&(0&0&0) \"",
        "output": "3",
        "explanation": "We can turn  \"(0**&0**)**&**(0&0&0) \" into  \"(0**|1**)**|**(0&0&0) \" using 3 operations."
      },
      {
        "input": "expression =  \"(0|(1|0&1)) \"",
        "output": "1",
        "explanation": "We can turn  \"(0|(**1**|0&1)) \" into  \"(0|(**0**|0&1)) \" using 1 operation."
      }
    ],
    "constraints": [
      "`1 <= expression.length <= 105`",
      "`expression` only contains `'1'`,`'0'`,`'&'`,`'|'`,`'('`, and `')'`",
      "All parentheses are properly matched.",
      "There will be no empty parentheses (i.e: `\"() \"` is not a substring of `expression`)."
    ],
    "note": "`'&'` does **not** take precedence over `'|'` in the **order of calculation**. Evaluate parentheses **first**, then in **left-to-right** order.",
    "follow_up": null
  },
  {
    "id": "1897",
    "slug": "redistribute-characters-to-make-all-strings-equal",
    "title": "Redistribute Characters to Make All Strings Equal",
    "difficulty": "Easy",
    "description": "You are given an array of strings `words` (**0-indexed**). In one operation, pick two **distinct** indices `i` and `j`, where `words[i]` is a non-empty string, and move **any** character from `words[i]` to **any** position in `words[j]`. Return `true` _if you can make **every** string in_ `words` _**equal** using **any** number of operations_, _and_ `false` _otherwise_.",
    "examples": [
      {
        "input": "words = \\[ \"abc \", \"aabc \", \"bc \"\\]",
        "output": "true",
        "explanation": "Move the first 'a' in `words[1] to the front of words[2], to make` `words[1]` =  \"abc \" and words\\[2\\] =  \"abc \"."
      },
      {
        "input": "words = \\[ \"ab \", \"a \"\\]",
        "output": "false",
        "explanation": "It is impossible to make all the strings equal using the operation."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 100`",
      "`words[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1898",
    "slug": "maximum-number-of-removable-characters",
    "title": "Maximum Number of Removable Characters",
    "difficulty": "Medium",
    "description": "You are given two strings `s` and `p` where `p` is a **subsequence** of `s`. You are also given a **distinct 0-indexed** integer array `removable` containing a subset of indices of `s` (`s` is also **0-indexed**). You want to choose an integer `k` (`0 <= k <= removable.length`) such that, after removing `k` characters from `s` using the **first** `k` indices in `removable`, `p` is still a **subsequence** of `s`. More formally, you will mark the character at `s[removable[i]]` for each `0 <= i < k`, then remove all marked characters and check if `p` is still a subsequence. Return _the **maximum**_ `k` _you can choose such that_ `p` _is still a **subsequence** of_ `s` _after the removals_. A **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.",
    "examples": [
      {
        "input": "s =  \"abcacb \", p =  \"ab \", removable = \\[3,1,0\\]",
        "output": "2"
      },
      {
        "input": "s =  \"abcbddddd \", p =  \"abcd \", removable = \\[3,2,1,4,5,6\\]",
        "output": "1"
      },
      {
        "input": "s =  \"abcab \", p =  \"abc \", removable = \\[0,1,2,3,4\\]",
        "output": "0"
      }
    ],
    "constraints": [
      "`1 <= p.length <= s.length <= 105`",
      "`0 <= removable.length < s.length`",
      "`0 <= removable[i] < s.length`",
      "`p` is a subsequence of `s`.",
      "`s` and `p` both consist of lowercase English letters.",
      "The elements in `removable` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1899",
    "slug": "merge-triplets-to-form-target-triplet",
    "title": "Merge Triplets to Form Target Triplet",
    "difficulty": "Medium",
    "description": "A **triplet** is an array of three integers. You are given a 2D integer array `triplets`, where `triplets[i] = [ai, bi, ci]` describes the `ith` **triplet**. You are also given an integer array `target = [x, y, z]` that describes the **triplet** you want to obtain. To obtain `target`, you may apply the following operation on `triplets` **any number** of times (possibly **zero**): *  Choose two indices (**0-indexed**) `i` and `j` (`i != j`) and **update** `triplets[j]` to become `[max(ai, aj), max(bi, bj), max(ci, cj)]`. *  For example, if `triplets[i] = [2, 5, 3]` and `triplets[j] = [1, 7, 5]`, `triplets[j]` will be updated to `[max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]`. Return `true` _if it is possible to obtain the_ `target` _**triplet**_ `[x, y, z]` _as an **element** of_ `triplets`_, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "triplets = \\[\\[2,5,3\\],\\[1,8,4\\],\\[1,7,5\\]\\], target = \\[2,7,5\\]",
        "output": "true",
        "explanation": "Perform the following operations:"
      },
      {
        "input": "triplets = \\[\\[3,4,5\\],\\[4,5,6\\]\\], target = \\[3,2,5\\]",
        "output": "false",
        "explanation": "It is impossible to have \\[3,2,5\\] as an element because there is no 2 in any of the triplets."
      },
      {
        "input": "triplets = \\[\\[2,5,3\\],\\[2,3,4\\],\\[1,2,5\\],\\[5,2,3\\]\\], target = \\[5,5,5\\]",
        "output": "true",
        "explanation": "Perform the following operations:"
      }
    ],
    "constraints": [
      "`1 <= triplets.length <= 105`",
      "`triplets[i].length == target.length == 3`",
      "`1 <= ai, bi, ci, x, y, z <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1900",
    "slug": "the-earliest-and-latest-rounds-where-players-compete",
    "title": "The Earliest and Latest Rounds Where Players Compete",
    "difficulty": "Hard",
    "description": "There is a tournament where `n` players are participating. The players are standing in a single row and are numbered from `1` to `n` based on their **initial** standing position (player `1` is the first player in the row, player `2` is the second player in the row, etc.). The tournament consists of multiple rounds (starting from round number `1`). In each round, the `ith` player from the front of the row competes against the `ith` player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round. *  For example, if the row consists of players `1, 2, 4, 6, 7` *  Player `1` competes against player `7`. *  Player `2` competes against player `6`. *  Player `4` automatically advances to the next round. After each round is over, the winners are lined back up in the row based on the **original ordering** assigned to them initially (ascending order). The players numbered `firstPlayer` and `secondPlayer` are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may **choose** the outcome of this round. Given the integers `n`, `firstPlayer`, and `secondPlayer`, return _an integer array containing two values, the **earliest** possible round number and the **latest** possible round number in which these two players will compete against each other, respectively_.",
    "examples": [
      {
        "input": "n = 11, firstPlayer = 2, secondPlayer = 4",
        "output": "\\[3,4\\]",
        "explanation": ""
      },
      {
        "input": "n = 5, firstPlayer = 1, secondPlayer = 5",
        "output": "\\[1,1\\]",
        "explanation": "The players numbered 1 and 5 compete in the first round."
      }
    ],
    "constraints": [
      "`2 <= n <= 28`",
      "`1 <= firstPlayer < secondPlayer <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1901",
    "slug": "find-a-peak-element-ii",
    "title": "Find a Peak Element II",
    "difficulty": "Medium",
    "description": "A **peak** element in a 2D grid is an element that is **strictly greater** than all of its **adjacent** neighbors to the left, right, top, and bottom. Given a **0-indexed** `m x n` matrix `mat` where **no two adjacent cells are equal**, find **any** peak element `mat[i][j]` and return _the length 2 array_ `[i,j]`. You may assume that the entire matrix is surrounded by an **outer perimeter** with the value `-1` in each cell. You must write an algorithm that runs in `O(m log(n))` or `O(n log(m))` time.",
    "examples": [
      {
        "input": "mat = \\[\\[1,4\\],\\[3,2\\]\\]",
        "output": "\\[0,1\\]",
        "explanation": "Both 3 and 4 are peak elements so \\[1,0\\] and \\[0,1\\] are both acceptable answers."
      },
      {
        "input": "mat = \\[\\[10,20,15\\],\\[21,30,14\\],\\[7,16,32\\]\\]",
        "output": "\\[1,1\\]",
        "explanation": "Both 30 and 32 are peak elements so \\[1,1\\] and \\[2,2\\] are both acceptable answers."
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 500`",
      "`1 <= mat[i][j] <= 105`",
      "No two adjacent cells are equal."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1902",
    "slug": "depth-of-bst-given-insertion-order",
    "title": "Depth of BST Given Insertion Order",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `order` of length `n`, a **permutation** of integers from `1` to `n` representing the **order** of insertion into a **binary search tree**. A binary search tree is defined as follows: *  The left subtree of a node contains only nodes with keys **less than** the node's key. *  The right subtree of a node contains only nodes with keys **greater than** the node's key. *  Both the left and right subtrees must also be binary search trees. The binary search tree is constructed as follows: *  `order[0]` will be the **root** of the binary search tree. *  All subsequent elements are inserted as the **child** of **any** existing node such that the binary search tree properties hold. Return _the **depth** of the binary search tree_. A binary tree's **depth** is the number of **nodes** along the **longest path** from the root node down to the farthest leaf node.",
    "examples": [
      {
        "input": "order = \\[2,1,4,3\\]",
        "output": "3",
        "explanation": "The binary search tree has a depth of 3 with path 2->3->4."
      },
      {
        "input": "order = \\[2,1,3,4\\]",
        "output": "3",
        "explanation": "The binary search tree has a depth of 3 with path 2->3->4."
      },
      {
        "input": "order = \\[1,2,3,4\\]",
        "output": "4",
        "explanation": "The binary search tree has a depth of 4 with path 1->2->3->4."
      }
    ],
    "constraints": [
      "`n == order.length`",
      "`1 <= n <= 105`",
      "`order` is a permutation of integers between `1` and `n`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1903",
    "slug": "largest-odd-number-in-string",
    "title": "Largest Odd Number in String",
    "difficulty": "Easy",
    "description": "You are given a string `num`, representing a large integer. Return _the **largest-valued odd** integer (as a string) that is a **non-empty substring** of_ `num`_, or an empty string_ `\" \"` _if no odd integer exists_. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "num =  \"52 \"",
        "output": "\"5 \"",
        "explanation": "The only non-empty substrings are  \"5 \",  \"2 \", and  \"52 \".  \"5 \" is the only odd number."
      },
      {
        "input": "num =  \"4206 \"",
        "output": "\" \"",
        "explanation": "There are no odd numbers in  \"4206 \"."
      },
      {
        "input": "num =  \"35427 \"",
        "output": "\"35427 \"",
        "explanation": "\"35427 \" is already an odd number."
      }
    ],
    "constraints": [
      "`1 <= num.length <= 105`",
      "`num` only consists of digits and does not contain any leading zeros."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1904",
    "slug": "the-number-of-full-rounds-you-have-played",
    "title": "The Number of Full Rounds You Have Played",
    "difficulty": "Medium",
    "description": "You are participating in an online chess tournament. There is a chess round that starts every `15` minutes. The first round of the day starts at `00:00`, and after every `15` minutes, a new round starts. *  For example, the second round starts at `00:15`, the fourth round starts at `00:45`, and the seventh round starts at `01:30`. You are given two strings `loginTime` and `logoutTime` where: *  `loginTime` is the time you will login to the game, and *  `logoutTime` is the time you will logout from the game. If `logoutTime` is **earlier** than `loginTime`, this means you have played from `loginTime` to midnight and from midnight to `logoutTime`. Return _the number of full chess rounds you have played in the tournament_.",
    "examples": [
      {
        "input": "loginTime =  \"09:31 \", logoutTime =  \"10:14 \"",
        "output": "1",
        "explanation": "You played one full round from 09:45 to 10:00."
      },
      {
        "input": "loginTime =  \"21:30 \", logoutTime =  \"03:00 \"",
        "output": "22",
        "explanation": "You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00."
      }
    ],
    "constraints": [
      "`loginTime` and `logoutTime` are in the format `hh:mm`.",
      "`00 <= hh <= 23`",
      "`00 <= mm <= 59`",
      "`loginTime` and `logoutTime` are not equal."
    ],
    "note": "All the given times follow the 24-hour clock. That means the first round of the day starts at `00:00` and the last round of the day starts at `23:45`.",
    "follow_up": null
  },
  {
    "id": "1905",
    "slug": "count-sub-islands",
    "title": "Count Sub Islands",
    "difficulty": "Medium",
    "description": "You are given two `m x n` binary matrices `grid1` and `grid2` containing only `0`'s (representing water) and `1`'s (representing land). An **island** is a group of `1`'s connected **4-directionally** (horizontal or vertical). Any cells outside of the grid are considered water cells. An island in `grid2` is considered a **sub-island** if there is an island in `grid1` that contains **all** the cells that make up **this** island in `grid2`. Return the _**number** of islands in_ `grid2` _that are considered **sub-islands**_.",
    "examples": [
      {
        "input": "grid1 = \\[\\[1,1,1,0,0\\],\\[0,1,1,1,1\\],\\[0,0,0,0,0\\],\\[1,0,0,0,0\\],\\[1,1,0,1,1\\]\\], grid2 = \\[\\[1,1,1,0,0\\],\\[0,0,1,1,1\\],\\[0,1,0,0,0\\],\\[1,0,1,1,0\\],\\[0,1,0,1,0\\]\\]",
        "output": "3",
        "explanation": "In the picture above, the grid on the left is grid1 and the grid on the right is grid2."
      },
      {
        "input": "grid1 = \\[\\[1,0,1,0,1\\],\\[1,1,1,1,1\\],\\[0,0,0,0,0\\],\\[1,1,1,1,1\\],\\[1,0,1,0,1\\]\\], grid2 = \\[\\[0,0,0,0,0\\],\\[1,1,1,1,1\\],\\[0,1,0,1,0\\],\\[0,1,0,1,0\\],\\[1,0,0,0,1\\]\\]",
        "output": "2",
        "explanation": "In the picture above, the grid on the left is grid1 and the grid on the right is grid2."
      }
    ],
    "constraints": [
      "`m == grid1.length == grid2.length`",
      "`n == grid1[i].length == grid2[i].length`",
      "`1 <= m, n <= 500`",
      "`grid1[i][j]` and `grid2[i][j]` are either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1906",
    "slug": "minimum-absolute-difference-queries",
    "title": "Minimum Absolute Difference Queries",
    "difficulty": "Medium",
    "description": "The **minimum absolute difference** of an array `a` is defined as the **minimum value** of `|a[i] - a[j]|`, where `0 <= i < j < a.length` and `a[i] != a[j]`. If all elements of `a` are the **same**, the minimum absolute difference is `-1`. *  For example, the minimum absolute difference of the array `[5,2,3,7,2]` is `|2 - 3| = 1`. Note that it is not `0` because `a[i]` and `a[j]` must be different. You are given an integer array `nums` and the array `queries` where `queries[i] = [li, ri]`. For each query `i`, compute the **minimum absolute difference** of the **subarray** `nums[li...ri]` containing the elements of `nums` between the **0-based** indices `li` and `ri` (**inclusive**). Return _an **array**_ `ans` _where_ `ans[i]` _is the answer to the_ `ith` _query_. A **subarray** is a contiguous sequence of elements in an array. The value of `|x|` is defined as: *  `x` if `x >= 0`. *  `-x` if `x < 0`.",
    "examples": [
      {
        "input": "nums = \\[1,3,4,8\\], queries = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[0,3\\]\\]",
        "output": "\\[2,1,4,1\\]",
        "explanation": "The queries are processed as follows:"
      },
      {
        "input": "nums = \\[4,5,2,2,7,10\\], queries = \\[\\[2,3\\],\\[0,2\\],\\[0,5\\],\\[3,5\\]\\]",
        "output": "\\[-1,1,1,3\\]",
        "explanation": "The queries are processed as follows:"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`1 <= nums[i] <= 100`",
      "`1 <= queries.length <= 2  104`",
      "`0 <= li < ri < nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1908",
    "slug": "game-of-nim",
    "title": "Game of Nim",
    "difficulty": "Medium",
    "description": "Alice and Bob take turns playing a game with **Alice starting first**. In this game, there are `n` piles of stones. On each player's turn, the player should remove any **positive** number of stones from a non-empty pile **of his or her choice**. The first player who cannot make a move loses, and the other player wins. Given an integer array `piles`, where `piles[i]` is the number of stones in the `ith` pile, return `true` _if Alice wins, or_ `false` _if Bob wins_. Both Alice and Bob play **optimally**.",
    "examples": [
      {
        "input": "piles = \\[1\\]",
        "output": "true",
        "explanation": "There is only one possible scenario:"
      },
      {
        "input": "piles = \\[1,1\\]",
        "output": "false",
        "explanation": "It can be proven that Bob will always win. One possible scenario is:"
      },
      {
        "input": "piles = \\[1,2,3\\]",
        "output": "false",
        "explanation": "It can be proven that Bob will always win. One possible scenario is:"
      }
    ],
    "constraints": [
      "`n == piles.length`",
      "`1 <= n <= 7`",
      "`1 <= piles[i] <= 7`"
    ],
    "note": null,
    "follow_up": "Could you find a linear time solution? Although the linear time solution may be beyond the scope of an interview, it could be interesting to know."
  },
  {
    "id": "1909",
    "slug": "remove-one-element-to-make-the-array-strictly-increasing",
    "title": "Remove One Element to Make the Array Strictly Increasing",
    "difficulty": "Easy",
    "description": "Given a **0-indexed** integer array `nums`, return `true` _if it can be made **strictly increasing** after removing **exactly one** element, or_ `false` _otherwise. If the array is already strictly increasing, return_ `true`. The array `nums` is **strictly increasing** if `nums[i - 1] < nums[i]` for each index `(1 <= i < nums.length).`",
    "examples": [
      {
        "input": "nums = \\[1,2,10,5,7\\]",
        "output": "true",
        "explanation": "By removing 10 at index 2 from nums, it becomes \\[1,2,5,7\\]."
      },
      {
        "input": "nums = \\[2,3,1,2\\]",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,1,1\\]",
        "output": "false",
        "explanation": "The result of removing any element is \\[1,1\\]."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1910",
    "slug": "remove-all-occurrences-of-a-substring",
    "title": "Remove All Occurrences of a Substring",
    "difficulty": "Medium",
    "description": "Given two strings `s` and `part`, perform the following operation on `s` until **all** occurrences of the substring `part` are removed: *  Find the **leftmost** occurrence of the substring `part` and **remove** it from `s`. Return `s` _after removing all occurrences of_ `part`. A **substring** is a contiguous sequence of characters in a string.",
    "examples": [
      {
        "input": "s =  \"daabcbaabcbc \", part =  \"abc \"",
        "output": "\"dab \""
      },
      {
        "input": "s =  \"axxxxyyyyb \", part =  \"xy \"",
        "output": "\"ab \""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`1 <= part.length <= 1000`",
      "`s`\u200b\u200b\u200b\u200b\u200b\u200b and `part` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1911",
    "slug": "maximum-alternating-subsequence-sum",
    "title": "Maximum Alternating Subsequence Sum",
    "difficulty": "Medium",
    "description": "The **alternating sum** of a **0-indexed** array is defined as the **sum** of the elements at **even** indices **minus** the **sum** of the elements at **odd** indices. *  For example, the alternating sum of `[4,2,5,3]` is `(4 + 5) - (2 + 3) = 4`. Given an array `nums`, return _the **maximum alternating sum** of any subsequence of_ `nums` _(after **reindexing** the elements of the subsequence)_. A **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.",
    "examples": [
      {
        "input": "nums = \\[4,2,5,3\\]",
        "output": "7",
        "explanation": "It is optimal to choose the subsequence \\[4,2,5\\] with alternating sum (4 + 5) - 2 = 7."
      },
      {
        "input": "nums = \\[5,6,7,8\\]",
        "output": "8",
        "explanation": "It is optimal to choose the subsequence \\[8\\] with alternating sum 8."
      },
      {
        "input": "nums = \\[6,2,1,2,4,5\\]",
        "output": "10",
        "explanation": "It is optimal to choose the subsequence \\[6,1,5\\] with alternating sum (6 + 5) - 1 = 10."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1912",
    "slug": "design-movie-rental-system",
    "title": "Design Movie Rental System",
    "difficulty": "Hard",
    "description": "You have a movie renting company consisting of `n` shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies. Each movie is given as a 2D integer array `entries` where `entries[i] = [shopi, moviei, pricei]` indicates that there is a copy of movie `moviei` at shop `shopi` with a rental price of `pricei`. Each shop carries **at most one** copy of a movie `moviei`. The system should support the following functions: *  **Search**: Finds the **cheapest 5 shops** that have an **unrented copy** of a given movie. The shops should be sorted by **price** in ascending order, and in case of a tie, the one with the **smaller** `shopi` should appear first. If there are less than 5 matching shops, then all of them should be returned. If no shop has an unrented copy, then an empty list should be returned. *  **Rent**: Rents an **unrented copy** of a given movie from a given shop. *  **Drop**: Drops off a **previously rented copy** of a given movie at a given shop. *  **Report**: Returns the **cheapest 5 rented movies** (possibly of the same movie ID) as a 2D list `res` where `res[j] = [shopj, moviej]` describes that the `jth` cheapest rented movie `moviej` was rented from the shop `shopj`. The movies in `res` should be sorted by **price** in ascending order, and in case of a tie, the one with the **smaller** `shopj` should appear first, and if there is still tie, the one with the **smaller** `moviej` should appear first. If there are fewer than 5 rented movies, then all of them should be returned. If no movies are currently being rented, then an empty list should be returned. Implement the `MovieRentingSystem` class: *  `MovieRentingSystem(int n, int[][] entries)` Initializes the `MovieRentingSystem` object with `n` shops and the movies in `entries`. *  `List search(int movie)` Returns a list of shops that have an **unrented copy** of the given `movie` as described above. *  `void rent(int shop, int movie)` Rents the given `movie` from the given `shop`. *  `void drop(int shop, int movie)` Drops off a previously rented `movie` at the given `shop`. *  `List> report()` Returns a list of cheapest **rented** movies as described above.",
    "examples": [],
    "constraints": [
      "`1 <= n <= 3  105`",
      "`1 <= entries.length <= 105`",
      "`0 <= shopi < n`",
      "`1 <= moviei, pricei <= 104`",
      "Each shop carries at most one copy of a movie `moviei`.",
      "At most `105` calls in total will be made to `search`, `rent`, `drop` and `report`."
    ],
    "note": "The test cases will be generated such that `rent` will only be called if the shop has an **unrented** copy of the movie, and `drop` will only be called if the shop had **previously rented** out the movie.",
    "follow_up": null
  },
  {
    "id": "1913",
    "slug": "maximum-product-difference-between-two-pairs",
    "title": "Maximum Product Difference Between Two Pairs",
    "difficulty": "Easy",
    "description": "The **product difference** between two pairs `(a, b)` and `(c, d)` is defined as `(a * b) - (c * d)`. *  For example, the product difference between `(5, 6)` and `(2, 7)` is `(5 * 6) - (2 * 7) = 16`. Given an integer array `nums`, choose four **distinct** indices `w`, `x`, `y`, and `z` such that the **product difference** between pairs `(nums[w], nums[x])` and `(nums[y], nums[z])` is **maximized**. Return _the **maximum** such product difference_.",
    "examples": [
      {
        "input": "nums = \\[5,6,2,7,4\\]",
        "output": "34",
        "explanation": "We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4)."
      },
      {
        "input": "nums = \\[4,2,5,9,7,4,8\\]",
        "output": "64",
        "explanation": "We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4)."
      }
    ],
    "constraints": [
      "`4 <= nums.length <= 104`",
      "`1 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1914",
    "slug": "cyclically-rotating-a-grid",
    "title": "Cyclically Rotating a Grid",
    "difficulty": "Medium",
    "description": "You are given an `m x n` integer matrix `grid`\u200b\u200b\u200b, where `m` and `n` are both **even** integers, and an integer `k`. The matrix is composed of several layers, which is shown in the below image, where each color is its own layer: A cyclic rotation of the matrix is done by cyclically rotating **each layer** in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the **counter-clockwise** direction. An example rotation is shown below: Return _the matrix after applying_ `k` _cyclic rotations to it_.",
    "examples": [
      {
        "input": "grid = \\[\\[40,10\\],\\[30,20\\]\\], k = 1",
        "output": "\\[\\[10,20\\],\\[40,30\\]\\]",
        "explanation": "The figures above represent the grid at every state."
      },
      {
        "input": "grid = \\[\\[1,2,3,4\\],\\[5,6,7,8\\],\\[9,10,11,12\\],\\[13,14,15,16\\]\\], k = 2",
        "output": "\\[\\[3,4,8,12\\],\\[2,11,10,16\\],\\[1,7,6,15\\],\\[5,9,13,14\\]\\]",
        "explanation": "The figures above represent the grid at every state."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`2 <= m, n <= 50`",
      "Both `m` and `n` are even integers.",
      "`1 <= grid[i][j] <= 5000`",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1915",
    "slug": "number-of-wonderful-substrings",
    "title": "Number of Wonderful Substrings",
    "difficulty": "Medium",
    "description": "A **wonderful** string is a string where **at most one** letter appears an **odd** number of times. *  For example, `\"ccjjc \"` and `\"abab \"` are wonderful, but `\"ab \"` is not. Given a string `word` that consists of the first ten lowercase English letters (`'a'` through `'j'`), return _the **number of wonderful non-empty substrings** in_ `word`_. If the same substring appears multiple times in_ `word`_, then count **each occurrence** separately._ A **substring** is a contiguous sequence of characters in a string.",
    "examples": [
      {
        "input": "word =  \"aba \"",
        "output": "4",
        "explanation": "The four wonderful substrings are underlined below:"
      },
      {
        "input": "word =  \"aabb \"",
        "output": "9",
        "explanation": "The nine wonderful substrings are underlined below:"
      },
      {
        "input": "word =  \"he \"",
        "output": "2",
        "explanation": "The two wonderful substrings are underlined below:"
      }
    ],
    "constraints": [
      "`1 <= word.length <= 105`",
      "`word` consists of lowercase English letters from `'a'` to `'j'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1916",
    "slug": "count-ways-to-build-rooms-in-an-ant-colony",
    "title": "Count Ways to Build Rooms in an Ant Colony",
    "difficulty": "Hard",
    "description": "You are an ant tasked with adding `n` new rooms numbered `0` to `n-1` to your colony. You are given the expansion plan as a **0-indexed** integer array of length `n`, `prevRoom`, where `prevRoom[i]` indicates that you must build room `prevRoom[i]` before building room `i`, and these two rooms must be connected **directly**. Room `0` is already built, so `prevRoom[0] = -1`. The expansion plan is given such that once all the rooms are built, every room will be reachable from room `0`. You can only build **one room** at a time, and you can travel freely between rooms you have **already built** only if they are **connected**. You can choose to build **any room** as long as its **previous room** is already built. Return _the **number of different orders** you can build all the rooms in_. Since the answer may be large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "prevRoom = \\[-1,0,1\\]",
        "output": "1",
        "explanation": "There is only one way to build the additional rooms: 0 -> 1 -> 2"
      },
      {
        "input": "prevRoom = \\[-1,0,0,1,2\\]",
        "output": "6",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == prevRoom.length`",
      "`2 <= n <= 105`",
      "`prevRoom[0] == -1`",
      "`0 <= prevRoom[i] < n` for all `1 <= i < n`",
      "Every room is reachable from room `0` once all the rooms are built."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1918",
    "slug": "kth-smallest-subarray-sum",
    "title": "Kth Smallest Subarray Sum",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` of length `n` and an integer `k`, return _the_ `kth` _**smallest subarray sum**._ A **subarray** is defined as a **non-empty** contiguous sequence of elements in an array. A **subarray sum** is the sum of all elements in the subarray.",
    "examples": [
      {
        "input": "nums = \\[2,1,3\\], k = 4",
        "output": "3",
        "explanation": "The subarrays of \\[2,1,3\\] are:"
      },
      {
        "input": "nums = \\[3,3,5,5\\], k = 7",
        "output": "10",
        "explanation": "The subarrays of \\[3,3,5,5\\] are:"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 2  104`",
      "`1 <= nums[i] <= 5  104`",
      "`1 <= k <= n  (n + 1) / 2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1920",
    "slug": "build-array-from-permutation",
    "title": "Build Array from Permutation",
    "difficulty": "Easy",
    "description": "Given a **zero-based permutation** `nums` (**0-indexed**), build an array `ans` of the **same length** where `ans[i] = nums[nums[i]]` for each `0 <= i < nums.length` and return it. A **zero-based permutation** `nums` is an array of **distinct** integers from `0` to `nums.length - 1` (**inclusive**).",
    "examples": [
      {
        "input": "nums = \\[0,2,1,5,3,4\\]",
        "output": "\\[0,1,2,4,5,3\\]",
        "explanation": "The array ans is built as follows:"
      },
      {
        "input": "nums = \\[5,0,1,2,3,4\\]",
        "output": "\\[4,5,0,1,2,3\\]",
        "explanation": "The array ans is built as follows:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] < nums.length`",
      "The elements in `nums` are distinct."
    ],
    "note": null,
    "follow_up": "Can you solve it without using an extra space (i.e., `O(1)` memory)?"
  },
  {
    "id": "1921",
    "slug": "eliminate-maximum-number-of-monsters",
    "title": "Eliminate Maximum Number of Monsters",
    "difficulty": "Medium",
    "description": "You are playing a video game where you are defending your city from a group of `n` monsters. You are given a **0-indexed** integer array `dist` of size `n`, where `dist[i]` is the **initial distance** in kilometers of the `ith` monster from the city. The monsters walk toward the city at a **constant** speed. The speed of each monster is given to you in an integer array `speed` of size `n`, where `speed[i]` is the speed of the `ith` monster in kilometers per minute. You have a weapon that, once fully charged, can eliminate a **single** monster. However, the weapon takes **one minute** to charge.The weapon is fully charged at the very start. You lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a **loss**, and the game ends before you can use your weapon. Return _the **maximum** number of monsters that you can eliminate before you lose, or_ `n` _if you can eliminate all the monsters before they reach the city._",
    "examples": [
      {
        "input": "dist = \\[1,3,4\\], speed = \\[1,1,1\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "dist = \\[1,1,2,3\\], speed = \\[1,1,1,1\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "dist = \\[3,2,4\\], speed = \\[5,3,2\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == dist.length == speed.length`",
      "`1 <= n <= 105`",
      "`1 <= dist[i], speed[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1922",
    "slug": "count-good-numbers",
    "title": "Count Good Numbers",
    "difficulty": "Medium",
    "description": "A digit string is **good** if the digits **(0-indexed)** at **even** indices are **even** and the digits at **odd** indices are **prime** (`2`, `3`, `5`, or `7`). *  For example, `\"2582 \"` is good because the digits (`2` and `8`) at even positions are even and the digits (`5` and `2`) at odd positions are prime. However, `\"3245 \"` is **not** good because `3` is at an even index but is not even. Given an integer `n`, return _the **total** number of good digit strings of length_ `n`. Since the answer may be large, **return it modulo** `109 + 7`. A **digit string** is a string consisting of digits `0` through `9` that may contain leading zeros.",
    "examples": [
      {
        "input": "n = 1",
        "output": "5",
        "explanation": "The good numbers of length 1 are  \"0 \",  \"2 \",  \"4 \",  \"6 \",  \"8 \"."
      },
      {
        "input": "n = 4",
        "output": "400"
      },
      {
        "input": "n = 50",
        "output": "564908303"
      }
    ],
    "constraints": [
      "`1 <= n <= 1015`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1923",
    "slug": "longest-common-subpath",
    "title": "Longest Common Subpath",
    "difficulty": "Hard",
    "description": "There is a country of `n` cities numbered from `0` to `n - 1`. In this country, there is a road connecting **every pair** of cities. There are `m` friends numbered from `0` to `m - 1` who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city **more than once**, but the same city will not be listed consecutively. Given an integer `n` and a 2D integer array `paths` where `paths[i]` is an integer array representing the path of the `ith` friend, return _the length of the **longest common subpath** that is shared by **every** friend's path, or_ `0` _if there is no common subpath at all_. A **subpath** of a path is a contiguous sequence of cities within that path.",
    "examples": [
      {
        "input": "n = 5, paths = \\[\\[0,1,2,3,4\\],",
        "output": "2",
        "explanation": "The longest common subpath is \\[2,3\\]."
      },
      {
        "input": "n = 3, paths = \\[\\[0\\],\\[1\\],\\[2\\]\\]",
        "output": "0",
        "explanation": "There is no common subpath shared by the three paths."
      },
      {
        "input": "n = 5, paths = \\[\\[0,1,2,3,4\\],",
        "output": "1",
        "explanation": "The possible longest common subpaths are \\[0\\], \\[1\\], \\[2\\], \\[3\\], and \\[4\\]. All have a length of 1."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`m == paths.length`",
      "`2 <= m <= 105`",
      "`sum(paths[i].length) <= 105`",
      "`0 <= paths[i][j] < n`",
      "The same city is not listed multiple times consecutively in `paths[i]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1924",
    "slug": "erect-the-fence-ii",
    "title": "Erect the Fence II",
    "difficulty": "Hard",
    "description": "You are given a 2D integer array `trees` where `trees[i] = [xi, yi]` represents the location of the `ith` tree in the garden. You are asked to fence the entire garden using the minimum length of rope possible. The garden is well-fenced only if **all the trees are enclosed** and the rope used **forms a perfect circle**. A tree is considered enclosed if it is inside or on the border of the circle. More formally, you must form a circle using the rope with a center `(x, y)` and radius `r` where all trees lie inside or on the circle and `r` is **minimum**. Return _the center and radius of the circle as a length 3 array_ `[x, y, r]`_._ Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "trees = \\[\\[1,1\\],\\[2,2\\],\\[2,0\\],\\[2,4\\],\\[3,3\\],\\[4,2\\]\\]",
        "output": "\\[2.00000,2.00000,2.00000\\]",
        "explanation": "The fence will have center = (2, 2) and radius = 2"
      },
      {
        "input": "trees = \\[\\[1,2\\],\\[2,2\\],\\[4,2\\]\\]",
        "output": "\\[2.50000,2.00000,1.50000\\]",
        "explanation": "The fence will have center = (2.5, 2) and radius = 1.5"
      }
    ],
    "constraints": [
      "`1 <= trees.length <= 3000`",
      "`trees[i].length == 2`",
      "`0 <= xi, yi <= 3000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1925",
    "slug": "count-square-sum-triples",
    "title": "Count Square Sum Triples",
    "difficulty": "Easy",
    "description": "A **square triple** `(a,b,c)` is a triple where `a`, `b`, and `c` are **integers** and `a2 + b2 = c2`. Given an integer `n`, return _the number of **square triples** such that_ `1 <= a, b, c <= n`.",
    "examples": [
      {
        "input": "n = 5",
        "output": "2"
      },
      {
        "input": "n = 10",
        "output": "4"
      }
    ],
    "constraints": [
      "`1 <= n <= 250`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1926",
    "slug": "nearest-exit-from-entrance-in-maze",
    "title": "Nearest Exit from Entrance in Maze",
    "difficulty": "Medium",
    "description": "You are given an `m x n` matrix `maze` (**0-indexed**) with empty cells (represented as `'.'`) and walls (represented as `'+'`). You are also given the `entrance` of the maze, where `entrance = [entrancerow, entrancecol]` denotes the row and column of the cell you are initially standing at. In one step, you can move one cell **up**, **down**, **left**, or **right**. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the **nearest exit** from the `entrance`. An **exit** is defined as an **empty cell** that is at the **border** of the `maze`. The `entrance` **does not count** as an exit. Return _the **number of steps** in the shortest path from the_ `entrance` _to the nearest exit, or_ `-1` _if no such path exists_.",
    "examples": [
      {
        "input": "maze = \\[\\[ \"+ \", \"+ \", \". \", \"+ \"\\],\\[ \". \", \". \", \". \", \"+ \"\\],\\[ \"+ \", \"+ \", \"+ \", \". \"\\]\\], entrance = \\[1,2\\]",
        "output": "1",
        "explanation": "There are 3 exits in this maze at \\[1,0\\], \\[0,2\\], and \\[2,3\\]."
      },
      {
        "input": "maze = \\[\\[ \"+ \", \"+ \", \"+ \"\\],\\[ \". \", \". \", \". \"\\],\\[ \"+ \", \"+ \", \"+ \"\\]\\], entrance = \\[1,0\\]",
        "output": "2",
        "explanation": "There is 1 exit in this maze at \\[1,2\\]."
      },
      {
        "input": "maze = \\[\\[ \". \", \"+ \"\\]\\], entrance = \\[0,0\\]",
        "output": "-1",
        "explanation": "There are no exits in this maze."
      }
    ],
    "constraints": [
      "`maze.length == m`",
      "`maze[i].length == n`",
      "`1 <= m, n <= 100`",
      "`maze[i][j]` is either `'.'` or `'+'`.",
      "`entrance.length == 2`",
      "`0 <= entrancerow < m`",
      "`0 <= entrancecol < n`",
      "`entrance` will always be an empty cell."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1927",
    "slug": "sum-game",
    "title": "Sum Game",
    "difficulty": "Medium",
    "description": "Alice and Bob take turns playing a game, with **Alice** **starting first**. You are given a string `num` of **even length** consisting of digits and `'?'` characters. On each turn, a player will do the following if there is still at least one `'?'` in `num`: 1. Choose an index `i` where `num[i] == '?'`. 2. Replace `num[i]` with any digit between `'0'` and `'9'`. The game ends when there are no more `'?'` characters in `num`. For Bob to win, the sum of the digits in the first half of `num` must be **equal** to the sum of the digits in the second half. For Alice to win, the sums must **not be equal**. *  For example, if the game ended with `num = \"243801 \"`, then Bob wins because `2+4+3 = 8+0+1`. If the game ended with `num = \"243803 \"`, then Alice wins because `2+4+3 != 8+0+3`. Assuming Alice and Bob play **optimally**, return `true` _if Alice will win and_ `false` _if Bob will win_.",
    "examples": [
      {
        "input": "num =  \"5023 \"",
        "output": "false",
        "explanation": "There are no moves to be made."
      },
      {
        "input": "num =  \"25?? \"",
        "output": "true",
        "explanation": "Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal."
      },
      {
        "input": "num =  \"?3295??? \"",
        "output": "false",
        "explanation": "It can be proven that Bob will always win. One possible outcome is:"
      }
    ],
    "constraints": [
      "`2 <= num.length <= 105`",
      "`num.length` is even.",
      "`num` consists of only digits and `'?'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1928",
    "slug": "minimum-cost-to-reach-destination-in-time",
    "title": "Minimum Cost to Reach Destination in Time",
    "difficulty": "Hard",
    "description": "There is a country of `n` cities numbered from `0` to `n - 1` where **all the cities are connected** by bi-directional roads. The roads are represented as a 2D integer array `edges` where `edges[i] = [xi, yi, timei]` denotes a road between cities `xi` and `yi` that takes `timei` minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself. Each time you pass through a city, you must pay a passing fee. This is represented as a **0-indexed** integer array `passingFees` of length `n` where `passingFees[j]` is the amount of dollars you must pay when you pass through city `j`. In the beginning, you are at city `0` and want to reach city `n - 1` in `maxTime` **minutes or less**. The **cost** of your journey is the **summation of passing fees** for each city that you passed through at some moment of your journey (**including** the source and destination cities). Given `maxTime`, `edges`, and `passingFees`, return _the **minimum cost** to complete your journey, or_ `-1` _if you cannot complete it within_ `maxTime` _minutes_.",
    "examples": [
      {
        "input": "maxTime = 30, edges = \\[\\[0,1,10\\],\\[1,2,10\\],\\[2,5,10\\],\\[0,3,1\\],\\[3,4,10\\],\\[4,5,15\\]\\], passingFees = \\[5,1,2,20,20,3\\]",
        "output": "11",
        "explanation": "The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees."
      },
      {
        "input": "maxTime = 29, edges = \\[\\[0,1,10\\],\\[1,2,10\\],\\[2,5,10\\],\\[0,3,1\\],\\[3,4,10\\],\\[4,5,15\\]\\], passingFees = \\[5,1,2,20,20,3\\]",
        "output": "48",
        "explanation": "The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees."
      },
      {
        "input": "maxTime = 25, edges = \\[\\[0,1,10\\],\\[1,2,10\\],\\[2,5,10\\],\\[0,3,1\\],\\[3,4,10\\],\\[4,5,15\\]\\], passingFees = \\[5,1,2,20,20,3\\]",
        "output": "-1",
        "explanation": "There is no way to reach city 5 from city 0 within 25 minutes."
      }
    ],
    "constraints": [
      "`1 <= maxTime <= 1000`",
      "`n == passingFees.length`",
      "`2 <= n <= 1000`",
      "`n - 1 <= edges.length <= 1000`",
      "`0 <= xi, yi <= n - 1`",
      "`1 <= timei <= 1000`",
      "`1 <= passingFees[j] <= 1000`",
      "The graph may contain multiple edges between two nodes.",
      "The graph does not contain self loops."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1929",
    "slug": "concatenation-of-array",
    "title": "Concatenation of Array",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` of length `n`, you want to create an array `ans` of length `2n` where `ans[i] == nums[i]` and `ans[i + n] == nums[i]` for `0 <= i < n` (**0-indexed**). Specifically, `ans` is the **concatenation** of two `nums` arrays. Return _the array_ `ans`.",
    "examples": [
      {
        "input": "nums = \\[1,2,1\\]",
        "output": "\\[1,2,1,1,2,1\\]",
        "explanation": "The array ans is formed as follows:"
      },
      {
        "input": "nums = \\[1,3,2,1\\]",
        "output": "\\[1,3,2,1,1,3,2,1\\]",
        "explanation": "The array ans is formed as follows:"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 1000`",
      "`1 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1930",
    "slug": "unique-length-3-palindromic-subsequences",
    "title": "Unique Length-3 Palindromic Subsequences",
    "difficulty": "Medium",
    "description": "Given a string `s`, return _the number of **unique palindromes of length three** that are a **subsequence** of_ `s`. Note that even if there are multiple ways to obtain the same subsequence, it is still only counted **once**. A **palindrome** is a string that reads the same forwards and backwards. A **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. *  For example, `\"ace \"` is a subsequence of `\"abcde \"`.",
    "examples": [
      {
        "input": "s =  \"aabca \"",
        "output": "3",
        "explanation": "The 3 palindromic subsequences of length 3 are:"
      },
      {
        "input": "s =  \"adc \"",
        "output": "0",
        "explanation": "There are no palindromic subsequences of length 3 in  \"adc \"."
      },
      {
        "input": "s =  \"bbcbaba \"",
        "output": "4",
        "explanation": "The 4 palindromic subsequences of length 3 are:"
      }
    ],
    "constraints": [
      "`3 <= s.length <= 105`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1931",
    "slug": "painting-a-grid-with-three-different-colors",
    "title": "Painting a Grid With Three Different Colors",
    "difficulty": "Hard",
    "description": "You are given two integers `m` and `n`. Consider an `m x n` grid where each cell is initially white. You can paint each cell **red**, **green**, or **blue**. All cells **must** be painted. Return _the number of ways to color the grid with **no two adjacent cells having the same color**_. Since the answer can be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "m = 1, n = 1",
        "output": "3",
        "explanation": "The three possible colorings are shown in the image above."
      },
      {
        "input": "m = 1, n = 2",
        "output": "6",
        "explanation": "The six possible colorings are shown in the image above."
      },
      {
        "input": "m = 5, n = 5",
        "output": "580986"
      }
    ],
    "constraints": [
      "`1 <= m <= 5`",
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1932",
    "slug": "merge-bsts-to-create-single-bst",
    "title": "Merge BSTs to Create Single BST",
    "difficulty": "Hard",
    "description": "You are given `n` **BST (binary search tree) root nodes** for `n` separate BSTs stored in an array `trees` (**0-indexed**). Each BST in `trees` has **at most 3 nodes**, and no two roots have the same value. In one operation, you can: *  Select two **distinct** indices `i` and `j` such that the value stored at one of the **leaves** of `trees[i]` is equal to the **root value** of `trees[j]`. *  Replace the leaf node in `trees[i]` with `trees[j]`. *  Remove `trees[j]` from `trees`. Return _the **root** of the resulting BST if it is possible to form a valid BST after performing_ `n - 1` _operations, or_ `null` _if it is impossible to create a valid BST_. A BST (binary search tree) is a binary tree where each node satisfies the following property: *  Every node in the node's left subtree has a value **strictly less** than the node's value. *  Every node in the node's right subtree has a value **strictly greater** than the node's value. A leaf is a node that has no children.",
    "examples": [
      {
        "input": "trees = \\[\\[2,1\\],\\[3,2,5\\],\\[5,4\\]\\]",
        "output": "\\[3,2,5,1,null,4\\]",
        "explanation": ""
      },
      {
        "input": "trees = \\[\\[5,3,8\\],\\[3,2,6\\]\\]",
        "output": "\\[\\]",
        "explanation": ""
      },
      {
        "input": "trees = \\[\\[5,4\\],\\[3\\]\\]",
        "output": "\\[\\]",
        "explanation": "It is impossible to perform any operations."
      }
    ],
    "constraints": [
      "`n == trees.length`",
      "`1 <= n <= 5  104`",
      "The number of nodes in each tree is in the range `[1, 3]`.",
      "Each node in the input may have children but no grandchildren.",
      "No two roots of `trees` have the same value.",
      "All the trees in the input are valid BSTs.",
      "`1 <= TreeNode.val <= 5  104`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1933",
    "slug": "check-if-string-is-decomposable-into-value-equal-substrings",
    "title": "Check if String Is Decomposable Into Value-Equal Substrings",
    "difficulty": "Easy",
    "description": "A **value-equal** string is a string where **all** characters are the same. *  For example, `\"1111 \"` and `\"33 \"` are value-equal strings. *  In contrast, `\"123 \"` is not a value-equal string. Given a digit string `s`, decompose the string into some number of **consecutive value-equal** substrings where **exactly one** substring has a **length of** `2` and the remaining substrings have a **length of** `3`. Return `true` _if you can decompose_ `s` _according to the above rules. Otherwise, return_ `false`. A **substring** is a contiguous sequence of characters in a string.",
    "examples": [
      {
        "input": "s =  \"000111000 \"",
        "output": "false",
        "explanation": "s cannot be decomposed according to the rules because \\[ \"000 \",  \"111 \",  \"000 \"\\] does not have a substring of length 2."
      },
      {
        "input": "s =  \"00011111222 \"",
        "output": "true",
        "explanation": "s can be decomposed into \\[ \"000 \",  \"111 \",  \"11 \",  \"222 \"\\]."
      },
      {
        "input": "s =  \"011100022233 \"",
        "output": "false",
        "explanation": "s cannot be decomposed according to the rules because of the first '0'."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of only digits `'0'` through `'9'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1935",
    "slug": "maximum-number-of-words-you-can-type",
    "title": "Maximum Number of Words You Can Type",
    "difficulty": "Easy",
    "description": "There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly. Given a string `text` of words separated by a single space (no leading or trailing spaces) and a string `brokenLetters` of all **distinct** letter keys that are broken, return _the **number of words** in_ `text` _you can fully type using this keyboard_.",
    "examples": [
      {
        "input": "text =  \"hello world \", brokenLetters =  \"ad \"",
        "output": "1",
        "explanation": "We cannot type  \"world \" because the 'd' key is broken."
      },
      {
        "input": "text =  \"leet code \", brokenLetters =  \"lt \"",
        "output": "1",
        "explanation": "We cannot type  \"leet \" because the 'l' and 't' keys are broken."
      },
      {
        "input": "text =  \"leet code \", brokenLetters =  \"e \"",
        "output": "0",
        "explanation": "We cannot type either word because the 'e' key is broken."
      }
    ],
    "constraints": [
      "`1 <= text.length <= 104`",
      "`0 <= brokenLetters.length <= 26`",
      "`text` consists of words separated by a single space without any leading or trailing spaces.",
      "Each word only consists of lowercase English letters.",
      "`brokenLetters` consists of distinct lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1936",
    "slug": "add-minimum-number-of-rungs",
    "title": "Add Minimum Number of Rungs",
    "difficulty": "Medium",
    "description": "You are given a **strictly increasing** integer array `rungs` that represents the **height** of rungs on a ladder. You are currently on the **floor** at height `0`, and you want to reach the last rung. You are also given an integer `dist`. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is **at most** `dist`. You are able to insert rungs at any positive **integer** height if a rung is not already there. Return _the **minimum** number of rungs that must be added to the ladder in order for you to climb to the last rung._",
    "examples": [
      {
        "input": "rungs = \\[1,3,5,10\\], dist = 2",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "rungs = \\[3,6,8,10\\], dist = 3",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "rungs = \\[3,4,6,7\\], dist = 2",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= rungs.length <= 105`",
      "`1 <= rungs[i] <= 109`",
      "`1 <= dist <= 109`",
      "`rungs` is strictly increasing."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1937",
    "slug": "maximum-number-of-points-with-cost",
    "title": "Maximum Number of Points with Cost",
    "difficulty": "Medium",
    "description": "You are given an `m x n` integer matrix `points` (**0-indexed**). Starting with `0` points, you want to **maximize** the number of points you can get from the matrix. To gain points, you must pick one cell in **each row**. Picking the cell at coordinates `(r, c)` will **add** `points[r][c]` to your score. However, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows `r` and `r + 1` (where `0 <= r < m - 1`), picking cells at coordinates `(r, c1)` and `(r + 1, c2)` will **subtract** `abs(c1 - c2)` from your score. Return _the **maximum** number of points you can achieve_. `abs(x)` is defined as: *  `x` for `x >= 0`. *  `-x` for `x < 0`.",
    "examples": [
      {
        "input": "points = \\[\\[1,2,3\\],\\[1,5,1\\],\\[3,1,1\\]\\]",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "points = \\[\\[1,5\\],\\[2,3\\],\\[4,2\\]\\]",
        "output": "11",
        "explanation": ""
      }
    ],
    "constraints": [
      "`m == points.length`",
      "`n == points[r].length`",
      "`1 <= m, n <= 105`",
      "`1 <= m  n <= 105`",
      "`0 <= points[r][c] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1938",
    "slug": "maximum-genetic-difference-query",
    "title": "Maximum Genetic Difference Query",
    "difficulty": "Hard",
    "description": "There is a rooted tree consisting of `n` nodes numbered `0` to `n - 1`. Each node's number denotes its **unique genetic value** (i.e. the genetic value of node `x` is `x`). The **genetic difference** between two genetic values is defined as the **bitwise-****XOR** of their values. You are given the integer array `parents`, where `parents[i]` is the parent for node `i`. If node `x` is the **root** of the tree, then `parents[x] == -1`. You are also given the array `queries` where `queries[i] = [nodei, vali]`. For each query `i`, find the **maximum genetic difference** between `vali` and `pi`, where `pi` is the genetic value of any node that is on the path between `nodei` and the root (including `nodei` and the root). More formally, you want to maximize `vali XOR pi`. Return _an array_ `ans` _where_ `ans[i]` _is the answer to the_ `ith` _query_.",
    "examples": [
      {
        "input": "parents = \\[-1,0,1,1\\], queries = \\[\\[0,2\\],\\[3,2\\],\\[2,5\\]\\]",
        "output": "\\[2,3,7\\]",
        "explanation": "The queries are processed as follows:"
      },
      {
        "input": "parents = \\[3,7,-1,2,0,7,0,2\\], queries = \\[\\[4,6\\],\\[1,15\\],\\[0,5\\]\\]",
        "output": "\\[6,14,7\\]",
        "explanation": "The queries are processed as follows:"
      }
    ],
    "constraints": [
      "`2 <= parents.length <= 105`",
      "`0 <= parents[i] <= parents.length - 1` for every node `i` that is not the root.",
      "`parents[root] == -1`",
      "`1 <= queries.length <= 3  104`",
      "`0 <= nodei <= parents.length - 1`",
      "`0 <= vali <= 2  105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1941",
    "slug": "check-if-all-characters-have-equal-number-of-occurrences",
    "title": "Check if All Characters Have Equal Number of Occurrences",
    "difficulty": "Easy",
    "description": "Given a string `s`, return `true` _if_ `s` _is a **good** string, or_ `false` _otherwise_. A string `s` is **good** if **all** the characters that appear in `s` have the **same** number of occurrences (i.e., the same frequency).",
    "examples": [
      {
        "input": "s =  \"abacbc \"",
        "output": "true",
        "explanation": "The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s."
      },
      {
        "input": "s =  \"aaabb \"",
        "output": "false",
        "explanation": "The characters that appear in s are 'a' and 'b'."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1942",
    "slug": "the-number-of-the-smallest-unoccupied-chair",
    "title": "The Number of the Smallest Unoccupied Chair",
    "difficulty": "Medium",
    "description": "There is a party where `n` friends numbered from `0` to `n - 1` are attending. There is an **infinite** number of chairs in this party that are numbered from `0` to `infinity`. When a friend arrives at the party, they sit on the unoccupied chair with the **smallest number**. *  For example, if chairs `0`, `1`, and `5` are occupied when a friend comes, they will sit on chair number `2`. When a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair. You are given a **0-indexed** 2D integer array `times` where `times[i] = [arrivali, leavingi]`, indicating the arrival and leaving times of the `ith` friend respectively, and an integer `targetFriend`. All arrival times are **distinct**. Return _the **chair number** that the friend numbered_ `targetFriend` _will sit on_.",
    "examples": [
      {
        "input": "times = \\[\\[1,4\\],\\[2,3\\],\\[4,6\\]\\], targetFriend = 1",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "times = \\[\\[3,10\\],\\[1,5\\],\\[2,6\\]\\], targetFriend = 0",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == times.length`",
      "`2 <= n <= 104`",
      "`times[i].length == 2`",
      "`1 <= arrivali < leavingi <= 105`",
      "`0 <= targetFriend <= n - 1`",
      "Each `arrivali` time is distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1943",
    "slug": "describe-the-painting",
    "title": "Describe the Painting",
    "difficulty": "Medium",
    "description": "There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a **unique** color. You are given a 2D integer array `segments`, where `segments[i] = [starti, endi, colori]` represents the **half-closed segment** `[starti, endi)` with `colori` as the color. The colors in the overlapping segments of the painting were **mixed** when it was painted. When two or more colors mix, they form a new color that can be represented as a **set** of mixed colors. *  For example, if colors `2`, `4`, and `6` are mixed, then the resulting mixed color is `{2,4,6}`. For the sake of simplicity, you should only output the **sum** of the elements in the set rather than the full set. You want to **describe** the painting with the **minimum** number of non-overlapping **half-closed segments** of these mixed colors. These segments can be represented by the 2D array `painting` where `painting[j] = [leftj, rightj, mixj]` describes a **half-closed segment** `[leftj, rightj)` with the mixed color **sum** of `mixj`. *  For example, the painting created with `segments = [[1,4,5],[1,7,7]]` can be described by `painting = [[1,4,12],[4,7,7]]` because: *  `[1,4)` is colored `{5,7}` (with a sum of `12`) from both the first and second segments. *  `[4,7)` is colored `{7}` from only the second segment. Return _the 2D array_ `painting` _describing the finished painting (excluding any parts that are **not** painted). You may return the segments in **any order**_. A **half-closed segment** `[a, b)` is the section of the number line between points `a` and `b` **including** point `a` and **not including** point `b`.",
    "examples": [
      {
        "input": "segments = \\[\\[1,4,5\\],\\[4,7,7\\],\\[1,7,9\\]\\]",
        "output": "\\[\\[1,4,14\\],\\[4,7,16\\]\\]",
        "explanation": "The painting can be described as follows:"
      },
      {
        "input": "segments = \\[\\[1,7,9\\],\\[6,8,15\\],\\[8,10,7\\]\\]",
        "output": "\\[\\[1,6,9\\],\\[6,7,24\\],\\[7,8,15\\],\\[8,10,7\\]\\]",
        "explanation": "The painting can be described as follows:"
      },
      {
        "input": "segments = \\[\\[1,4,5\\],\\[1,4,7\\],\\[4,7,1\\],\\[4,7,11\\]\\]",
        "output": "\\[\\[1,4,12\\],\\[4,7,12\\]\\]",
        "explanation": "The painting can be described as follows:"
      }
    ],
    "constraints": [
      "`1 <= segments.length <= 2  104`",
      "`segments[i].length == 3`",
      "`1 <= starti < endi <= 105`",
      "`1 <= colori <= 109`",
      "Each `colori` is distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1944",
    "slug": "number-of-visible-people-in-a-queue",
    "title": "Number of Visible People in a Queue",
    "difficulty": "Hard",
    "description": "There are `n` people standing in a queue, and they numbered from `0` to `n - 1` in **left to right** order. You are given an array `heights` of **distinct** integers where `heights[i]` represents the height of the `ith` person. A person can **see** another person to their right in the queue if everybody in between is **shorter** than both of them. More formally, the `ith` person can see the `jth` person if `i < j` and `min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1])`. Return _an array_ `answer` _of length_ `n` _where_ `answer[i]` _is the **number of people** the_ `ith` _person can **see** to their right in the queue_.",
    "examples": [
      {
        "input": "heights = \\[10,6,8,5,11,9\\]",
        "output": "\\[3,1,2,1,1,0\\]",
        "explanation": ""
      },
      {
        "input": "heights = \\[5,1,2,3,10\\]",
        "output": "\\[4,1,1,1,0\\]"
      }
    ],
    "constraints": [
      "`n == heights.length`",
      "`1 <= n <= 105`",
      "`1 <= heights[i] <= 105`",
      "All the values of `heights` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1945",
    "slug": "sum-of-digits-of-string-after-convert",
    "title": "Sum of Digits of String After Convert",
    "difficulty": "Easy",
    "description": "You are given a string `s` consisting of lowercase English letters, and an integer `k`. First, **convert** `s` into an integer by replacing each letter with its position in the alphabet (i.e., replace `'a'` with `1`, `'b'` with `2`, ..., `'z'` with `26`). Then, **transform** the integer by replacing it with the **sum of its digits**. Repeat the **transform** operation `k` **times** in total. For example, if `s = \"zbax \"` and `k = 2`, then the resulting integer would be `8` by the following operations: *  **Convert**: `\"zbax \" \u279d \"(26)(2)(1)(24) \" \u279d \"262124 \" \u279d 262124` *  **Transform #1**: `262124 \u279d 2 + 6 + 2 + 1 + 2 + 4 \u279d 17` *  **Transform #2**: `17 \u279d 1 + 7 \u279d 8` Return _the resulting integer after performing the operations described above_.",
    "examples": [
      {
        "input": "s =  \"iiii \", k = 1",
        "output": "36",
        "explanation": "The operations are as follows:"
      },
      {
        "input": "s =  \"leetcode \", k = 2",
        "output": "6",
        "explanation": "The operations are as follows:"
      },
      {
        "input": "s =  \"zbax \", k = 2",
        "output": "8"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`1 <= k <= 10`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1946",
    "slug": "largest-number-after-mutating-substring",
    "title": "Largest Number After Mutating Substring",
    "difficulty": "Medium",
    "description": "You are given a string `num`, which represents a large integer. You are also given a **0-indexed** integer array `change` of length `10` that maps each digit `0-9` to another digit. More formally, digit `d` maps to digit `change[d]`. You may **choose** to **mutate a single substring** of `num`. To mutate a substring, replace each digit `num[i]` with the digit it maps to in `change` (i.e. replace `num[i]` with `change[num[i]]`). Return _a string representing the **largest** possible integer after **mutating** (or choosing not to) a **single substring** of_ `num`. A **substring** is a contiguous sequence of characters within the string.",
    "examples": [
      {
        "input": "num =  \"132 \", change = \\[9,8,5,0,3,6,4,2,6,8\\]",
        "output": "\"832 \"",
        "explanation": "Replace the substring  \"1 \":"
      },
      {
        "input": "num =  \"021 \", change = \\[9,4,3,5,7,2,1,9,0,6\\]",
        "output": "\"934 \"",
        "explanation": "Replace the substring  \"021 \":"
      },
      {
        "input": "num =  \"5 \", change = \\[1,4,7,5,3,2,5,6,9,4\\]",
        "output": "\"5 \"",
        "explanation": "\"5 \" is already the largest number that can be created, so return it."
      }
    ],
    "constraints": [
      "`1 <= num.length <= 105`",
      "`num` consists of only digits `0-9`.",
      "`change.length == 10`",
      "`0 <= change[d] <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1947",
    "slug": "maximum-compatibility-score-sum",
    "title": "Maximum Compatibility Score Sum",
    "difficulty": "Medium",
    "description": "There is a survey that consists of `n` questions where each question's answer is either `0` (no) or `1` (yes). The survey was given to `m` students numbered from `0` to `m - 1` and `m` mentors numbered from `0` to `m - 1`. The answers of the students are represented by a 2D integer array `students` where `students[i]` is an integer array that contains the answers of the `ith` student (**0-indexed**). The answers of the mentors are represented by a 2D integer array `mentors` where `mentors[j]` is an integer array that contains the answers of the `jth` mentor (**0-indexed**). Each student will be assigned to **one** mentor, and each mentor will have **one** student assigned to them. The **compatibility score** of a student-mentor pair is the number of answers that are the same for both the student and the mentor. *  For example, if the student's answers were `[1, 0, 1]` and the mentor's answers were `[0, 0, 1]`, then their compatibility score is 2 because only the second and the third answers are the same. You are tasked with finding the optimal student-mentor pairings to **maximize** the **sum of the compatibility scores**. Given `students` and `mentors`, return _the **maximum compatibility score sum** that can be achieved._",
    "examples": [
      {
        "input": "students = \\[\\[1,1,0\\],\\[1,0,1\\],\\[0,0,1\\]\\], mentors = \\[\\[1,0,0\\],\\[0,0,1\\],\\[1,1,0\\]\\]",
        "output": "8",
        "explanation": "We assign students to mentors in the following way:"
      },
      {
        "input": "students = \\[\\[0,0\\],\\[0,0\\],\\[0,0\\]\\], mentors = \\[\\[1,1\\],\\[1,1\\],\\[1,1\\]\\]",
        "output": "0",
        "explanation": "The compatibility score of any student-mentor pair is 0."
      }
    ],
    "constraints": [
      "`m == students.length == mentors.length`",
      "`n == students[i].length == mentors[j].length`",
      "`1 <= m, n <= 8`",
      "`students[i][k]` is either `0` or `1`.",
      "`mentors[j][k]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1948",
    "slug": "delete-duplicate-folders-in-system",
    "title": "Delete Duplicate Folders in System",
    "difficulty": "Hard",
    "description": "Due to a bug, there are many duplicate folders in a file system. You are given a 2D array `paths`, where `paths[i]` is an array representing an absolute path to the `ith` folder in the file system. *  For example, `[ \"one \", \"two \", \"three \"]` represents the path `\"/one/two/three \"`. Two folders (not necessarily on the same level) are **identical** if they contain the **same non-empty** set of identical subfolders and underlying subfolder structure. The folders **do not** need to be at the root level to be identical. If two or more folders are **identical**, then **mark** the folders as well as all their subfolders. *  For example, folders `\"/a \"` and `\"/b \"` in the file structure below are identical. They (as well as their subfolders) should **all** be marked: *  `/a` *  `/a/x` *  `/a/x/y` *  `/a/z` *  `/b` *  `/b/x` *  `/b/x/y` *  `/b/z` *  However, if the file structure also included the path `\"/b/w \"`, then the folders `\"/a \"` and `\"/b \"` would not be identical. Note that `\"/a/x \"` and `\"/b/x \"` would still be considered identical even with the added folder. Once all the identical folders and their subfolders have been marked, the file system will **delete** all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted. Return _the 2D array_ `ans` _containing the paths of the **remaining** folders after deleting all the marked folders. The paths may be returned in **any** order_.",
    "examples": [
      {
        "input": "paths = \\[\\[ \"a \"\\],\\[ \"c \"\\],\\[ \"d \"\\],\\[ \"a \", \"b \"\\],\\[ \"c \", \"b \"\\],\\[ \"d \", \"a \"\\]\\]",
        "output": "\\[\\[ \"d \"\\],\\[ \"d \", \"a \"\\]\\]",
        "explanation": "The file structure is as shown."
      },
      {
        "input": "paths = \\[\\[ \"a \"\\],\\[ \"c \"\\],\\[ \"a \", \"b \"\\],\\[ \"c \", \"b \"\\],\\[ \"a \", \"b \", \"x \"\\],\\[ \"a \", \"b \", \"x \", \"y \"\\],\\[ \"w \"\\],\\[ \"w \", \"y \"\\]\\]",
        "output": "\\[\\[ \"c \"\\],\\[ \"c \", \"b \"\\],\\[ \"a \"\\],\\[ \"a \", \"b \"\\]\\]",
        "explanation": "The file structure is as shown."
      },
      {
        "input": "paths = \\[\\[ \"a \", \"b \"\\],\\[ \"c \", \"d \"\\],\\[ \"c \"\\],\\[ \"a \"\\]\\]",
        "output": "\\[\\[ \"c \"\\],\\[ \"c \", \"d \"\\],\\[ \"a \"\\],\\[ \"a \", \"b \"\\]\\]",
        "explanation": "All folders are unique in the file system."
      }
    ],
    "constraints": [
      "`1 <= paths.length <= 2  104`",
      "`1 <= paths[i].length <= 500`",
      "`1 <= paths[i][j].length <= 10`",
      "`1 <= sum(paths[i][j].length) <= 2  105`",
      "`path[i][j]` consists of lowercase English letters.",
      "No two paths lead to the same folder.",
      "For any folder not at the root level, its parent folder will also be in the input."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1950",
    "slug": "maximum-of-minimum-values-in-all-subarrays",
    "title": "Maximum of Minimum Values in All Subarrays",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` of size `n`. You are asked to solve `n` queries for each integer `i` in the range `0 <= i < n`. To solve the `ith` query: 1. Find the **minimum value** in each possible subarray of size `i + 1` of the array `nums`. 2. Find the **maximum** of those minimum values. This maximum is the **answer** to the query. Return _a **0-indexed** integer array_ `ans` _of size_ `n` _such that_ `ans[i]` _is the answer to the_ `ith` _query_. A **subarray** is a contiguous sequence of elements in an array.",
    "examples": [
      {
        "input": "nums = \\[0,1,2,4\\]",
        "output": "\\[4,2,1,0\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[10,20,50,10\\]",
        "output": "\\[50,20,10,10\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1952",
    "slug": "three-divisors",
    "title": "Three Divisors",
    "difficulty": "Easy",
    "description": "Given an integer `n`, return `true` _if_ `n` _has **exactly three positive divisors**. Otherwise, return_ `false`. An integer `m` is a **divisor** of `n` if there exists an integer `k` such that `n = k * m`.",
    "examples": [
      {
        "input": "n = 2",
        "output": "false"
      },
      {
        "input": "n = 4",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1953",
    "slug": "maximum-number-of-weeks-for-which-you-can-work",
    "title": "Maximum Number of Weeks for Which You Can Work",
    "difficulty": "Medium",
    "description": "There are `n` projects numbered from `0` to `n - 1`. You are given an integer array `milestones` where each `milestones[i]` denotes the number of milestones the `ith` project has. You can work on the projects following these two rules: *  Every week, you will finish **exactly one** milestone of **one** project. You **must** work every week. *  You **cannot** work on two milestones from the same project for two **consecutive** weeks. Once all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will **stop working**. Note that you may not be able to finish every project's milestones due to these constraints. Return _the **maximum** number of weeks you would be able to work on the projects without violating the rules mentioned above_.",
    "examples": [
      {
        "input": "milestones = \\[1,2,3\\]",
        "output": "6",
        "explanation": "One possible scenario is:"
      },
      {
        "input": "milestones = \\[5,2,1\\]",
        "output": "7",
        "explanation": "One possible scenario is:"
      }
    ],
    "constraints": [
      "`n == milestones.length`",
      "`1 <= n <= 105`",
      "`1 <= milestones[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1954",
    "slug": "minimum-garden-perimeter-to-collect-enough-apples",
    "title": "Minimum Garden Perimeter to Collect Enough Apples",
    "difficulty": "Medium",
    "description": "In a garden represented as an infinite 2D grid, there is an apple tree planted at **every** integer coordinate. The apple tree planted at an integer coordinate `(i, j)` has `|i| + |j|` apples growing on it. You will buy an axis-aligned **square plot** of land that is centered at `(0, 0)`. Given an integer `neededApples`, return _the **minimum perimeter** of a plot such that **at least**_ `neededApples` _apples are **inside or on** the perimeter of that plot_. The value of `|x|` is defined as: *  `x` if `x >= 0` *  `-x` if `x < 0`",
    "examples": [
      {
        "input": "neededApples = 1",
        "output": "8",
        "explanation": "A square plot of side length 1 does not contain any apples."
      },
      {
        "input": "neededApples = 13",
        "output": "16"
      },
      {
        "input": "neededApples = 1000000000",
        "output": "5040"
      }
    ],
    "constraints": [
      "`1 <= neededApples <= 1015`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1955",
    "slug": "count-number-of-special-subsequences",
    "title": "Count Number of Special Subsequences",
    "difficulty": "Hard",
    "description": "A sequence is **special** if it consists of a **positive** number of `0`s, followed by a **positive** number of `1`s, then a **positive** number of `2`s. *  For example, `[0,1,2]` and `[0,0,1,1,1,2]` are special. *  In contrast, `[2,1,0]`, `[1]`, and `[0,1,2,0]` are not special. Given an array `nums` (consisting of **only** integers `0`, `1`, and `2`), return _the **number of different subsequences** that are special_. Since the answer may be very large, **return it modulo** `109 + 7`. A **subsequence** of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are **different** if the **set of indices** chosen are different.",
    "examples": [
      {
        "input": "nums = \\[0,1,2,2\\]",
        "output": "3",
        "explanation": "The special subsequences are bolded \\[**0**,**1**,**2**,2\\], \\[**0**,**1**,2,**2**\\], and \\[**0**,**1**,**2**,**2**\\]."
      },
      {
        "input": "nums = \\[2,2,0,0\\]",
        "output": "0",
        "explanation": "There are no special subsequences in \\[2,2,0,0\\]."
      },
      {
        "input": "nums = \\[0,1,2,0,1,2\\]",
        "output": "7",
        "explanation": "The special subsequences are bolded:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1956",
    "slug": "minimum-time-for-k-virus-variants-to-spread",
    "title": "Minimum Time For K Virus Variants to Spread",
    "difficulty": "Hard",
    "description": "There are `n` **unique** virus variants in an infinite 2D grid. You are given a 2D array `points`, where `points[i] = [xi, yi]` represents a virus originating at `(xi, yi)` on day `0`. Note that it is possible for **multiple** virus variants to originate at the **same** point. Every day, each cell infected with a virus variant will spread the virus to **all** neighboring points in the **four** cardinal directions (i.e. up, down, left, and right). If a cell has multiple variants, all the variants will spread without interfering with each other. Given an integer `k`, return _the **minimum integer** number of days for **any** point to contain **at least**_ `k` _of the unique virus variants_.",
    "examples": [
      {
        "input": "points = \\[\\[1,1\\],\\[6,1\\]\\], k = 2",
        "output": "3",
        "explanation": "On day 3, points (3,1) and (4,1) will contain both virus variants. Note that these are not the only points that will contain both virus variants."
      },
      {
        "input": "points = \\[\\[3,3\\],\\[1,2\\],\\[9,2\\]\\], k = 2",
        "output": "2",
        "explanation": "On day 2, points (1,3), (2,3), (2,2), and (3,2) will contain the first two viruses. Note that these are not the only points that will contain both virus variants."
      },
      {
        "input": "points = \\[\\[3,3\\],\\[1,2\\],\\[9,2\\]\\], k = 3",
        "output": "4",
        "explanation": "On day 4, the point (5,2) will contain all 3 viruses. Note that this is not the only point that will contain all 3 virus variants."
      }
    ],
    "constraints": [
      "`n == points.length`",
      "`2 <= n <= 50`",
      "`points[i].length == 2`",
      "`1 <= xi, yi <= 100`",
      "`2 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1957",
    "slug": "delete-characters-to-make-fancy-string",
    "title": "Delete Characters to Make Fancy String",
    "difficulty": "Easy",
    "description": "A **fancy string** is a string where no **three** **consecutive** characters are equal. Given a string `s`, delete the **minimum** possible number of characters from `s` to make it **fancy**. Return _the final string after the deletion_. It can be shown that the answer will always be **unique**.",
    "examples": [
      {
        "input": "s =  \"leeetcode \"",
        "output": "\"leetcode \"",
        "explanation": ""
      },
      {
        "input": "s =  \"aaabaaaa \"",
        "output": "\"aabaa \"",
        "explanation": ""
      },
      {
        "input": "s =  \"aab \"",
        "output": "\"aab \"",
        "explanation": "No three consecutive characters are equal, so return  \"aab \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1958",
    "slug": "check-if-move-is-legal",
    "title": "Check if Move is Legal",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** `8 x 8` grid `board`, where `board[r][c]` represents the cell `(r, c)` on a game board. On the board, free cells are represented by `'.'`, white cells are represented by `'W'`, and black cells are represented by `'B'`. Each move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only **legal** if, after changing it, the cell becomes the **endpoint of a good line** (horizontal, vertical, or diagonal). A **good line** is a line of **three or more cells (including the endpoints)** where the endpoints of the line are **one color**, and the remaining cells in the middle are the **opposite color** (no cells in the line are free). You can find examples for good lines in the figure below: Given two integers `rMove` and `cMove` and a character `color` representing the color you are playing as (white or black), return `true` _if changing cell_ `(rMove, cMove)` _to color_ `color` _is a **legal** move, or_ `false` _if it is not legal_.",
    "examples": [
      {
        "input": "board = \\[\\[ \". \", \". \", \". \", \"B \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \". \", \". \", \". \", \". \"\\],\\[ \"W \", \"B \", \"B \", \". \", \"W \", \"W \", \"W \", \"B \"\\],\\[ \". \", \". \", \". \", \"B \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"B \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \". \", \". \", \". \", \". \"\\]\\], rMove = 4, cMove = 3, color =  \"B \"",
        "output": "true",
        "explanation": "'.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'."
      },
      {
        "input": "board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \"B \", \". \", \". \", \"W \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \"W \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \"B \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \"B \", \"W \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \"W \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \"B \"\\]\\], rMove = 4, cMove = 4, color =  \"W \"",
        "output": "false",
        "explanation": "While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint."
      }
    ],
    "constraints": [
      "`board.length == board[r].length == 8`",
      "`0 <= rMove, cMove < 8`",
      "`board[rMove][cMove] == '.'`",
      "`color` is either `'B'` or `'W'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1959",
    "slug": "minimum-total-space-wasted-with-k-resizing-operations",
    "title": "Minimum Total Space Wasted With K Resizing Operations",
    "difficulty": "Medium",
    "description": "You are currently designing a dynamic array. You are given a **0-indexed** integer array `nums`, where `nums[i]` is the number of elements that will be in the array at time `i`. In addition, you are given an integer `k`, the **maximum** number of times you can **resize** the array (to **any** size). The size of the array at time `t`, `sizet`, must be at least `nums[t]` because there needs to be enough space in the array to hold all the elements. The **space wasted** at time `t` is defined as `sizet - nums[t]`, and the **total** space wasted is the **sum** of the space wasted across every time `t` where `0 <= t < nums.length`. Return _the **minimum** **total space wasted** if you can resize the array at most_ `k` _times_.",
    "examples": [
      {
        "input": "nums = \\[10,20\\], k = 0",
        "output": "10",
        "explanation": "size = \\[20,20\\]."
      },
      {
        "input": "nums = \\[10,20,30\\], k = 1",
        "output": "10",
        "explanation": "size = \\[20,20,30\\]."
      },
      {
        "input": "nums = \\[10,20,15,30,20\\], k = 2",
        "output": "15",
        "explanation": "size = \\[10,20,20,30,30\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 200`",
      "`1 <= nums[i] <= 106`",
      "`0 <= k <= nums.length - 1`"
    ],
    "note": "The array can have **any size** at the start and does **not** count towards the number of resizing operations.",
    "follow_up": null
  },
  {
    "id": "1960",
    "slug": "maximum-product-of-the-length-of-two-palindromic-substrings",
    "title": "Maximum Product of the Length of Two Palindromic Substrings",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** string `s` and are tasked with finding two **non-intersecting palindromic** substrings of **odd** length such that the product of their lengths is maximized. More formally, you want to choose four integers `i`, `j`, `k`, `l` such that `0 <= i <= j < k <= l < s.length` and both the substrings `s[i...j]` and `s[k...l]` are palindromes and have odd lengths. `s[i...j]` denotes a substring from index `i` to index `j` **inclusive**. Return _the **maximum** possible product of the lengths of the two non-intersecting palindromic substrings._ A **palindrome** is a string that is the same forward and backward. A **substring** is a contiguous sequence of characters in a string.",
    "examples": [
      {
        "input": "s =  \"ababbb \"",
        "output": "9",
        "explanation": "Substrings  \"aba \" and  \"bbb \" are palindromes with odd length. product = 3 \\* 3 = 9."
      },
      {
        "input": "s =  \"zaaaxbbby \"",
        "output": "9",
        "explanation": "Substrings  \"aaa \" and  \"bbb \" are palindromes with odd length. product = 3 \\* 3 = 9."
      }
    ],
    "constraints": [
      "`2 <= s.length <= 105`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1961",
    "slug": "check-if-string-is-a-prefix-of-array",
    "title": "Check If String Is a Prefix of Array",
    "difficulty": "Easy",
    "description": "Given a string `s` and an array of strings `words`, determine whether `s` is a **prefix string** of `words`. A string `s` is a **prefix string** of `words` if `s` can be made by concatenating the first `k` strings in `words` for some **positive** `k` no larger than `words.length`. Return `true` _if_ `s` _is a **prefix string** of_ `words`_, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "s =  \"iloveleetcode \", words = \\[ \"i \", \"love \", \"leetcode \", \"apples \"\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s =  \"iloveleetcode \", words = \\[ \"apples \", \"i \", \"love \", \"leetcode \"\\]",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 20`",
      "`1 <= s.length <= 1000`",
      "`words[i]` and `s` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1962",
    "slug": "remove-stones-to-minimize-the-total",
    "title": "Remove Stones to Minimize the Total",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `piles`, where `piles[i]` represents the number of stones in the `ith` pile, and an integer `k`. You should apply the following operation **exactly** `k` times: *  Choose any `piles[i]` and **remove** `floor(piles[i] / 2)` stones from it. **Notice** that you can apply the operation on the **same** pile more than once. Return _the **minimum** possible total number of stones remaining after applying the_ `k` _operations_. `floor(x)` is the **greatest** integer that is **smaller** than or **equal** to `x` (i.e., rounds `x` down).",
    "examples": [
      {
        "input": "piles = \\[5,4,9\\], k = 2",
        "output": "12",
        "explanation": "Steps of a possible scenario are:"
      },
      {
        "input": "piles = \\[4,3,6,7\\], k = 3",
        "output": "12",
        "explanation": "Steps of a possible scenario are:"
      }
    ],
    "constraints": [
      "`1 <= piles.length <= 105`",
      "`1 <= piles[i] <= 104`",
      "`1 <= k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1963",
    "slug": "minimum-number-of-swaps-to-make-the-string-balanced",
    "title": "Minimum Number of Swaps to Make the String Balanced",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `s` of **even** length `n`. The string consists of **exactly** `n / 2` opening brackets `'['` and `n / 2` closing brackets `']'`. A string is called **balanced** if and only if: *  It is the empty string, or *  It can be written as `AB`, where both `A` and `B` are **balanced** strings, or *  It can be written as `[C]`, where `C` is a **balanced** string. You may swap the brackets at **any** two indices **any** number of times. Return _the **minimum** number of swaps to make_ `s` _**balanced**_.",
    "examples": [
      {
        "input": "s =  \"\\]\\[\\]\\[ \"",
        "output": "1",
        "explanation": "You can make the string balanced by swapping index 0 with index 3."
      },
      {
        "input": "s =  \"\\]\\]\\]\\[\\[\\[ \"",
        "output": "2",
        "explanation": "You can do the following to make the string balanced:"
      },
      {
        "input": "s =  \"\\[\\] \"",
        "output": "0",
        "explanation": "The string is already balanced."
      }
    ],
    "constraints": [
      "`n == s.length`",
      "`2 <= n <= 106`",
      "`n` is even.",
      "`s[i]` is either `'['` or `']'`.",
      "The number of opening brackets `'['` equals `n / 2`, and the number of closing brackets `']'` equals `n / 2`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1964",
    "slug": "find-the-longest-valid-obstacle-course-at-each-position",
    "title": "Find the Longest Valid Obstacle Course at Each Position",
    "difficulty": "Hard",
    "description": "You want to build some obstacle courses. You are given a **0-indexed** integer array `obstacles` of length `n`, where `obstacles[i]` describes the height of the `ith` obstacle. For every index `i` between `0` and `n - 1` (**inclusive**), find the length of the **longest obstacle course** in `obstacles` such that: *  You choose any number of obstacles between `0` and `i` **inclusive**. *  You must include the `ith` obstacle in the course. *  You must put the chosen obstacles in the **same order** as they appear in `obstacles`. *  Every obstacle (except the first) is **taller** than or the **same height** as the obstacle immediately before it. Return _an array_ `ans` _of length_ `n`, _where_ `ans[i]` _is the length of the **longest obstacle course** for index_ `i` _as described above_.",
    "examples": [
      {
        "input": "obstacles = \\[1,2,3,2\\]",
        "output": "\\[1,2,3,3\\]",
        "explanation": "The longest valid obstacle course at each position is:"
      },
      {
        "input": "obstacles = \\[2,2,1\\]",
        "output": "\\[1,2,1\\]",
        "explanation": "The longest valid obstacle course at each position is:"
      },
      {
        "input": "obstacles = \\[3,1,5,6,4,2\\]",
        "output": "\\[1,1,2,3,2,2\\]",
        "explanation": "The longest valid obstacle course at each position is:"
      }
    ],
    "constraints": [
      "`n == obstacles.length`",
      "`1 <= n <= 105`",
      "`1 <= obstacles[i] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1966",
    "slug": "binary-searchable-numbers-in-an-unsorted-array",
    "title": "Binary Searchable Numbers in an Unsorted Array",
    "difficulty": "Medium",
    "description": "Consider a function that implements an algorithm **similar** to [Binary Search](https://leetcode.com/explore/learn/card/binary-search/). The function has two input parameters: `sequence` is a sequence of integers, and `target` is an integer value. The purpose of the function is to find if the `target` exists in the `sequence`. The pseudocode of the function is as follows: func(sequence, target) while sequence is not empty **randomly** choose an element from sequence as the pivot if pivot = target, return **true** else if pivot < target, remove pivot and all elements to its left from the sequence else, remove pivot and all elements to its right from the sequence end while return **false** When the `sequence` is sorted, the function works correctly for **all** values. When the `sequence` is not sorted, the function does not work for all values, but may still work for **some** values. Given an integer array `nums`, representing the `sequence`, that contains **unique** numbers and **may or may not be sorted**, return _the number of values that are **guaranteed** to be found using the function, for **every possible** pivot selection_.",
    "examples": [
      {
        "input": "nums = \\[7\\]",
        "output": "1"
      },
      {
        "input": "nums = \\[-1,5,2\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-105 <= nums[i] <= 105`",
      "All the values of `nums` are unique."
    ],
    "note": null,
    "follow_up": "If `nums` has **duplicates**, would you modify your algorithm? If so, how?"
  },
  {
    "id": "1967",
    "slug": "number-of-strings-that-appear-as-substrings-in-word",
    "title": "Number of Strings That Appear as Substrings in Word",
    "difficulty": "Easy",
    "description": "Given an array of strings `patterns` and a string `word`, return _the **number** of strings in_ `patterns` _that exist as a **substring** in_ `word`. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "patterns = \\[ \"a \", \"abc \", \"bc \", \"d \"\\], word =  \"abc \"",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "patterns = \\[ \"a \", \"b \", \"c \"\\], word =  \"aaaaabbbbb \"",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "patterns = \\[ \"a \", \"a \", \"a \"\\], word =  \"ab \"",
        "output": "3",
        "explanation": "Each of the patterns appears as a substring in word  \"ab \"."
      }
    ],
    "constraints": [
      "`1 <= patterns.length <= 100`",
      "`1 <= patterns[i].length <= 100`",
      "`1 <= word.length <= 100`",
      "`patterns[i]` and `word` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1968",
    "slug": "array-with-elements-not-equal-to-average-of-neighbors",
    "title": "Array With Elements Not Equal to Average of Neighbors",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array `nums` of **distinct** integers. You want to rearrange the elements in the array such that every element in the rearranged array is **not** equal to the **average** of its neighbors. More formally, the rearranged array should have the property such that for every `i` in the range `1 <= i < nums.length - 1`, `(nums[i-1] + nums[i+1]) / 2` is **not** equal to `nums[i]`. Return _**any** rearrangement of_ `nums` _that meets the requirements_.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4,5\\]",
        "output": "\\[1,2,4,5,3\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[6,2,0,9,7\\]",
        "output": "\\[9,7,6,2,0\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 105`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1969",
    "slug": "minimum-non-zero-product-of-the-array-elements",
    "title": "Minimum Non-Zero Product of the Array Elements",
    "difficulty": "Medium",
    "description": "You are given a positive integer `p`. Consider an array `nums` (**1-indexed**) that consists of the integers in the **inclusive** range `[1, 2p - 1]` in their binary representations. You are allowed to do the following operation **any** number of times: *  Choose two elements `x` and `y` from `nums`. *  Choose a bit in `x` and swap it with its corresponding bit in `y`. Corresponding bit refers to the bit that is in the **same position** in the other integer. For example, if `x = 1101` and `y = 0011`, after swapping the `2nd` bit from the right, we have `x = 1111` and `y = 0001`. Find the **minimum non-zero** product of `nums` after performing the above operation **any** number of times. Return _this product_ _**modulo**_ `109 + 7`.",
    "examples": [
      {
        "input": "p = 1",
        "output": "1",
        "explanation": "nums = \\[1\\]."
      },
      {
        "input": "p = 2",
        "output": "6",
        "explanation": "nums = \\[01, 10, 11\\]."
      },
      {
        "input": "p = 3",
        "output": "1512",
        "explanation": "nums = \\[001, 010, 011, 100, 101, 110, 111\\]"
      }
    ],
    "constraints": [
      "`1 <= p <= 60`"
    ],
    "note": "The answer should be the minimum product **before** the modulo operation is done.",
    "follow_up": null
  },
  {
    "id": "1970",
    "slug": "last-day-where-you-can-still-cross",
    "title": "Last Day Where You Can Still Cross",
    "difficulty": "Hard",
    "description": "There is a **1-based** binary matrix where `0` represents land and `1` represents water. You are given integers `row` and `col` representing the number of rows and columns in the matrix, respectively. Initially on day `0`, the **entire** matrix is **land**. However, each day a new cell becomes flooded with **water**. You are given a **1-based** 2D array `cells`, where `cells[i] = [ri, ci]` represents that on the `ith` day, the cell on the `rith` row and `cith` column (**1-based** coordinates) will be covered with **water** (i.e., changed to `1`). You want to find the **last** day that it is possible to walk from the **top** to the **bottom** by only walking on land cells. You can start from **any** cell in the top row and end at **any** cell in the bottom row. You can only travel in the **four** cardinal directions (left, right, up, and down). Return _the **last** day where it is possible to walk from the **top** to the **bottom** by only walking on land cells_.",
    "examples": [
      {
        "input": "row = 2, col = 2, cells = \\[\\[1,1\\],\\[2,1\\],\\[1,2\\],\\[2,2\\]\\]",
        "output": "2",
        "explanation": "The above image depicts how the matrix changes each day starting from day 0."
      },
      {
        "input": "row = 2, col = 2, cells = \\[\\[1,1\\],\\[1,2\\],\\[2,1\\],\\[2,2\\]\\]",
        "output": "1",
        "explanation": "The above image depicts how the matrix changes each day starting from day 0."
      },
      {
        "input": "row = 3, col = 3, cells = \\[\\[1,2\\],\\[2,1\\],\\[3,3\\],\\[2,2\\],\\[1,1\\],\\[1,3\\],\\[2,3\\],\\[3,2\\],\\[3,1\\]\\]",
        "output": "3",
        "explanation": "The above image depicts how the matrix changes each day starting from day 0."
      }
    ],
    "constraints": [
      "`2 <= row, col <= 2  104`",
      "`4 <= row  col <= 2  104`",
      "`cells.length == row  col`",
      "`1 <= ri <= row`",
      "`1 <= ci <= col`",
      "All the values of `cells` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1971",
    "slug": "find-if-path-exists-in-graph",
    "title": "Find if Path Exists in Graph",
    "difficulty": "Easy",
    "description": "There is a **bi-directional** graph with `n` vertices, where each vertex is labeled from `0` to `n - 1` (**inclusive**). The edges in the graph are represented as a 2D integer array `edges`, where each `edges[i] = [ui, vi]` denotes a bi-directional edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by **at most one** edge, and no vertex has an edge to itself. You want to determine if there is a **valid path** that exists from vertex `source` to vertex `destination`. Given `edges` and the integers `n`, `source`, and `destination`, return `true` _if there is a **valid path** from_ `source` _to_ `destination`_, or_ `false` _otherwise__._",
    "examples": [
      {
        "input": "n = 3, edges = \\[\\[0,1\\],\\[1,2\\],\\[2,0\\]\\], source = 0, destination = 2",
        "output": "true",
        "explanation": "There are two paths from vertex 0 to vertex 2:"
      },
      {
        "input": "n = 6, edges = \\[\\[0,1\\],\\[0,2\\],\\[3,5\\],\\[5,4\\],\\[4,3\\]\\], source = 0, destination = 5",
        "output": "false",
        "explanation": "There is no path from vertex 0 to vertex 5."
      }
    ],
    "constraints": [
      "`1 <= n <= 2  105`",
      "`0 <= edges.length <= 2  105`",
      "`edges[i].length == 2`",
      "`0 <= ui, vi <= n - 1`",
      "`ui != vi`",
      "`0 <= source, destination <= n - 1`",
      "There are no duplicate edges.",
      "There are no self edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1973",
    "slug": "count-nodes-equal-to-sum-of-descendants",
    "title": "Count Nodes Equal to Sum of Descendants",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the number of nodes where the value of the node is equal to the **sum** of the values of its descendants_. A **descendant** of a node `x` is any node that is on the path from node `x` to some leaf node. The sum is considered to be `0` if the node has no descendants.",
    "examples": [
      {
        "input": "root = \\[10,3,4,2,1\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "root = \\[2,3,null,2,null\\]",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "root = \\[0\\]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 105]`.",
      "`0 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1974",
    "slug": "minimum-time-to-type-word-using-special-typewriter",
    "title": "Minimum Time to Type Word Using Special Typewriter",
    "difficulty": "Easy",
    "description": "There is a special typewriter with lowercase English letters `'a'` to `'z'` arranged in a **circle** with a **pointer**. A character can **only** be typed if the pointer is pointing to that character. The pointer is **initially** pointing to the character `'a'`. Each second, you may perform one of the following operations: *  Move the pointer one character **counterclockwise** or **clockwise**. *  Type the character the pointer is **currently** on. Given a string `word`, return the **minimum** number of seconds to type out the characters in `word`.",
    "examples": [
      {
        "input": "word =  \"abc \"",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "word =  \"bza \"",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "word =  \"zjpc \"",
        "output": "34",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= word.length <= 100`",
      "`word` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1975",
    "slug": "maximum-matrix-sum",
    "title": "Maximum Matrix Sum",
    "difficulty": "Medium",
    "description": "You are given an `n x n` integer `matrix`. You can do the following operation **any** number of times: *  Choose any two **adjacent** elements of `matrix` and **multiply** each of them by `-1`. Two elements are considered **adjacent** if and only if they share a **border**. Your goal is to **maximize** the summation of the matrix's elements. Return _the **maximum** sum of the matrix's elements using the operation mentioned above._",
    "examples": [
      {
        "input": "matrix = \\[\\[1,-1\\],\\[-1,1\\]\\]",
        "output": "4",
        "explanation": "We can follow the following steps to reach sum equals 4:"
      },
      {
        "input": "matrix = \\[\\[1,2,3\\],\\[-1,-2,-3\\],\\[1,2,3\\]\\]",
        "output": "16",
        "explanation": "We can follow the following step to reach sum equals 16:"
      }
    ],
    "constraints": [
      "`n == matrix.length == matrix[i].length`",
      "`2 <= n <= 250`",
      "`-105 <= matrix[i][j] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1976",
    "slug": "number-of-ways-to-arrive-at-destination",
    "title": "Number of Ways to Arrive at Destination",
    "difficulty": "Medium",
    "description": "You are in a city that consists of `n` intersections numbered from `0` to `n - 1` with **bi-directional** roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections. You are given an integer `n` and a 2D integer array `roads` where `roads[i] = [ui, vi, timei]` means that there is a road between intersections `ui` and `vi` that takes `timei` minutes to travel. You want to know in how many ways you can travel from intersection `0` to intersection `n - 1` in the **shortest amount of time**. Return _the **number of ways** you can arrive at your destination in the **shortest amount of time**_. Since the answer may be large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 7, roads = \\[\\[0,6,7\\],\\[0,1,2\\],\\[1,2,3\\],\\[1,3,3\\],\\[6,3,3\\],\\[3,5,1\\],\\[6,5,1\\],\\[2,5,1\\],\\[0,4,5\\],\\[4,6,2\\]\\]",
        "output": "4",
        "explanation": "The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes."
      },
      {
        "input": "n = 2, roads = \\[\\[1,0,10\\]\\]",
        "output": "1",
        "explanation": "There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes."
      }
    ],
    "constraints": [
      "`1 <= n <= 200`",
      "`n - 1 <= roads.length <= n  (n - 1) / 2`",
      "`roads[i].length == 3`",
      "`0 <= ui, vi <= n - 1`",
      "`1 <= timei <= 109`",
      "`ui != vi`",
      "There is at most one road connecting any two intersections.",
      "You can reach any intersection from any other intersection."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1977",
    "slug": "number-of-ways-to-separate-numbers",
    "title": "Number of Ways to Separate Numbers",
    "difficulty": "Hard",
    "description": "You wrote down many **positive** integers in a string called `num`. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was **non-decreasing** and that **no** integer had leading zeros. Return _the **number of possible lists of integers** that you could have written down to get the string_ `num`. Since the answer may be large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "num =  \"327 \"",
        "output": "2",
        "explanation": "You could have written down the numbers:"
      },
      {
        "input": "num =  \"094 \"",
        "output": "0",
        "explanation": "No numbers can have leading zeros and all numbers must be positive."
      },
      {
        "input": "num =  \"0 \"",
        "output": "0",
        "explanation": "No numbers can have leading zeros and all numbers must be positive."
      }
    ],
    "constraints": [
      "`1 <= num.length <= 3500`",
      "`num` consists of digits `'0'` through `'9'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1979",
    "slug": "find-greatest-common-divisor-of-array",
    "title": "Find Greatest Common Divisor of Array",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, return _the **greatest common divisor** of the smallest number and largest number in_ `nums`. The **greatest common divisor** of two numbers is the largest positive integer that evenly divides both numbers.",
    "examples": [
      {
        "input": "nums = \\[2,5,6,9,10\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[7,5,6,8,3\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "nums = \\[3,3\\]",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1980",
    "slug": "find-unique-binary-string",
    "title": "Find Unique Binary String",
    "difficulty": "Medium",
    "description": "Given an array of strings `nums` containing `n` **unique** binary strings each of length `n`, return _a binary string of length_ `n` _that **does not appear** in_ `nums`_. If there are multiple answers, you may return **any** of them_.",
    "examples": [
      {
        "input": "nums = \\[ \"01 \", \"10 \"\\]",
        "output": "\"11 \"",
        "explanation": "\"11 \" does not appear in nums.  \"00 \" would also be correct."
      },
      {
        "input": "nums = \\[ \"00 \", \"01 \"\\]",
        "output": "\"11 \"",
        "explanation": "\"11 \" does not appear in nums.  \"10 \" would also be correct."
      },
      {
        "input": "nums = \\[ \"111 \", \"011 \", \"001 \"\\]",
        "output": "\"101 \"",
        "explanation": "\"101 \" does not appear in nums.  \"000 \",  \"010 \",  \"100 \", and  \"110 \" would also be correct."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 16`",
      "`nums[i].length == n`",
      "`nums[i]` is either `'0'` or `'1'`.",
      "All the strings of `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1981",
    "slug": "minimize-the-difference-between-target-and-chosen-elements",
    "title": "Minimize the Difference Between Target and Chosen Elements",
    "difficulty": "Medium",
    "description": "You are given an `m x n` integer matrix `mat` and an integer `target`. Choose one integer from **each row** in the matrix such that the **absolute difference** between `target` and the **sum** of the chosen elements is **minimized**. Return _the **minimum absolute difference**_. The **absolute difference** between two numbers `a` and `b` is the absolute value of `a - b`.",
    "examples": [
      {
        "input": "mat = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], target = 13",
        "output": "0",
        "explanation": "One possible choice is to:"
      },
      {
        "input": "mat = \\[\\[1\\],\\[2\\],\\[3\\]\\], target = 100",
        "output": "94",
        "explanation": "The best possible choice is to:"
      },
      {
        "input": "mat = \\[\\[1,2,9,8,7\\]\\], target = 6",
        "output": "1",
        "explanation": "The best choice is to choose 7 from the first row."
      }
    ],
    "constraints": [
      "`m == mat.length`",
      "`n == mat[i].length`",
      "`1 <= m, n <= 70`",
      "`1 <= mat[i][j] <= 70`",
      "`1 <= target <= 800`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1982",
    "slug": "find-array-given-subset-sums",
    "title": "Find Array Given Subset Sums",
    "difficulty": "Hard",
    "description": "You are given an integer `n` representing the length of an unknown array that you are trying to recover. You are also given an array `sums` containing the values of all `2n` **subset sums** of the unknown array (in no particular order). Return _the array_ `ans` _of length_ `n` _representing the unknown array. If **multiple** answers exist, return **any** of them_. An array `sub` is a **subset** of an array `arr` if `sub` can be obtained from `arr` by deleting some (possibly zero or all) elements of `arr`. The sum of the elements in `sub` is one possible **subset sum** of `arr`. The sum of an empty array is considered to be `0`.",
    "examples": [
      {
        "input": "n = 3, sums = \\[-3,-2,-1,0,0,1,2,3\\]",
        "output": "\\[1,2,-3\\]",
        "explanation": "\\[1,2,-3\\] is able to achieve the given subset sums:"
      },
      {
        "input": "n = 2, sums = \\[0,0,0,0\\]",
        "output": "\\[0,0\\]",
        "explanation": "The only correct answer is \\[0,0\\]."
      },
      {
        "input": "n = 4, sums = \\[0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8\\]",
        "output": "\\[0,-1,4,5\\]",
        "explanation": "\\[0,-1,4,5\\] is able to achieve the given subset sums."
      }
    ],
    "constraints": [
      "`1 <= n <= 15`",
      "`sums.length == 2n`",
      "`-104 <= sums[i] <= 104`"
    ],
    "note": "Test cases are generated such that there will **always** be at least one correct answer.",
    "follow_up": null
  },
  {
    "id": "1983",
    "slug": "widest-pair-of-indices-with-equal-range-sum",
    "title": "Widest Pair of Indices With Equal Range Sum",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed** binary arrays `nums1` and `nums2`. Find the **widest** pair of indices `(i, j)` such that `i <= j` and `nums1[i] + nums1[i+1] + ... + nums1[j] == nums2[i] + nums2[i+1] + ... + nums2[j]`. The **widest** pair of indices is the pair with the **largest** **distance** between `i` and `j`. The **distance** between a pair of indices is defined as `j - i + 1`. Return _the **distance** of the **widest** pair of indices. If no pair of indices meets the conditions, return_ `0`.",
    "examples": [
      {
        "input": "nums1 = \\[1,1,0,1\\], nums2 = \\[0,1,1,0\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[0,1\\], nums2 = \\[1,1\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[0\\], nums2 = \\[1\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`1 <= n <= 105`",
      "`nums1[i]` is either `0` or `1`.",
      "`nums2[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1984",
    "slug": "minimum-difference-between-highest-and-lowest-of-k-scores",
    "title": "Minimum Difference Between Highest and Lowest of K Scores",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums`, where `nums[i]` represents the score of the `ith` student. You are also given an integer `k`. Pick the scores of any `k` students from the array so that the **difference** between the **highest** and the **lowest** of the `k` scores is **minimized**. Return _the **minimum** possible difference_.",
    "examples": [
      {
        "input": "nums = \\[90\\], k = 1",
        "output": "0",
        "explanation": "There is one way to pick score(s) of one student:"
      },
      {
        "input": "nums = \\[9,4,1,7\\], k = 2",
        "output": "2",
        "explanation": "There are six ways to pick score(s) of two students:"
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 1000`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1985",
    "slug": "find-the-kth-largest-integer-in-the-array",
    "title": "Find the Kth Largest Integer in the Array",
    "difficulty": "Medium",
    "description": "You are given an array of strings `nums` and an integer `k`. Each string in `nums` represents an integer without leading zeros. Return _the string that represents the_ `kth` _**largest integer** in_ `nums`. **Note**: Duplicate numbers should be counted distinctly. For example, if `nums` is `[ \"1 \", \"2 \", \"2 \"]`, `\"2 \"` is the first largest integer, `\"2 \"` is the second-largest integer, and `\"1 \"` is the third-largest integer.",
    "examples": [
      {
        "input": "nums = \\[ \"3 \", \"6 \", \"7 \", \"10 \"\\], k = 4",
        "output": "\"3 \"",
        "explanation": ""
      },
      {
        "input": "nums = \\[ \"2 \", \"21 \", \"12 \", \"1 \"\\], k = 3",
        "output": "\"2 \"",
        "explanation": ""
      },
      {
        "input": "nums = \\[ \"0 \", \"0 \"\\], k = 2",
        "output": "\"0 \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 104`",
      "`1 <= nums[i].length <= 100`",
      "`nums[i]` consists of only digits.",
      "`nums[i]` will not have any leading zeros."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1986",
    "slug": "minimum-number-of-work-sessions-to-finish-the-tasks",
    "title": "Minimum Number of Work Sessions to Finish the Tasks",
    "difficulty": "Medium",
    "description": "There are `n` tasks assigned to you. The task times are represented as an integer array `tasks` of length `n`, where the `ith` task takes `tasks[i]` hours to finish. A **work session** is when you work for **at most** `sessionTime` consecutive hours and then take a break. You should finish the given tasks in a way that satisfies the following conditions: *  If you start a task in a work session, you must complete it in the **same** work session. *  You can start a new task **immediately** after finishing the previous one. *  You may complete the tasks in **any order**. Given `tasks` and `sessionTime`, return _the **minimum** number of **work sessions** needed to finish all the tasks following the conditions above._ The tests are generated such that `sessionTime` is **greater** than or **equal** to the **maximum** element in `tasks[i]`.",
    "examples": [
      {
        "input": "tasks = \\[1,2,3\\], sessionTime = 3",
        "output": "2",
        "explanation": "You can finish the tasks in two work sessions."
      },
      {
        "input": "tasks = \\[3,1,3,1,1\\], sessionTime = 8",
        "output": "2",
        "explanation": "You can finish the tasks in two work sessions."
      },
      {
        "input": "tasks = \\[1,2,3,4,5\\], sessionTime = 15",
        "output": "1",
        "explanation": "You can finish all the tasks in one work session."
      }
    ],
    "constraints": [
      "`n == tasks.length`",
      "`1 <= n <= 14`",
      "`1 <= tasks[i] <= 10`",
      "`max(tasks[i]) <= sessionTime <= 15`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1987",
    "slug": "number-of-unique-good-subsequences",
    "title": "Number of Unique Good Subsequences",
    "difficulty": "Hard",
    "description": "You are given a binary string `binary`. A **subsequence** of `binary` is considered **good** if it is **not empty** and has **no leading zeros** (with the exception of `\"0 \"`). Find the number of **unique good subsequences** of `binary`. *  For example, if `binary = \"001 \"`, then all the **good** subsequences are `[ \"0 \", \"0 \", \"1 \"]`, so the **unique** good subsequences are `\"0 \"` and `\"1 \"`. Note that subsequences `\"00 \"`, `\"01 \"`, and `\"001 \"` are not good because they have leading zeros. Return _the number of **unique good subsequences** of_ `binary`. Since the answer may be very large, return it **modulo** `109 + 7`. A **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "binary =  \"001 \"",
        "output": "2",
        "explanation": "The good subsequences of binary are \\[ \"0 \",  \"0 \",  \"1 \"\\]."
      },
      {
        "input": "binary =  \"11 \"",
        "output": "2",
        "explanation": "The good subsequences of binary are \\[ \"1 \",  \"1 \",  \"11 \"\\]."
      },
      {
        "input": "binary =  \"101 \"",
        "output": "5",
        "explanation": "The good subsequences of binary are \\[ \"1 \",  \"0 \",  \"1 \",  \"10 \",  \"11 \",  \"101 \"\\]."
      }
    ],
    "constraints": [
      "`1 <= binary.length <= 105`",
      "`binary` consists of only `'0'`s and `'1'`s."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1989",
    "slug": "maximum-number-of-people-that-can-be-caught-in-tag",
    "title": "Maximum Number of People That Can Be Caught in Tag",
    "difficulty": "Medium",
    "description": "You are playing a game of tag with your friends. In tag, people are divided into two teams: people who are \"it \", and people who are not \"it \". The people who are \"it \" want to catch as many people as possible who are not \"it \". You are given a **0-indexed** integer array `team` containing only zeros (denoting people who are **not** \"it \") and ones (denoting people who are \"it \"), and an integer `dist`. A person who is \"it \" at index `i` can catch any **one** person whose index is in the range `[i - dist, i + dist]` (**inclusive**) and is **not** \"it \". Return _the **maximum** number of people that the people who are \"it \" can catch_.",
    "examples": [
      {
        "input": "team = \\[0,1,0,1,0\\], dist = 3",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "team = \\[1\\], dist = 1",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "team = \\[0\\], dist = 1",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= team.length <= 105`",
      "`0 <= team[i] <= 1`",
      "`1 <= dist <= team.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1991",
    "slug": "find-the-middle-index-in-array",
    "title": "Find the Middle Index in Array",
    "difficulty": "Easy",
    "description": "Given a **0-indexed** integer array `nums`, find the **leftmost** `middleIndex` (i.e., the smallest amongst all the possible ones). A `middleIndex` is an index where `nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1]`. If `middleIndex == 0`, the left side sum is considered to be `0`. Similarly, if `middleIndex == nums.length - 1`, the right side sum is considered to be `0`. Return _the **leftmost**_ `middleIndex` _that satisfies the condition, or_ `-1` _if there is no such index_.",
    "examples": [
      {
        "input": "nums = \\[2,3,-1,8,4\\]",
        "output": "3",
        "explanation": "The sum of the numbers before index 3 is: 2 + 3 + -1 = 4"
      },
      {
        "input": "nums = \\[1,-1,4\\]",
        "output": "2",
        "explanation": "The sum of the numbers before index 2 is: 1 + -1 = 0"
      },
      {
        "input": "nums = \\[2,5\\]",
        "output": "-1",
        "explanation": "There is no valid middleIndex."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`-1000 <= nums[i] <= 1000`"
    ],
    "note": "This question is the same as 724: [https://leetcode.com/problems/find-pivot-index/](https://leetcode.com/problems/find-pivot-index/)",
    "follow_up": null
  },
  {
    "id": "1992",
    "slug": "find-all-groups-of-farmland",
    "title": "Find All Groups of Farmland",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** `m x n` binary matrix `land` where a `0` represents a hectare of forested land and a `1` represents a hectare of farmland. To keep the land organized, there are designated rectangular areas of hectares that consist **entirely** of farmland. These rectangular areas are called **groups**. No two groups are adjacent, meaning farmland in one group is **not** four-directionally adjacent to another farmland in a different group. `land` can be represented by a coordinate system where the top left corner of `land` is `(0, 0)` and the bottom right corner of `land` is `(m-1, n-1)`. Find the coordinates of the top left and bottom right corner of each **group** of farmland. A **group** of farmland with a top left corner at `(r1, c1)` and a bottom right corner at `(r2, c2)` is represented by the 4-length array `[r1, c1, r2, c2].` Return _a 2D array containing the 4-length arrays described above for each **group** of farmland in_ `land`_. If there are no groups of farmland, return an empty array. You may return the answer in **any order**_.",
    "examples": [
      {
        "input": "land = \\[\\[1,0,0\\],\\[0,1,1\\],\\[0,1,1\\]\\]",
        "output": "\\[\\[0,0,0,0\\],\\[1,1,2,2\\]\\]",
        "explanation": ""
      },
      {
        "input": "land = \\[\\[1,1\\],\\[1,1\\]\\]",
        "output": "\\[\\[0,0,1,1\\]\\]",
        "explanation": ""
      },
      {
        "input": "land = \\[\\[0\\]\\]",
        "output": "\\[\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`m == land.length`",
      "`n == land[i].length`",
      "`1 <= m, n <= 300`",
      "`land` consists of only `0`'s and `1`'s.",
      "Groups of farmland are rectangular in shape."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1993",
    "slug": "operations-on-tree",
    "title": "Operations on Tree",
    "difficulty": "Medium",
    "description": "You are given a tree with `n` nodes numbered from `0` to `n - 1` in the form of a parent array `parent` where `parent[i]` is the parent of the `ith` node. The root of the tree is node `0`, so `parent[0] = -1` since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree. The data structure should support the following functions: *  **Lock:** **Locks** the given node for the given user and prevents other users from locking the same node. You may only lock a node using this function if the node is unlocked. *  **Unlock: Unlocks** the given node for the given user. You may only unlock a node using this function if it is currently locked by the same user. *  **Upgrade****: Locks** the given node for the given user and **unlocks** all of its descendants **regardless** of who locked it. You may only upgrade a node if **all** 3 conditions are true: *  The node is unlocked, *  It has at least one locked descendant (by **any** user), and *  It does not have any locked ancestors. Implement the `LockingTree` class: *  `LockingTree(int[] parent)` initializes the data structure with the parent array. *  `lock(int num, int user)` returns `true` if it is possible for the user with id `user` to lock the node `num`, or `false` otherwise. If it is possible, the node `num` will become **locked** by the user with id `user`. *  `unlock(int num, int user)` returns `true` if it is possible for the user with id `user` to unlock the node `num`, or `false` otherwise. If it is possible, the node `num` will become **unlocked**. *  `upgrade(int num, int user)` returns `true` if it is possible for the user with id `user` to upgrade the node `num`, or `false` otherwise. If it is possible, the node `num` will be **upgraded**.",
    "examples": [],
    "constraints": [
      "`n == parent.length`",
      "`2 <= n <= 2000`",
      "`0 <= parent[i] <= n - 1` for `i != 0`",
      "`parent[0] == -1`",
      "`0 <= num <= n - 1`",
      "`1 <= user <= 104`",
      "`parent` represents a valid tree.",
      "At most `2000` calls in total will be made to `lock`, `unlock`, and `upgrade`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1994",
    "slug": "the-number-of-good-subsets",
    "title": "The Number of Good Subsets",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums`. We call a subset of `nums` **good** if its product can be represented as a product of one or more **distinct prime** numbers. *  For example, if `nums = [1, 2, 3, 4]`: *  `[2, 3]`, `[1, 2, 3]`, and `[1, 3]` are **good** subsets with products `6 = 2*3`, `6 = 2*3`, and `3 = 3` respectively. *  `[1, 4]` and `[4]` are not **good** subsets with products `4 = 2*2` and `4 = 2*2` respectively. Return _the number of different **good** subsets in_ `nums` _**modulo**_ `109 + 7`. A **subset** of `nums` is any array that can be obtained by deleting some (possibly none or all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "6",
        "explanation": "The good subsets are:"
      },
      {
        "input": "nums = \\[4,2,3,15\\]",
        "output": "5",
        "explanation": "The good subsets are:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 30`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1996",
    "slug": "the-number-of-weak-characters-in-the-game",
    "title": "The Number of Weak Characters in the Game",
    "difficulty": "Medium",
    "description": "You are playing a game that contains multiple characters, and each of the characters has **two** main properties: **attack** and **defense**. You are given a 2D integer array `properties` where `properties[i] = [attacki, defensei]` represents the properties of the `ith` character in the game. A character is said to be **weak** if any other character has **both** attack and defense levels **strictly greater** than this character's attack and defense levels. More formally, a character `i` is said to be **weak** if there exists another character `j` where `attackj > attacki` and `defensej > defensei`. Return _the number of **weak** characters_.",
    "examples": [
      {
        "input": "properties = \\[\\[5,5\\],\\[6,3\\],\\[3,6\\]\\]",
        "output": "0",
        "explanation": "No character has strictly greater attack and defense than the other."
      },
      {
        "input": "properties = \\[\\[2,2\\],\\[3,3\\]\\]",
        "output": "1",
        "explanation": "The first character is weak because the second character has a strictly greater attack and defense."
      },
      {
        "input": "properties = \\[\\[1,5\\],\\[10,4\\],\\[4,3\\]\\]",
        "output": "1",
        "explanation": "The third character is weak because the second character has a strictly greater attack and defense."
      }
    ],
    "constraints": [
      "`2 <= properties.length <= 105`",
      "`properties[i].length == 2`",
      "`1 <= attacki, defensei <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1997",
    "slug": "first-day-where-you-have-been-in-all-the-rooms",
    "title": "First Day Where You Have Been in All the Rooms",
    "difficulty": "Medium",
    "description": "There are `n` rooms you need to visit, labeled from `0` to `n - 1`. Each day is labeled, starting from `0`. You will go in and visit one room a day. Initially on day `0`, you visit room `0`. The **order** you visit the rooms for the coming days is determined by the following **rules** and a given **0-indexed** array `nextVisit` of length `n`: *  Assuming that on a day, you visit room `i`, *  if you have been in room `i` an **odd** number of times (**including** the current visit), on the **next** day you will visit a room with a **lower or equal room number** specified by `nextVisit[i]` where `0 <= nextVisit[i] <= i`; *  if you have been in room `i` an **even** number of times (**including** the current visit), on the **next** day you will visit room `(i + 1) mod n`. Return _the label of the **first** day where you have been in **all** the rooms_. It can be shown that such a day exists. Since the answer may be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "nextVisit = \\[0,0\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nextVisit = \\[0,0,2\\]",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "nextVisit = \\[0,1,2,0\\]",
        "output": "6",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nextVisit.length`",
      "`2 <= n <= 105`",
      "`0 <= nextVisit[i] <= i`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1998",
    "slug": "gcd-sort-of-an-array",
    "title": "GCD Sort of an Array",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums`, and you can perform the following operation **any** number of times on `nums`: *  Swap the positions of two elements `nums[i]` and `nums[j]` if `gcd(nums[i], nums[j]) > 1` where `gcd(nums[i], nums[j])` is the **greatest common divisor** of `nums[i]` and `nums[j]`. Return `true` _if it is possible to sort_ `nums` _in **non-decreasing** order using the above swap method, or_ `false` _otherwise._",
    "examples": [
      {
        "input": "nums = \\[7,21,3\\]",
        "output": "true",
        "explanation": "We can sort \\[7,21,3\\] by performing the following operations:"
      },
      {
        "input": "nums = \\[5,2,6,2\\]",
        "output": "false",
        "explanation": "It is impossible to sort the array because 5 cannot be swapped with any other element."
      },
      {
        "input": "nums = \\[10,5,9,3,15\\]",
        "output": "true"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 3  104`",
      "`2 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "1999",
    "slug": "smallest-greater-multiple-made-of-two-digits",
    "title": "Smallest Greater Multiple Made of Two Digits",
    "difficulty": "Medium",
    "description": "Given three integers, `k`, `digit1`, and `digit2`, you want to find the **smallest** integer that is: *  **Larger** than `k`, *  A **multiple** of `k`, and *  Comprised of **only** the digits `digit1` and/or `digit2`. Return _the **smallest** such integer. If no such integer exists or the integer exceeds the limit of a signed 32-bit integer (_`231 - 1`_), return_ `-1`.",
    "examples": [
      {
        "input": "k = 2, digit1 = 0, digit2 = 2",
        "output": "20",
        "explanation": ""
      },
      {
        "input": "k = 3, digit1 = 4, digit2 = 2",
        "output": "24",
        "explanation": ""
      },
      {
        "input": "k = 2, digit1 = 0, digit2 = 0",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= k <= 1000`",
      "`0 <= digit1 <= 9`",
      "`0 <= digit2 <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2000",
    "slug": "reverse-prefix-of-word",
    "title": "Reverse Prefix of Word",
    "difficulty": "Easy",
    "description": "Given a **0-indexed** string `word` and a character `ch`, **reverse** the segment of `word` that starts at index `0` and ends at the index of the **first occurrence** of `ch` (**inclusive**). If the character `ch` does not exist in `word`, do nothing. *  For example, if `word = \"abcdefd \"` and `ch = \"d \"`, then you should **reverse** the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"dcbaefd \"`. Return _the resulting string_.",
    "examples": [
      {
        "input": "word =  \"abcdefd \", ch =  \"d \"",
        "output": "\"dcbaefd \"",
        "explanation": "The first occurrence of  \"d \" is at index 3."
      },
      {
        "input": "word =  \"xyxzxe \", ch =  \"z \"",
        "output": "\"zxyxxe \"",
        "explanation": "The first and only occurrence of  \"z \" is at index 3."
      },
      {
        "input": "word =  \"abcd \", ch =  \"z \"",
        "output": "\"abcd \"",
        "explanation": "\"z \" does not exist in word."
      }
    ],
    "constraints": [
      "`1 <= word.length <= 250`",
      "`word` consists of lowercase English letters.",
      "`ch` is a lowercase English letter."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2001",
    "slug": "number-of-pairs-of-interchangeable-rectangles",
    "title": "Number of Pairs of Interchangeable Rectangles",
    "difficulty": "Medium",
    "description": "You are given `n` rectangles represented by a **0-indexed** 2D integer array `rectangles`, where `rectangles[i] = [widthi, heighti]` denotes the width and height of the `ith` rectangle. Two rectangles `i` and `j` (`i < j`) are considered **interchangeable** if they have the **same** width-to-height ratio. More formally, two rectangles are **interchangeable** if `widthi/heighti == widthj/heightj` (using decimal division, not integer division). Return _the **number** of pairs of **interchangeable** rectangles in_ `rectangles`.",
    "examples": [
      {
        "input": "rectangles = \\[\\[4,8\\],\\[3,6\\],\\[10,20\\],\\[15,30\\]\\]",
        "output": "6",
        "explanation": "The following are the interchangeable pairs of rectangles by index (0-indexed):"
      },
      {
        "input": "rectangles = \\[\\[4,5\\],\\[7,8\\]\\]",
        "output": "0",
        "explanation": "There are no interchangeable pairs of rectangles."
      }
    ],
    "constraints": [
      "`n == rectangles.length`",
      "`1 <= n <= 105`",
      "`rectangles[i].length == 2`",
      "`1 <= widthi, heighti <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2002",
    "slug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
    "title": "Maximum Product of the Length of Two Palindromic Subsequences",
    "difficulty": "Medium",
    "description": "Given a string `s`, find two **disjoint palindromic subsequences** of `s` such that the **product** of their lengths is **maximized**. The two subsequences are **disjoint** if they do not both pick a character at the same index. Return _the **maximum** possible **product** of the lengths of the two palindromic subsequences_. A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is **palindromic** if it reads the same forward and backward.",
    "examples": [
      {
        "input": "s =  \"leetcodecom \"",
        "output": "9"
      },
      {
        "input": "s =  \"bb \"",
        "output": "1"
      },
      {
        "input": "s =  \"accbcaxxcxx \"",
        "output": "25"
      }
    ],
    "constraints": [
      "`2 <= s.length <= 12`",
      "`s` consists of lowercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2003",
    "slug": "smallest-missing-genetic-value-in-each-subtree",
    "title": "Smallest Missing Genetic Value in Each Subtree",
    "difficulty": "Hard",
    "description": "There is a **family tree** rooted at `0` consisting of `n` nodes numbered `0` to `n - 1`. You are given a **0-indexed** integer array `parents`, where `parents[i]` is the parent for node `i`. Since node `0` is the **root**, `parents[0] == -1`. There are `105` genetic values, each represented by an integer in the **inclusive** range `[1, 105]`. You are given a **0-indexed** integer array `nums`, where `nums[i]` is a **distinct** genetic value for node `i`. Return _an array_ `ans` _of length_ `n` _where_ `ans[i]` _is_ _the **smallest** genetic value that is **missing** from the subtree rooted at node_ `i`. The **subtree** rooted at a node `x` contains node `x` and all of its **descendant** nodes.",
    "examples": [
      {
        "input": "parents = \\[-1,0,0,2\\], nums = \\[1,2,3,4\\]",
        "output": "\\[5,1,1,1\\]",
        "explanation": "The answer for each subtree is calculated as follows:"
      },
      {
        "input": "parents = \\[-1,0,1,0,3,3\\], nums = \\[5,4,6,2,1,3\\]",
        "output": "\\[7,1,1,4,2,1\\]",
        "explanation": "The answer for each subtree is calculated as follows:"
      },
      {
        "input": "parents = \\[-1,2,3,0,2,4,1\\], nums = \\[2,3,4,5,6,7,8\\]",
        "output": "\\[1,1,1,1,1,1,1\\]",
        "explanation": "The value 1 is missing from all the subtrees."
      }
    ],
    "constraints": [
      "`n == parents.length == nums.length`",
      "`2 <= n <= 105`",
      "`0 <= parents[i] <= n - 1` for `i != 0`",
      "`parents[0] == -1`",
      "`parents` represents a valid tree.",
      "`1 <= nums[i] <= 105`",
      "Each `nums[i]` is distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2005",
    "slug": "subtree-removal-game-with-fibonacci-tree",
    "title": "Subtree Removal Game with Fibonacci Tree",
    "difficulty": "Hard",
    "description": "A **Fibonacci** tree is a binary tree created using the order function `order(n)`: *  `order(0)` is the empty tree. *  `order(1)` is a binary tree with only **one node**. *  `order(n)` is a binary tree that consists of a root node with the left subtree as `order(n - 2)` and the right subtree as `order(n - 1)`. Alice and Bob are playing a game with a **Fibonacci** tree with Alice staring first. On each turn, a player selects a node and removes that node **and** its subtree. The player that is forced to delete `root` loses. Given the integer `n`, return `true` if Alice wins the game or `false` if Bob wins, assuming both players play optimally. A subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.",
    "examples": [
      {
        "input": "n = 3",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "n = 2",
        "output": "true",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2006",
    "slug": "count-number-of-pairs-with-absolute-difference-k",
    "title": "Count Number of Pairs With Absolute Difference K",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` and an integer `k`, return _the number of pairs_ `(i, j)` _where_ `i < j` _such that_ `|nums[i] - nums[j]| == k`. The value of `|x|` is defined as: *  `x` if `x >= 0`. *  `-x` if `x < 0`.",
    "examples": [
      {
        "input": "nums = \\[1,2,2,1\\], k = 1",
        "output": "4",
        "explanation": "The pairs with an absolute difference of 1 are:"
      },
      {
        "input": "nums = \\[1,3\\], k = 3",
        "output": "0",
        "explanation": "There are no pairs with an absolute difference of 3."
      },
      {
        "input": "nums = \\[3,2,1,5,4\\], k = 2",
        "output": "3",
        "explanation": "The pairs with an absolute difference of 2 are:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 200`",
      "`1 <= nums[i] <= 100`",
      "`1 <= k <= 99`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2007",
    "slug": "find-original-array-from-doubled-array",
    "title": "Find Original Array From Doubled Array",
    "difficulty": "Medium",
    "description": "An integer array `original` is transformed into a **doubled** array `changed` by appending **twice the value** of every element in `original`, and then randomly **shuffling** the resulting array. Given an array `changed`, return `original` _if_ `changed` _is a **doubled** array. If_ `changed` _is not a **doubled** array, return an empty array. The elements in_ `original` _may be returned in **any** order_.",
    "examples": [
      {
        "input": "changed = \\[1,3,4,2,6,8\\]",
        "output": "\\[1,3,4\\]",
        "explanation": "One possible original array could be \\[1,3,4\\]:"
      },
      {
        "input": "changed = \\[6,3,0,1\\]",
        "output": "\\[\\]",
        "explanation": "changed is not a doubled array."
      },
      {
        "input": "changed = \\[1\\]",
        "output": "\\[\\]",
        "explanation": "changed is not a doubled array."
      }
    ],
    "constraints": [
      "`1 <= changed.length <= 105`",
      "`0 <= changed[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2008",
    "slug": "maximum-earnings-from-taxi",
    "title": "Maximum Earnings From Taxi",
    "difficulty": "Medium",
    "description": "There are `n` points on a road you are driving your taxi on. The `n` points on the road are labeled from `1` to `n` in the direction you are going, and you want to drive from point `1` to point `n` to make money by picking up passengers. You cannot change the direction of the taxi. The passengers are represented by a **0-indexed** 2D integer array `rides`, where `rides[i] = [starti, endi, tipi]` denotes the `ith` passenger requesting a ride from point `starti` to point `endi` who is willing to give a `tipi` dollar tip. For **each** passenger `i` you pick up, you **earn** `endi - starti + tipi` dollars. You may only drive **at most one** passenger at a time. Given `n` and `rides`, return _the **maximum** number of dollars you can earn by picking up the passengers optimally._",
    "examples": [
      {
        "input": "n = 5, rides = \\[\\[2,5,4\\],\\[1,5,1\\]\\]",
        "output": "7",
        "explanation": "We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars."
      },
      {
        "input": "n = 20, rides = \\[\\[1,6,1\\],\\[3,10,2\\],\\[10,12,3\\],\\[11,12,2\\],\\[12,15,2\\],\\[13,18,1\\]\\]",
        "output": "20",
        "explanation": "We will pick up the following passengers:"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`1 <= rides.length <= 3  104`",
      "`rides[i].length == 3`",
      "`1 <= starti < endi <= n`",
      "`1 <= tipi <= 105`"
    ],
    "note": "You may drop off a passenger and pick up a different passenger at the same point.",
    "follow_up": null
  },
  {
    "id": "2009",
    "slug": "minimum-number-of-operations-to-make-array-continuous",
    "title": "Minimum Number of Operations to Make Array Continuous",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums`. In one operation, you can replace **any** element in `nums` with **any** integer. `nums` is considered **continuous** if both of the following conditions are fulfilled: *  All elements in `nums` are **unique**. *  The difference between the **maximum** element and the **minimum** element in `nums` equals `nums.length - 1`. For example, `nums = [4, 2, 5, 3]` is **continuous**, but `nums = [1, 2, 3, 5, 6]` is **not continuous**. Return _the **minimum** number of operations to make_ `nums` **_continuous_**.",
    "examples": [
      {
        "input": "nums = \\[4,2,5,3\\]",
        "output": "0",
        "explanation": "nums is already continuous."
      },
      {
        "input": "nums = \\[1,2,3,5,6\\]",
        "output": "1",
        "explanation": "One possible solution is to change the last element to 4."
      },
      {
        "input": "nums = \\[1,10,100,1000\\]",
        "output": "3",
        "explanation": "One possible solution is to:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2011",
    "slug": "final-value-of-variable-after-performing-operations",
    "title": "Final Value of Variable After Performing Operations",
    "difficulty": "Easy",
    "description": "There is a programming language with only **four** operations and **one** variable `X`: *  `++X` and `X++` **increments** the value of the variable `X` by `1`. *  `--X` and `X--` **decrements** the value of the variable `X` by `1`. Initially, the value of `X` is `0`. Given an array of strings `operations` containing a list of operations, return _the **final** value of_ `X` _after performing all the operations_.",
    "examples": [
      {
        "input": "operations = \\[ \"--X \", \"X++ \", \"X++ \"\\]",
        "output": "1",
        "explanation": "The operations are performed as follows:"
      },
      {
        "input": "operations = \\[ \"++X \", \"++X \", \"X++ \"\\]",
        "output": "3",
        "explanation": "The operations are performed as follows:"
      },
      {
        "input": "operations = \\[ \"X++ \", \"++X \", \"--X \", \"X-- \"\\]",
        "output": "0",
        "explanation": "The operations are performed as follows:"
      }
    ],
    "constraints": [
      "`1 <= operations.length <= 100`",
      "`operations[i]` will be either `\"++X \"`, `\"X++ \"`, `\"--X \"`, or `\"X-- \"`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2012",
    "slug": "sum-of-beauty-in-the-array",
    "title": "Sum of Beauty in the Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. For each index `i` (`1 <= i <= nums.length - 2`) the **beauty** of `nums[i]` equals: *  `2`, if `nums[j] < nums[i] < nums[k]`, for **all** `0 <= j < i` and for **all** `i < k <= nums.length - 1`. *  `1`, if `nums[i - 1] < nums[i] < nums[i + 1]`, and the previous condition is not satisfied. *  `0`, if none of the previous conditions holds. Return _the **sum of beauty** of all_ `nums[i]` _where_ `1 <= i <= nums.length - 2`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "2",
        "explanation": "For each index i in the range 1 <= i <= 1:"
      },
      {
        "input": "nums = \\[2,4,6,4\\]",
        "output": "1",
        "explanation": "For each index i in the range 1 <= i <= 2:"
      },
      {
        "input": "nums = \\[3,2,1\\]",
        "output": "0",
        "explanation": "For each index i in the range 1 <= i <= 1:"
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2013",
    "slug": "detect-squares",
    "title": "Detect Squares",
    "difficulty": "Medium",
    "description": "You are given a stream of points on the X-Y plane. Design an algorithm that: *  **Adds** new points from the stream into a data structure. **Duplicate** points are allowed and should be treated as different points. *  Given a query point, **counts** the number of ways to choose three points from the data structure such that the three points and the query point form an **axis-aligned square** with **positive area**. An **axis-aligned square** is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis. Implement the `DetectSquares` class: *  `DetectSquares()` Initializes the object with an empty data structure. *  `void add(int[] point)` Adds a new point `point = [x, y]` to the data structure. *  `int count(int[] point)` Counts the number of ways to form **axis-aligned squares** with point `point = [x, y]` as described above.",
    "examples": [],
    "constraints": [
      "`point.length == 2`",
      "`0 <= x, y <= 1000`",
      "At most `3000` calls in total will be made to `add` and `count`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2014",
    "slug": "longest-subsequence-repeated-k-times",
    "title": "Longest Subsequence Repeated k Times",
    "difficulty": "Hard",
    "description": "You are given a string `s` of length `n`, and an integer `k`. You are tasked to find the **longest subsequence repeated** `k` times in string `s`. A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A subsequence `seq` is **repeated** `k` times in the string `s` if `seq * k` is a subsequence of `s`, where `seq * k` represents a string constructed by concatenating `seq` `k` times. *  For example, `\"bba \"` is repeated `2` times in the string `\"bababcba \"`, because the string `\"bbabba \"`, constructed by concatenating `\"bba \"` `2` times, is a subsequence of the string `\"**b**a**bab**c**ba** \"`. Return _the **longest subsequence repeated**_ `k` _times in string_ `s`_. If multiple such subsequences are found, return the **lexicographically largest** one. If there is no such subsequence, return an **empty** string_.",
    "examples": [
      {
        "input": "s =  \"letsleetcode \", k = 2",
        "output": "\"let \"",
        "explanation": "There are two longest subsequences repeated 2 times:  \"let \" and  \"ete \"."
      },
      {
        "input": "s =  \"bb \", k = 2",
        "output": "\"b \"",
        "explanation": "The longest subsequence repeated 2 times is  \"b \"."
      },
      {
        "input": "s =  \"ab \", k = 2",
        "output": "\" \"",
        "explanation": "There is no subsequence repeated 2 times. Empty string is returned."
      }
    ],
    "constraints": [
      "`n == s.length`",
      "`2 <= n, k <= 2000`",
      "`2 <= n < k  8`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2015",
    "slug": "average-height-of-buildings-in-each-segment",
    "title": "Average Height of Buildings in Each Segment",
    "difficulty": "Medium",
    "description": "A perfectly straight street is represented by a number line. The street has building(s) on it and is represented by a 2D integer array `buildings`, where `buildings[i] = [starti, endi, heighti]`. This means that there is a building with `heighti` in the **half-closed segment** `[starti, endi)`. You want to **describe** the heights of the buildings on the street with the **minimum** number of non-overlapping **segments**. The street can be represented by the 2D integer array `street` where `street[j] = [leftj, rightj, averagej]` describes a **half-closed segment** `[leftj, rightj)` of the road where the **average** heights of the buildings in the **segment** is `averagej`. *  For example, if `buildings = [[1,5,2],[3,10,4]],` the street could be represented by `street = [[1,3,2],[3,5,3],[5,10,4]]` because: *  From 1 to 3, there is only the first building with an average height of `2 / 1 = 2`. *  From 3 to 5, both the first and the second building are there with an average height of `(2+4) / 2 = 3`. *  From 5 to 10, there is only the second building with an average height of `4 / 1 = 4`. Given `buildings`, return _the 2D integer array_ `street` _as described above (**excluding** any areas of the street where there are no buldings). You may return the array in **any order**_. The **average** of `n` elements is the **sum** of the `n` elements divided (**integer division**) by `n`. A **half-closed segment** `[a, b)` is the section of the number line between points `a` and `b` **including** point `a` and **not including** point `b`.",
    "examples": [
      {
        "input": "buildings = \\[\\[1,4,2\\],\\[3,9,4\\]\\]",
        "output": "\\[\\[1,3,2\\],\\[3,4,3\\],\\[4,9,4\\]\\]",
        "explanation": ""
      },
      {
        "input": "buildings = \\[\\[1,3,2\\],\\[2,5,3\\],\\[2,8,3\\]\\]",
        "output": "\\[\\[1,3,2\\],\\[3,8,3\\]\\]",
        "explanation": ""
      },
      {
        "input": "buildings = \\[\\[1,2,1\\],\\[5,6,1\\]\\]",
        "output": "\\[\\[1,2,1\\],\\[5,6,1\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= buildings.length <= 105`",
      "`buildings[i].length == 3`",
      "`0 <= starti < endi <= 108`",
      "`1 <= heighti <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2016",
    "slug": "maximum-difference-between-increasing-elements",
    "title": "Maximum Difference Between Increasing Elements",
    "difficulty": "Easy",
    "description": "Given a **0-indexed** integer array `nums` of size `n`, find the **maximum difference** between `nums[i]` and `nums[j]` (i.e., `nums[j] - nums[i]`), such that `0 <= i < j < n` and `nums[i] < nums[j]`. Return _the **maximum difference**._ If no such `i` and `j` exists, return `-1`.",
    "examples": [
      {
        "input": "nums = \\[7,**1**,**5**,4\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "nums = \\[9,4,3,2\\]",
        "output": "-1",
        "explanation": ""
      },
      {
        "input": "nums = \\[**1**,5,2,**10**\\]",
        "output": "9",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`2 <= n <= 1000`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2017",
    "slug": "grid-game",
    "title": "Grid Game",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** 2D array `grid` of size `2 x n`, where `grid[r][c]` represents the number of points at position `(r, c)` on the matrix. Two robots are playing a game on this matrix. Both robots initially start at `(0, 0)` and want to reach `(1, n-1)`. Each robot may only move to the **right** (`(r, c)` to `(r, c + 1)`) or **down** (`(r, c)` to `(r + 1, c)`). At the start of the game, the **first** robot moves from `(0, 0)` to `(1, n-1)`, collecting all the points from the cells on its path. For all cells `(r, c)` traversed on the path, `grid[r][c]` is set to `0`. Then, the **second** robot moves from `(0, 0)` to `(1, n-1)`, collecting the points on its path. Note that their paths may intersect with one another. The **first** robot wants to **minimize** the number of points collected by the **second** robot. In contrast, the **second** robot wants to **maximize** the number of points it collects. If both robots play **optimally**, return _the **number of points** collected by the **second** robot._",
    "examples": [
      {
        "input": "grid = \\[\\[2,5,4\\],\\[1,5,1\\]\\]",
        "output": "4",
        "explanation": "The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue."
      },
      {
        "input": "grid = \\[\\[3,3,1\\],\\[8,5,2\\]\\]",
        "output": "4",
        "explanation": "The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue."
      },
      {
        "input": "grid = \\[\\[1,3,1,15\\],\\[1,3,3,1\\]\\]",
        "output": "7",
        "explanation": "The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue."
      }
    ],
    "constraints": [
      "`grid.length == 2`",
      "`n == grid[r].length`",
      "`1 <= n <= 5  104`",
      "`1 <= grid[r][c] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2018",
    "slug": "check-if-word-can-be-placed-in-crossword",
    "title": "Check if Word Can Be Placed In Crossword",
    "difficulty": "Medium",
    "description": "You are given an `m x n` matrix `board`, representing the **current** state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), `' '` to represent any **empty** cells, and `'#'` to represent any **blocked** cells. A word can be placed **horizontally** (left to right **or** right to left) or **vertically** (top to bottom **or** bottom to top) in the board if: *  It does not occupy a cell containing the character `'#'`. *  The cell each letter is placed in must either be `' '` (empty) or **match** the letter already on the `board`. *  There must not be any empty cells `' '` or other lowercase letters **directly left or right** of the word if the word was placed **horizontally**. *  There must not be any empty cells `' '` or other lowercase letters **directly above or below** the word if the word was placed **vertically**. Given a string `word`, return `true` _if_ `word` _can be placed in_ `board`_, or_ `false` _**otherwise**_.",
    "examples": [
      {
        "input": "board = \\[\\[ \"# \",  \"  \",  \"# \"\\], \\[ \"  \",  \"  \",  \"# \"\\], \\[ \"# \",  \"c \",  \"  \"\\]\\], word =  \"abc \"",
        "output": "true",
        "explanation": "The word  \"abc \" can be placed as shown above (top to bottom)."
      },
      {
        "input": "board = \\[\\[ \"  \",  \"# \",  \"a \"\\], \\[ \"  \",  \"# \",  \"c \"\\], \\[ \"  \",  \"# \",  \"a \"\\]\\], word =  \"ac \"",
        "output": "false",
        "explanation": "It is impossible to place the word because there will always be a space/letter above or below it."
      },
      {
        "input": "board = \\[\\[ \"# \",  \"  \",  \"# \"\\], \\[ \"  \",  \"  \",  \"# \"\\], \\[ \"# \",  \"  \",  \"c \"\\]\\], word =  \"ca \"",
        "output": "true",
        "explanation": "The word  \"ca \" can be placed as shown above (right to left)."
      }
    ],
    "constraints": [
      "`m == board.length`",
      "`n == board[i].length`",
      "`1 <= m  n <= 2  105`",
      "`board[i][j]` will be `' '`, `'#'`, or a lowercase English letter.",
      "`1 <= word.length <= max(m, n)`",
      "`word` will contain only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2019",
    "slug": "the-score-of-students-solving-math-expression",
    "title": "The Score of Students Solving Math Expression",
    "difficulty": "Hard",
    "description": "You are given a string `s` that contains digits `0-9`, addition symbols `'+'`, and multiplication symbols `'*'` **only**, representing a **valid** math expression of **single digit numbers** (e.g., `3+5*2`). This expression was given to `n` elementary school students. The students were instructed to get the answer of the expression by following this **order of operations**: 1. Compute **multiplication**, reading from **left to right**; Then, 2. Compute **addition**, reading from **left to right**. You are given an integer array `answers` of length `n`, which are the submitted answers of the students in no particular order. You are asked to grade the `answers`, by following these **rules**: *  If an answer **equals** the correct answer of the expression, this student will be rewarded `5` points; *  Otherwise, if the answer **could be interpreted** as if the student applied the operators **in the wrong order** but had **correct arithmetic**, this student will be rewarded `2` points; *  Otherwise, this student will be rewarded `0` points. Return _the sum of the points of the students_.",
    "examples": [
      {
        "input": "s =  \"7+3\\*1\\*2 \", answers = \\[20,13,42\\]",
        "output": "7",
        "explanation": "As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: \\[20,**13**,42\\]"
      },
      {
        "input": "s =  \"3+5\\*2 \", answers = \\[13,0,10,13,13,16,16\\]",
        "output": "19",
        "explanation": "The correct answer of the expression is 13, therefore three students are rewarded 5 points each: \\[**13**,0,10,**13**,**13**,16,16\\]"
      },
      {
        "input": "s =  \"6+0\\*1 \", answers = \\[12,9,6,4,8,6\\]",
        "output": "10",
        "explanation": "The correct answer of the expression is 6."
      }
    ],
    "constraints": [
      "`3 <= s.length <= 31`",
      "`s` represents a valid expression that contains only digits `0-9`, `'+'`, and `''` only.",
      "All the integer operands in the expression are in the inclusive range `[0, 9]`.",
      "`1 <=` The count of all operators (`'+'` and `''`) in the math expression `<= 15`",
      "Test data are generated such that the correct answer of the expression is in the range of `[0, 1000]`.",
      "`n == answers.length`",
      "`1 <= n <= 104`",
      "`0 <= answers[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2021",
    "slug": "brightest-position-on-street",
    "title": "Brightest Position on Street",
    "difficulty": "Medium",
    "description": "A perfectly straight street is represented by a number line. The street has street lamp(s) on it and is represented by a 2D integer array `lights`. Each `lights[i] = [positioni, rangei]` indicates that there is a street lamp at position `positioni` that lights up the area from `[positioni - rangei, positioni + rangei]` (**inclusive**). The **brightness** of a position `p` is defined as the number of street lamp that light up the position `p`. Given `lights`, return _the **brightest** position on the_ _street. If there are multiple brightest positions, return the **smallest** one._",
    "examples": [
      {
        "input": "lights = \\[\\[-3,2\\],\\[1,2\\],\\[3,3\\]\\]",
        "output": "-1",
        "explanation": ""
      },
      {
        "input": "lights = \\[\\[1,0\\],\\[0,1\\]\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "lights = \\[\\[1,2\\]\\]",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= lights.length <= 105`",
      "`lights[i].length == 2`",
      "`-108 <= positioni <= 108`",
      "`0 <= rangei <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2022",
    "slug": "convert-1d-array-into-2d-array",
    "title": "Convert 1D Array Into 2D Array",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** 1-dimensional (1D) integer array `original`, and two integers, `m` and `n`. You are tasked with creating a 2-dimensional (2D) array with `m` rows and `n` columns using **all** the elements from `original`. The elements from indices `0` to `n - 1` (**inclusive**) of `original` should form the first row of the constructed 2D array, the elements from indices `n` to `2 * n - 1` (**inclusive**) should form the second row of the constructed 2D array, and so on. Return _an_ `m x n` _2D array constructed according to the above procedure, or an empty 2D array if it is impossible_.",
    "examples": [
      {
        "input": "original = \\[1,2,3,4\\], m = 2, n = 2",
        "output": "\\[\\[1,2\\],\\[3,4\\]\\]",
        "explanation": "The constructed 2D array should contain 2 rows and 2 columns."
      },
      {
        "input": "original = \\[1,2,3\\], m = 1, n = 3",
        "output": "\\[\\[1,2,3\\]\\]",
        "explanation": "The constructed 2D array should contain 1 row and 3 columns."
      },
      {
        "input": "original = \\[1,2\\], m = 1, n = 1",
        "output": "\\[\\]",
        "explanation": "There are 2 elements in original."
      }
    ],
    "constraints": [
      "`1 <= original.length <= 5  104`",
      "`1 <= original[i] <= 105`",
      "`1 <= m, n <= 4  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2023",
    "slug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
    "title": "Number of Pairs of Strings With Concatenation Equal to Target",
    "difficulty": "Medium",
    "description": "Given an array of **digit** strings `nums` and a **digit** string `target`, return _the number of pairs of indices_ `(i, j)` _(where_ `i != j`_) such that the **concatenation** of_ `nums[i] + nums[j]` _equals_ `target`.",
    "examples": [
      {
        "input": "nums = \\[ \"777 \", \"7 \", \"77 \", \"77 \"\\], target =  \"7777 \"",
        "output": "4",
        "explanation": "Valid pairs are:"
      },
      {
        "input": "nums = \\[ \"123 \", \"4 \", \"12 \", \"34 \"\\], target =  \"1234 \"",
        "output": "2",
        "explanation": "Valid pairs are:"
      },
      {
        "input": "nums = \\[ \"1 \", \"1 \", \"1 \"\\], target =  \"11 \"",
        "output": "6",
        "explanation": "Valid pairs are:"
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 100`",
      "`1 <= nums[i].length <= 100`",
      "`2 <= target.length <= 100`",
      "`nums[i]` and `target` consist of digits.",
      "`nums[i]` and `target` do not have leading zeros."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2024",
    "slug": "maximize-the-confusion-of-an-exam",
    "title": "Maximize the Confusion of an Exam",
    "difficulty": "Medium",
    "description": "A teacher is writing a test with `n` true/false questions, with `'T'` denoting true and `'F'` denoting false. He wants to confuse the students by **maximizing** the number of **consecutive** questions with the **same** answer (multiple trues or multiple falses in a row). You are given a string `answerKey`, where `answerKey[i]` is the original answer to the `ith` question. In addition, you are given an integer `k`, the maximum number of times you may perform the following operation: *  Change the answer key for any question to `'T'` or `'F'` (i.e., set `answerKey[i]` to `'T'` or `'F'`). Return _the **maximum** number of consecutive_ `'T'`s or `'F'`s _in the answer key after performing the operation at most_ `k` _times_.",
    "examples": [
      {
        "input": "answerKey =  \"TTFF \", k = 2",
        "output": "4",
        "explanation": "We can replace both the 'F's with 'T's to make answerKey =  \"TTTT \"."
      },
      {
        "input": "answerKey =  \"TFFT \", k = 1",
        "output": "3",
        "explanation": "We can replace the first 'T' with an 'F' to make answerKey =  \"FFFT \"."
      },
      {
        "input": "answerKey =  \"TTFTTFTT \", k = 1",
        "output": "5",
        "explanation": "We can replace the first 'F' to make answerKey =  \"TTTTTFTT \""
      }
    ],
    "constraints": [
      "`n == answerKey.length`",
      "`1 <= n <= 5  104`",
      "`answerKey[i]` is either `'T'` or `'F'`",
      "`1 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2025",
    "slug": "maximum-number-of-ways-to-partition-an-array",
    "title": "Maximum Number of Ways to Partition an Array",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** integer array `nums` of length `n`. The number of ways to **partition** `nums` is the number of `pivot` indices that satisfy both conditions: *  `1 <= pivot < n` *  `nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]` You are also given an integer `k`. You can choose to change the value of **one** element of `nums` to `k`, or to leave the array **unchanged**. Return _the **maximum** possible number of ways to **partition**_ `nums` _to satisfy both conditions after changing **at most** one element_.",
    "examples": [
      {
        "input": "nums = \\[2,-1,2\\], k = 3",
        "output": "1",
        "explanation": "One optimal approach is to change nums\\[0\\] to k. The array becomes \\[**3**,-1,2\\]."
      },
      {
        "input": "nums = \\[0,0,0\\], k = 1",
        "output": "2",
        "explanation": "The optimal approach is to leave the array unchanged."
      },
      {
        "input": "nums = \\[22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14\\], k = -33",
        "output": "4",
        "explanation": "One optimal approach is to change nums\\[2\\] to k. The array becomes \\[22,4,**\\-33**,-20,-15,15,-16,7,19,-10,0,-13,-14\\]."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`2 <= n <= 105`",
      "`-105 <= k, nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2027",
    "slug": "minimum-moves-to-convert-string",
    "title": "Minimum Moves to Convert String",
    "difficulty": "Easy",
    "description": "You are given a string `s` consisting of `n` characters which are either `'X'` or `'O'`. A **move** is defined as selecting **three** **consecutive characters** of `s` and converting them to `'O'`. Note that if a move is applied to the character `'O'`, it will stay the **same**. Return _the **minimum** number of moves required so that all the characters of_ `s` _are converted to_ `'O'`.",
    "examples": [
      {
        "input": "s =  \"XXX \"",
        "output": "1",
        "explanation": "XXX -> OOO"
      },
      {
        "input": "s =  \"XXOX \"",
        "output": "2",
        "explanation": "XXOX -> OOOX -> OOOO"
      },
      {
        "input": "s =  \"OOOO \"",
        "output": "0",
        "explanation": "There are no `'X's` in `s` to convert."
      }
    ],
    "constraints": [
      "`3 <= s.length <= 1000`",
      "`s[i]` is either `'X'` or `'O'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2028",
    "slug": "find-missing-observations",
    "title": "Find Missing Observations",
    "difficulty": "Medium",
    "description": "You have observations of `n + m` **6-sided** dice rolls with each face numbered from `1` to `6`. `n` of the observations went missing, and you only have the observations of `m` rolls. Fortunately, you have also calculated the **average value** of the `n + m` rolls. You are given an integer array `rolls` of length `m` where `rolls[i]` is the value of the `ith` observation. You are also given the two integers `mean` and `n`. Return _an array of length_ `n` _containing the missing observations such that the **average value** of the_ `n + m` _rolls is **exactly**_ `mean`. If there are multiple valid answers, return _any of them_. If no such array exists, return _an empty array_. The **average value** of a set of `k` numbers is the sum of the numbers divided by `k`. Note that `mean` is an integer, so the sum of the `n + m` rolls should be divisible by `n + m`.",
    "examples": [
      {
        "input": "rolls = \\[3,2,4,3\\], mean = 4, n = 2",
        "output": "\\[6,6\\]",
        "explanation": "The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4."
      },
      {
        "input": "rolls = \\[1,5,6\\], mean = 3, n = 4",
        "output": "\\[2,3,2,2\\]",
        "explanation": "The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3."
      },
      {
        "input": "rolls = \\[1,2,3,4\\], mean = 6, n = 4",
        "output": "\\[\\]",
        "explanation": "It is impossible for the mean to be 6 no matter what the 4 missing rolls are."
      }
    ],
    "constraints": [
      "`m == rolls.length`",
      "`1 <= n, m <= 105`",
      "`1 <= rolls[i], mean <= 6`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2029",
    "slug": "stone-game-ix",
    "title": "Stone Game IX",
    "difficulty": "Medium",
    "description": "Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array `stones`, where `stones[i]` is the **value** of the `ith` stone. Alice and Bob take turns, with **Alice** starting first. On each turn, the player may remove any stone from `stones`. The player who removes a stone **loses** if the **sum** of the values of **all removed stones** is divisible by `3`. Bob will win automatically if there are no remaining stones (even if it is Alice's turn). Assuming both players play **optimally**, return `true` _if Alice wins and_ `false` _if Bob wins_.",
    "examples": [
      {
        "input": "stones = \\[2,1\\]",
        "output": "true",
        "explanation": "The game will be played as follows:"
      },
      {
        "input": "stones = \\[2\\]",
        "output": "false",
        "explanation": "Alice will remove the only stone, and the sum of the values on the removed stones is 2."
      },
      {
        "input": "stones = \\[5,1,2,4,3\\]",
        "output": "false",
        "explanation": "Bob will always win. One possible way for Bob to win is shown below:"
      }
    ],
    "constraints": [
      "`1 <= stones.length <= 105`",
      "`1 <= stones[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2030",
    "slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
    "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
    "difficulty": "Hard",
    "description": "You are given a string `s`, an integer `k`, a letter `letter`, and an integer `repetition`. Return _the **lexicographically smallest** subsequence of_ `s` _of length_ `k` _that has the letter_ `letter` _appear **at least**_ `repetition` _times_. The test cases are generated so that the `letter` appears in `s` **at least** `repetition` times. A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string `a` is **lexicographically smaller** than a string `b` if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`.",
    "examples": [
      {
        "input": "s =  \"leet \", k = 3, letter =  \"e \", repetition = 1",
        "output": "\"eet \"",
        "explanation": "There are four subsequences of length 3 that have the letter 'e' appear at least 1 time:"
      },
      {
        "input": "s =  \"leetcode \", k = 4, letter =  \"e \", repetition = 2",
        "output": "\"ecde \"",
        "explanation": "\"ecde \" is the lexicographically smallest subsequence of length 4 that has the letter  \"e \" appear at least 2 times."
      },
      {
        "input": "s =  \"bb \", k = 2, letter =  \"b \", repetition = 2",
        "output": "\"bb \"",
        "explanation": "\"bb \" is the only subsequence of length 2 that has the letter  \"b \" appear at least 2 times."
      }
    ],
    "constraints": [
      "`1 <= repetition <= k <= s.length <= 5  104`",
      "`s` consists of lowercase English letters.",
      "`letter` is a lowercase English letter, and appears in `s` at least `repetition` times."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2031",
    "slug": "count-subarrays-with-more-ones-than-zeros",
    "title": "Count Subarrays With More Ones Than Zeros",
    "difficulty": "Medium",
    "description": "You are given a binary array `nums` containing only the integers `0` and `1`. Return _the number of **subarrays** in nums that have **more**_ `1`'_s than_ `0`_'s. Since the answer may be very large, return it **modulo**_ `109 + 7`. A **subarray** is a contiguous sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[0,1,1,0,1\\]",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "nums = \\[0\\]",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "nums = \\[1\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2032",
    "slug": "two-out-of-three",
    "title": "Two Out of Three",
    "difficulty": "Easy",
    "description": "Given three integer arrays `nums1`, `nums2`, and `nums3`, return _a **distinct** array containing all the values that are present in **at least two** out of the three arrays. You may return the values in **any** order_.",
    "examples": [
      {
        "input": "nums1 = \\[1,1,3,2\\], nums2 = \\[2,3\\], nums3 = \\[3\\]",
        "output": "\\[3,2\\]",
        "explanation": "The values that are present in at least two arrays are:"
      },
      {
        "input": "nums1 = \\[3,1\\], nums2 = \\[2,3\\], nums3 = \\[1,2\\]",
        "output": "\\[2,3,1\\]",
        "explanation": "The values that are present in at least two arrays are:"
      },
      {
        "input": "nums1 = \\[1,2,2\\], nums2 = \\[4,3,3\\], nums3 = \\[5\\]",
        "output": "\\[\\]",
        "explanation": "No value is present in at least two arrays."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length, nums3.length <= 100`",
      "`1 <= nums1[i], nums2[j], nums3[k] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2033",
    "slug": "minimum-operations-to-make-a-uni-value-grid",
    "title": "Minimum Operations to Make a Uni-Value Grid",
    "difficulty": "Medium",
    "description": "You are given a 2D integer `grid` of size `m x n` and an integer `x`. In one operation, you can **add** `x` to or **subtract** `x` from any element in the `grid`. A **uni-value grid** is a grid where all the elements of it are equal. Return _the **minimum** number of operations to make the grid **uni-value**_. If it is not possible, return `-1`.",
    "examples": [
      {
        "input": "grid = \\[\\[2,4\\],\\[6,8\\]\\], x = 2",
        "output": "4",
        "explanation": "We can make every element equal to 4 by doing the following:"
      },
      {
        "input": "grid = \\[\\[1,5\\],\\[2,3\\]\\], x = 1",
        "output": "5",
        "explanation": "We can make every element equal to 3."
      },
      {
        "input": "grid = \\[\\[1,2\\],\\[3,4\\]\\], x = 2",
        "output": "-1",
        "explanation": "It is impossible to make every element equal."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 105`",
      "`1 <= m  n <= 105`",
      "`1 <= x, grid[i][j] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2034",
    "slug": "stock-price-fluctuation",
    "title": "Stock Price Fluctuation ",
    "difficulty": "Medium",
    "description": "You are given a stream of **records** about a particular stock. Each record contains a **timestamp** and the corresponding **price** of the stock at that timestamp. Unfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream **correcting** the price of the previous wrong record. Design an algorithm that: *  **Updates** the price of the stock at a particular timestamp, **correcting** the price from any previous records at the timestamp. *  Finds the **latest price** of the stock based on the current records. The **latest price** is the price at the latest timestamp recorded. *  Finds the **maximum price** the stock has been based on the current records. *  Finds the **minimum price** the stock has been based on the current records. Implement the `StockPrice` class: *  `StockPrice()` Initializes the object with no price records. *  `void update(int timestamp, int price)` Updates the `price` of the stock at the given `timestamp`. *  `int current()` Returns the **latest price** of the stock. *  `int maximum()` Returns the **maximum price** of the stock. *  `int minimum()` Returns the **minimum price** of the stock.",
    "examples": [],
    "constraints": [
      "`1 <= timestamp, price <= 109`",
      "At most `105` calls will be made in total to `update`, `current`, `maximum`, and `minimum`.",
      "`current`, `maximum`, and `minimum` will be called only after `update` has been called at least once."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2035",
    "slug": "partition-array-into-two-arrays-to-minimize-sum-difference",
    "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` of `2 * n` integers. You need to partition `nums` into **two** arrays of length `n` to **minimize the absolute difference** of the **sums** of the arrays. To partition `nums`, put each element of `nums` into **one** of the two arrays. Return _the **minimum** possible absolute difference_.",
    "examples": [
      {
        "input": "nums = \\[3,9,7,3\\]",
        "output": "2",
        "explanation": "One optimal partition is: \\[3,9\\] and \\[7,3\\]."
      },
      {
        "input": "nums = \\[-36,36\\]",
        "output": "72",
        "explanation": "One optimal partition is: \\[-36\\] and \\[36\\]."
      },
      {
        "input": "nums = \\[2,-1,0,4,-2,-9\\]",
        "output": "0",
        "explanation": "One optimal partition is: \\[2,4,-9\\] and \\[-1,0,-2\\]."
      }
    ],
    "constraints": [
      "`1 <= n <= 15`",
      "`nums.length == 2  n`",
      "`-107 <= nums[i] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2036",
    "slug": "maximum-alternating-subarray-sum",
    "title": "Maximum Alternating Subarray Sum",
    "difficulty": "Medium",
    "description": "A **subarray** of a **0-indexed** integer array is a contiguous **non-empty** sequence of elements within an array. The **alternating subarray sum** of a subarray that ranges from index `i` to `j` (**inclusive**, `0 <= i <= j < nums.length`) is `nums[i] - nums[i+1] + nums[i+2] - ... +/- nums[j]`. Given a **0-indexed** integer array `nums`, return _the **maximum alternating subarray sum** of any subarray of_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[3,-1,1,2\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,2,2,2,2\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[1\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2037",
    "slug": "minimum-number-of-moves-to-seat-everyone",
    "title": "Minimum Number of Moves to Seat Everyone",
    "difficulty": "Easy",
    "description": "There are `n` seats and `n` students in a room. You are given an array `seats` of length `n`, where `seats[i]` is the position of the `ith` seat. You are also given the array `students` of length `n`, where `students[j]` is the position of the `jth` student. You may perform the following move any number of times: *  Increase or decrease the position of the `ith` student by `1` (i.e., moving the `ith` student from position `x` to `x + 1` or `x - 1`) Return _the **minimum number of moves** required to move each student to a seat_ _such that no two students are in the same seat._ Note that there may be **multiple** seats or students in the **same** position at the beginning.",
    "examples": [
      {
        "input": "seats = \\[3,1,5\\], students = \\[2,7,4\\]",
        "output": "4",
        "explanation": "The students are moved as follows:"
      },
      {
        "input": "seats = \\[4,1,5,9\\], students = \\[1,3,2,6\\]",
        "output": "7",
        "explanation": "The students are moved as follows:"
      },
      {
        "input": "seats = \\[2,2,6,6\\], students = \\[1,3,2,6\\]",
        "output": "4",
        "explanation": "Note that there are two seats at position 2 and two seats at position 6."
      }
    ],
    "constraints": [
      "`n == seats.length == students.length`",
      "`1 <= n <= 100`",
      "`1 <= seats[i], students[j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2038",
    "slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
    "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
    "difficulty": "Medium",
    "description": "There are `n` pieces arranged in a line, and each piece is colored either by `'A'` or by `'B'`. You are given a string `colors` of length `n` where `colors[i]` is the color of the `ith` piece. Alice and Bob are playing a game where they take **alternating turns** removing pieces from the line. In this game, Alice moves **first**. *  Alice is only allowed to remove a piece colored `'A'` if **both its neighbors** are also colored `'A'`. She is **not allowed** to remove pieces that are colored `'B'`. *  Bob is only allowed to remove a piece colored `'B'` if **both its neighbors** are also colored `'B'`. He is **not allowed** to remove pieces that are colored `'A'`. *  Alice and Bob **cannot** remove pieces from the edge of the line. *  If a player cannot make a move on their turn, that player **loses** and the other player **wins**. Assuming Alice and Bob play optimally, return `true` _if Alice wins, or return_ `false` _if Bob wins_.",
    "examples": [
      {
        "input": "colors =  \"AAABABB \"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "colors =  \"AA \"",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "colors =  \"ABBBBBBBAAA \"",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= colors.length <= 105`",
      "`colors` consists of only the letters `'A'` and `'B'`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2039",
    "slug": "the-time-when-the-network-becomes-idle",
    "title": "The Time When the Network Becomes Idle",
    "difficulty": "Medium",
    "description": "There is a network of `n` servers, labeled from `0` to `n - 1`. You are given a 2D integer array `edges`, where `edges[i] = [ui, vi]` indicates there is a message channel between servers `ui` and `vi`, and they can pass **any** number of messages to **each other** directly in **one** second. You are also given a **0-indexed** integer array `patience` of length `n`. All servers are **connected**, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels. The server labeled `0` is the **master** server. The rest are **data** servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers **optimally**, so every message takes the **least amount of time** to arrive at the master server. The master server will process all newly arrived messages **instantly** and send a reply to the originating server via the **reversed path** the message had gone through. At the beginning of second `0`, each data server sends its message to be processed. Starting from second `1`, at the **beginning** of **every** second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server: *  If it has not, it will **resend** the message periodically. The data server `i` will resend the message every `patience[i]` second(s), i.e., the data server `i` will resend the message if `patience[i]` second(s) have **elapsed** since the **last** time the message was sent from this server. *  Otherwise, **no more resending** will occur from this server. The network becomes **idle** when there are **no** messages passing between servers or arriving at servers. Return _the **earliest second** starting from which the network becomes **idle**_.",
    "examples": [
      {
        "input": "edges = \\[\\[0,1\\],\\[1,2\\]\\], patience = \\[0,2,1\\]",
        "output": "8",
        "explanation": ""
      },
      {
        "input": "edges = \\[\\[0,1\\],\\[0,2\\],\\[1,2\\]\\], patience = \\[0,10,10\\]",
        "output": "3",
        "explanation": "Data servers 1 and 2 receive a reply back at the beginning of second 2."
      }
    ],
    "constraints": [
      "`n == patience.length`",
      "`2 <= n <= 105`",
      "`patience[0] == 0`",
      "`1 <= patience[i] <= 105` for `1 <= i < n`",
      "`1 <= edges.length <= min(105, n  (n - 1) / 2)`",
      "`edges[i].length == 2`",
      "`0 <= ui, vi < n`",
      "`ui != vi`",
      "There are no duplicate edges.",
      "Each server can directly or indirectly reach another server."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2040",
    "slug": "kth-smallest-product-of-two-sorted-arrays",
    "title": "Kth Smallest Product of Two Sorted Arrays",
    "difficulty": "Hard",
    "description": "Given two **sorted 0-indexed** integer arrays `nums1` and `nums2` as well as an integer `k`, return _the_ `kth` _(**1-based**) smallest product of_ `nums1[i] * nums2[j]` _where_ `0 <= i < nums1.length` _and_ `0 <= j < nums2.length`.",
    "examples": [
      {
        "input": "nums1 = \\[2,5\\], nums2 = \\[3,4\\], k = 2",
        "output": "8",
        "explanation": "The 2 smallest products are:"
      },
      {
        "input": "nums1 = \\[-4,-2,0,3\\], nums2 = \\[2,4\\], k = 6",
        "output": "0",
        "explanation": "The 6 smallest products are:"
      },
      {
        "input": "nums1 = \\[-2,-1,0,1,2\\], nums2 = \\[-3,-1,2,4,5\\], k = 3",
        "output": "-6",
        "explanation": "The 3 smallest products are:"
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 5  104`",
      "`-105 <= nums1[i], nums2[j] <= 105`",
      "`1 <= k <= nums1.length  nums2.length`",
      "`nums1` and `nums2` are sorted."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2042",
    "slug": "check-if-numbers-are-ascending-in-a-sentence",
    "title": "Check if Numbers Are Ascending in a Sentence",
    "difficulty": "Easy",
    "description": "A sentence is a list of **tokens** separated by a **single** space with no leading or trailing spaces. Every token is either a **positive number** consisting of digits `0-9` with no leading zeros, or a **word** consisting of lowercase English letters. *  For example, `\"a puppy has 2 eyes 4 legs \"` is a sentence with seven tokens: `\"2 \"` and `\"4 \"` are numbers and the other tokens such as `\"puppy \"` are words. Given a string `s` representing a sentence, you need to check if **all** the numbers in `s` are **strictly increasing** from left to right (i.e., other than the last number, **each** number is **strictly smaller** than the number on its **right** in `s`). Return `true` _if so, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "s =  \"1 box has 3 blue 4 red 6 green and 12 yellow marbles \"",
        "output": "true",
        "explanation": "The numbers in s are: 1, 3, 4, 6, 12."
      },
      {
        "input": "s =  \"hello world 5 x 5 \"",
        "output": "false",
        "explanation": "The numbers in s are: **5**, **5**. They are not strictly increasing."
      },
      {
        "input": "s =  \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s \"",
        "output": "false",
        "explanation": "The numbers in s are: 7, **51**, **50**, 60. They are not strictly increasing."
      }
    ],
    "constraints": [
      "`3 <= s.length <= 200`",
      "`s` consists of lowercase English letters, spaces, and digits from `0` to `9`, inclusive.",
      "The number of tokens in `s` is between `2` and `100`, inclusive.",
      "The tokens in `s` are separated by a single space.",
      "There are at least two numbers in `s`.",
      "Each number in `s` is a positive number less than `100`, with no leading zeros.",
      "`s` contains no leading or trailing spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2043",
    "slug": "simple-bank-system",
    "title": "Simple Bank System",
    "difficulty": "Medium",
    "description": "You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has `n` accounts numbered from `1` to `n`. The initial balance of each account is stored in a **0-indexed** integer array `balance`, with the `(i + 1)th` account having an initial balance of `balance[i]`. Execute all the **valid** transactions. A transaction is **valid** if: *  The given account number(s) are between `1` and `n`, and *  The amount of money withdrawn or transferred from is **less than or equal** to the balance of the account. Implement the `Bank` class: *  `Bank(long[] balance)` Initializes the object with the **0-indexed** integer array `balance`. *  `boolean transfer(int account1, int account2, long money)` Transfers `money` dollars from the account numbered `account1` to the account numbered `account2`. Return `true` if the transaction was successful, `false` otherwise. *  `boolean deposit(int account, long money)` Deposit `money` dollars into the account numbered `account`. Return `true` if the transaction was successful, `false` otherwise. *  `boolean withdraw(int account, long money)` Withdraw `money` dollars from the account numbered `account`. Return `true` if the transaction was successful, `false` otherwise.",
    "examples": [],
    "constraints": [
      "`n == balance.length`",
      "`1 <= n, account, account1, account2 <= 105`",
      "`0 <= balance[i], money <= 1012`",
      "At most `104` calls will be made to each function `transfer`, `deposit`, `withdraw`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2044",
    "slug": "count-number-of-maximum-bitwise-or-subsets",
    "title": "Count Number of Maximum Bitwise-OR Subsets",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, find the **maximum** possible **bitwise OR** of a subset of `nums` and return _the **number of different non-empty subsets** with the maximum bitwise OR_. An array `a` is a **subset** of an array `b` if `a` can be obtained from `b` by deleting some (possibly zero) elements of `b`. Two subsets are considered **different** if the indices of the elements chosen are different. The bitwise OR of an array `a` is equal to `a[0] **OR** a[1] **OR** ... **OR** a[a.length - 1]` (**0-indexed**).",
    "examples": [
      {
        "input": "nums = \\[3,1\\]",
        "output": "2",
        "explanation": "The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:"
      },
      {
        "input": "nums = \\[2,2,2\\]",
        "output": "7",
        "explanation": "All non-empty subsets of \\[2,2,2\\] have a bitwise OR of 2. There are 23 - 1 = 7 total subsets."
      },
      {
        "input": "nums = \\[3,2,1,5\\]",
        "output": "6",
        "explanation": "The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 16`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2045",
    "slug": "second-minimum-time-to-reach-destination",
    "title": "Second Minimum Time to Reach Destination",
    "difficulty": "Hard",
    "description": "A city is represented as a **bi-directional connected** graph with `n` vertices where each vertex is labeled from `1` to `n` (**inclusive**). The edges in the graph are represented as a 2D integer array `edges`, where each `edges[i] = [ui, vi]` denotes a bi-directional edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by **at most one** edge, and no vertex has an edge to itself. The time taken to traverse any edge is `time` minutes. Each vertex has a traffic signal which changes its color from **green** to **red** and vice versa every `change` minutes. All signals change **at the same time**. You can enter a vertex at **any time**, but can leave a vertex **only when the signal is green**. You **cannot wait** at a vertex if the signal is **green**. The **second minimum value** is defined as the smallest value **strictly larger** than the minimum value. *  For example the second minimum value of `[2, 3, 4]` is `3`, and the second minimum value of `[2, 2, 4]` is `4`. Given `n`, `edges`, `time`, and `change`, return _the **second minimum time** it will take to go from vertex_ `1` _to vertex_ `n`. **Notes:** *  You can go through any vertex **any** number of times, **including** `1` and `n`. *  You can assume that when the journey **starts**, all signals have just turned **green**.",
    "examples": [
      {
        "input": "n = 5, edges = \\[\\[1,2\\],\\[1,3\\],\\[1,4\\],\\[3,4\\],\\[4,5\\]\\], time = 3, change = 5",
        "output": "13",
        "explanation": ""
      },
      {
        "input": "n = 2, edges = \\[\\[1,2\\]\\], time = 3, change = 2",
        "output": "11",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= n <= 104`",
      "`n - 1 <= edges.length <= min(2  104, n  (n - 1) / 2)`",
      "`edges[i].length == 2`",
      "`1 <= ui, vi <= n`",
      "`ui != vi`",
      "There are no duplicate edges.",
      "Each vertex can be reached directly or indirectly from every other vertex.",
      "`1 <= time, change <= 103`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2046",
    "slug": "sort-linked-list-already-sorted-using-absolute-values",
    "title": "Sort Linked List Already Sorted Using Absolute Values",
    "difficulty": "Medium",
    "description": "Given the `head` of a singly linked list that is sorted in **non-decreasing** order using the **absolute values** of its nodes, return _the list sorted in **non-decreasing** order using the **actual values** of its nodes_.",
    "examples": [
      {
        "input": "head = \\[0,2,-5,5,10,-10\\]",
        "output": "\\[-10,-5,0,2,5,10\\]",
        "explanation": ""
      },
      {
        "input": "head = \\[0,1,2\\]",
        "output": "\\[0,1,2\\]",
        "explanation": ""
      },
      {
        "input": "head = \\[1\\]",
        "output": "\\[1\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is the range `[1, 105]`.",
      "`-5000 <= Node.val <= 5000`",
      "`head` is sorted in non-decreasing order using the absolute value of its nodes.",
      "Follow up:",
      "Can you think of a solution with `O(n)` time complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2047",
    "slug": "number-of-valid-words-in-a-sentence",
    "title": "Number of Valid Words in a Sentence",
    "difficulty": "Easy",
    "description": "A sentence consists of lowercase letters (`'a'` to `'z'`), digits (`'0'` to `'9'`), hyphens (`'-'`), punctuation marks (`'!'`, `'.'`, and `','`), and spaces (`' '`) only. Each sentence can be broken down into **one or more tokens** separated by one or more spaces `' '`. A token is a valid word if **all three** of the following are true: *  It only contains lowercase letters, hyphens, and/or punctuation (**no** digits). *  There is **at most one** hyphen `'-'`. If present, it **must** be surrounded by lowercase characters ( `\"a-b \"` is valid, but `\"-ab \"` and `\"ab- \"` are not valid). *  There is **at most one** punctuation mark. If present, it **must** be at the **end** of the token ( `\"ab, \"`, `\"cd! \"`, and `\". \"` are valid, but `\"a!b \"` and `\"c., \"` are not valid). Examples of valid words include `\"a-b. \"`, `\"afad \"`, `\"ba-c \"`, `\"a! \"`, and `\"! \"`. Given a string `sentence`, return _the **number** of valid words in_ `sentence`.",
    "examples": [
      {
        "input": "sentence =  \"cat and  dog \"",
        "output": "3",
        "explanation": "The valid words in the sentence are  \"cat \",  \"and \", and  \"dog \"."
      },
      {
        "input": "sentence =  \"!this  1-s b8d! \"",
        "output": "0",
        "explanation": "There are no valid words in the sentence."
      },
      {
        "input": "sentence =  \"alice and  bob are playing stone-game10 \"",
        "output": "5",
        "explanation": "The valid words in the sentence are  \"alice \",  \"and \",  \"bob \",  \"are \", and  \"playing \"."
      }
    ],
    "constraints": [
      "`1 <= sentence.length <= 1000`",
      "`sentence` only contains lowercase English letters, digits, `' '`, `'-'`, `'!'`, `'.'`, and `','`.",
      "There will be at least `1` token."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2048",
    "slug": "next-greater-numerically-balanced-number",
    "title": "Next Greater Numerically Balanced Number",
    "difficulty": "Medium",
    "description": "An integer `x` is **numerically balanced** if for every digit `d` in the number `x`, there are **exactly** `d` occurrences of that digit in `x`. Given an integer `n`, return _the **smallest numerically balanced** number **strictly greater** than_ `n`_._",
    "examples": [
      {
        "input": "n = 1",
        "output": "22",
        "explanation": ""
      },
      {
        "input": "n = 1000",
        "output": "1333",
        "explanation": ""
      },
      {
        "input": "n = 3000",
        "output": "3133",
        "explanation": ""
      }
    ],
    "constraints": [
      "`0 <= n <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2049",
    "slug": "count-nodes-with-the-highest-score",
    "title": "Count Nodes With the Highest Score",
    "difficulty": "Medium",
    "description": "There is a **binary** tree rooted at `0` consisting of `n` nodes. The nodes are labeled from `0` to `n - 1`. You are given a **0-indexed** integer array `parents` representing the tree, where `parents[i]` is the parent of node `i`. Since node `0` is the root, `parents[0] == -1`. Each node has a **score**. To find the score of a node, consider if the node and the edges connected to it were **removed**. The tree would become one or more **non-empty** subtrees. The **size** of a subtree is the number of the nodes in it. The **score** of the node is the **product of the sizes** of all those subtrees. Return _the **number** of nodes that have the **highest score**_.",
    "examples": [
      {
        "input": "parents = \\[-1,2,0,2,0\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "parents = \\[-1,2,0\\]",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == parents.length`",
      "`2 <= n <= 105`",
      "`parents[0] == -1`",
      "`0 <= parents[i] <= n - 1` for `i != 0`",
      "`parents` represents a valid binary tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2050",
    "slug": "parallel-courses-iii",
    "title": "Parallel Courses III",
    "difficulty": "Hard",
    "description": "You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given a 2D integer array `relations` where `relations[j] = [prevCoursej, nextCoursej]` denotes that course `prevCoursej` has to be completed **before** course `nextCoursej` (prerequisite relationship). Furthermore, you are given a **0-indexed** integer array `time` where `time[i]` denotes how many **months** it takes to complete the `(i+1)th` course. You must find the **minimum** number of months needed to complete all the courses following these rules: *  You may start taking a course at **any time** if the prerequisites are met. *  **Any number of courses** can be taken at the **same time**. Return _the **minimum** number of months needed to complete all the courses_.",
    "examples": [
      {
        "input": "n = 3, relations = \\[\\[1,3\\],\\[2,3\\]\\], time = \\[3,2,5\\]",
        "output": "8",
        "explanation": "The figure above represents the given graph and the time required to complete each course."
      },
      {
        "input": "n = 5, relations = \\[\\[1,5\\],\\[2,5\\],\\[3,5\\],\\[3,4\\],\\[4,5\\]\\], time = \\[1,2,3,4,5\\]",
        "output": "12",
        "explanation": "The figure above represents the given graph and the time required to complete each course."
      }
    ],
    "constraints": [
      "`1 <= n <= 5  104`",
      "`0 <= relations.length <= min(n  (n - 1) / 2, 5  104)`",
      "`relations[j].length == 2`",
      "`1 <= prevCoursej, nextCoursej <= n`",
      "`prevCoursej != nextCoursej`",
      "All the pairs `[prevCoursej, nextCoursej]` are unique.",
      "`time.length == n`",
      "`1 <= time[i] <= 104`",
      "The given graph is a directed acyclic graph."
    ],
    "note": "The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).",
    "follow_up": null
  },
  {
    "id": "2052",
    "slug": "minimum-cost-to-separate-sentence-into-rows",
    "title": "Minimum Cost to Separate Sentence Into Rows",
    "difficulty": "Medium",
    "description": "You are given a string `sentence` containing words separated by spaces, and an integer `k`. Your task is to separate `sentence` into **rows** where the number of characters in each row is **at most** `k`. You may assume that `sentence` does not begin or end with a space, and the words in `sentence` are separated by a single space. You can split `sentence` into rows by inserting line breaks between words in `sentence`. A word **cannot** be split between two rows. Each word must be used exactly once, and the word order cannot be rearranged. Adjacent words in a row should be separated by a single space, and rows should not begin or end with spaces. The **cost** of a row with length `n` is `(k - n)2`, and the **total cost** is the sum of the **costs** for all rows **except** the last one. *  For example if `sentence = \"i love leetcode \"` and `k = 12`: *  Separating `sentence` into `\"i \"`, `\"love \"`, and `\"leetcode \"` has a cost of `(12 - 1)2 + (12 - 4)2 = 185`. *  Separating `sentence` into `\"i love \"`, and `\"leetcode \"` has a cost of `(12 - 6)2 = 36`. *  Separating `sentence` into `\"i \"`, and `\"love leetcode \"` is not possible because the length of `\"love leetcode \"` is greater than `k`. Return _the **minimum** possible total cost of separating_ `sentence` _into rows._",
    "examples": [
      {
        "input": "sentence =  \"i love leetcode \", k = 12",
        "output": "36",
        "explanation": ""
      },
      {
        "input": "sentence =  \"apples and bananas taste great \", k = 7",
        "output": "21"
      },
      {
        "input": "sentence =  \"a \", k = 5",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= sentence.length <= 5000`",
      "`1 <= k <= 5000`",
      "The length of each word in `sentence` is at most `k`.",
      "`sentence` consists of only lowercase English letters and spaces.",
      "`sentence` does not begin or end with a space.",
      "Words in `sentence` are separated by a single space."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2053",
    "slug": "kth-distinct-string-in-an-array",
    "title": "Kth Distinct String in an Array",
    "difficulty": "Easy",
    "description": "A **distinct string** is a string that is present only **once** in an array. Given an array of strings `arr`, and an integer `k`, return _the_ `kth` _**distinct string** present in_ `arr`. If there are **fewer** than `k` distinct strings, return _an **empty string**_ `\" \"`. Note that the strings are considered in the **order in which they appear** in the array.",
    "examples": [
      {
        "input": "arr = \\[ \"d \", \"b \", \"c \", \"b \", \"c \", \"a \"\\], k = 2",
        "output": "\"a \"",
        "explanation": ""
      },
      {
        "input": "arr = \\[ \"aaa \", \"aa \", \"a \"\\], k = 1",
        "output": "\"aaa \"",
        "explanation": ""
      },
      {
        "input": "arr = \\[ \"a \", \"b \", \"a \"\\], k = 3",
        "output": "\" \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= k <= arr.length <= 1000`",
      "`1 <= arr[i].length <= 5`",
      "`arr[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2054",
    "slug": "two-best-non-overlapping-events",
    "title": "Two Best Non-Overlapping Events",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** 2D integer array of `events` where `events[i] = [startTimei, endTimei, valuei]`. The `ith` event starts at `startTimei` and ends at `endTimei`, and if you attend this event, you will receive a value of `valuei`. You can choose **at most** **two** **non-overlapping** events to attend such that the sum of their values is **maximized**. Return _this **maximum** sum._ Note that the start time and end time is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time `t`, the next event must start at or after `t + 1`.",
    "examples": [
      {
        "input": "events = \\[\\[1,3,2\\],\\[4,5,2\\],\\[2,4,3\\]\\]",
        "output": "4",
        "explanation": "Choose the green events, 0 and 1 for a sum of 2 + 2 = 4."
      },
      {
        "input": "events = \\[\\[1,3,2\\],\\[4,5,2\\],\\[1,5,5\\]\\]",
        "output": "5",
        "explanation": "Choose event 2 for a sum of 5."
      },
      {
        "input": "events = \\[\\[1,5,3\\],\\[1,5,1\\],\\[6,6,5\\]\\]",
        "output": "8",
        "explanation": "Choose events 0 and 2 for a sum of 3 + 5 = 8."
      }
    ],
    "constraints": [
      "`2 <= events.length <= 105`",
      "`events[i].length == 3`",
      "`1 <= startTimei <= endTimei <= 109`",
      "`1 <= valuei <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2055",
    "slug": "plates-between-candles",
    "title": "Plates Between Candles",
    "difficulty": "Medium",
    "description": "There is a long table with a line of plates and candles arranged on top of it. You are given a **0-indexed** string `s` consisting of characters `'*'` and `'|'` only, where a `'*'` represents a **plate** and a `'|'` represents a **candle**. You are also given a **0-indexed** 2D integer array `queries` where `queries[i] = [lefti, righti]` denotes the **substring** `s[lefti...righti]` (**inclusive**). For each query, you need to find the **number** of plates **between candles** that are **in the substring**. A plate is considered **between candles** if there is at least one candle to its left **and** at least one candle to its right **in the substring**. *  For example, `s = \"||**||**|* \"`, and a query `[3, 8]` denotes the substring `\"*||******| \"`. The number of plates between candles in this substring is `2`, as each of the two plates has at least one candle **in the substring** to its left **and** right. Return _an integer array_ `answer` _where_ `answer[i]` _is the answer to the_ `ith` _query_.",
    "examples": [
      {
        "input": "s =  \"\\*\\*|\\*\\*|\\*\\*\\*| \", queries = \\[\\[2,5\\],\\[5,9\\]\\]",
        "output": "\\[2,3\\]",
        "explanation": ""
      },
      {
        "input": "s =  \"\\*\\*\\*|\\*\\*|\\*\\*\\*\\*\\*|\\*\\*||\\*\\*|\\* \", queries = \\[\\[1,17\\],\\[4,5\\],\\[14,17\\],\\[5,11\\],\\[15,16\\]\\]",
        "output": "\\[9,0,0,0,0\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`3 <= s.length <= 105`",
      "`s` consists of `''` and `'|'` characters.",
      "`1 <= queries.length <= 105`",
      "`queries[i].length == 2`",
      "`0 <= lefti <= righti < s.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2056",
    "slug": "number-of-valid-move-combinations-on-chessboard",
    "title": "Number of Valid Move Combinations On Chessboard",
    "difficulty": "Hard",
    "description": "There is an `8 x 8` chessboard containing `n` pieces (rooks, queens, or bishops). You are given a string array `pieces` of length `n`, where `pieces[i]` describes the type (rook, queen, or bishop) of the `ith` piece. In addition, you are given a 2D integer array `positions` also of length `n`, where `positions[i] = [ri, ci]` indicates that the `ith` piece is currently at the **1-based** coordinate `(ri, ci)` on the chessboard. When making a **move** for a piece, you choose a **destination** square that the piece will travel toward and stop on. *  A rook can only travel **horizontally or vertically** from `(r, c)` to the direction of `(r+1, c)`, `(r-1, c)`, `(r, c+1)`, or `(r, c-1)`. *  A queen can only travel **horizontally, vertically, or diagonally** from `(r, c)` to the direction of `(r+1, c)`, `(r-1, c)`, `(r, c+1)`, `(r, c-1)`, `(r+1, c+1)`, `(r+1, c-1)`, `(r-1, c+1)`, `(r-1, c-1)`. *  A bishop can only travel **diagonally** from `(r, c)` to the direction of `(r+1, c+1)`, `(r+1, c-1)`, `(r-1, c+1)`, `(r-1, c-1)`. You must make a **move** for every piece on the board simultaneously. A **move combination** consists of all the **moves** performed on all the given pieces. Every second, each piece will instantaneously travel **one square** towards their destination if they are not already at it. All pieces start traveling at the `0th` second. A move combination is **invalid** if, at a given time, **two or more** pieces occupy the same square. Return _the number of **valid** move combinations_\u200b\u200b\u200b\u200b\u200b. **Notes:** *  **No two pieces** will start in the **same** square. *  You may choose the square a piece is already on as its **destination**. *  If two pieces are **directly adjacent** to each other, it is valid for them to **move past each other** and swap positions in one second.",
    "examples": [
      {
        "input": "pieces = \\[ \"rook \"\\], positions = \\[\\[1,1\\]\\]",
        "output": "15",
        "explanation": "The image above shows the possible squares the piece can move to."
      },
      {
        "input": "pieces = \\[ \"queen \"\\], positions = \\[\\[1,1\\]\\]",
        "output": "22",
        "explanation": "The image above shows the possible squares the piece can move to."
      },
      {
        "input": "pieces = \\[ \"bishop \"\\], positions = \\[\\[4,3\\]\\]",
        "output": "12",
        "explanation": "The image above shows the possible squares the piece can move to."
      }
    ],
    "constraints": [
      "`n == pieces.length`",
      "`n == positions.length`",
      "`1 <= n <= 4`",
      "`pieces` only contains the strings `\"rook \"`, `\"queen \"`, and `\"bishop \"`.",
      "There will be at most one queen on the chessboard.",
      "`1 <= xi, yi <= 8`",
      "Each `positions[i]` is distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2057",
    "slug": "smallest-index-with-equal-value",
    "title": "Smallest Index With Equal Value",
    "difficulty": "Easy",
    "description": "Given a **0-indexed** integer array `nums`, return _the **smallest** index_ `i` _of_ `nums` _such that_ `i mod 10 == nums[i]`_, or_ `-1` _if such index does not exist_. `x mod y` denotes the **remainder** when `x` is divided by `y`.",
    "examples": [
      {
        "input": "nums = \\[0,1,2\\]",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "nums = \\[4,3,2,1\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4,5,6,7,8,9,0\\]",
        "output": "-1",
        "explanation": "No index satisfies i mod 10 == nums\\[i\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`0 <= nums[i] <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2058",
    "slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
    "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
    "difficulty": "Medium",
    "description": "A **critical point** in a linked list is defined as **either** a **local maxima** or a **local minima**. A node is a **local maxima** if the current node has a value **strictly greater** than the previous node and the next node. A node is a **local minima** if the current node has a value **strictly smaller** than the previous node and the next node. Note that a node can only be a local maxima/minima if there exists **both** a previous node and a next node. Given a linked list `head`, return _an array of length 2 containing_ `[minDistance, maxDistance]` _where_ `minDistance` _is the **minimum distance** between **any two distinct** critical points and_ `maxDistance` _is the **maximum distance** between **any two distinct** critical points. If there are **fewer** than two critical points, return_ `[-1, -1]`.",
    "examples": [
      {
        "input": "head = \\[3,1\\]",
        "output": "\\[-1,-1\\]",
        "explanation": "There are no critical points in \\[3,1\\]."
      },
      {
        "input": "head = \\[5,3,1,2,5,1,2\\]",
        "output": "\\[1,3\\]",
        "explanation": "There are three critical points:"
      },
      {
        "input": "head = \\[1,3,2,2,3,2,2,2,7\\]",
        "output": "\\[3,3\\]",
        "explanation": "There are two critical points:"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[2, 105]`.",
      "`1 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2059",
    "slug": "minimum-operations-to-convert-number",
    "title": "Minimum Operations to Convert Number",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` containing **distinct** numbers, an integer `start`, and an integer `goal`. There is an integer `x` that is initially set to `start`, and you want to perform operations on `x` such that it is converted to `goal`. You can perform the following operation repeatedly on the number `x`: If `0 <= x <= 1000`, then for any index `i` in the array (`0 <= i < nums.length`), you can set `x` to any of the following: *  `x + nums[i]` *  `x - nums[i]` *  `x ^ nums[i]` (bitwise-XOR) Note that you can use each `nums[i]` any number of times in any order. Operations that set `x` to be out of the range `0 <= x <= 1000` are valid, but no more operations can be done afterward. Return _the **minimum** number of operations needed to convert_ `x = start` _into_ `goal`_, and_ `-1` _if it is not possible_.",
    "examples": [
      {
        "input": "nums = \\[2,4,12\\], start = 2, goal = 12",
        "output": "2",
        "explanation": "We can go from 2 -> 14 -> 12 with the following 2 operations."
      },
      {
        "input": "nums = \\[3,5,7\\], start = 0, goal = -4",
        "output": "2",
        "explanation": "We can go from 0 -> 3 -> -4 with the following 2 operations."
      },
      {
        "input": "nums = \\[2,8,16\\], start = 0, goal = 1",
        "output": "-1",
        "explanation": "There is no way to convert 0 into 1."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`-109 <= nums[i], goal <= 109`",
      "`0 <= start <= 1000`",
      "`start != goal`",
      "All the integers in `nums` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2060",
    "slug": "check-if-an-original-string-exists-given-two-encoded-strings",
    "title": "Check if an Original String Exists Given Two Encoded Strings",
    "difficulty": "Hard",
    "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps: *  Arbitrarily **split** it into a **sequence** of some number of **non-empty** substrings. *  Arbitrarily choose some elements (possibly none) of the sequence, and **replace** each with **its length** (as a numeric string). *  **Concatenate** the sequence as the encoded string. For example, **one way** to encode an original string `\"abcdefghijklmnop \"` might be: *  Split it as a sequence: `[ \"ab \", \"cdefghijklmn \", \"o \", \"p \"]`. *  Choose the second and third elements to be replaced by their lengths, respectively. The sequence becomes `[ \"ab \", \"12 \", \"1 \", \"p \"]`. *  Concatenate the elements of the sequence to get the encoded string: `\"ab121p \"`. Given two encoded strings `s1` and `s2`, consisting of lowercase English letters and digits `1-9` (inclusive), return `true` _if there exists an original string that could be encoded as **both**_ `s1` _and_ `s2`_. Otherwise, return_ `false`. **Note**: The test cases are generated such that the number of consecutive digits in `s1` and `s2` does not exceed `3`.",
    "examples": [
      {
        "input": "s1 =  \"internationalization \", s2 =  \"i18n \"",
        "output": "true",
        "explanation": "It is possible that  \"internationalization \" was the original string."
      },
      {
        "input": "s1 =  \"l123e \", s2 =  \"44 \"",
        "output": "true",
        "explanation": "It is possible that  \"leetcode \" was the original string."
      },
      {
        "input": "s1 =  \"a5b \", s2 =  \"c5b \"",
        "output": "false",
        "explanation": "It is impossible."
      }
    ],
    "constraints": [
      "`1 <= s1.length, s2.length <= 40`",
      "`s1` and `s2` consist of digits `1-9` (inclusive), and lowercase English letters only.",
      "The number of consecutive digits in `s1` and `s2` does not exceed `3`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2061",
    "slug": "number-of-spaces-cleaning-robot-cleaned",
    "title": "Number of Spaces Cleaning Robot Cleaned",
    "difficulty": "Medium",
    "description": "A room is represented by a **0-indexed** 2D binary matrix `room` where a `0` represents an **empty** space and a `1` represents a space with an **object**. The top left corner of the room will be empty in all test cases. A cleaning robot starts at the top left corner of the room and is facing right. The robot will continue heading straight until it reaches the edge of the room or it hits an object, after which it will turn 90 degrees **clockwise** and repeat this process. The starting space and all spaces that the robot visits are **cleaned** by it. Return _the number of **clean** spaces in the room if the robot runs indefinetely._",
    "examples": [
      {
        "input": "room = \\[\\[0,0,0\\],\\[1,1,0\\],\\[0,0,0\\]\\]",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "room = \\[\\[0,1,0\\],\\[1,0,0\\],\\[0,0,0\\]\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`m == room.length`",
      "`n == room[r].length`",
      "`1 <= m, n <= 300`",
      "`room[r][c]` is either `0` or `1`.",
      "`room[0][0] == 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2062",
    "slug": "count-vowel-substrings-of-a-string",
    "title": "Count Vowel Substrings of a String",
    "difficulty": "Easy",
    "description": "A **substring** is a contiguous (non-empty) sequence of characters within a string. A **vowel substring** is a substring that **only** consists of vowels (`'a'`, `'e'`, `'i'`, `'o'`, and `'u'`) and has **all five** vowels present in it. Given a string `word`, return _the number of **vowel substrings** in_ `word`.",
    "examples": [
      {
        "input": "word =  \"aeiouu \"",
        "output": "2",
        "explanation": "The vowel substrings of word are as follows (underlined):"
      },
      {
        "input": "word =  \"unicornarihan \"",
        "output": "0",
        "explanation": "Not all 5 vowels are present, so there are no vowel substrings."
      },
      {
        "input": "word =  \"cuaieuouac \"",
        "output": "7",
        "explanation": "The vowel substrings of word are as follows (underlined):"
      }
    ],
    "constraints": [
      "`1 <= word.length <= 100`",
      "`word` consists of lowercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2063",
    "slug": "vowels-of-all-substrings",
    "title": "Vowels of All Substrings",
    "difficulty": "Medium",
    "description": "Given a string `word`, return _the **sum of the number of vowels** (_`'a'`, `'e'`_,_ `'i'`_,_ `'o'`_, and_ `'u'`_)_ _in every substring of_ `word`. A **substring** is a contiguous (non-empty) sequence of characters within a string.",
    "examples": [
      {
        "input": "word =  \"aba \"",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "word =  \"abc \"",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "word =  \"ltcd \"",
        "output": "0",
        "explanation": "There are no vowels in any substring of  \"ltcd \"."
      }
    ],
    "constraints": [
      "`1 <= word.length <= 105`",
      "`word` consists of lowercase English letters."
    ],
    "note": "Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.",
    "follow_up": null
  },
  {
    "id": "2064",
    "slug": "minimized-maximum-of-products-distributed-to-any-store",
    "title": "Minimized Maximum of Products Distributed to Any Store",
    "difficulty": "Medium",
    "description": "You are given an integer `n` indicating there are `n` specialty retail stores. There are `m` product types of varying amounts, which are given as a **0-indexed** integer array `quantities`, where `quantities[i]` represents the number of products of the `ith` product type. You need to distribute **all products** to the retail stores following these rules: *  A store can only be given **at most one product type** but can be given **any** amount of it. *  After distribution, each store will have been given some number of products (possibly `0`). Let `x` represent the maximum number of products given to any store. You want `x` to be as small as possible, i.e., you want to **minimize** the **maximum** number of products that are given to any store. Return _the minimum possible_ `x`.",
    "examples": [
      {
        "input": "n = 6, quantities = \\[11,6\\]",
        "output": "3",
        "explanation": "One optimal way is:"
      },
      {
        "input": "n = 7, quantities = \\[15,10,10\\]",
        "output": "5",
        "explanation": "One optimal way is:"
      },
      {
        "input": "n = 1, quantities = \\[100000\\]",
        "output": "100000",
        "explanation": "The only optimal way is:"
      }
    ],
    "constraints": [
      "`m == quantities.length`",
      "`1 <= m <= n <= 105`",
      "`1 <= quantities[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2065",
    "slug": "maximum-path-quality-of-a-graph",
    "title": "Maximum Path Quality of a Graph",
    "difficulty": "Hard",
    "description": "There is an **undirected** graph with `n` nodes numbered from `0` to `n - 1` (**inclusive**). You are given a **0-indexed** integer array `values` where `values[i]` is the **value** of the `ith` node. You are also given a **0-indexed** 2D integer array `edges`, where each `edges[j] = [uj, vj, timej]` indicates that there is an undirected edge between the nodes `uj` and `vj`, and it takes `timej` seconds to travel between the two nodes. Finally, you are given an integer `maxTime`. A **valid** **path** in the graph is any path that starts at node `0`, ends at node `0`, and takes **at most** `maxTime` seconds to complete. You may visit the same node multiple times. The **quality** of a valid path is the **sum** of the values of the **unique nodes** visited in the path (each node's value is added **at most once** to the sum). Return _the **maximum** quality of a valid path_.",
    "examples": [
      {
        "input": "values = \\[0,32,10,43\\], edges = \\[\\[0,1,10\\],\\[1,2,15\\],\\[0,3,10\\]\\], maxTime = 49",
        "output": "75",
        "explanation": ""
      },
      {
        "input": "values = \\[5,10,15,20\\], edges = \\[\\[0,1,10\\],\\[1,2,10\\],\\[0,3,10\\]\\], maxTime = 30",
        "output": "25",
        "explanation": ""
      },
      {
        "input": "values = \\[1,2,3,4\\], edges = \\[\\[0,1,10\\],\\[1,2,11\\],\\[2,3,12\\],\\[1,3,13\\]\\], maxTime = 50",
        "output": "7",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == values.length`",
      "`1 <= n <= 1000`",
      "`0 <= values[i] <= 108`",
      "`0 <= edges.length <= 2000`",
      "`edges[j].length == 3`",
      "`0 <= uj < vj <= n - 1`",
      "`10 <= timej, maxTime <= 100`",
      "All the pairs `[uj, vj]` are unique.",
      "There are at most four edges connected to each node.",
      "The graph may not be connected."
    ],
    "note": "There are **at most four** edges connected to each node.",
    "follow_up": null
  },
  {
    "id": "2067",
    "slug": "number-of-equal-count-substrings",
    "title": "Number of Equal Count Substrings",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `s` consisting of only lowercase English letters, and an integer `count`. A **substring** of `s` is said to be an **equal count substring** if, for each **unique** letter in the substring, it appears exactly `count` times in the substring. Return _the number of **equal count substrings** in_ `s`. A **substring** is a contiguous non-empty sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"aaabcbbcc \", count = 3",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "s =  \"abcd \", count = 2",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "s =  \"a \", count = 5",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 3  104`",
      "`1 <= count <= 3  104`",
      "`s` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2068",
    "slug": "check-whether-two-strings-are-almost-equivalent",
    "title": "Check Whether Two Strings are Almost Equivalent",
    "difficulty": "Easy",
    "description": "Two strings `word1` and `word2` are considered **almost equivalent** if the differences between the frequencies of each letter from `'a'` to `'z'` between `word1` and `word2` is **at most** `3`. Given two strings `word1` and `word2`, each of length `n`, return `true` _if_ `word1` _and_ `word2` _are **almost equivalent**, or_ `false` _otherwise_. The **frequency** of a letter `x` is the number of times it occurs in the string.",
    "examples": [
      {
        "input": "word1 =  \"aaaa \", word2 =  \"bccb \"",
        "output": "false",
        "explanation": "There are 4 'a's in  \"aaaa \" but 0 'a's in  \"bccb \"."
      },
      {
        "input": "word1 =  \"abcdeef \", word2 =  \"abaaacc \"",
        "output": "true",
        "explanation": "The differences between the frequencies of each letter in word1 and word2 are at most 3:"
      },
      {
        "input": "word1 =  \"cccddabba \", word2 =  \"babababab \"",
        "output": "true",
        "explanation": "The differences between the frequencies of each letter in word1 and word2 are at most 3:"
      }
    ],
    "constraints": [
      "`n == word1.length == word2.length`",
      "`1 <= n <= 100`",
      "`word1` and `word2` consist only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2069",
    "slug": "walking-robot-simulation-ii",
    "title": "Walking Robot Simulation II",
    "difficulty": "Medium",
    "description": "A `width x height` grid is on an XY-plane with the **bottom-left** cell at `(0, 0)` and the **top-right** cell at `(width - 1, height - 1)`. The grid is aligned with the four cardinal directions ( `\"North \"`, `\"East \"`, `\"South \"`, and `\"West \"`). A robot is **initially** at cell `(0, 0)` facing direction `\"East \"`. The robot can be instructed to move for a specific number of **steps**. For each step, it does the following. 1. Attempts to move **forward one** cell in the direction it is facing. 2. If the cell the robot is **moving to** is **out of bounds**, the robot instead **turns** 90 degrees **counterclockwise** and retries the step. After the robot finishes moving the number of steps required, it stops and awaits the next instruction. Implement the `Robot` class: *  `Robot(int width, int height)` Initializes the `width x height` grid with the robot at `(0, 0)` facing `\"East \"`. *  `void step(int num)` Instructs the robot to move forward `num` steps. *  `int[] getPos()` Returns the current cell the robot is at, as an array of length 2, `[x, y]`. *  `String getDir()` Returns the current direction of the robot, `\"North \"`, `\"East \"`, `\"South \"`, or `\"West \"`.",
    "examples": [],
    "constraints": [
      "`2 <= width, height <= 100`",
      "`1 <= num <= 105`",
      "At most `104` calls in total will be made to `step`, `getPos`, and `getDir`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2070",
    "slug": "most-beautiful-item-for-each-query",
    "title": "Most Beautiful Item for Each Query",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `items` where `items[i] = [pricei, beautyi]` denotes the **price** and **beauty** of an item respectively. You are also given a **0-indexed** integer array `queries`. For each `queries[j]`, you want to determine the **maximum beauty** of an item whose **price** is **less than or equal** to `queries[j]`. If no such item exists, then the answer to this query is `0`. Return _an array_ `answer` _of the same length as_ `queries` _where_ `answer[j]` _is the answer to the_ `jth` _query_.",
    "examples": [
      {
        "input": "items = \\[\\[1,2\\],\\[3,2\\],\\[2,4\\],\\[5,6\\],\\[3,5\\]\\], queries = \\[1,2,3,4,5,6\\]",
        "output": "\\[2,4,5,5,6,6\\]",
        "explanation": ""
      },
      {
        "input": "items = \\[\\[1,2\\],\\[1,2\\],\\[1,3\\],\\[1,4\\]\\], queries = \\[1\\]",
        "output": "\\[4\\]",
        "explanation": ""
      },
      {
        "input": "items = \\[\\[10,1000\\]\\], queries = \\[5\\]",
        "output": "\\[0\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= items.length, queries.length <= 105`",
      "`items[i].length == 2`",
      "`1 <= pricei, beautyi, queries[j] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2071",
    "slug": "maximum-number-of-tasks-you-can-assign",
    "title": "Maximum Number of Tasks You Can Assign",
    "difficulty": "Hard",
    "description": "You have `n` tasks and `m` workers. Each task has a strength requirement stored in a **0-indexed** integer array `tasks`, with the `ith` task requiring `tasks[i]` strength to complete. The strength of each worker is stored in a **0-indexed** integer array `workers`, with the `jth` worker having `workers[j]` strength. Each worker can only be assigned to a **single** task and must have a strength **greater than or equal** to the task's strength requirement (i.e., `workers[j] >= tasks[i]`). Additionally, you have `pills` magical pills that will **increase a worker's strength** by `strength`. You can decide which workers receive the magical pills, however, you may only give each worker **at most one** magical pill. Given the **0-indexed** integer arrays `tasks` and `workers` and the integers `pills` and `strength`, return _the **maximum** number of tasks that can be completed._",
    "examples": [
      {
        "input": "tasks = \\[**3**,**2**,**1**\\], workers = \\[**0**,**3**,**3**\\], pills = 1, strength = 1",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "tasks = \\[**5**,4\\], workers = \\[**0**,0,0\\], pills = 1, strength = 5",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "tasks = \\[**10**,**15**,30\\], workers = \\[**0**,**10**,10,10,10\\], pills = 3, strength = 10",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == tasks.length`",
      "`m == workers.length`",
      "`1 <= n, m <= 5  104`",
      "`0 <= pills <= m`",
      "`0 <= tasks[i], workers[j], strength <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2073",
    "slug": "time-needed-to-buy-tickets",
    "title": "Time Needed to Buy Tickets",
    "difficulty": "Easy",
    "description": "There are `n` people in a line queuing to buy tickets, where the `0th` person is at the **front** of the line and the `(n - 1)th` person is at the **back** of the line. You are given a **0-indexed** integer array `tickets` of length `n` where the number of tickets that the `ith` person would like to buy is `tickets[i]`. Each person takes **exactly 1 second** to buy a ticket. A person can only buy **1 ticket at a time** and has to go back to **the end** of the line (which happens **instantaneously**) in order to buy more tickets. If a person does not have any tickets left to buy, the person will **leave** the line. Return _the **time taken** for the person at position_ `k` **_(0-indexed)_** _to finish buying tickets_.",
    "examples": [
      {
        "input": "tickets = \\[2,3,2\\], k = 2",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "tickets = \\[5,1,1,1\\], k = 0",
        "output": "8",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == tickets.length`",
      "`1 <= n <= 100`",
      "`1 <= tickets[i] <= 100`",
      "`0 <= k < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2074",
    "slug": "reverse-nodes-in-even-length-groups",
    "title": "Reverse Nodes in Even Length Groups",
    "difficulty": "Medium",
    "description": "You are given the `head` of a linked list. The nodes in the linked list are **sequentially** assigned to **non-empty** groups whose lengths form the sequence of the natural numbers (`1, 2, 3, 4, ...`). The **length** of a group is the number of nodes assigned to it. In other words, *  The `1st` node is assigned to the first group. *  The `2nd` and the `3rd` nodes are assigned to the second group. *  The `4th`, `5th`, and `6th` nodes are assigned to the third group, and so on. Note that the length of the last group may be less than or equal to `1 + the length of the second to last group`. **Reverse** the nodes in each group with an **even** length, and return _the_ `head` _of the modified linked list_.",
    "examples": [
      {
        "input": "head = \\[5,2,6,3,9,1,7,3,8,4\\]",
        "output": "\\[5,6,2,3,9,1,4,8,3,7\\]",
        "explanation": ""
      },
      {
        "input": "head = \\[1,1,0,6\\]",
        "output": "\\[1,0,1,6\\]",
        "explanation": ""
      },
      {
        "input": "head = \\[1,1,0,6,5\\]",
        "output": "\\[1,0,1,5,6\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[1, 105]`.",
      "`0 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2075",
    "slug": "decode-the-slanted-ciphertext",
    "title": "Decode the Slanted Ciphertext",
    "difficulty": "Medium",
    "description": "A string `originalText` is encoded using a **slanted transposition cipher** to a string `encodedText` with the help of a matrix having a **fixed number of rows** `rows`. `originalText` is placed first in a top-left to bottom-right manner. The blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of `originalText`. The arrow indicates the order in which the cells are filled. All empty cells are filled with `' '`. The number of columns is chosen such that the rightmost column will **not be empty** after filling in `originalText`. `encodedText` is then formed by appending all characters of the matrix in a row-wise fashion. The characters in the blue cells are appended first to `encodedText`, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed. For example, if `originalText = \"cipher \"` and `rows = 3`, then we encode it in the following manner: The blue arrows depict how `originalText` is placed in the matrix, and the red arrows denote the order in which `encodedText` is formed. In the above example, `encodedText = \"ch ie pr \"`. Given the encoded string `encodedText` and number of rows `rows`, return _the original string_ `originalText`.",
    "examples": [
      {
        "input": "encodedText =  \"ch   ie   pr \", rows = 3",
        "output": "\"cipher \"",
        "explanation": "This is the same example described in the problem description."
      },
      {
        "input": "encodedText =  \"iveo    eed   l te   olc \", rows = 4",
        "output": "\"i love leetcode \"",
        "explanation": "The figure above denotes the matrix that was used to encode originalText."
      },
      {
        "input": "encodedText =  \"coding \", rows = 1",
        "output": "\"coding \"",
        "explanation": "Since there is only 1 row, both originalText and encodedText are the same."
      }
    ],
    "constraints": [
      "`0 <= encodedText.length <= 106`",
      "`encodedText` consists of lowercase English letters and `' '` only.",
      "`encodedText` is a valid encoding of some `originalText` that does not have trailing spaces.",
      "`1 <= rows <= 1000`",
      "The testcases are generated such that there is only one possible `originalText`."
    ],
    "note": "`originalText` **does not** have any trailing spaces `' '`. The test cases are generated such that there is only one possible `originalText`.",
    "follow_up": null
  },
  {
    "id": "2076",
    "slug": "process-restricted-friend-requests",
    "title": "Process Restricted Friend Requests",
    "difficulty": "Hard",
    "description": "You are given an integer `n` indicating the number of people in a network. Each person is labeled from `0` to `n - 1`. You are also given a **0-indexed** 2D integer array `restrictions`, where `restrictions[i] = [xi, yi]` means that person `xi` and person `yi` **cannot** become **friends**, either **directly** or **indirectly** through other people. Initially, no one is friends with each other. You are given a list of friend requests as a **0-indexed** 2D integer array `requests`, where `requests[j] = [uj, vj]` is a friend request between person `uj` and person `vj`. A friend request is **successful** if `uj` and `vj` can be **friends**. Each friend request is processed in the given order (i.e., `requests[j]` occurs before `requests[j + 1]`), and upon a successful request, `uj` and `vj` **become direct friends** for all future friend requests. Return _a **boolean array**_ `result`, _where each_ `result[j]` _is_ `true` _if the_ `jth` _friend request is **successful** or_ `false` _if it is not_.",
    "examples": [
      {
        "input": "n = 3, restrictions = \\[\\[0,1\\]\\], requests = \\[\\[0,2\\],\\[2,1\\]\\]",
        "output": "\\[true,false\\]",
        "explanation": ""
      },
      {
        "input": "n = 3, restrictions = \\[\\[0,1\\]\\], requests = \\[\\[1,2\\],\\[0,2\\]\\]",
        "output": "\\[true,false\\]",
        "explanation": ""
      },
      {
        "input": "n = 5, restrictions = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\]\\], requests = \\[\\[0,4\\],\\[1,2\\],\\[3,1\\],\\[3,4\\]\\]",
        "output": "\\[true,false,true,false\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= n <= 1000`",
      "`0 <= restrictions.length <= 1000`",
      "`restrictions[i].length == 2`",
      "`0 <= xi, yi <= n - 1`",
      "`xi != yi`",
      "`1 <= requests.length <= 1000`",
      "`requests[j].length == 2`",
      "`0 <= uj, vj <= n - 1`",
      "`uj != vj`"
    ],
    "note": "If `uj` and `vj` are already direct friends, the request is still **successful**.",
    "follow_up": null
  },
  {
    "id": "2077",
    "slug": "paths-in-maze-that-lead-to-same-room",
    "title": "Paths in Maze That Lead to Same Room",
    "difficulty": "Medium",
    "description": "A maze consists of `n` rooms numbered from `1` to `n`, and some rooms are connected by corridors. You are given a 2D integer array `corridors` where `corridors[i] = [room1i, room2i]` indicates that there is a corridor connecting `room1i` and `room2i`, allowing a person in the maze to go from `room1i` to `room2i` **and vice versa**. The designer of the maze wants to know how confusing the maze is. The **confusion** **score** of the maze is the number of different cycles of **length 3**. *  For example, `1 -> 2 -> 3 -> 1` is a cycle of length 3, but `1 -> 2 -> 3 -> 4` and `1 -> 2 -> 3 -> 2 -> 1` are not. Two cycles are considered to be **different** if one or more of the rooms visited in the first cycle is **not** in the second cycle. Return _the_ _**confusion** **score** of the maze._",
    "examples": [
      {
        "input": "n = 5, corridors = \\[\\[1,2\\],\\[5,2\\],\\[4,1\\],\\[2,4\\],\\[3,1\\],\\[3,4\\]\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "n = 4, corridors = \\[\\[1,2\\],\\[3,4\\]\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= n <= 1000`",
      "`1 <= corridors.length <= 5  104`",
      "`corridors[i].length == 2`",
      "`1 <= room1i, room2i <= n`",
      "`room1i != room2i`",
      "There are no duplicate corridors."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2078",
    "slug": "two-furthest-houses-with-different-colors",
    "title": "Two Furthest Houses With Different Colors",
    "difficulty": "Easy",
    "description": "There are `n` houses evenly lined up on the street, and each house is beautifully painted. You are given a **0-indexed** integer array `colors` of length `n`, where `colors[i]` represents the color of the `ith` house. Return _the **maximum** distance between **two** houses with **different** colors_. The distance between the `ith` and `jth` houses is `abs(i - j)`, where `abs(x)` is the **absolute value** of `x`.",
    "examples": [
      {
        "input": "colors = \\[**1**,1,1,**6**,1,1,1\\]",
        "output": "3",
        "explanation": "In the above image, color 1 is blue, and color 6 is red."
      },
      {
        "input": "colors = \\[**1**,8,3,8,**3**\\]",
        "output": "4",
        "explanation": "In the above image, color 1 is blue, color 8 is yellow, and color 3 is green."
      },
      {
        "input": "colors = \\[**0**,**1**\\]",
        "output": "1",
        "explanation": "The furthest two houses with different colors are house 0 and house 1."
      }
    ],
    "constraints": [
      "`n == colors.length`",
      "`2 <= n <= 100`",
      "`0 <= colors[i] <= 100`",
      "Test data are generated such that at least two houses have different colors."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2079",
    "slug": "watering-plants",
    "title": "Watering Plants",
    "difficulty": "Medium",
    "description": "You want to water `n` plants in your garden with a watering can. The plants are arranged in a row and are labeled from `0` to `n - 1` from left to right where the `ith` plant is located at `x = i`. There is a river at `x = -1` that you can refill your watering can at. Each plant needs a specific amount of water. You will water the plants in the following way: *  Water the plants in order from left to right. *  After watering the current plant, if you do not have enough water to **completely** water the next plant, return to the river to fully refill the watering can. *  You **cannot** refill the watering can early. You are initially at the river (i.e., `x = -1`). It takes **one step** to move **one unit** on the x-axis. Given a **0-indexed** integer array `plants` of `n` integers, where `plants[i]` is the amount of water the `ith` plant needs, and an integer `capacity` representing the watering can capacity, return _the **number of steps** needed to water all the plants_.",
    "examples": [
      {
        "input": "plants = \\[2,2,3,3\\], capacity = 5",
        "output": "14",
        "explanation": "Start at the river with a full watering can:"
      },
      {
        "input": "plants = \\[1,1,1,4,2,3\\], capacity = 4",
        "output": "30",
        "explanation": "Start at the river with a full watering can:"
      },
      {
        "input": "plants = \\[7,7,7,7,7,7,7\\], capacity = 8",
        "output": "49",
        "explanation": "You have to refill before watering each plant."
      }
    ],
    "constraints": [
      "`n == plants.length`",
      "`1 <= n <= 1000`",
      "`1 <= plants[i] <= 106`",
      "`max(plants[i]) <= capacity <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2080",
    "slug": "range-frequency-queries",
    "title": "Range Frequency Queries",
    "difficulty": "Medium",
    "description": "Design a data structure to find the **frequency** of a given value in a given subarray. The **frequency** of a value in a subarray is the number of occurrences of that value in the subarray. Implement the `RangeFreqQuery` class: *  `RangeFreqQuery(int[] arr)` Constructs an instance of the class with the given **0-indexed** integer array `arr`. *  `int query(int left, int right, int value)` Returns the **frequency** of `value` in the subarray `arr[left...right]`. A **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).",
    "examples": [],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`1 <= arr[i], value <= 104`",
      "`0 <= left <= right < arr.length`",
      "At most `105` calls will be made to `query`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2081",
    "slug": "sum-of-k-mirror-numbers",
    "title": "Sum of k-Mirror Numbers",
    "difficulty": "Hard",
    "description": "A **k-mirror number** is a **positive** integer **without leading zeros** that reads the same both forward and backward in base-10 **as well as** in base-k. *  For example, `9` is a 2-mirror number. The representation of `9` in base-10 and base-2 are `9` and `1001` respectively, which read the same both forward and backward. *  On the contrary, `4` is not a 2-mirror number. The representation of `4` in base-2 is `100`, which does not read the same both forward and backward. Given the base `k` and the number `n`, return _the **sum** of the_ `n` _**smallest** k-mirror numbers_.",
    "examples": [
      {
        "input": "k = 2, n = 5",
        "output": "25",
        "explanation": ""
      },
      {
        "input": "k = 3, n = 7",
        "output": "499",
        "explanation": ""
      },
      {
        "input": "k = 7, n = 17",
        "output": "20379000",
        "explanation": "The 17 smallest 7-mirror numbers are:"
      }
    ],
    "constraints": [
      "`2 <= k <= 9`",
      "`1 <= n <= 30`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2083",
    "slug": "substrings-that-begin-and-end-with-the-same-letter",
    "title": "Substrings That Begin and End With the Same Letter",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `s` consisting of only lowercase English letters. Return _the number of **substrings** in_ `s` _that begin and end with the **same** character._ A **substring** is a contiguous non-empty sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"abcba \"",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "s =  \"abacad \"",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "s =  \"a \"",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2085",
    "slug": "count-common-words-with-one-occurrence",
    "title": "Count Common Words With One Occurrence",
    "difficulty": "Easy",
    "description": "Given two string arrays `words1` and `words2`, return _the number of strings that appear **exactly once** in **each** of the two arrays._",
    "examples": [
      {
        "input": "words1 = \\[ \"leetcode \", \"is \", \"amazing \", \"as \", \"is \"\\], words2 = \\[ \"amazing \", \"leetcode \", \"is \"\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "words1 = \\[ \"b \", \"bb \", \"bbb \"\\], words2 = \\[ \"a \", \"aa \", \"aaa \"\\]",
        "output": "0",
        "explanation": "There are no strings that appear in each of the two arrays."
      },
      {
        "input": "words1 = \\[ \"a \", \"ab \"\\], words2 = \\[ \"a \", \"a \", \"a \", \"ab \"\\]",
        "output": "1",
        "explanation": "The only string that appears exactly once in each of the two arrays is  \"ab \"."
      }
    ],
    "constraints": [
      "`1 <= words1.length, words2.length <= 1000`",
      "`1 <= words1[i].length, words2[j].length <= 30`",
      "`words1[i]` and `words2[j]` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2086",
    "slug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
    "title": "Minimum Number of Food Buckets to Feed the Hamsters",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `hamsters` where `hamsters[i]` is either: *  `'H'` indicating that there is a hamster at index `i`, or *  `'.'` indicating that index `i` is empty. You will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index `i` can be fed if you place a food bucket at index `i - 1` **and/or** at index `i + 1`. Return _the minimum number of food buckets you should **place at empty indices** to feed all the hamsters or_ `-1` _if it is impossible to feed all of them_.",
    "examples": [
      {
        "input": "hamsters =  \"H..H \"",
        "output": "2",
        "explanation": "We place two food buckets at indices 1 and 2."
      },
      {
        "input": "hamsters =  \".H.H. \"",
        "output": "1",
        "explanation": "We place one food bucket at index 2."
      },
      {
        "input": "hamsters =  \".HHH. \"",
        "output": "-1",
        "explanation": "If we place a food bucket at every empty index as shown, the hamster at index 2 will not be able to eat."
      }
    ],
    "constraints": [
      "`1 <= hamsters.length <= 105`",
      "`hamsters[i]` is either`'H'` or `'.'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2087",
    "slug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
    "title": "Minimum Cost Homecoming of a Robot in a Grid",
    "difficulty": "Medium",
    "description": "There is an `m x n` grid, where `(0, 0)` is the top-left cell and `(m - 1, n - 1)` is the bottom-right cell. You are given an integer array `startPos` where `startPos = [startrow, startcol]` indicates that **initially**, a **robot** is at the cell `(startrow, startcol)`. You are also given an integer array `homePos` where `homePos = [homerow, homecol]` indicates that its **home** is at the cell `(homerow, homecol)`. The robot needs to go to its home. It can move one cell in four directions: **left**, **right**, **up**, or **down**, and it can not move outside the boundary. Every move incurs some cost. You are further given two **0-indexed** integer arrays: `rowCosts` of length `m` and `colCosts` of length `n`. *  If the robot moves **up** or **down** into a cell whose **row** is `r`, then this move costs `rowCosts[r]`. *  If the robot moves **left** or **right** into a cell whose **column** is `c`, then this move costs `colCosts[c]`. Return _the **minimum total cost** for this robot to return home_.",
    "examples": [
      {
        "input": "startPos = \\[1, 0\\], homePos = \\[2, 3\\], rowCosts = \\[5, 4, 3\\], colCosts = \\[8, 2, 6, 7\\]",
        "output": "18",
        "explanation": "One optimal path is that:"
      },
      {
        "input": "startPos = \\[0, 0\\], homePos = \\[0, 0\\], rowCosts = \\[5\\], colCosts = \\[26\\]",
        "output": "0",
        "explanation": "The robot is already at its home. Since no moves occur, the total cost is 0."
      }
    ],
    "constraints": [
      "`m == rowCosts.length`",
      "`n == colCosts.length`",
      "`1 <= m, n <= 105`",
      "`0 <= rowCosts[r], colCosts[c] <= 104`",
      "`startPos.length == 2`",
      "`homePos.length == 2`",
      "`0 <= startrow, homerow < m`",
      "`0 <= startcol, homecol < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2088",
    "slug": "count-fertile-pyramids-in-a-land",
    "title": "Count Fertile Pyramids in a Land",
    "difficulty": "Hard",
    "description": "A farmer has a **rectangular grid** of land with `m` rows and `n` columns that can be divided into unit cells. Each cell is either **fertile** (represented by a `1`) or **barren** (represented by a `0`). All cells outside the grid are considered barren. A **pyramidal plot** of land can be defined as a set of cells with the following criteria: 1. The number of cells in the set has to be **greater than** `1` and all cells must be **fertile**. 2. The **apex** of a pyramid is the **topmost** cell of the pyramid. The **height** of a pyramid is the number of rows it covers. Let `(r, c)` be the apex of the pyramid, and its height be `h`. Then, the plot comprises of cells `(i, j)` where `r <= i <= r + h - 1` **and** `c - (i - r) <= j <= c + (i - r)`. An **inverse pyramidal plot** of land can be defined as a set of cells with similar criteria: 1. The number of cells in the set has to be **greater than** `1` and all cells must be **fertile**. 2. The **apex** of an inverse pyramid is the **bottommost** cell of the inverse pyramid. The **height** of an inverse pyramid is the number of rows it covers. Let `(r, c)` be the apex of the pyramid, and its height be `h`. Then, the plot comprises of cells `(i, j)` where `r - h + 1 <= i <= r` **and** `c - (r - i) <= j <= c + (r - i)`. Some examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells. Given a **0-indexed** `m x n` binary matrix `grid` representing the farmland, return _the **total number** of pyramidal and inverse pyramidal plots that can be found in_ `grid`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1,1,0\\],\\[1,1,1,1\\]\\]",
        "output": "2",
        "explanation": "The 2 possible pyramidal plots are shown in blue and red respectively."
      },
      {
        "input": "grid = \\[\\[1,1,1\\],\\[1,1,1\\]\\]",
        "output": "2",
        "explanation": "The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red."
      },
      {
        "input": "grid = \\[\\[1,1,1,1,0\\],\\[1,1,1,1,1\\],\\[1,1,1,1,1\\],\\[0,1,0,0,1\\]\\]",
        "output": "13",
        "explanation": "There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 1000`",
      "`1 <= m  n <= 105`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2089",
    "slug": "find-target-indices-after-sorting-array",
    "title": "Find Target Indices After Sorting Array",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums` and a target element `target`. A **target index** is an index `i` such that `nums[i] == target`. Return _a list of the target indices of_ `nums` after _sorting_ `nums` _in **non-decreasing** order_. If there are no target indices, return _an **empty** list_. The returned list must be sorted in **increasing** order.",
    "examples": [
      {
        "input": "nums = \\[1,2,5,2,3\\], target = 2",
        "output": "\\[1,2\\]",
        "explanation": "After sorting, nums is \\[1,**2**,**2**,3,5\\]."
      },
      {
        "input": "nums = \\[1,2,5,2,3\\], target = 3",
        "output": "\\[3\\]",
        "explanation": "After sorting, nums is \\[1,2,2,**3**,5\\]."
      },
      {
        "input": "nums = \\[1,2,5,2,3\\], target = 5",
        "output": "\\[4\\]",
        "explanation": "After sorting, nums is \\[1,2,2,3,**5**\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i], target <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2090",
    "slug": "k-radius-subarray-averages",
    "title": "K Radius Subarray Averages",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array `nums` of `n` integers, and an integer `k`. The **k-radius average** for a subarray of `nums` **centered** at some index `i` with the **radius** `k` is the average of **all** elements in `nums` between the indices `i - k` and `i + k` (**inclusive**). If there are less than `k` elements before **or** after the index `i`, then the **k-radius average** is `-1`. Build and return _an array_ `avgs` _of length_ `n` _where_ `avgs[i]` _is the **k-radius average** for the subarray centered at index_ `i`. The **average** of `x` elements is the sum of the `x` elements divided by `x`, using **integer division**. The integer division truncates toward zero, which means losing its fractional part. *  For example, the average of four elements `2`, `3`, `1`, and `5` is `(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75`, which truncates to `2`.",
    "examples": [
      {
        "input": "nums = \\[7,4,3,9,1,8,5,2,6\\], k = 3",
        "output": "\\[-1,-1,-1,5,4,4,-1,-1,-1\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[100000\\], k = 0",
        "output": "\\[100000\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[8\\], k = 100000",
        "output": "\\[-1\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`0 <= nums[i], k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2091",
    "slug": "removing-minimum-and-maximum-from-array",
    "title": "Removing Minimum and Maximum From Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of **distinct** integers `nums`. There is an element in `nums` that has the **lowest** value and an element that has the **highest** value. We call them the **minimum** and **maximum** respectively. Your goal is to remove **both** these elements from the array. A **deletion** is defined as either removing an element from the **front** of the array or removing an element from the **back** of the array. Return _the **minimum** number of deletions it would take to remove **both** the minimum and maximum element from the array._",
    "examples": [
      {
        "input": "nums = \\[2,**10**,7,5,4,**1**,8,6\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "nums = \\[0,**\\-4**,**19**,1,8,-2,-3,5\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums = \\[**101**\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-105 <= nums[i] <= 105`",
      "The integers in `nums` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2092",
    "slug": "find-all-people-with-secret",
    "title": "Find All People With Secret",
    "difficulty": "Hard",
    "description": "You are given an integer `n` indicating there are `n` people numbered from `0` to `n - 1`. You are also given a **0-indexed** 2D integer array `meetings` where `meetings[i] = [xi, yi, timei]` indicates that person `xi` and person `yi` have a meeting at `timei`. A person may attend **multiple meetings** at the same time. Finally, you are given an integer `firstPerson`. Person `0` has a **secret** and initially shares the secret with a person `firstPerson` at time `0`. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person `xi` has the secret at `timei`, then they will share the secret with person `yi`, and vice versa. The secrets are shared **instantaneously**. That is, a person may receive the secret and share it with people in other meetings within the same time frame. Return _a list of all the people that have the secret after all the meetings have taken place._ You may return the answer in **any order**.",
    "examples": [
      {
        "input": "n = 6, meetings = \\[\\[1,2,5\\],\\[2,3,8\\],\\[1,5,10\\]\\], firstPerson = 1",
        "output": "\\[0,1,2,3,5\\]",
        "explanation": ""
      },
      {
        "input": "n = 4, meetings = \\[\\[3,1,3\\],\\[1,2,2\\],\\[0,3,3\\]\\], firstPerson = 3",
        "output": "\\[0,1,3\\]",
        "explanation": ""
      },
      {
        "input": "n = 5, meetings = \\[\\[3,4,2\\],\\[1,2,1\\],\\[2,3,1\\]\\], firstPerson = 1",
        "output": "\\[0,1,2,3,4\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= n <= 105`",
      "`1 <= meetings.length <= 105`",
      "`meetings[i].length == 3`",
      "`0 <= xi, yi <= n - 1`",
      "`xi != yi`",
      "`1 <= timei <= 105`",
      "`1 <= firstPerson <= n - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2093",
    "slug": "minimum-cost-to-reach-city-with-discounts",
    "title": "Minimum Cost to Reach City With Discounts",
    "difficulty": "Medium",
    "description": "A series of highways connect `n` cities numbered from `0` to `n - 1`. You are given a 2D integer array `highways` where `highways[i] = [city1i, city2i, tolli]` indicates that there is a highway that connects `city1i` and `city2i`, allowing a car to go from `city1i` to `city2i` **and vice versa** for a cost of `tolli`. You are also given an integer `discounts` which represents the number of discounts you have. You can use a discount to travel across the `ith` highway for a cost of `tolli / 2` (**integer** **division**). Each discount may only be used **once**, and you can only use at most **one** discount per highway. Return _the **minimum total cost** to go from city_ `0` _to city_ `n - 1`_, or_ `-1` _if it is not possible to go from city_ `0` _to city_ `n - 1`_._",
    "examples": [
      {
        "input": "n = 5, highways = \\[\\[0,1,4\\],\\[2,1,3\\],\\[1,4,11\\],\\[3,2,3\\],\\[3,4,2\\]\\], discounts = 1",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "n = 4, highways = \\[\\[1,3,17\\],\\[1,2,7\\],\\[3,2,5\\],\\[0,1,6\\],\\[3,0,20\\]\\], discounts = 20",
        "output": "8",
        "explanation": ""
      },
      {
        "input": "n = 4, highways = \\[\\[0,1,3\\],\\[2,3,2\\]\\], discounts = 0",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= n <= 1000`",
      "`1 <= highways.length <= 1000`",
      "`highways[i].length == 3`",
      "`0 <= city1i, city2i <= n - 1`",
      "`city1i != city2i`",
      "`0 <= tolli <= 105`",
      "`0 <= discounts <= 500`",
      "There are no duplicate highways."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2094",
    "slug": "finding-3-digit-even-numbers",
    "title": "Finding 3-Digit Even Numbers",
    "difficulty": "Easy",
    "description": "You are given an integer array `digits`, where each element is a digit. The array may contain duplicates. You need to find **all** the **unique** integers that follow the given requirements: *  The integer consists of the **concatenation** of **three** elements from `digits` in **any** arbitrary order. *  The integer does not have **leading zeros**. *  The integer is **even**. For example, if the given `digits` were `[1, 2, 3]`, integers `132` and `312` follow the requirements. Return _a **sorted** array of the unique integers._",
    "examples": [
      {
        "input": "digits = \\[2,1,3,0\\]",
        "output": "\\[102,120,130,132,210,230,302,310,312,320\\]",
        "explanation": "All the possible integers that follow the requirements are in the output array."
      },
      {
        "input": "digits = \\[2,2,8,8,2\\]",
        "output": "\\[222,228,282,288,822,828,882\\]",
        "explanation": "The same digit can be used as many times as it appears in digits."
      },
      {
        "input": "digits = \\[3,7,5\\]",
        "output": "\\[\\]",
        "explanation": "No **even** integers can be formed using the given digits."
      }
    ],
    "constraints": [
      "`3 <= digits.length <= 100`",
      "`0 <= digits[i] <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2095",
    "slug": "delete-the-middle-node-of-a-linked-list",
    "title": "Delete the Middle Node of a Linked List",
    "difficulty": "Medium",
    "description": "You are given the `head` of a linked list. **Delete** the **middle node**, and return _the_ `head` _of the modified linked list_. The **middle node** of a linked list of size `n` is the `\u230an / 2\u230bth` node from the **start** using **0-based indexing**, where `\u230ax\u230b` denotes the largest integer less than or equal to `x`. *  For `n` = `1`, `2`, `3`, `4`, and `5`, the middle nodes are `0`, `1`, `1`, `2`, and `2`, respectively.",
    "examples": [
      {
        "input": "head = \\[1,3,4,7,1,2,6\\]",
        "output": "\\[1,3,4,1,2,6\\]",
        "explanation": ""
      },
      {
        "input": "head = \\[1,2,3,4\\]",
        "output": "\\[1,2,4\\]",
        "explanation": ""
      },
      {
        "input": "head = \\[2,1\\]",
        "output": "\\[2\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[1, 105]`.",
      "`1 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2096",
    "slug": "step-by-step-directions-from-a-binary-tree-node-to-another",
    "title": "Step-By-Step Directions From a Binary Tree Node to Another",
    "difficulty": "Medium",
    "description": "You are given the `root` of a **binary tree** with `n` nodes. Each node is uniquely assigned a value from `1` to `n`. You are also given an integer `startValue` representing the value of the start node `s`, and a different integer `destValue` representing the value of the destination node `t`. Find the **shortest path** starting from node `s` and ending at node `t`. Generate step-by-step directions of such path as a string consisting of only the **uppercase** letters `'L'`, `'R'`, and `'U'`. Each letter indicates a specific direction: *  `'L'` means to go from a node to its **left child** node. *  `'R'` means to go from a node to its **right child** node. *  `'U'` means to go from a node to its **parent** node. Return _the step-by-step directions of the **shortest path** from node_ `s` _to node_ `t`.",
    "examples": [
      {
        "input": "root = \\[5,1,2,3,null,6,4\\], startValue = 3, destValue = 6",
        "output": "\"UURL \"",
        "explanation": "The shortest path is: 3 -> 1 -> 5 -> 2 -> 6."
      },
      {
        "input": "root = \\[2,1\\], startValue = 2, destValue = 1",
        "output": "\"L \"",
        "explanation": "The shortest path is: 2 -> 1."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is `n`.",
      "`2 <= n <= 105`",
      "`1 <= Node.val <= n`",
      "All the values in the tree are unique.",
      "`1 <= startValue, destValue <= n`",
      "`startValue != destValue`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2097",
    "slug": "valid-arrangement-of-pairs",
    "title": "Valid Arrangement of Pairs",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** 2D integer array `pairs` where `pairs[i] = [starti, endi]`. An arrangement of `pairs` is **valid** if for every index `i` where `1 <= i < pairs.length`, we have `endi-1 == starti`. Return _**any** valid arrangement of_ `pairs`.",
    "examples": [
      {
        "input": "pairs = \\[\\[5,1\\],\\[4,5\\],\\[11,9\\],\\[9,4\\]\\]",
        "output": "\\[\\[11,9\\],\\[9,4\\],\\[4,5\\],\\[5,1\\]\\]",
        "explanation": ""
      },
      {
        "input": "pairs = \\[\\[1,3\\],\\[3,2\\],\\[2,1\\]\\]",
        "output": "\\[\\[1,3\\],\\[3,2\\],\\[2,1\\]\\]",
        "explanation": ""
      },
      {
        "input": "pairs = \\[\\[1,2\\],\\[1,3\\],\\[2,1\\]\\]",
        "output": "\\[\\[1,2\\],\\[2,1\\],\\[1,3\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= pairs.length <= 105`",
      "`pairs[i].length == 2`",
      "`0 <= starti, endi <= 109`",
      "`starti != endi`",
      "No two pairs are exactly the same.",
      "There exists a valid arrangement of `pairs`."
    ],
    "note": "The inputs will be generated such that there exists a valid arrangement of `pairs`.",
    "follow_up": null
  },
  {
    "id": "2098",
    "slug": "subsequence-of-size-k-with-the-largest-even-sum",
    "title": "Subsequence of Size K With the Largest Even Sum",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an integer `k`. Find the **largest even sum** of any subsequence of `nums` that has a length of `k`. Return _this sum, or_ `-1` _if such a sum does not exist_. A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "nums = \\[4,1,5,3,1\\], k = 3",
        "output": "12",
        "explanation": ""
      },
      {
        "input": "nums = \\[4,6,2\\], k = 3",
        "output": "12",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,3,5\\], k = 1",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 105`",
      "`1 <= k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2099",
    "slug": "find-subsequence-of-length-k-with-the-largest-sum",
    "title": "Find Subsequence of Length K With the Largest Sum",
    "difficulty": "Easy",
    "description": "You are given an integer array `nums` and an integer `k`. You want to find a **subsequence** of `nums` of length `k` that has the **largest** sum. Return _**any** such subsequence as an integer array of length_ `k`. A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "nums = \\[2,1,3,3\\], k = 2",
        "output": "\\[3,3\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[-1,-2,3,4\\], k = 3",
        "output": "\\[-1,3,4\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[3,4,3,3\\], k = 2",
        "output": "\\[3,4\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`-105 <= nums[i] <= 105`",
      "`1 <= k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2100",
    "slug": "find-good-days-to-rob-the-bank",
    "title": "Find Good Days to Rob the Bank",
    "difficulty": "Medium",
    "description": "You and a gang of thieves are planning on robbing a bank. You are given a **0-indexed** integer array `security`, where `security[i]` is the number of guards on duty on the `ith` day. The days are numbered starting from `0`. You are also given an integer `time`. The `ith` day is a good day to rob the bank if: *  There are at least `time` days before and after the `ith` day, *  The number of guards at the bank for the `time` days **before** `i` are **non-increasing**, and *  The number of guards at the bank for the `time` days **after** `i` are **non-decreasing**. More formally, this means day `i` is a good day to rob the bank if and only if `security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time]`. Return _a list of **all** days **(0-indexed)** that are good days to rob the bank_. _The order that the days are returned in does **not** matter._",
    "examples": [
      {
        "input": "security = \\[5,3,3,3,5,6,2\\], time = 2",
        "output": "\\[2,3\\]",
        "explanation": ""
      },
      {
        "input": "security = \\[1,1,1,1,1\\], time = 0",
        "output": "\\[0,1,2,3,4\\]",
        "explanation": ""
      },
      {
        "input": "security = \\[1,2,3,4,5,6\\], time = 2",
        "output": "\\[\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= security.length <= 105`",
      "`0 <= security[i], time <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2101",
    "slug": "detonate-the-maximum-bombs",
    "title": "Detonate the Maximum Bombs",
    "difficulty": "Medium",
    "description": "You are given a list of bombs. The **range** of a bomb is defined as the area where its effect can be felt. This area is in the shape of a **circle** with the center as the location of the bomb. The bombs are represented by a **0-indexed** 2D integer array `bombs` where `bombs[i] = [xi, yi, ri]`. `xi` and `yi` denote the X-coordinate and Y-coordinate of the location of the `ith` bomb, whereas `ri` denotes the **radius** of its range. You may choose to detonate a **single** bomb. When a bomb is detonated, it will detonate **all bombs** that lie in its range. These bombs will further detonate the bombs that lie in their ranges. Given the list of `bombs`, return _the **maximum** number of bombs that can be detonated if you are allowed to detonate **only one** bomb_.",
    "examples": [
      {
        "input": "bombs = \\[\\[2,1,3\\],\\[6,1,4\\]\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "bombs = \\[\\[1,1,5\\],\\[10,10,5\\]\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "bombs = \\[\\[1,2,3\\],\\[2,3,1\\],\\[3,4,2\\],\\[4,5,3\\],\\[5,6,4\\]\\]",
        "output": "5",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= bombs.length <= 100`",
      "`bombs[i].length == 3`",
      "`1 <= xi, yi, ri <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2102",
    "slug": "sequentially-ordinal-rank-tracker",
    "title": "Sequentially Ordinal Rank Tracker",
    "difficulty": "Hard",
    "description": "A scenic location is represented by its `name` and attractiveness `score`, where `name` is a **unique** string among all locations and `score` is an integer. Locations can be ranked from the best to the worst. The **higher** the score, the better the location. If the scores of two locations are equal, then the location with the **lexicographically smaller** name is better. You are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports: *  **Adding** scenic locations, **one at a time**. *  **Querying** the `ith` **best** location of **all locations already added**, where `i` is the number of times the system has been queried (including the current query). *  For example, when the system is queried for the `4th` time, it returns the `4th` best location of all locations already added. Note that the test data are generated so that **at any time**, the number of queries **does not exceed** the number of locations added to the system. Implement the `SORTracker` class: *  `SORTracker()` Initializes the tracker system. *  `void add(string name, int score)` Adds a scenic location with `name` and `score` to the system. *  `string get()` Queries and returns the `ith` best location, where `i` is the number of times this method has been invoked (including this invocation).",
    "examples": [],
    "constraints": [
      "`name` consists of lowercase English letters, and is unique among all locations.",
      "`1 <= name.length <= 10`",
      "`1 <= score <= 105`",
      "At any time, the number of calls to `get` does not exceed the number of calls to `add`.",
      "At most `4  104` calls in total will be made to `add` and `get`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2103",
    "slug": "rings-and-rods",
    "title": "Rings and Rods",
    "difficulty": "Easy",
    "description": "There are `n` rings and each ring is either red, green, or blue. The rings are distributed **across ten rods** labeled from `0` to `9`. You are given a string `rings` of length `2n` that describes the `n` rings that are placed onto the rods. Every two characters in `rings` forms a **color-position pair** that is used to describe each ring where: *  The **first** character of the `ith` pair denotes the `ith` ring's **color** (`'R'`, `'G'`, `'B'`). *  The **second** character of the `ith` pair denotes the **rod** that the `ith` ring is placed on (`'0'` to `'9'`). For example, `\"R3G2B1 \"` describes `n == 3` rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1. Return _the number of rods that have **all three colors** of rings on them._",
    "examples": [
      {
        "input": "rings =  \"B0B6G0R6R0R6G9 \"",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "rings =  \"B0R0G0R9R0B0G0 \"",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "rings =  \"G4 \"",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`rings.length == 2  n`",
      "`1 <= n <= 100`",
      "`rings[i]` where `i` is even is either `'R'`, `'G'`, or `'B'` (0-indexed).",
      "`rings[i]` where `i` is odd is a digit from `'0'` to `'9'` (0-indexed)."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2104",
    "slug": "sum-of-subarray-ranges",
    "title": "Sum of Subarray Ranges",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. The **range** of a subarray of `nums` is the difference between the largest and smallest element in the subarray. Return _the **sum of all** subarray ranges of_ `nums`_._ A subarray is a contiguous **non-empty** sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[1,2,3\\]",
        "output": "4",
        "explanation": "The 6 subarrays of nums are the following:"
      },
      {
        "input": "nums = \\[1,3,3\\]",
        "output": "4",
        "explanation": "The 6 subarrays of nums are the following:"
      },
      {
        "input": "nums = \\[4,-2,-3,4,1\\]",
        "output": "59",
        "explanation": "The sum of all subarray ranges of nums is 59."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": "Could you find a solution with `O(n)` time complexity?"
  },
  {
    "id": "2105",
    "slug": "watering-plants-ii",
    "title": "Watering Plants II",
    "difficulty": "Medium",
    "description": "Alice and Bob want to water `n` plants in their garden. The plants are arranged in a row and are labeled from `0` to `n - 1` from left to right where the `ith` plant is located at `x = i`. Each plant needs a specific amount of water. Alice and Bob have a watering can each, **initially full**. They water the plants in the following way: *  Alice waters the plants in order from **left to right**, starting from the `0th` plant. Bob waters the plants in order from **right to left**, starting from the `(n - 1)th` plant. They begin watering the plants **simultaneously**. *  It takes the same amount of time to water each plant regardless of how much water it needs. *  Alice/Bob **must** water the plant if they have enough in their can to **fully** water it. Otherwise, they **first** refill their can (instantaneously) then water the plant. *  In case both Alice and Bob reach the same plant, the one with **more** water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant. Given a **0-indexed** integer array `plants` of `n` integers, where `plants[i]` is the amount of water the `ith` plant needs, and two integers `capacityA` and `capacityB` representing the capacities of Alice's and Bob's watering cans respectively, return _the **number of times** they have to refill to water all the plants_.",
    "examples": [
      {
        "input": "plants = \\[2,2,3,3\\], capacityA = 5, capacityB = 5",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "plants = \\[2,2,3,3\\], capacityA = 3, capacityB = 4",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "plants = \\[5\\], capacityA = 10, capacityB = 8",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == plants.length`",
      "`1 <= n <= 105`",
      "`1 <= plants[i] <= 106`",
      "`max(plants[i]) <= capacityA, capacityB <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2106",
    "slug": "maximum-fruits-harvested-after-at-most-k-steps",
    "title": "Maximum Fruits Harvested After at Most K Steps",
    "difficulty": "Hard",
    "description": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array `fruits` where `fruits[i] = [positioni, amounti]` depicts `amounti` fruits at the position `positioni`. `fruits` is already **sorted** by `positioni` in **ascending order**, and each `positioni` is **unique**. You are also given an integer `startPos` and an integer `k`. Initially, you are at the position `startPos`. From any position, you can either walk to the **left or right**. It takes **one step** to move **one unit** on the x-axis, and you can walk **at most** `k` steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position. Return _the **maximum total number** of fruits you can harvest_.",
    "examples": [
      {
        "input": "fruits = \\[\\[2,8\\],\\[6,3\\],\\[8,6\\]\\], startPos = 5, k = 4",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "fruits = \\[\\[0,9\\],\\[4,1\\],\\[5,7\\],\\[6,2\\],\\[7,4\\],\\[10,9\\]\\], startPos = 5, k = 4",
        "output": "14",
        "explanation": ""
      },
      {
        "input": "fruits = \\[\\[0,3\\],\\[6,4\\],\\[8,5\\]\\], startPos = 3, k = 2",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= fruits.length <= 105`",
      "`fruits[i].length == 2`",
      "`0 <= startPos, positioni <= 2  105`",
      "`positioni-1 < positioni` for any `i > 0` (0-indexed)",
      "`1 <= amounti <= 104`",
      "`0 <= k <= 2  105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2107",
    "slug": "number-of-unique-flavors-after-sharing-k-candies",
    "title": "Number of Unique Flavors After Sharing K Candies",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `candies`, where `candies[i]` represents the flavor of the `ith` candy. Your mom wants you to share these candies with your little sister by giving her `k` **consecutive** candies, but you want to keep as many flavors of candies as possible. Return _the **maximum** number of **unique** flavors of candy you can keep after sharing_ _with your sister._",
    "examples": [
      {
        "input": "candies = \\[1,2,2,3,4,3\\], k = 3",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "candies = \\[2,2,2,2,3,3\\], k = 2",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "candies = \\[2,4,5\\], k = 0",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= candies.length <= 105`",
      "`1 <= candies[i] <= 105`",
      "`0 <= k <= candies.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2108",
    "slug": "find-first-palindromic-string-in-the-array",
    "title": "Find First Palindromic String in the Array",
    "difficulty": "Easy",
    "description": "Given an array of strings `words`, return _the first **palindromic** string in the array_. If there is no such string, return _an **empty string**_ `\" \"`. A string is **palindromic** if it reads the same forward and backward.",
    "examples": [
      {
        "input": "words = \\[ \"abc \", \"car \", \"ada \", \"racecar \", \"cool \"\\]",
        "output": "\"ada \"",
        "explanation": "The first string that is palindromic is  \"ada \"."
      },
      {
        "input": "words = \\[ \"notapalindrome \", \"racecar \"\\]",
        "output": "\"racecar \"",
        "explanation": "The first and only string that is palindromic is  \"racecar \"."
      },
      {
        "input": "words = \\[ \"def \", \"ghi \"\\]",
        "output": "\" \"",
        "explanation": "There are no palindromic strings, so the empty string is returned."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 100`",
      "`words[i]` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2109",
    "slug": "adding-spaces-to-a-string",
    "title": "Adding Spaces to a String",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `s` and a **0-indexed** integer array `spaces` that describes the indices in the original string where spaces will be added. Each space should be inserted **before** the character at the given index. *  For example, given `s = \"EnjoyYourCoffee \"` and `spaces = [5, 9]`, we place spaces before `'Y'` and `'C'`, which are at indices `5` and `9` respectively. Thus, we obtain `\"Enjoy **Y**our **C**offee \"`. Return _the modified string **after** the spaces have been added._",
    "examples": [
      {
        "input": "s =  \"LeetcodeHelpsMeLearn \", spaces = \\[8,13,15\\]",
        "output": "\"Leetcode Helps Me Learn \"",
        "explanation": ""
      },
      {
        "input": "s =  \"icodeinpython \", spaces = \\[1,5,7,9\\]",
        "output": "\"i code in py thon \"",
        "explanation": ""
      },
      {
        "input": "s =  \"spacing \", spaces = \\[0,1,2,3,4,5,6\\]",
        "output": "\" s p a c i n g \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 3  105`",
      "`s` consists only of lowercase and uppercase English letters.",
      "`1 <= spaces.length <= 3  105`",
      "`0 <= spaces[i] <= s.length - 1`",
      "All the values of `spaces` are strictly increasing."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2110",
    "slug": "number-of-smooth-descent-periods-of-a-stock",
    "title": "Number of Smooth Descent Periods of a Stock",
    "difficulty": "Medium",
    "description": "You are given an integer array `prices` representing the daily price history of a stock, where `prices[i]` is the stock price on the `ith` day. A **smooth descent period** of a stock consists of **one or more contiguous** days such that the price on each day is **lower** than the price on the **preceding day** by **exactly** `1`. The first day of the period is exempted from this rule. Return _the number of **smooth descent periods**_.",
    "examples": [
      {
        "input": "prices = \\[3,2,1,4\\]",
        "output": "7",
        "explanation": "There are 7 smooth descent periods:"
      },
      {
        "input": "prices = \\[8,6,7,7\\]",
        "output": "4",
        "explanation": "There are 4 smooth descent periods: \\[8\\], \\[6\\], \\[7\\], and \\[7\\]"
      },
      {
        "input": "prices = \\[1\\]",
        "output": "1",
        "explanation": "There is 1 smooth descent period: \\[1\\]"
      }
    ],
    "constraints": [
      "`1 <= prices.length <= 105`",
      "`1 <= prices[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2111",
    "slug": "minimum-operations-to-make-the-array-k-increasing",
    "title": "Minimum Operations to Make the Array K-Increasing",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** array `arr` consisting of `n` positive integers, and a positive integer `k`. The array `arr` is called **K-increasing** if `arr[i-k] <= arr[i]` holds for every index `i`, where `k <= i <= n-1`. *  For example, `arr = [4, 1, 5, 2, 6, 2]` is K-increasing for `k = 2` because: *  `arr[0] <= arr[2] (4 <= 5)` *  `arr[1] <= arr[3] (1 <= 2)` *  `arr[2] <= arr[4] (5 <= 6)` *  `arr[3] <= arr[5] (2 <= 2)` *  However, the same `arr` is not K-increasing for `k = 1` (because `arr[0] > arr[1]`) or `k = 3` (because `arr[0] > arr[3]`). In one **operation**, you can choose an index `i` and **change** `arr[i]` into **any** positive integer. Return _the **minimum number of operations** required to make the array K-increasing for the given_ `k`.",
    "examples": [
      {
        "input": "arr = \\[5,4,3,2,1\\], k = 1",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "arr = \\[4,1,5,2,6,2\\], k = 2",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "arr = \\[4,1,5,2,6,2\\], k = 3",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= arr.length <= 105`",
      "`1 <= arr[i], k <= arr.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2113",
    "slug": "elements-in-array-after-removing-and-replacing-elements",
    "title": "Elements in Array After Removing and Replacing Elements",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. Initially on minute `0`, the array is unchanged. Every minute, the **leftmost** element in `nums` is removed until no elements remain. Then, every minute, one element is appended to the **end** of `nums`, in the order they were removed in, until the original array is restored. This process repeats indefinitely. *  For example, the array `[0,1,2]` would change as follows: `[0,1,2] -> [1,2] -> [2] -> [] -> [0] -> [0,1] -> [0,1,2] -> [1,2] -> [2] -> [] -> [0] -> [0,1] -> [0,1,2] -> ...` You are also given a 2D integer array `queries` of size `n` where `queries[j] = [timej, indexj]`. The answer to the `jth` query is: *  `nums[indexj]` if `indexj < nums.length` at minute `timej` *  `-1` if `indexj >= nums.length` at minute `timej` Return _an integer array `ans` of size_ `n` _where_ `ans[j]` _is the answer to the_ `jth` _query_.",
    "examples": [
      {
        "input": "nums = \\[0,1,2\\], queries = \\[\\[0,2\\],\\[2,0\\],\\[3,2\\],\\[5,0\\]\\]",
        "output": "\\[2,2,-1,0\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[2\\], queries = \\[\\[0,0\\],\\[1,0\\],\\[2,0\\],\\[3,0\\]\\]",
        "output": "\\[2,-1,2,-1\\]"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`0 <= nums[i] <= 100`",
      "`n == queries.length`",
      "`1 <= n <= 105`",
      "`queries[j].length == 2`",
      "`0 <= timej <= 105`",
      "`0 <= indexj < nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2114",
    "slug": "maximum-number-of-words-found-in-sentences",
    "title": "Maximum Number of Words Found in Sentences",
    "difficulty": "Easy",
    "description": "A **sentence** is a list of **words** that are separated by a single space with no leading or trailing spaces. You are given an array of strings `sentences`, where each `sentences[i]` represents a single **sentence**. Return _the **maximum number of words** that appear in a single sentence_.",
    "examples": [
      {
        "input": "sentences = \\[ \"alice and bob love leetcode \",  \"i think so too \",  \"this is great thanks very much \"\\]",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "sentences = \\[ \"please wait \",  \"continue to fight \",  \"continue to win \"\\]",
        "output": "3",
        "explanation": "It is possible that multiple sentences contain the same number of words."
      }
    ],
    "constraints": [
      "`1 <= sentences.length <= 100`",
      "`1 <= sentences[i].length <= 100`",
      "`sentences[i]` consists only of lowercase English letters and `' '` only.",
      "`sentences[i]` does not have leading or trailing spaces.",
      "All the words in `sentences[i]` are separated by a single space."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2115",
    "slug": "find-all-possible-recipes-from-given-supplies",
    "title": "Find All Possible Recipes from Given Supplies",
    "difficulty": "Medium",
    "description": "You have information about `n` different recipes. You are given a string array `recipes` and a 2D string array `ingredients`. The `ith` recipe has the name `recipes[i]`, and you can **create** it if you have **all** the needed ingredients from `ingredients[i]`. Ingredients to a recipe may need to be created from **other** recipes, i.e., `ingredients[i]` may contain a string that is in `recipes`. You are also given a string array `supplies` containing all the ingredients that you initially have, and you have an infinite supply of all of them. Return _a list of all the recipes that you can create._ You may return the answer in **any order**. Note that two recipes may contain each other in their ingredients.",
    "examples": [
      {
        "input": "recipes = \\[ \"bread \"\\], ingredients = \\[\\[ \"yeast \", \"flour \"\\]\\], supplies = \\[ \"yeast \", \"flour \", \"corn \"\\]",
        "output": "\\[ \"bread \"\\]",
        "explanation": ""
      },
      {
        "input": "recipes = \\[ \"bread \", \"sandwich \"\\], ingredients = \\[\\[ \"yeast \", \"flour \"\\],\\[ \"bread \", \"meat \"\\]\\], supplies = \\[ \"yeast \", \"flour \", \"meat \"\\]",
        "output": "\\[ \"bread \", \"sandwich \"\\]",
        "explanation": ""
      },
      {
        "input": "recipes = \\[ \"bread \", \"sandwich \", \"burger \"\\], ingredients = \\[\\[ \"yeast \", \"flour \"\\],\\[ \"bread \", \"meat \"\\],\\[ \"sandwich \", \"meat \", \"bread \"\\]\\], supplies = \\[ \"yeast \", \"flour \", \"meat \"\\]",
        "output": "\\[ \"bread \", \"sandwich \", \"burger \"\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == recipes.length == ingredients.length`",
      "`1 <= n <= 100`",
      "`1 <= ingredients[i].length, supplies.length <= 100`",
      "`1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10`",
      "`recipes[i], ingredients[i][j]`, and `supplies[k]` consist only of lowercase English letters.",
      "All the values of `recipes` and `supplies` combined are unique.",
      "Each `ingredients[i]` does not contain any duplicate values."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2116",
    "slug": "check-if-a-parentheses-string-can-be-valid",
    "title": "Check if a Parentheses String Can Be Valid",
    "difficulty": "Medium",
    "description": "A parentheses string is a **non-empty** string consisting only of `'('` and `')'`. It is valid if **any** of the following conditions is **true**: *  It is `()`. *  It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid parentheses strings. *  It can be written as `(A)`, where `A` is a valid parentheses string. You are given a parentheses string `s` and a string `locked`, both of length `n`. `locked` is a binary string consisting only of `'0'`s and `'1'`s. For **each** index `i` of `locked`, *  If `locked[i]` is `'1'`, you **cannot** change `s[i]`. *  But if `locked[i]` is `'0'`, you **can** change `s[i]` to either `'('` or `')'`. Return `true` _if you can make `s` a valid parentheses string_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "s =  \"))())) \", locked =  \"010100 \"",
        "output": "true",
        "explanation": "locked\\[1\\] == '1' and locked\\[3\\] == '1', so we cannot change s\\[1\\] or s\\[3\\]."
      },
      {
        "input": "s =  \"()() \", locked =  \"0000 \"",
        "output": "true",
        "explanation": "We do not need to make any changes because s is already valid."
      },
      {
        "input": "s =  \") \", locked =  \"0 \"",
        "output": "false",
        "explanation": "locked permits us to change s\\[0\\]."
      }
    ],
    "constraints": [
      "`n == s.length == locked.length`",
      "`1 <= n <= 105`",
      "`s[i]` is either `'('` or `')'`.",
      "`locked[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2117",
    "slug": "abbreviating-the-product-of-a-range",
    "title": "Abbreviating the Product of a Range",
    "difficulty": "Hard",
    "description": "You are given two positive integers `left` and `right` with `left <= right`. Calculate the **product** of all integers in the **inclusive** range `[left, right]`. Since the product may be very large, you will **abbreviate** it following these steps: 1. Count all **trailing** zeros in the product and **remove** them. Let us denote this count as `C`. *  For example, there are `3` trailing zeros in `1000`, and there are `0` trailing zeros in `546`. 2. Denote the remaining number of digits in the product as `d`. If `d > 10`, then express the product as ... 3. Finally, represent the product as a **string** `\"` ...eC \" Return _a string denoting the **abbreviated product** of all integers in the **inclusive** range_ `[left, right]`.",
    "examples": [
      {
        "input": "left = 1, right = 4",
        "output": "\"24e0 \"",
        "explanation": "The product is 1 \\* 2 \\* 3 \\* 4 = 24."
      },
      {
        "input": "left = 2, right = 11",
        "output": "\"399168e2 \"",
        "explanation": "The product is 39916800."
      },
      {
        "input": "left = 371, right = 375",
        "output": "\"7219856259e3 \"",
        "explanation": "The product is 7219856259000."
      }
    ],
    "constraints": [
      "`1 <= left <= right <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2119",
    "slug": "a-number-after-a-double-reversal",
    "title": "A Number After a Double Reversal",
    "difficulty": "Easy",
    "description": "**Reversing** an integer means to reverse all its digits. *  For example, reversing `2021` gives `1202`. Reversing `12300` gives `321` as the **leading zeros are not retained**. Given an integer `num`, **reverse** `num` to get `reversed1`, **then reverse** `reversed1` to get `reversed2`. Return `true` _if_ `reversed2` _equals_ `num`. Otherwise return `false`.",
    "examples": [
      {
        "input": "num = 526",
        "output": "true",
        "explanation": "Reverse num to get 625, then reverse 625 to get 526, which equals num."
      },
      {
        "input": "num = 1800",
        "output": "false",
        "explanation": "Reverse num to get 81, then reverse 81 to get 18, which does not equal num."
      },
      {
        "input": "num = 0",
        "output": "true",
        "explanation": "Reverse num to get 0, then reverse 0 to get 0, which equals num."
      }
    ],
    "constraints": [
      "`0 <= num <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2120",
    "slug": "execution-of-all-suffix-instructions-staying-in-a-grid",
    "title": "Execution of All Suffix Instructions Staying in a Grid",
    "difficulty": "Medium",
    "description": "There is an `n x n` grid, with the top-left cell at `(0, 0)` and the bottom-right cell at `(n - 1, n - 1)`. You are given the integer `n` and an integer array `startPos` where `startPos = [startrow, startcol]` indicates that a robot is initially at cell `(startrow, startcol)`. You are also given a **0-indexed** string `s` of length `m` where `s[i]` is the `ith` instruction for the robot: `'L'` (move left), `'R'` (move right), `'U'` (move up), and `'D'` (move down). The robot can begin executing from any `ith` instruction in `s`. It executes the instructions one by one towards the end of `s` but it stops if either of these conditions is met: *  The next instruction will move the robot off the grid. *  There are no more instructions left to execute. Return _an array_ `answer` _of length_ `m` _where_ `answer[i]` _is **the number of instructions** the robot can execute if the robot **begins executing from** the_ `ith` _instruction in_ `s`.",
    "examples": [
      {
        "input": "n = 3, startPos = \\[0,1\\], s =  \"RRDDLU \"",
        "output": "\\[1,5,4,3,1,0\\]",
        "explanation": "Starting from startPos and beginning execution from the ith instruction:"
      },
      {
        "input": "n = 2, startPos = \\[1,1\\], s =  \"LURD \"",
        "output": "\\[4,1,0,0\\]",
        "explanation": ""
      },
      {
        "input": "n = 1, startPos = \\[0,0\\], s =  \"LRUD \"",
        "output": "\\[0,0,0,0\\]",
        "explanation": "No matter which instruction the robot begins execution from, it would move off the grid."
      }
    ],
    "constraints": [
      "`m == s.length`",
      "`1 <= n, m <= 500`",
      "`startPos.length == 2`",
      "`0 <= startrow, startcol < n`",
      "`s` consists of `'L'`, `'R'`, `'U'`, and `'D'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2121",
    "slug": "intervals-between-identical-elements",
    "title": "Intervals Between Identical Elements",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of `n` integers `arr`. The **interval** between two elements in `arr` is defined as the **absolute difference** between their indices. More formally, the **interval** between `arr[i]` and `arr[j]` is `|i - j|`. Return _an array_ `intervals` _of length_ `n` _where_ `intervals[i]` _is **the sum of intervals** between_ `arr[i]` _and each element in_ `arr` _with the same value as_ `arr[i]`_._",
    "examples": [
      {
        "input": "arr = \\[2,1,3,1,2,3,3\\]",
        "output": "\\[4,2,7,2,4,4,5\\]",
        "explanation": ""
      },
      {
        "input": "arr = \\[10,5,10,10\\]",
        "output": "\\[5,0,3,4\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == arr.length`",
      "`1 <= n <= 105`",
      "`1 <= arr[i] <= 105`"
    ],
    "note": "`|x|` is the absolute value of `x`.",
    "follow_up": null
  },
  {
    "id": "2123",
    "slug": "minimum-operations-to-remove-adjacent-ones-in-matrix",
    "title": "Minimum Operations to Remove Adjacent Ones in Matrix",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** binary matrix `grid`. In one operation, you can flip any `1` in `grid` to be `0`. A binary matrix is **well-isolated** if there is no `1` in the matrix that is **4-directionally connected** (i.e., horizontal and vertical) to another `1`. Return _the minimum number of operations to make_ `grid` _**well-isolated**_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,0\\],\\[0,1,1\\],\\[1,1,1\\]\\]",
        "output": "3",
        "explanation": "Use 3 operations to change grid\\[0\\]\\[1\\], grid\\[1\\]\\[2\\], and grid\\[2\\]\\[1\\] to 0."
      },
      {
        "input": "grid = \\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]",
        "output": "0",
        "explanation": "There are no 1's in grid and it is well-isolated."
      },
      {
        "input": "grid = \\[\\[0,1\\],\\[1,0\\]\\]",
        "output": "0",
        "explanation": "None of the 1's are 4-directionally connected and grid is well-isolated."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 300`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2124",
    "slug": "check-if-all-as-appears-before-all-bs",
    "title": "Check if All A's Appears Before All B's",
    "difficulty": "Easy",
    "description": "Given a string `s` consisting of **only** the characters `'a'` and `'b'`, return `true` _if **every**_ `'a'` _appears before **every**_ `'b'` _in the string_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "s =  \"aaabbb \"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s =  \"abab \"",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "s =  \"bbb \"",
        "output": "true",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s[i]` is either `'a'` or `'b'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2125",
    "slug": "number-of-laser-beams-in-a-bank",
    "title": "Number of Laser Beams in a Bank",
    "difficulty": "Medium",
    "description": "Anti-theft security devices are activated inside a bank. You are given a **0-indexed** binary string array `bank` representing the floor plan of the bank, which is an `m x n` 2D matrix. `bank[i]` represents the `ith` row, consisting of `'0'`s and `'1'`s. `'0'` means the cell is empty, while`'1'` means the cell has a security device. There is **one** laser beam between any **two** security devices **if both** conditions are met: *  The two devices are located on two **different rows**: `r1` and `r2`, where `r1 < r2`. *  For **each** row `i` where `r1 < i < r2`, there are **no security devices** in the `ith` row. Laser beams are independent, i.e., one beam does not interfere nor join with another. Return _the total number of laser beams in the bank_.",
    "examples": [
      {
        "input": "bank = \\[ \"011001 \", \"000000 \", \"010100 \", \"001000 \"\\]",
        "output": "8",
        "explanation": "Between each of the following device pairs, there is one beam. In total, there are 8 beams:"
      },
      {
        "input": "bank = \\[ \"000 \", \"111 \", \"000 \"\\]",
        "output": "0",
        "explanation": "There does not exist two devices located on two different rows."
      }
    ],
    "constraints": [
      "`m == bank.length`",
      "`n == bank[i].length`",
      "`1 <= m, n <= 500`",
      "`bank[i][j]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2126",
    "slug": "destroying-asteroids",
    "title": "Destroying Asteroids",
    "difficulty": "Medium",
    "description": "You are given an integer `mass`, which represents the original mass of a planet. You are further given an integer array `asteroids`, where `asteroids[i]` is the mass of the `ith` asteroid. You can arrange for the planet to collide with the asteroids in **any arbitrary order**. If the mass of the planet is **greater than or equal to** the mass of the asteroid, the asteroid is **destroyed** and the planet **gains** the mass of the asteroid. Otherwise, the planet is destroyed. Return `true` _if **all** asteroids can be destroyed. Otherwise, return_ `false`_._",
    "examples": [
      {
        "input": "mass = 10, asteroids = \\[3,9,19,5,21\\]",
        "output": "true",
        "explanation": "One way to order the asteroids is \\[9,19,5,3,21\\]:"
      },
      {
        "input": "mass = 5, asteroids = \\[4,9,23,4\\]",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= mass <= 105`",
      "`1 <= asteroids.length <= 105`",
      "`1 <= asteroids[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2127",
    "slug": "maximum-employees-to-be-invited-to-a-meeting",
    "title": "Maximum Employees to Be Invited to a Meeting",
    "difficulty": "Hard",
    "description": "A company is organizing a meeting and has a list of `n` employees, waiting to be invited. They have arranged for a large **circular** table, capable of seating **any number** of employees. The employees are numbered from `0` to `n - 1`. Each employee has a **favorite** person and they will attend the meeting **only if** they can sit next to their favorite person at the table. The favorite person of an employee is **not** themself. Given a **0-indexed** integer array `favorite`, where `favorite[i]` denotes the favorite person of the `ith` employee, return _the **maximum number of employees** that can be invited to the meeting_.",
    "examples": [
      {
        "input": "favorite = \\[2,2,1,2\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "favorite = \\[1,2,0\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "favorite = \\[3,0,1,4,1\\]",
        "output": "4",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == favorite.length`",
      "`2 <= n <= 105`",
      "`0 <= favorite[i] <= n - 1`",
      "`favorite[i] != i`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2128",
    "slug": "remove-all-ones-with-row-and-column-flips",
    "title": "Remove All Ones With Row and Column Flips",
    "difficulty": "Medium",
    "description": "You are given an `m x n` binary matrix `grid`. In one operation, you can choose **any** row or column and flip each value in that row or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s). Return `true` _if it is possible to remove all_ `1`_'s from_ `grid` using **any** number of operations or `false` otherwise.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1,0\\],\\[1,0,1\\],\\[0,1,0\\]\\]",
        "output": "true",
        "explanation": "One possible way to remove all 1's from grid is to:"
      },
      {
        "input": "grid = \\[\\[1,1,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]",
        "output": "false",
        "explanation": "It is impossible to remove all 1's from grid."
      },
      {
        "input": "grid = \\[\\[0\\]\\]",
        "output": "true",
        "explanation": "There are no 1's in grid."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 300`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2129",
    "slug": "capitalize-the-title",
    "title": "Capitalize the Title",
    "difficulty": "Easy",
    "description": "You are given a string `title` consisting of one or more words separated by a single space, where each word consists of English letters. **Capitalize** the string by changing the capitalization of each word such that: *  If the length of the word is `1` or `2` letters, change all letters to lowercase. *  Otherwise, change the first letter to uppercase and the remaining letters to lowercase. Return _the **capitalized**_ `title`.",
    "examples": [
      {
        "input": "title =  \"capiTalIze tHe titLe \"",
        "output": "\"Capitalize The Title \"",
        "explanation": ""
      },
      {
        "input": "title =  \"First leTTeR of EACH Word \"",
        "output": "\"First Letter of Each Word \"",
        "explanation": ""
      },
      {
        "input": "title =  \"i lOve leetcode \"",
        "output": "\"i Love Leetcode \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= title.length <= 100`",
      "`title` consists of words separated by a single space without any leading or trailing spaces.",
      "Each word consists of uppercase and lowercase English letters and is non-empty."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2130",
    "slug": "maximum-twin-sum-of-a-linked-list",
    "title": "Maximum Twin Sum of a Linked List",
    "difficulty": "Medium",
    "description": "In a linked list of size `n`, where `n` is **even**, the `ith` node (**0-indexed**) of the linked list is known as the **twin** of the `(n-1-i)th` node, if `0 <= i <= (n / 2) - 1`. *  For example, if `n = 4`, then node `0` is the twin of node `3`, and node `1` is the twin of node `2`. These are the only nodes with twins for `n = 4`. The **twin sum** is defined as the sum of a node and its twin. Given the `head` of a linked list with even length, return _the **maximum twin sum** of the linked list_.",
    "examples": [
      {
        "input": "head = \\[5,4,2,1\\]",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "head = \\[4,2,2,3\\]",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "head = \\[1,100000\\]",
        "output": "100001",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is an even integer in the range `[2, 105]`.",
      "`1 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2131",
    "slug": "longest-palindrome-by-concatenating-two-letter-words",
    "title": "Longest Palindrome by Concatenating Two Letter Words",
    "difficulty": "Medium",
    "description": "You are given an array of strings `words`. Each element of `words` consists of **two** lowercase English letters. Create the **longest possible palindrome** by selecting some elements from `words` and concatenating them in **any order**. Each element can be selected **at most once**. Return _the **length** of the longest palindrome that you can create_. If it is impossible to create any palindrome, return `0`. A **palindrome** is a string that reads the same forward and backward.",
    "examples": [
      {
        "input": "words = \\[ \"lc \", \"cl \", \"gg \"\\]",
        "output": "6",
        "explanation": "One longest palindrome is  \"lc \" +  \"gg \" +  \"cl \" =  \"lcggcl \", of length 6."
      },
      {
        "input": "words = \\[ \"ab \", \"ty \", \"yt \", \"lc \", \"cl \", \"ab \"\\]",
        "output": "8",
        "explanation": "One longest palindrome is  \"ty \" +  \"lc \" +  \"cl \" +  \"yt \" =  \"tylcclyt \", of length 8."
      },
      {
        "input": "words = \\[ \"cc \", \"ll \", \"xx \"\\]",
        "output": "2",
        "explanation": "One longest palindrome is  \"cc \", of length 2."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 105`",
      "`words[i].length == 2`",
      "`words[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2132",
    "slug": "stamping-the-grid",
    "title": "Stamping the Grid",
    "difficulty": "Hard",
    "description": "You are given an `m x n` binary matrix `grid` where each cell is either `0` (empty) or `1` (occupied). You are then given stamps of size `stampHeight x stampWidth`. We want to fit the stamps such that they follow the given **restrictions** and **requirements**: 1. Cover all the **empty** cells. 2. Do not cover any of the **occupied** cells. 3. We can put as **many** stamps as we want. 4. Stamps can **overlap** with each other. 5. Stamps are not allowed to be **rotated**. 6. Stamps must stay completely **inside** the grid. Return `true` _if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return_ `false`.",
    "examples": [
      {
        "input": "grid = \\[\\[1,0,0,0\\],\\[1,0,0,0\\],\\[1,0,0,0\\],\\[1,0,0,0\\],\\[1,0,0,0\\]\\], stampHeight = 4, stampWidth = 3",
        "output": "true",
        "explanation": "We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells."
      },
      {
        "input": "grid = \\[\\[1,0,0,0\\],\\[0,1,0,0\\],\\[0,0,1,0\\],\\[0,0,0,1\\]\\], stampHeight = 2, stampWidth = 2",
        "output": "false",
        "explanation": "There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[r].length`",
      "`1 <= m, n <= 105`",
      "`1 <= m  n <= 2  105`",
      "`grid[r][c]` is either `0` or `1`.",
      "`1 <= stampHeight, stampWidth <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2133",
    "slug": "check-if-every-row-and-column-contains-all-numbers",
    "title": "Check if Every Row and Column Contains All Numbers",
    "difficulty": "Easy",
    "description": "An `n x n` matrix is **valid** if every row and every column contains **all** the integers from `1` to `n` (**inclusive**). Given an `n x n` integer matrix `matrix`, return `true` _if the matrix is **valid**._ Otherwise, return `false`.",
    "examples": [
      {
        "input": "matrix = \\[\\[1,2,3\\],\\[3,1,2\\],\\[2,3,1\\]\\]",
        "output": "true",
        "explanation": "In this case, n = 3, and every row and column contains the numbers 1, 2, and 3."
      },
      {
        "input": "matrix = \\[\\[1,1,1\\],\\[1,2,3\\],\\[1,2,3\\]\\]",
        "output": "false",
        "explanation": "In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3."
      }
    ],
    "constraints": [
      "`n == matrix.length == matrix[i].length`",
      "`1 <= n <= 100`",
      "`1 <= matrix[i][j] <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2134",
    "slug": "minimum-swaps-to-group-all-1s-together-ii",
    "title": "Minimum Swaps to Group All 1's Together II",
    "difficulty": "Medium",
    "description": "A **swap** is defined as taking two **distinct** positions in an array and swapping the values in them. A **circular** array is defined as an array where we consider the **first** element and the **last** element to be **adjacent**. Given a **binary** **circular** array `nums`, return _the minimum number of swaps required to group all_ `1`_'s present in the array together at **any location**_.",
    "examples": [
      {
        "input": "nums = \\[0,1,0,1,1,0,0\\]",
        "output": "1",
        "explanation": "Here are a few of the ways to group all the 1's together:"
      },
      {
        "input": "nums = \\[0,1,1,1,0,0,1,1,0\\]",
        "output": "2",
        "explanation": "Here are a few of the ways to group all the 1's together:"
      },
      {
        "input": "nums = \\[1,1,0,0,1\\]",
        "output": "0",
        "explanation": "All the 1's are already grouped together due to the circular property of the array."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`nums[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2135",
    "slug": "count-words-obtained-after-adding-a-letter",
    "title": "Count Words Obtained After Adding a Letter",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed** arrays of strings `startWords` and `targetWords`. Each string consists of **lowercase English letters** only. For each string in `targetWords`, check if it is possible to choose a string from `startWords` and perform a **conversion operation** on it to be equal to that from `targetWords`. The **conversion operation** is described in the following two steps: 1. **Append** any lowercase letter that is **not present** in the string to its end. *  For example, if the string is `\"abc \"`, the letters `'d'`, `'e'`, or `'y'` can be added to it, but not `'a'`. If `'d'` is added, the resulting string will be `\"abcd \"`. 2. **Rearrange** the letters of the new string in **any** arbitrary order. *  For example, `\"abcd \"` can be rearranged to `\"acbd \"`, `\"bacd \"`, `\"cbda \"`, and so on. Note that it can also be rearranged to `\"abcd \"` itself. Return _the **number of strings** in_ `targetWords` _that can be obtained by performing the operations on **any** string of_ `startWords`. **Note** that you will only be verifying if the string in `targetWords` can be obtained from a string in `startWords` by performing the operations. The strings in `startWords` **do not** actually change during this process.",
    "examples": [
      {
        "input": "startWords = \\[ \"ant \", \"act \", \"tack \"\\], targetWords = \\[ \"tack \", \"act \", \"acti \"\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "startWords = \\[ \"ab \", \"a \"\\], targetWords = \\[ \"abc \", \"abcd \"\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= startWords.length, targetWords.length <= 5  104`",
      "`1 <= startWords[i].length, targetWords[j].length <= 26`",
      "Each string of `startWords` and `targetWords` consists of lowercase English letters only.",
      "No letter occurs more than once in any string of `startWords` or `targetWords`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2136",
    "slug": "earliest-possible-day-of-full-bloom",
    "title": "Earliest Possible Day of Full Bloom",
    "difficulty": "Hard",
    "description": "You have `n` flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two **0-indexed** integer arrays `plantTime` and `growTime`, of length `n` each: *  `plantTime[i]` is the number of **full days** it takes you to **plant** the `ith` seed. Every day, you can work on planting exactly one seed. You **do not** have to work on planting the same seed on consecutive days, but the planting of a seed is not complete **until** you have worked `plantTime[i]` days on planting it in total. *  `growTime[i]` is the number of **full days** it takes the `ith` seed to grow after being completely planted. **After** the last day of its growth, the flower **blooms** and stays bloomed forever. From the beginning of day `0`, you can plant the seeds in **any** order. Return _the **earliest** possible day where **all** seeds are blooming_.",
    "examples": [
      {
        "input": "plantTime = \\[1,4,3\\], growTime = \\[2,3,1\\]",
        "output": "9",
        "explanation": "The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms."
      },
      {
        "input": "plantTime = \\[1,2,3,2\\], growTime = \\[2,1,2,1\\]",
        "output": "9",
        "explanation": "The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms."
      },
      {
        "input": "plantTime = \\[1\\], growTime = \\[1\\]",
        "output": "2",
        "explanation": "On day 0, plant the 0th seed. The seed grows for 1 full day and blooms on day 2."
      }
    ],
    "constraints": [
      "`n == plantTime.length == growTime.length`",
      "`1 <= n <= 105`",
      "`1 <= plantTime[i], growTime[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2137",
    "slug": "pour-water-between-buckets-to-make-water-levels-equal",
    "title": "Pour Water Between Buckets to Make Water Levels Equal",
    "difficulty": "Medium",
    "description": "You have `n` buckets each containing some gallons of water in it, represented by a **0-indexed** integer array `buckets`, where the `ith` bucket contains `buckets[i]` gallons of water. You are also given an integer `loss`. You want to make the amount of water in each bucket equal. You can pour any amount of water from one bucket to another bucket (not necessarily an integer). However, every time you pour `k` gallons of water, you spill `loss` **percent** of `k`. Return _the **maximum** amount of water in each bucket after making the amount of water equal._ Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "buckets = \\[1,2,7\\], loss = 80",
        "output": "2.00000",
        "explanation": "Pour 5 gallons of water from buckets\\[2\\] to buckets\\[0\\]."
      },
      {
        "input": "buckets = \\[2,4,6\\], loss = 50",
        "output": "3.50000",
        "explanation": "Pour 0.5 gallons of water from buckets\\[1\\] to buckets\\[0\\]."
      },
      {
        "input": "buckets = \\[3,3,3,3\\], loss = 40",
        "output": "3.00000",
        "explanation": "All buckets already have the same amount of water in them."
      }
    ],
    "constraints": [
      "`1 <= buckets.length <= 105`",
      "`0 <= buckets[i] <= 105`",
      "`0 <= loss <= 99`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2138",
    "slug": "divide-a-string-into-groups-of-size-k",
    "title": "Divide a String Into Groups of Size k",
    "difficulty": "Easy",
    "description": "A string `s` can be partitioned into groups of size `k` using the following procedure: *  The first group consists of the first `k` characters of the string, the second group consists of the next `k` characters of the string, and so on. Each character can be a part of **exactly one** group. *  For the last group, if the string **does not** have `k` characters remaining, a character `fill` is used to complete the group. Note that the partition is done so that after removing the `fill` character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be `s`. Given the string `s`, the size of each group `k` and the character `fill`, return _a string array denoting the **composition of every group**_ `s` _has been divided into, using the above procedure_.",
    "examples": [
      {
        "input": "s =  \"abcdefghi \", k = 3, fill =  \"x \"",
        "output": "\\[ \"abc \", \"def \", \"ghi \"\\]",
        "explanation": ""
      },
      {
        "input": "s =  \"abcdefghij \", k = 3, fill =  \"x \"",
        "output": "\\[ \"abc \", \"def \", \"ghi \", \"jxx \"\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consists of lowercase English letters only.",
      "`1 <= k <= 100`",
      "`fill` is a lowercase English letter."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2139",
    "slug": "minimum-moves-to-reach-target-score",
    "title": "Minimum Moves to Reach Target Score",
    "difficulty": "Medium",
    "description": "You are playing a game with integers. You start with the integer `1` and you want to reach the integer `target`. In one move, you can either: *  **Increment** the current integer by one (i.e., `x = x + 1`). *  **Double** the current integer (i.e., `x = 2 * x`). You can use the **increment** operation **any** number of times, however, you can only use the **double** operation **at most** `maxDoubles` times. Given the two integers `target` and `maxDoubles`, return _the minimum number of moves needed to reach_ `target` _starting with_ `1`.",
    "examples": [
      {
        "input": "target = 5, maxDoubles = 0",
        "output": "4",
        "explanation": "Keep incrementing by 1 until you reach target."
      },
      {
        "input": "target = 19, maxDoubles = 2",
        "output": "7",
        "explanation": "Initially, x = 1"
      },
      {
        "input": "target = 10, maxDoubles = 4",
        "output": "4",
        "explanation": "Initially, x = 1"
      }
    ],
    "constraints": [
      "`1 <= target <= 109`",
      "`0 <= maxDoubles <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2140",
    "slug": "solving-questions-with-brainpower",
    "title": "Solving Questions With Brainpower",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** 2D integer array `questions` where `questions[i] = [pointsi, brainpoweri]`. The array describes the questions of an exam, where you have to process the questions **in order** (i.e., starting from question `0`) and make a decision whether to **solve** or **skip** each question. Solving question `i` will **earn** you `pointsi` points but you will be **unable** to solve each of the next `brainpoweri` questions. If you skip question `i`, you get to make the decision on the next question. *  For example, given `questions = [[3, 2], [4, 3], [4, 4], [2, 5]]`: *  If question `0` is solved, you will earn `3` points but you will be unable to solve questions `1` and `2`. *  If instead, question `0` is skipped and question `1` is solved, you will earn `4` points but you will be unable to solve questions `2` and `3`. Return _the **maximum** points you can earn for the exam_.",
    "examples": [
      {
        "input": "questions = \\[\\[3,2\\],\\[4,3\\],\\[4,4\\],\\[2,5\\]\\]",
        "output": "5",
        "explanation": "The maximum points can be earned by solving questions 0 and 3."
      },
      {
        "input": "questions = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\],\\[5,5\\]\\]",
        "output": "7",
        "explanation": "The maximum points can be earned by solving questions 1 and 4."
      }
    ],
    "constraints": [
      "`1 <= questions.length <= 105`",
      "`questions[i].length == 2`",
      "`1 <= pointsi, brainpoweri <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2141",
    "slug": "maximum-running-time-of-n-computers",
    "title": "Maximum Running Time of N Computers",
    "difficulty": "Hard",
    "description": "You have `n` computers. You are given the integer `n` and a **0-indexed** integer array `batteries` where the `ith` battery can **run** a computer for `batteries[i]` minutes. You are interested in running **all** `n` computers **simultaneously** using the given batteries. Initially, you can insert **at most one battery** into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery **any number of times**. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time. Note that the batteries cannot be recharged. Return _the **maximum** number of minutes you can run all the_ `n` _computers simultaneously._",
    "examples": [
      {
        "input": "n = 2, batteries = \\[3,3,3\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "n = 2, batteries = \\[1,1,1,1\\]",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= batteries.length <= 105`",
      "`1 <= batteries[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2143",
    "slug": "choose-numbers-from-two-arrays-in-range",
    "title": "Choose Numbers From Two Arrays in Range",
    "difficulty": "Hard",
    "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2` of length `n`. A range `[l, r]` (**inclusive**) where `0 <= l <= r < n` is **balanced** if: *  For every `i` in the range `[l, r]`, you pick either `nums1[i]` or `nums2[i]`. *  The sum of the numbers you pick from `nums1` equals to the sum of the numbers you pick from `nums2` (the sum is considered to be `0` if you pick no numbers from an array). Two **balanced** ranges from `[l1, r1]` and `[l2, r2]` are considered to be **different** if at least one of the following is true: *  `l1 != l2` *  `r1 != r2` *  `nums1[i]` is picked in the first range, and `nums2[i]` is picked in the second range or **vice versa** for at least one `i`. Return _the number of **different** ranges that are balanced._ Since the answer may be very large, return it **modulo** `109 + 7`_._",
    "examples": [
      {
        "input": "nums1 = \\[1,2,5\\], nums2 = \\[2,6,3\\]",
        "output": "3",
        "explanation": "The balanced ranges are:"
      },
      {
        "input": "nums1 = \\[0,1\\], nums2 = \\[1,0\\]",
        "output": "4",
        "explanation": "The balanced ranges are:"
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`1 <= n <= 100`",
      "`0 <= nums1[i], nums2[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2144",
    "slug": "minimum-cost-of-buying-candies-with-discount",
    "title": "Minimum Cost of Buying Candies With Discount",
    "difficulty": "Easy",
    "description": "A shop is selling candies at a discount. For **every two** candies sold, the shop gives a **third** candy for **free**. The customer can choose **any** candy to take away for free as long as the cost of the chosen candy is less than or equal to the **minimum** cost of the two candies bought. *  For example, if there are `4` candies with costs `1`, `2`, `3`, and `4`, and the customer buys candies with costs `2` and `3`, they can take the candy with cost `1` for free, but not the candy with cost `4`. Given a **0-indexed** integer array `cost`, where `cost[i]` denotes the cost of the `ith` candy, return _the **minimum cost** of buying **all** the candies_.",
    "examples": [
      {
        "input": "cost = \\[1,2,3\\]",
        "output": "5",
        "explanation": "We buy the candies with costs 2 and 3, and take the candy with cost 1 for free."
      },
      {
        "input": "cost = \\[6,5,7,9,2,2\\]",
        "output": "23",
        "explanation": "The way in which we can get the minimum cost is described below:"
      },
      {
        "input": "cost = \\[5,5\\]",
        "output": "10",
        "explanation": "Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free."
      }
    ],
    "constraints": [
      "`1 <= cost.length <= 100`",
      "`1 <= cost[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2145",
    "slug": "count-the-hidden-sequences",
    "title": "Count the Hidden Sequences",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of `n` integers `differences`, which describes the **differences** between each pair of **consecutive** integers of a **hidden** sequence of length `(n + 1)`. More formally, call the hidden sequence `hidden`, then we have that `differences[i] = hidden[i + 1] - hidden[i]`. You are further given two integers `lower` and `upper` that describe the **inclusive** range of values `[lower, upper]` that the hidden sequence can contain. *  For example, given `differences = [1, -3, 4]`, `lower = 1`, `upper = 6`, the hidden sequence is a sequence of length `4` whose elements are in between `1` and `6` (**inclusive**). *  `[3, 4, 1, 5]` and `[4, 5, 2, 6]` are possible hidden sequences. *  `[5, 6, 3, 7]` is not possible since it contains an element greater than `6`. *  `[1, 2, 3, 4]` is not possible since the differences are not correct. Return _the number of **possible** hidden sequences there are._ If there are no possible sequences, return `0`.",
    "examples": [
      {
        "input": "differences = \\[1,-3,4\\], lower = 1, upper = 6",
        "output": "2",
        "explanation": "The possible hidden sequences are:"
      },
      {
        "input": "differences = \\[3,-4,5,1,-2\\], lower = -4, upper = 5",
        "output": "4",
        "explanation": "The possible hidden sequences are:"
      },
      {
        "input": "differences = \\[4,-7,2\\], lower = 3, upper = 6",
        "output": "0",
        "explanation": "There are no possible hidden sequences. Thus, we return 0."
      }
    ],
    "constraints": [
      "`n == differences.length`",
      "`1 <= n <= 105`",
      "`-105 <= differences[i] <= 105`",
      "`-105 <= lower <= upper <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2146",
    "slug": "k-highest-ranked-items-within-a-price-range",
    "title": "K Highest Ranked Items Within a Price Range",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** 2D integer array `grid` of size `m x n` that represents a map of the items in a shop. The integers in the grid represent the following: *  `0` represents a wall that you cannot pass through. *  `1` represents an empty cell that you can freely move to and from. *  All other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells. It takes `1` step to travel between adjacent grid cells. You are also given integer arrays `pricing` and `start` where `pricing = [low, high]` and `start = [row, col]` indicates that you start at the position `(row, col)` and are interested only in items with a price in the range of `[low, high]` (**inclusive**). You are further given an integer `k`. You are interested in the **positions** of the `k` **highest-ranked** items whose prices are **within** the given price range. The rank is determined by the **first** of these criteria that is different: 1. Distance, defined as the length of the shortest path from the `start` (**shorter** distance has a higher rank). 2. Price (**lower** price has a higher rank, but it must be **in the price range**). 3. The row number (**smaller** row number has a higher rank). 4. The column number (**smaller** column number has a higher rank). Return _the_ `k` _highest-ranked items within the price range **sorted** by their rank (highest to lowest)_. If there are fewer than `k` reachable items within the price range, return _**all** of them_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,2,0,1\\],\\[1,3,0,1\\],\\[0,2,5,1\\]\\], pricing = \\[2,5\\], start = \\[0,0\\], k = 3",
        "output": "\\[\\[0,1\\],\\[1,1\\],\\[2,1\\]\\]",
        "explanation": "You start at (0,0)."
      },
      {
        "input": "grid = \\[\\[1,2,0,1\\],\\[1,3,3,1\\],\\[0,2,5,1\\]\\], pricing = \\[2,3\\], start = \\[2,3\\], k = 2",
        "output": "\\[\\[2,1\\],\\[1,2\\]\\]",
        "explanation": "You start at (2,3)."
      },
      {
        "input": "grid = \\[\\[1,1,1\\],\\[0,0,1\\],\\[2,3,4\\]\\], pricing = \\[2,3\\], start = \\[0,0\\], k = 3",
        "output": "\\[\\[2,1\\],\\[2,0\\]\\]",
        "explanation": "You start at (0,0)."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 105`",
      "`1 <= m  n <= 105`",
      "`0 <= grid[i][j] <= 105`",
      "`pricing.length == 2`",
      "`2 <= low <= high <= 105`",
      "`start.length == 2`",
      "`0 <= row <= m - 1`",
      "`0 <= col <= n - 1`",
      "`grid[row][col] > 0`",
      "`1 <= k <= m  n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2147",
    "slug": "number-of-ways-to-divide-a-long-corridor",
    "title": "Number of Ways to Divide a Long Corridor",
    "difficulty": "Hard",
    "description": "Along a long library corridor, there is a line of seats and decorative plants. You are given a **0-indexed** string `corridor` of length `n` consisting of letters `'S'` and `'P'` where each `'S'` represents a seat and each `'P'` represents a plant. One room divider has **already** been installed to the left of index `0`, and **another** to the right of index `n - 1`. Additional room dividers can be installed. For each position between indices `i - 1` and `i` (`1 <= i <= n - 1`), at most one divider can be installed. Divide the corridor into non-overlapping sections, where each section has **exactly two seats** with any number of plants. There may be multiple ways to perform the division. Two ways are **different** if there is a position with a room divider installed in the first way but not in the second way. Return _the number of ways to divide the corridor_. Since the answer may be very large, return it **modulo** `109 + 7`. If there is no way, return `0`.",
    "examples": [
      {
        "input": "corridor =  \"SSPPSPS \"",
        "output": "3",
        "explanation": "There are 3 different ways to divide the corridor."
      },
      {
        "input": "corridor =  \"PPSPSP \"",
        "output": "1",
        "explanation": "There is only 1 way to divide the corridor, by not installing any additional dividers."
      },
      {
        "input": "corridor =  \"S \"",
        "output": "0",
        "explanation": "There is no way to divide the corridor because there will always be a section that does not have exactly two seats."
      }
    ],
    "constraints": [
      "`n == corridor.length`",
      "`1 <= n <= 105`",
      "`corridor[i]` is either `'S'` or `'P'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2148",
    "slug": "count-elements-with-strictly-smaller-and-greater-elements",
    "title": "Count Elements With Strictly Smaller and Greater Elements ",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, return _the number of elements that have **both** a strictly smaller and a strictly greater element appear in_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[11,7,2,15\\]",
        "output": "2",
        "explanation": "The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it."
      },
      {
        "input": "nums = \\[-3,3,3,90\\]",
        "output": "2",
        "explanation": "The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2149",
    "slug": "rearrange-array-elements-by-sign",
    "title": "Rearrange Array Elements by Sign",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` of **even** length consisting of an **equal** number of positive and negative integers. You should **rearrange** the elements of `nums` such that the modified array follows the given conditions: 1. Every **consecutive pair** of integers have **opposite signs**. 2. For all integers with the same sign, the **order** in which they were present in `nums` is **preserved**. 3. The rearranged array begins with a positive integer. Return _the modified array after rearranging the elements to satisfy the aforementioned conditions_.",
    "examples": [
      {
        "input": "nums = \\[3,1,-2,-5,2,-4\\]",
        "output": "\\[3,-2,1,-5,2,-4\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[-1,1\\]",
        "output": "\\[1,-1\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 2  105`",
      "`nums.length` is even",
      "`1 <= |nums[i]| <= 105`",
      "`nums` consists of equal number of positive and negative integers."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2150",
    "slug": "find-all-lonely-numbers-in-the-array",
    "title": "Find All Lonely Numbers in the Array",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. A number `x` is **lonely** when it appears only **once**, and no **adjacent** numbers (i.e. `x + 1` and `x - 1)` appear in the array. Return _**all** lonely numbers in_ `nums`. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "nums = \\[10,6,5,8\\]",
        "output": "\\[10,8\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,3,5,3\\]",
        "output": "\\[1,5\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2151",
    "slug": "maximum-good-people-based-on-statements",
    "title": "Maximum Good People Based on Statements",
    "difficulty": "Hard",
    "description": "There are two types of persons: *  The **good person**: The person who always tells the truth. *  The **bad person**: The person who might tell the truth and might lie. You are given a **0-indexed** 2D integer array `statements` of size `n x n` that represents the statements made by `n` people about each other. More specifically, `statements[i][j]` could be one of the following: *  `0` which represents a statement made by person `i` that person `j` is a **bad** person. *  `1` which represents a statement made by person `i` that person `j` is a **good** person. *  `2` represents that **no statement** is made by person `i` about person `j`. Additionally, no person ever makes a statement about themselves. Formally, we have that `statements[i][i] = 2` for all `0 <= i < n`. Return _the **maximum** number of people who can be **good** based on the statements made by the_ `n` _people_.",
    "examples": [
      {
        "input": "statements = \\[\\[2,1,2\\],\\[1,2,2\\],\\[2,0,2\\]\\]",
        "output": "2",
        "explanation": "Each person makes a single statement."
      },
      {
        "input": "statements = \\[\\[2,0\\],\\[0,2\\]\\]",
        "output": "1",
        "explanation": "Each person makes a single statement."
      }
    ],
    "constraints": [
      "`n == statements.length == statements[i].length`",
      "`2 <= n <= 15`",
      "`statements[i][j]` is either `0`, `1`, or `2`.",
      "`statements[i][i] == 2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2152",
    "slug": "minimum-number-of-lines-to-cover-points",
    "title": "Minimum Number of Lines to Cover Points",
    "difficulty": "Medium",
    "description": "You are given an array `points` where `points[i] = [xi, yi]` represents a point on an **X-Y** plane. **Straight lines** are going to be added to the **X-Y** plane, such that every point is covered by at **least** one line. Return _the **minimum** number of **straight lines** needed to cover all the points_.",
    "examples": [
      {
        "input": "points = \\[\\[0,1\\],\\[2,3\\],\\[4,5\\],\\[4,3\\]\\]",
        "output": "2",
        "explanation": "The minimum number of straight lines needed is two. One possible solution is to add:"
      },
      {
        "input": "points = \\[\\[0,2\\],\\[-2,-2\\],\\[1,4\\]\\]",
        "output": "1",
        "explanation": "The minimum number of straight lines needed is one. The only solution is to add:"
      }
    ],
    "constraints": [
      "`1 <= points.length <= 10`",
      "`points[i].length == 2`",
      "`-100 <= xi, yi <= 100`",
      "All the `points` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2154",
    "slug": "keep-multiplying-found-values-by-two",
    "title": "Keep Multiplying Found Values by Two",
    "difficulty": "Easy",
    "description": "You are given an array of integers `nums`. You are also given an integer `original` which is the first number that needs to be searched for in `nums`. You then do the following steps: 1. If `original` is found in `nums`, **multiply** it by two (i.e., set `original = 2 * original`). 2. Otherwise, **stop** the process. 3. **Repeat** this process with the new number as long as you keep finding the number. Return _the **final** value of_ `original`.",
    "examples": [
      {
        "input": "nums = \\[5,3,6,1,12\\], original = 3",
        "output": "24",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,7,9\\], original = 4",
        "output": "4",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i], original <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2155",
    "slug": "all-divisions-with-the-highest-score-of-a-binary-array",
    "title": "All Divisions With the Highest Score of a Binary Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** binary array `nums` of length `n`. `nums` can be divided at index `i` (where `0 <= i <= n)` into two arrays (possibly empty) `numsleft` and `numsright`: *  `numsleft` has all the elements of `nums` between index `0` and `i - 1` **(inclusive)**, while `numsright` has all the elements of nums between index `i` and `n - 1` **(inclusive)**. *  If `i == 0`, `numsleft` is **empty**, while `numsright` has all the elements of `nums`. *  If `i == n`, `numsleft` has all the elements of nums, while `numsright` is **empty**. The **division score** of an index `i` is the **sum** of the number of `0`'s in `numsleft` and the number of `1`'s in `numsright`. Return _**all distinct indices** that have the **highest** possible **division score**_. You may return the answer in **any order**.",
    "examples": [
      {
        "input": "nums = \\[0,0,1,0\\]",
        "output": "\\[2,4\\]",
        "explanation": "Division at index"
      },
      {
        "input": "nums = \\[0,0,0\\]",
        "output": "\\[3\\]",
        "explanation": "Division at index"
      },
      {
        "input": "nums = \\[1,1\\]",
        "output": "\\[0\\]",
        "explanation": "Division at index"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`nums[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2156",
    "slug": "find-substring-with-given-hash-value",
    "title": "Find Substring With Given Hash Value",
    "difficulty": "Hard",
    "description": "The hash of a **0-indexed** string `s` of length `k`, given integers `p` and `m`, is computed using the following function: *  `hash(s, p, m) = (val(s[0]) * p0 + val(s[1]) * p1 + ... + val(s[k-1]) * pk-1) mod m`. Where `val(s[i])` represents the index of `s[i]` in the alphabet from `val('a') = 1` to `val('z') = 26`. You are given a string `s` and the integers `power`, `modulo`, `k`, and `hashValue.` Return `sub`, _the **first** **substring** of_ `s` _of length_ `k` _such that_ `hash(sub, power, modulo) == hashValue`. The test cases will be generated such that an answer always **exists**. A **substring** is a contiguous non-empty sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"leetcode \", power = 7, modulo = 20, k = 2, hashValue = 0",
        "output": "\"ee \"",
        "explanation": "The hash of  \"ee \" can be computed to be hash( \"ee \", 7, 20) = (5 \\* 1 + 5 \\* 7) mod 20 = 40 mod 20 = 0."
      },
      {
        "input": "s =  \"fbxzaad \", power = 31, modulo = 100, k = 3, hashValue = 32",
        "output": "\"fbx \"",
        "explanation": "The hash of  \"fbx \" can be computed to be hash( \"fbx \", 31, 100) = (6 \\* 1 + 2 \\* 31 + 24 \\* 312) mod 100 = 23132 mod 100 = 32."
      }
    ],
    "constraints": [
      "`1 <= k <= s.length <= 2  104`",
      "`1 <= power, modulo <= 109`",
      "`0 <= hashValue < modulo`",
      "`s` consists of lowercase English letters only.",
      "The test cases are generated such that an answer always exists."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2157",
    "slug": "groups-of-strings",
    "title": "Groups of Strings",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** array of strings `words`. Each string consists of **lowercase English letters** only. No letter occurs more than once in any string of `words`. Two strings `s1` and `s2` are said to be **connected** if the set of letters of `s2` can be obtained from the set of letters of `s1` by any **one** of the following operations: *  Adding exactly one letter to the set of the letters of `s1`. *  Deleting exactly one letter from the set of the letters of `s1`. *  Replacing exactly one letter from the set of the letters of `s1` with any letter, **including** itself. The array `words` can be divided into one or more non-intersecting **groups**. A string belongs to a group if any **one** of the following is true: *  It is connected to **at least one** other string of the group. *  It is the **only** string present in the group. Note that the strings in `words` should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique. Return _an array_ `ans` _of size_ `2` _where:_ *  `ans[0]` _is the **maximum number** of groups_ `words` _can be divided into, and_ *  `ans[1]` _is the **size of the largest** group_.",
    "examples": [
      {
        "input": "words = \\[ \"a \", \"b \", \"ab \", \"cde \"\\]",
        "output": "\\[2,3\\]",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"a \", \"ab \", \"abc \"\\]",
        "output": "\\[1,3\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 2  104`",
      "`1 <= words[i].length <= 26`",
      "`words[i]` consists of lowercase English letters only.",
      "No letter occurs more than once in `words[i]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2158",
    "slug": "amount-of-new-area-painted-each-day",
    "title": "Amount of New Area Painted Each Day",
    "difficulty": "Hard",
    "description": "There is a long and thin painting that can be represented by a number line. You are given a **0-indexed** 2D integer array `paint` of length `n`, where `paint[i] = [starti, endi]`. This means that on the `ith` day you need to paint the area **between** `starti` and `endi`. Painting the same area multiple times will create an uneven painting so you only want to paint each area of the painting at most **once**. Return _an integer array_ `worklog` _of length_ `n`_, where_ `worklog[i]` _is the amount of **new** area that you painted on the_ `ith` _day._",
    "examples": [
      {
        "input": "paint = \\[\\[1,4\\],\\[4,7\\],\\[5,8\\]\\]",
        "output": "\\[3,3,1\\]",
        "explanation": ""
      },
      {
        "input": "paint = \\[\\[1,4\\],\\[5,8\\],\\[4,7\\]\\]",
        "output": "\\[3,3,1\\]",
        "explanation": ""
      },
      {
        "input": "paint = \\[\\[1,5\\],\\[2,4\\]\\]",
        "output": "\\[4,0\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= paint.length <= 105`",
      "`paint[i].length == 2`",
      "`0 <= starti < endi <= 5  104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2160",
    "slug": "minimum-sum-of-four-digit-number-after-splitting-digits",
    "title": "Minimum Sum of Four Digit Number After Splitting Digits",
    "difficulty": "Easy",
    "description": "You are given a **positive** integer `num` consisting of exactly four digits. Split `num` into two new integers `new1` and `new2` by using the **digits** found in `num`. **Leading zeros** are allowed in `new1` and `new2`, and **all** the digits found in `num` must be used. *  For example, given `num = 2932`, you have the following digits: two `2`'s, one `9` and one `3`. Some of the possible pairs `[new1, new2]` are `[22, 93]`, `[23, 92]`, `[223, 9]` and `[2, 329]`. Return _the **minimum** possible sum of_ `new1` _and_ `new2`.",
    "examples": [
      {
        "input": "num = 2932",
        "output": "52",
        "explanation": "Some possible pairs \\[new1, new2\\] are \\[29, 23\\], \\[223, 9\\], etc."
      },
      {
        "input": "num = 4009",
        "output": "13",
        "explanation": "Some possible pairs \\[new1, new2\\] are \\[0, 49\\], \\[490, 0\\], etc."
      }
    ],
    "constraints": [
      "`1000 <= num <= 9999`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2162",
    "slug": "minimum-cost-to-set-cooking-time",
    "title": "Minimum Cost to Set Cooking Time",
    "difficulty": "Medium",
    "description": "A generic microwave supports cooking times for: *  at least `1` second. *  at most `99` minutes and `99` seconds. To set the cooking time, you push **at most four digits**. The microwave normalizes what you push as four digits by **prepending zeroes**. It interprets the **first** two digits as the minutes and the **last** two digits as the seconds. It then **adds** them up as the cooking time. For example, *  You push `9` `5` `4` (three digits). It is normalized as `0954` and interpreted as `9` minutes and `54` seconds. *  You push `0` `0` `0` `8` (four digits). It is interpreted as `0` minutes and `8` seconds. *  You push `8` `0` `9` `0`. It is interpreted as `80` minutes and `90` seconds. *  You push `8` `1` `3` `0`. It is interpreted as `81` minutes and `30` seconds. You are given integers `startAt`, `moveCost`, `pushCost`, and `targetSeconds`. **Initially**, your finger is on the digit `startAt`. Moving the finger above **any specific digit** costs `moveCost` units of fatigue. Pushing the digit below the finger **once** costs `pushCost` units of fatigue. There can be multiple ways to set the microwave to cook for `targetSeconds` seconds but you are interested in the way with the minimum cost. Return _the **minimum cost** to set_ `targetSeconds` _seconds of cooking time_. Remember that one minute consists of `60` seconds.",
    "examples": [
      {
        "input": "startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600",
        "output": "6",
        "explanation": "The following are the possible ways to set the cooking time."
      },
      {
        "input": "startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76",
        "output": "6",
        "explanation": "The optimal way is to push two digits: 7 6, interpreted as 76 seconds."
      }
    ],
    "constraints": [
      "`0 <= startAt <= 9`",
      "`1 <= moveCost, pushCost <= 105`",
      "`1 <= targetSeconds <= 6039`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2163",
    "slug": "minimum-difference-in-sums-after-removal-of-elements",
    "title": "Minimum Difference in Sums After Removal of Elements",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** integer array `nums` consisting of `3 * n` elements. You are allowed to remove any **subsequence** of elements of size **exactly** `n` from `nums`. The remaining `2 * n` elements will be divided into two **equal** parts: *  The first `n` elements belonging to the first part and their sum is `sumfirst`. *  The next `n` elements belonging to the second part and their sum is `sumsecond`. The **difference in sums** of the two parts is denoted as `sumfirst - sumsecond`. *  For example, if `sumfirst = 3` and `sumsecond = 2`, their difference is `1`. *  Similarly, if `sumfirst = 2` and `sumsecond = 3`, their difference is `-1`. Return _the **minimum difference** possible between the sums of the two parts after the removal of_ `n` _elements_.",
    "examples": [
      {
        "input": "nums = \\[3,1,2\\]",
        "output": "-1",
        "explanation": "Here, nums has 3 elements, so n = 1."
      },
      {
        "input": "nums = \\[7,9,5,8,1,3\\]",
        "output": "1",
        "explanation": "Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each."
      }
    ],
    "constraints": [
      "`nums.length == 3  n`",
      "`1 <= n <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2164",
    "slug": "sort-even-and-odd-indices-independently",
    "title": "Sort Even and Odd Indices Independently",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums`. Rearrange the values of `nums` according to the following rules: 1. Sort the values at **odd indices** of `nums` in **non-increasing** order. *  For example, if `nums = [4,**1**,2,**3**]` before this step, it becomes `[4,**3**,2,**1**]` after. The values at odd indices `1` and `3` are sorted in non-increasing order. 2. Sort the values at **even indices** of `nums` in **non-decreasing** order. *  For example, if `nums = [**4**,1,**2**,3]` before this step, it becomes `[**2**,1,**4**,3]` after. The values at even indices `0` and `2` are sorted in non-decreasing order. Return _the array formed after rearranging the values of_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[4,1,2,3\\]",
        "output": "\\[2,3,4,1\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,1\\]",
        "output": "\\[2,1\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2165",
    "slug": "smallest-value-of-the-rearranged-number",
    "title": "Smallest Value of the Rearranged Number",
    "difficulty": "Medium",
    "description": "You are given an integer `num.` **Rearrange** the digits of `num` such that its value is **minimized** and it does not contain **any** leading zeros. Return _the rearranged number with minimal value_. Note that the sign of the number does not change after rearranging the digits.",
    "examples": [
      {
        "input": "num = 310",
        "output": "103",
        "explanation": "The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310."
      },
      {
        "input": "num = -7605",
        "output": "-7650",
        "explanation": "Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567."
      }
    ],
    "constraints": [
      "`-1015 <= num <= 1015`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2166",
    "slug": "design-bitset",
    "title": "Design Bitset",
    "difficulty": "Medium",
    "description": "A **Bitset** is a data structure that compactly stores bits. Implement the `Bitset` class: *  `Bitset(int size)` Initializes the Bitset with `size` bits, all of which are `0`. *  `void fix(int idx)` Updates the value of the bit at the index `idx` to `1`. If the value was already `1`, no change occurs. *  `void unfix(int idx)` Updates the value of the bit at the index `idx` to `0`. If the value was already `0`, no change occurs. *  `void flip()` Flips the values of each bit in the Bitset. In other words, all bits with value `0` will now have value `1` and vice versa. *  `boolean all()` Checks if the value of **each** bit in the Bitset is `1`. Returns `true` if it satisfies the condition, `false` otherwise. *  `boolean one()` Checks if there is **at least one** bit in the Bitset with value `1`. Returns `true` if it satisfies the condition, `false` otherwise. *  `int count()` Returns the **total number** of bits in the Bitset which have value `1`. *  `String toString()` Returns the current composition of the Bitset. Note that in the resultant string, the character at the `ith` index should coincide with the value at the `ith` bit of the Bitset.",
    "examples": [],
    "constraints": [
      "`1 <= size <= 105`",
      "`0 <= idx <= size - 1`",
      "At most `105` calls will be made in total to `fix`, `unfix`, `flip`, `all`, `one`, `count`, and `toString`.",
      "At least one call will be made to `all`, `one`, `count`, or `toString`.",
      "At most `5` calls will be made to `toString`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2167",
    "slug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
    "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** binary string `s` which represents a sequence of train cars. `s[i] = '0'` denotes that the `ith` car does **not** contain illegal goods and `s[i] = '1'` denotes that the `ith` car does contain illegal goods. As the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations **any** number of times: 1. Remove a train car from the **left** end (i.e., remove `s[0]`) which takes 1 unit of time. 2. Remove a train car from the **right** end (i.e., remove `s[s.length - 1]`) which takes 1 unit of time. 3. Remove a train car from **anywhere** in the sequence which takes 2 units of time. Return _the **minimum** time to remove all the cars containing illegal goods_. Note that an empty sequence of cars is considered to have no cars containing illegal goods.",
    "examples": [
      {
        "input": "s =  \"**11**00**1**0**1** \"",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "s =  \"00**1**0 \"",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 2  105`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2168",
    "slug": "unique-substrings-with-equal-digit-frequency",
    "title": "Unique Substrings With Equal Digit Frequency",
    "difficulty": "Medium",
    "description": "Given a digit string `s`, return _the number of **unique substrings** of_ `s` _where every digit appears the same number of times._",
    "examples": [
      {
        "input": "s =  \"1212 \"",
        "output": "5",
        "explanation": "The substrings that meet the requirements are  \"1 \",  \"2 \",  \"12 \",  \"21 \",  \"1212 \"."
      },
      {
        "input": "s =  \"12321 \"",
        "output": "9",
        "explanation": "The substrings that meet the requirements are  \"1 \",  \"2 \",  \"3 \",  \"12 \",  \"23 \",  \"32 \",  \"21 \",  \"123 \",  \"321 \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2170",
    "slug": "minimum-operations-to-make-the-array-alternating",
    "title": "Minimum Operations to Make the Array Alternating",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array `nums` consisting of `n` positive integers. The array `nums` is called **alternating** if: *  `nums[i - 2] == nums[i]`, where `2 <= i <= n - 1`. *  `nums[i - 1] != nums[i]`, where `1 <= i <= n - 1`. In one **operation**, you can choose an index `i` and **change** `nums[i]` into **any** positive integer. Return _the **minimum number of operations** required to make the array alternating_.",
    "examples": [
      {
        "input": "nums = \\[3,1,3,2,4,3\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,2,2,2\\]",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2171",
    "slug": "removing-minimum-number-of-magic-beans",
    "title": "Removing Minimum Number of Magic Beans",
    "difficulty": "Medium",
    "description": "You are given an array of **positive** integers `beans`, where each integer represents the number of magic beans found in a particular magic bag. **Remove** any number of beans (**possibly none**) from each bag such that the number of beans in each remaining **non-empty** bag (still containing **at least one** bean) is **equal**. Once a bean has been removed from a bag, you are **not** allowed to return it to any of the bags. Return _the **minimum** number of magic beans that you have to remove_.",
    "examples": [
      {
        "input": "beans = \\[4,**1**,6,5\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "beans = \\[**2**,10,**3**,**2**\\]",
        "output": "7",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= beans.length <= 105`",
      "`1 <= beans[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2172",
    "slug": "maximum-and-sum-of-array",
    "title": "Maximum AND Sum of Array",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` of length `n` and an integer `numSlots` such that `2 * numSlots >= n`. There are `numSlots` slots numbered from `1` to `numSlots`. You have to place all `n` integers into the slots such that each slot contains at **most** two numbers. The **AND sum** of a given placement is the sum of the **bitwise** `AND` of every number with its respective slot number. *  For example, the **AND sum** of placing the numbers `[1, 3]` into slot `1` and `[4, 6]` into slot `2` is equal to `(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4`. Return _the maximum possible **AND sum** of_ `nums` _given_ `numSlots` _slots._",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4,5,6\\], numSlots = 3",
        "output": "9",
        "explanation": "One possible placement is \\[1, 4\\] into slot 1, \\[2, 6\\] into slot 2, and \\[3, 5\\] into slot 3."
      },
      {
        "input": "nums = \\[1,3,10,4,7,1\\], numSlots = 9",
        "output": "24",
        "explanation": "One possible placement is \\[1, 1\\] into slot 1, \\[3\\] into slot 3, \\[4\\] into slot 4, \\[7\\] into slot 7, and \\[10\\] into slot 9."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= numSlots <= 9`",
      "`1 <= n <= 2  numSlots`",
      "`1 <= nums[i] <= 15`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2174",
    "slug": "remove-all-ones-with-row-and-column-flips-ii",
    "title": "Remove All Ones With Row and Column Flips II",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** `m x n` **binary** matrix `grid`. In one operation, you can choose any `i` and `j` that meet the following conditions: *  `0 <= i < m` *  `0 <= j < n` *  `grid[i][j] == 1` and change the values of **all** cells in row `i` and column `j` to zero. Return _the **minimum** number of operations needed to remove all_ `1`_'s from_ `grid`_._",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,1\\],\\[1,1,1\\],\\[0,1,0\\]\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "grid = \\[\\[0,1,0\\],\\[1,0,1\\],\\[0,1,0\\]\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "grid = \\[\\[0,0\\],\\[0,0\\]\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 15`",
      "`1 <= m  n <= 15`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2176",
    "slug": "count-equal-and-divisible-pairs-in-an-array",
    "title": "Count Equal and Divisible Pairs in an Array",
    "difficulty": "Easy",
    "description": "Given a **0-indexed** integer array `nums` of length `n` and an integer `k`, return _the **number of pairs**_ `(i, j)` _where_ `0 <= i < j < n`, _such that_ `nums[i] == nums[j]` _and_ `(i * j)` _is divisible by_ `k`.",
    "examples": [
      {
        "input": "nums = \\[3,1,2,2,2,1,3\\], k = 2",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4\\], k = 1",
        "output": "0",
        "explanation": "Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i], k <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2177",
    "slug": "find-three-consecutive-integers-that-sum-to-a-given-number",
    "title": "Find Three Consecutive Integers That Sum to a Given Number",
    "difficulty": "Medium",
    "description": "Given an integer `num`, return _three consecutive integers (as a sorted array)_ _that **sum** to_ `num`. If `num` cannot be expressed as the sum of three consecutive integers, return _an **empty** array._",
    "examples": [
      {
        "input": "num = 33",
        "output": "\\[10,11,12\\]",
        "explanation": "33 can be expressed as 10 + 11 + 12 = 33."
      },
      {
        "input": "num = 4",
        "output": "\\[\\]",
        "explanation": "There is no way to express 4 as the sum of 3 consecutive integers."
      }
    ],
    "constraints": [
      "`0 <= num <= 1015`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2178",
    "slug": "maximum-split-of-positive-even-integers",
    "title": "Maximum Split of Positive Even Integers",
    "difficulty": "Medium",
    "description": "You are given an integer `finalSum`. Split it into a sum of a **maximum** number of **unique** positive even integers. *  For example, given `finalSum = 12`, the following splits are **valid** (unique positive even integers summing up to `finalSum`): `(12)`, `(2 + 10)`, `(2 + 4 + 6)`, and `(4 + 8)`. Among them, `(2 + 4 + 6)` contains the maximum number of integers. Note that `finalSum` cannot be split into `(2 + 2 + 4 + 4)` as all the numbers should be unique. Return _a list of integers that represent a valid split containing a **maximum** number of integers_. If no valid split exists for `finalSum`, return _an **empty** list_. You may return the integers in **any** order.",
    "examples": [
      {
        "input": "finalSum = 12",
        "output": "\\[2,4,6\\]",
        "explanation": "The following are valid splits: `(12)`, `(2 + 10)`, `(2 + 4 + 6)`, and `(4 + 8)`."
      },
      {
        "input": "finalSum = 7",
        "output": "\\[\\]",
        "explanation": "There are no valid splits for the given finalSum."
      },
      {
        "input": "finalSum = 28",
        "output": "\\[6,8,2,12\\]",
        "explanation": "The following are valid splits: `(2 + 26)`, `(6 + 8 + 2 + 12)`, and `(4 + 24)`."
      }
    ],
    "constraints": [
      "`1 <= finalSum <= 1010`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2179",
    "slug": "count-good-triplets-in-an-array",
    "title": "Count Good Triplets in an Array",
    "difficulty": "Hard",
    "description": "You are given two **0-indexed** arrays `nums1` and `nums2` of length `n`, both of which are **permutations** of `[0, 1, ..., n - 1]`. A **good triplet** is a set of `3` **distinct** values which are present in **increasing order** by position both in `nums1` and `nums2`. In other words, if we consider `pos1v` as the index of the value `v` in `nums1` and `pos2v` as the index of the value `v` in `nums2`, then a good triplet will be a set `(x, y, z)` where `0 <= x, y, z <= n - 1`, such that `pos1x < pos1y < pos1z` and `pos2x < pos2y < pos2z`. Return _the **total number** of good triplets_.",
    "examples": [
      {
        "input": "nums1 = \\[2,0,1,3\\], nums2 = \\[0,1,2,3\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[4,0,1,3,2\\], nums2 = \\[4,1,0,2,3\\]",
        "output": "4",
        "explanation": "The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2)."
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`3 <= n <= 105`",
      "`0 <= nums1[i], nums2[i] <= n - 1`",
      "`nums1` and `nums2` are permutations of `[0, 1, ..., n - 1]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2180",
    "slug": "count-integers-with-even-digit-sum",
    "title": "Count Integers With Even Digit Sum",
    "difficulty": "Easy",
    "description": "Given a positive integer `num`, return _the number of positive integers **less than or equal to**_ `num` _whose digit sums are **even**_. The **digit sum** of a positive integer is the sum of all its digits.",
    "examples": [
      {
        "input": "num = 4",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "num = 30",
        "output": "14",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= num <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2181",
    "slug": "merge-nodes-in-between-zeros",
    "title": "Merge Nodes in Between Zeros",
    "difficulty": "Medium",
    "description": "You are given the `head` of a linked list, which contains a series of integers **separated** by `0`'s. The **beginning** and **end** of the linked list will have `Node.val == 0`. For **every** two consecutive `0`'s, **merge** all the nodes lying in between them into a single node whose value is the **sum** of all the merged nodes. The modified list should not contain any `0`'s. Return _the_ `head` _of the modified linked list_.",
    "examples": [
      {
        "input": "head = \\[0,3,1,0,4,5,2,0\\]",
        "output": "\\[4,11\\]",
        "explanation": ""
      },
      {
        "input": "head = \\[0,1,0,3,0,2,2,0\\]",
        "output": "\\[1,3,4\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range `[3, 2  105]`.",
      "`0 <= Node.val <= 1000`",
      "There are no two consecutive nodes with `Node.val == 0`.",
      "The beginning and end of the linked list have `Node.val == 0`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2182",
    "slug": "construct-string-with-repeat-limit",
    "title": "Construct String With Repeat Limit",
    "difficulty": "Medium",
    "description": "You are given a string `s` and an integer `repeatLimit`. Construct a new string `repeatLimitedString` using the characters of `s` such that no letter appears **more than** `repeatLimit` times **in a row**. You do **not** have to use all characters from `s`. Return _the **lexicographically largest**_ `repeatLimitedString` _possible_. A string `a` is **lexicographically larger** than a string `b` if in the first position where `a` and `b` differ, string `a` has a letter that appears later in the alphabet than the corresponding letter in `b`. If the first `min(a.length, b.length)` characters do not differ, then the longer string is the lexicographically larger one.",
    "examples": [
      {
        "input": "s =  \"cczazcc \", repeatLimit = 3",
        "output": "\"zzcccac \"",
        "explanation": "We use all of the characters from s to construct the repeatLimitedString  \"zzcccac \"."
      },
      {
        "input": "s =  \"aababab \", repeatLimit = 2",
        "output": "\"bbabaa \"",
        "explanation": "We use only some of the characters from s to construct the repeatLimitedString  \"bbabaa \"."
      }
    ],
    "constraints": [
      "`1 <= repeatLimit <= s.length <= 105`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2183",
    "slug": "count-array-pairs-divisible-by-k",
    "title": "Count Array Pairs Divisible by K",
    "difficulty": "Hard",
    "description": "Given a **0-indexed** integer array `nums` of length `n` and an integer `k`, return _the **number of pairs**_ `(i, j)` _such that:_ *  `0 <= i < j <= n - 1` _and_ *  `nums[i] * nums[j]` _is divisible by_ `k`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4,5\\], k = 2",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4\\], k = 5",
        "output": "0",
        "explanation": "There does not exist any pair of indices whose corresponding product is divisible by 5."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i], k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2184",
    "slug": "number-of-ways-to-build-sturdy-brick-wall",
    "title": "Number of Ways to Build Sturdy Brick Wall",
    "difficulty": "Medium",
    "description": "You are given integers `height` and `width` which specify the dimensions of a brick wall you are building. You are also given a **0-indexed** array of **unique** integers `bricks`, where the `ith` brick has a height of `1` and a width of `bricks[i]`. You have an **infinite** supply of each type of brick and bricks may **not** be rotated. Each row in the wall must be exactly `width` units long. For the wall to be **sturdy**, adjacent rows in the wall should **not** join bricks at the same location, except at the ends of the wall. Return _the number of ways to build a **sturdy** wall._ Since the answer may be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "height = 2, width = 3, bricks = \\[1,2\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "height = 1, width = 1, bricks = \\[5\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= height <= 100`",
      "`1 <= width <= 10`",
      "`1 <= bricks.length <= 10`",
      "`1 <= bricks[i] <= 10`",
      "All the values of `bricks` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2185",
    "slug": "counting-words-with-a-given-prefix",
    "title": "Counting Words With a Given Prefix",
    "difficulty": "Easy",
    "description": "You are given an array of strings `words` and a string `pref`. Return _the number of strings in_ `words` _that contain_ `pref` _as a **prefix**_. A **prefix** of a string `s` is any leading contiguous substring of `s`.",
    "examples": [
      {
        "input": "words = \\[ \"pay \", \"**at**tention \", \"practice \", \"**at**tend \"\\], `pref` \\=  \"at \"",
        "output": "2",
        "explanation": "The 2 strings that contain  \"at \" as a prefix are:  \"**at**tention \" and  \"**at**tend \"."
      },
      {
        "input": "words = \\[ \"leetcode \", \"win \", \"loops \", \"success \"\\], `pref` \\=  \"code \"",
        "output": "0",
        "explanation": "There are no strings that contain  \"code \" as a prefix."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length, pref.length <= 100`",
      "`words[i]` and `pref` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2186",
    "slug": "minimum-number-of-steps-to-make-two-strings-anagram-ii",
    "title": "Minimum Number of Steps to Make Two Strings Anagram II",
    "difficulty": "Medium",
    "description": "You are given two strings `s` and `t`. In one step, you can append **any character** to either `s` or `t`. Return _the minimum number of steps to make_ `s` _and_ `t` _**anagrams** of each other._ An **anagram** of a string is a string that contains the same characters with a different (or the same) ordering.",
    "examples": [
      {
        "input": "s =  \"**lee**tco**de** \", t =  \"co**a**t**s** \"",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "s =  \"night \", t =  \"thing \"",
        "output": "0",
        "explanation": "The given strings are already anagrams of each other. Thus, we do not need any further steps."
      }
    ],
    "constraints": [
      "`1 <= s.length, t.length <= 2  105`",
      "`s` and `t` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2187",
    "slug": "minimum-time-to-complete-trips",
    "title": "Minimum Time to Complete Trips",
    "difficulty": "Medium",
    "description": "You are given an array `time` where `time[i]` denotes the time taken by the `ith` bus to complete **one trip**. Each bus can make multiple trips **successively**; that is, the next trip can start **immediately after** completing the current trip. Also, each bus operates **independently**; that is, the trips of one bus do not influence the trips of any other bus. You are also given an integer `totalTrips`, which denotes the number of trips all buses should make **in total**. Return _the **minimum time** required for all buses to complete **at least**_ `totalTrips` _trips_.",
    "examples": [
      {
        "input": "time = \\[1,2,3\\], totalTrips = 5",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "time = \\[2\\], totalTrips = 1",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= time.length <= 105`",
      "`1 <= time[i], totalTrips <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2188",
    "slug": "minimum-time-to-finish-the-race",
    "title": "Minimum Time to Finish the Race",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** 2D integer array `tires` where `tires[i] = [fi, ri]` indicates that the `ith` tire can finish its `xth` successive lap in `fi * ri(x-1)` seconds. *  For example, if `fi = 3` and `ri = 2`, then the tire would finish its `1st` lap in `3` seconds, its `2nd` lap in `3 * 2 = 6` seconds, its `3rd` lap in `3 * 22 = 12` seconds, etc. You are also given an integer `changeTime` and an integer `numLaps`. The race consists of `numLaps` laps and you may start the race with **any** tire. You have an **unlimited** supply of each tire and after every lap, you may **change** to any given tire (including the current tire type) if you wait `changeTime` seconds. Return _the **minimum** time to finish the race._",
    "examples": [
      {
        "input": "tires = \\[\\[2,3\\],\\[3,4\\]\\], changeTime = 5, numLaps = 4",
        "output": "21",
        "explanation": ""
      },
      {
        "input": "tires = \\[\\[1,10\\],\\[2,2\\],\\[3,4\\]\\], changeTime = 6, numLaps = 5",
        "output": "25",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= tires.length <= 105`",
      "`tires[i].length == 2`",
      "`1 <= fi, changeTime <= 105`",
      "`2 <= ri <= 105`",
      "`1 <= numLaps <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2189",
    "slug": "number-of-ways-to-build-house-of-cards",
    "title": "Number of Ways to Build House of Cards",
    "difficulty": "Medium",
    "description": "You are given an integer `n` representing the number of playing cards you have. A **house of cards** meets the following conditions: *  A **house of cards** consists of one or more rows of **triangles** and horizontal cards. *  **Triangles** are created by leaning two cards against each other. *  One card must be placed horizontally between **all adjacent** triangles in a row. *  Any triangle on a row higher than the first must be placed on a horizontal card from the previous row. *  Each triangle is placed in the **leftmost** available spot in the row. Return _the number of **distinct** **house of cards** you can build using **all**_ `n` _cards._ Two houses of cards are considered distinct if there exists a row where the two houses contain a different number of cards.",
    "examples": [
      {
        "input": "n = 16",
        "output": "2",
        "explanation": "The two valid houses of cards are shown."
      },
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "The one valid house of cards is shown."
      },
      {
        "input": "n = 4",
        "output": "0",
        "explanation": "The three houses of cards in the diagram are not valid."
      }
    ],
    "constraints": [
      "`1 <= n <= 500`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2190",
    "slug": "most-frequent-number-following-key-in-an-array",
    "title": "Most Frequent Number Following Key In an Array",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums`. You are also given an integer `key`, which is present in `nums`. For every unique integer `target` in `nums`, **count** the number of times `target` immediately follows an occurrence of `key` in `nums`. In other words, count the number of indices `i` such that: *  `0 <= i <= nums.length - 2`, *  `nums[i] == key` and, *  `nums[i + 1] == target`. Return _the_ `target` _with the **maximum** count_. The test cases will be generated such that the `target` with maximum count is unique.",
    "examples": [
      {
        "input": "nums = \\[1,100,200,1,100\\], key = 1",
        "output": "100",
        "explanation": "For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key."
      },
      {
        "input": "nums = \\[2,2,2,2,3\\], key = 2",
        "output": "2",
        "explanation": "For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 1000`",
      "The test cases will be generated such that the answer is unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2191",
    "slug": "sort-the-jumbled-numbers",
    "title": "Sort the Jumbled Numbers",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `mapping` which represents the mapping rule of a shuffled decimal system. `mapping[i] = j` means digit `i` should be mapped to digit `j` in this system. The **mapped value** of an integer is the new integer obtained by replacing each occurrence of digit `i` in the integer with `mapping[i]` for all `0 <= i <= 9`. You are also given another integer array `nums`. Return _the array_ `nums` _sorted in **non-decreasing** order based on the **mapped values** of its elements._ **Notes:** *  Elements with the same mapped values should appear in the **same relative order** as in the input. *  The elements of `nums` should only be sorted based on their mapped values and **not be replaced** by them.",
    "examples": [
      {
        "input": "mapping = \\[8,9,4,0,2,1,3,5,7,6\\], nums = \\[991,338,38\\]",
        "output": "\\[338,38,991\\]",
        "explanation": ""
      },
      {
        "input": "mapping = \\[0,1,2,3,4,5,6,7,8,9\\], nums = \\[789,456,123\\]",
        "output": "\\[123,456,789\\]",
        "explanation": "789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is \\[123,456,789\\]."
      }
    ],
    "constraints": [
      "`mapping.length == 10`",
      "`0 <= mapping[i] <= 9`",
      "All the values of `mapping[i]` are unique.",
      "`1 <= nums.length <= 3  104`",
      "`0 <= nums[i] < 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2192",
    "slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
    "title": "All Ancestors of a Node in a Directed Acyclic Graph",
    "difficulty": "Medium",
    "description": "You are given a positive integer `n` representing the number of nodes of a **Directed Acyclic Graph** (DAG). The nodes are numbered from `0` to `n - 1` (**inclusive**). You are also given a 2D integer array `edges`, where `edges[i] = [fromi, toi]` denotes that there is a **unidirectional** edge from `fromi` to `toi` in the graph. Return _a list_ `answer`_, where_ `answer[i]` _is the **list of ancestors** of the_ `ith` _node, sorted in **ascending order**_. A node `u` is an **ancestor** of another node `v` if `u` can reach `v` via a set of edges.",
    "examples": [
      {
        "input": "n = 8, edgeList = \\[\\[0,3\\],\\[0,4\\],\\[1,3\\],\\[2,4\\],\\[2,7\\],\\[3,5\\],\\[3,6\\],\\[3,7\\],\\[4,6\\]\\]",
        "output": "\\[\\[\\],\\[\\],\\[\\],\\[0,1\\],\\[0,2\\],\\[0,1,3\\],\\[0,1,2,3,4\\],\\[0,1,2,3\\]\\]",
        "explanation": ""
      },
      {
        "input": "n = 5, edgeList = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\],\\[0,4\\],\\[1,2\\],\\[1,3\\],\\[1,4\\],\\[2,3\\],\\[2,4\\],\\[3,4\\]\\]",
        "output": "\\[\\[\\],\\[0\\],\\[0,1\\],\\[0,1,2\\],\\[0,1,2,3\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`",
      "`0 <= edges.length <= min(2000, n  (n - 1) / 2)`",
      "`edges[i].length == 2`",
      "`0 <= fromi, toi <= n - 1`",
      "`fromi != toi`",
      "There are no duplicate edges.",
      "The graph is directed and acyclic."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2193",
    "slug": "minimum-number-of-moves-to-make-palindrome",
    "title": "Minimum Number of Moves to Make Palindrome",
    "difficulty": "Hard",
    "description": "You are given a string `s` consisting only of lowercase English letters. In one **move**, you can select any two **adjacent** characters of `s` and swap them. Return _the **minimum number of moves** needed to make_ `s` _a palindrome_. **Note** that the input will be generated such that `s` can always be converted to a palindrome.",
    "examples": [
      {
        "input": "s =  \"aabb \"",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "s =  \"letelt \"",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 2000`",
      "`s` consists only of lowercase English letters.",
      "`s` can be converted to a palindrome using a finite number of moves."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2194",
    "slug": "cells-in-a-range-on-an-excel-sheet",
    "title": "Cells in a Range on an Excel Sheet",
    "difficulty": "Easy",
    "description": "A cell `(r, c)` of an excel sheet is represented as a string `\" \"` where: *  denotes the column number `c` of the cell. It is represented by **alphabetical letters**. *  For example, the `1st` column is denoted by `'A'`, the `2nd` by `'B'`, the `3rd` by `'C'`, and so on. *  is the row number `r` of the cell. The `rth` row is represented by the **integer** `r`. You are given a string `s` in the format `\": \"`, where represents the column `c1`, represents the row `r1`, represents the column `c2`, and represents the row `r2`, such that `r1 <= r2` and `c1 <= c2`. Return _the **list of cells**_ `(x, y)` _such that_ `r1 <= x <= r2` _and_ `c1 <= y <= c2`. The cells should be represented as **strings** in the format mentioned above and be sorted in **non-decreasing** order first by columns and then by rows.",
    "examples": [
      {
        "input": "s =  \"K1:L2 \"",
        "output": "\\[ \"K1 \", \"K2 \", \"L1 \", \"L2 \"\\]",
        "explanation": ""
      },
      {
        "input": "s =  \"A1:F1 \"",
        "output": "\\[ \"A1 \", \"B1 \", \"C1 \", \"D1 \", \"E1 \", \"F1 \"\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`s.length == 5`",
      "`'A' <= s[0] <= s[3] <= 'Z'`",
      "`'1' <= s[1] <= s[4] <= '9'`",
      "`s` consists of uppercase English letters, digits and `':'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2195",
    "slug": "append-k-integers-with-minimal-sum",
    "title": "Append K Integers With Minimal Sum",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an integer `k`. Append `k` **unique positive** integers that do **not** appear in `nums` to `nums` such that the resulting total sum is **minimum**. Return _the sum of the_ `k` _integers appended to_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[1,4,25,10,25\\], k = 2",
        "output": "5",
        "explanation": "The two unique positive integers that do not appear in nums which we append are 2 and 3."
      },
      {
        "input": "nums = \\[5,6\\], k = 6",
        "output": "25",
        "explanation": "The six unique positive integers that do not appear in nums which we append are 1, 2, 3, 4, 7, and 8."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`",
      "`1 <= k <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2196",
    "slug": "create-binary-tree-from-descriptions",
    "title": "Create Binary Tree From Descriptions",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `descriptions` where `descriptions[i] = [parenti, childi, isLefti]` indicates that `parenti` is the **parent** of `childi` in a **binary** tree of **unique** values. Furthermore, *  If `isLefti == 1`, then `childi` is the left child of `parenti`. *  If `isLefti == 0`, then `childi` is the right child of `parenti`. Construct the binary tree described by `descriptions` and return _its **root**_. The test cases will be generated such that the binary tree is **valid**.",
    "examples": [
      {
        "input": "descriptions = \\[\\[20,15,1\\],\\[20,17,0\\],\\[50,20,1\\],\\[50,80,0\\],\\[80,19,1\\]\\]",
        "output": "\\[50,20,80,15,17,19\\]",
        "explanation": "The root node is the node with value 50 since it has no parent."
      },
      {
        "input": "descriptions = \\[\\[1,2,1\\],\\[2,3,0\\],\\[3,4,1\\]\\]",
        "output": "\\[1,2,null,null,3,4\\]",
        "explanation": "The root node is the node with value 1 since it has no parent."
      }
    ],
    "constraints": [
      "`1 <= descriptions.length <= 104`",
      "`descriptions[i].length == 3`",
      "`1 <= parenti, childi <= 105`",
      "`0 <= isLefti <= 1`",
      "The binary tree described by `descriptions` is valid."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2197",
    "slug": "replace-non-coprime-numbers-in-array",
    "title": "Replace Non-Coprime Numbers in Array",
    "difficulty": "Hard",
    "description": "You are given an array of integers `nums`. Perform the following steps: 1. Find **any** two **adjacent** numbers in `nums` that are **non-coprime**. 2. If no such numbers are found, **stop** the process. 3. Otherwise, delete the two numbers and **replace** them with their **LCM (Least Common Multiple)**. 4. **Repeat** this process as long as you keep finding two adjacent non-coprime numbers. Return _the **final** modified array._ It can be shown that replacing adjacent non-coprime numbers in **any** arbitrary order will lead to the same result. The test cases are generated such that the values in the final array are **less than or equal** to `108`. Two values `x` and `y` are **non-coprime** if `GCD(x, y) > 1` where `GCD(x, y)` is the **Greatest Common Divisor** of `x` and `y`.",
    "examples": [
      {
        "input": "nums = \\[6,4,3,2,7,6,2\\]",
        "output": "\\[12,7,6\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,2,1,1,3,3,3\\]",
        "output": "\\[2,1,1,3\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`",
      "The test cases are generated such that the values in the final array are less than or equal to `108`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2198",
    "slug": "number-of-single-divisor-triplets",
    "title": "Number of Single Divisor Triplets",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of positive integers `nums`. A triplet of three **distinct** indices `(i, j, k)` is called a **single divisor triplet** of `nums` if `nums[i] + nums[j] + nums[k]` is divisible by **exactly one** of `nums[i]`, `nums[j]`, or `nums[k]`. Return _the number of **single divisor triplets** of_ `nums`_._",
    "examples": [
      {
        "input": "nums = \\[4,6,7,3,2\\]",
        "output": "12",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,2\\]",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,1,1\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 105`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2200",
    "slug": "find-all-k-distant-indices-in-an-array",
    "title": "Find All K-Distant Indices in an Array",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums` and two integers `key` and `k`. A **k-distant index** is an index `i` of `nums` for which there exists at least one index `j` such that `|i - j| <= k` and `nums[j] == key`. Return _a list of all k-distant indices sorted in **increasing order**_.",
    "examples": [
      {
        "input": "nums = \\[3,4,9,1,3,9,5\\], key = 9, k = 1",
        "output": "\\[1,2,3,4,5,6\\]",
        "explanation": "Here, `nums[2] == key` and `nums[5] == key. - For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j` where `|0 - j| <= k` and `nums[j] == key. Thus, 0 is not a k-distant index. - For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index. - For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index. - For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index. - For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index. - For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index. - For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.`"
      },
      {
        "input": "nums = \\[2,2,2,2,2\\], key = 2, k = 2",
        "output": "\\[0,1,2,3,4\\]",
        "explanation": "For all indices i in nums, there exists some index j such that |i - j| <= k and nums\\[j\\] == key, so every index is a k-distant index."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 1000`",
      "`key` is an integer from the array `nums`.",
      "`1 <= k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2201",
    "slug": "count-artifacts-that-can-be-extracted",
    "title": "Count Artifacts That Can Be Extracted",
    "difficulty": "Medium",
    "description": "There is an `n x n` **0-indexed** grid with some artifacts buried in it. You are given the integer `n` and a **0-indexed** 2D integer array `artifacts` describing the positions of the rectangular artifacts where `artifacts[i] = [r1i, c1i, r2i, c2i]` denotes that the `ith` artifact is buried in the subgrid where: *  `(r1i, c1i)` is the coordinate of the **top-left** cell of the `ith` artifact and *  `(r2i, c2i)` is the coordinate of the **bottom-right** cell of the `ith` artifact. You will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it. Given a **0-indexed** 2D integer array `dig` where `dig[i] = [ri, ci]` indicates that you will excavate the cell `(ri, ci)`, return _the number of artifacts that you can extract_. The test cases are generated such that: *  No two artifacts overlap. *  Each artifact only covers at most `4` cells. *  The entries of `dig` are unique.",
    "examples": [
      {
        "input": "n = 2, artifacts = \\[\\[0,0,0,0\\],\\[0,1,1,1\\]\\], dig = \\[\\[0,0\\],\\[0,1\\]\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "n = 2, artifacts = \\[\\[0,0,0,0\\],\\[0,1,1,1\\]\\], dig = \\[\\[0,0\\],\\[0,1\\],\\[1,1\\]\\]",
        "output": "2",
        "explanation": "Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2."
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`",
      "`1 <= artifacts.length, dig.length <= min(n2, 105)`",
      "`artifacts[i].length == 4`",
      "`dig[i].length == 2`",
      "`0 <= r1i, c1i, r2i, c2i, ri, ci <= n - 1`",
      "`r1i <= r2i`",
      "`c1i <= c2i`",
      "No two artifacts will overlap.",
      "The number of cells covered by an artifact is at most `4`.",
      "The entries of `dig` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2202",
    "slug": "maximize-the-topmost-element-after-k-moves",
    "title": "Maximize the Topmost Element After K Moves",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` representing the contents of a **pile**, where `nums[0]` is the topmost element of the pile. In one move, you can perform **either** of the following: *  If the pile is not empty, **remove** the topmost element of the pile. *  If there are one or more removed elements, **add** any one of them back onto the pile. This element becomes the new topmost element. You are also given an integer `k`, which denotes the total number of moves to be made. Return _the **maximum value** of the topmost element of the pile possible after **exactly**_ `k` _moves_. In case it is not possible to obtain a non-empty pile after `k` moves, return `-1`.",
    "examples": [
      {
        "input": "nums = \\[5,2,2,4,0,6\\], k = 4",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "nums = \\[2\\], k = 1",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i], k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2203",
    "slug": "minimum-weighted-subgraph-with-the-required-paths",
    "title": "Minimum Weighted Subgraph With the Required Paths",
    "difficulty": "Hard",
    "description": "You are given an integer `n` denoting the number of nodes of a **weighted directed** graph. The nodes are numbered from `0` to `n - 1`. You are also given a 2D integer array `edges` where `edges[i] = [fromi, toi, weighti]` denotes that there exists a **directed** edge from `fromi` to `toi` with weight `weighti`. Lastly, you are given three **distinct** integers `src1`, `src2`, and `dest` denoting three distinct nodes of the graph. Return _the **minimum weight** of a subgraph of the graph such that it is **possible** to reach_ `dest` _from both_ `src1` _and_ `src2` _via a set of edges of this subgraph_. In case such a subgraph does not exist, return `-1`. A **subgraph** is a graph whose vertices and edges are subsets of the original graph. The **weight** of a subgraph is the sum of weights of its constituent edges.",
    "examples": [
      {
        "input": "n = 6, edges = \\[\\[0,2,2\\],\\[0,5,6\\],\\[1,0,3\\],\\[1,4,5\\],\\[2,1,1\\],\\[2,3,3\\],\\[2,3,4\\],\\[3,4,2\\],\\[4,5,1\\]\\], src1 = 0, src2 = 1, dest = 5",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "n = 3, edges = \\[\\[0,1,1\\],\\[2,1,1\\]\\], src1 = 0, src2 = 1, dest = 2",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`3 <= n <= 105`",
      "`0 <= edges.length <= 105`",
      "`edges[i].length == 3`",
      "`0 <= fromi, toi, src1, src2, dest <= n - 1`",
      "`fromi != toi`",
      "`src1`, `src2`, and `dest` are pairwise distinct.",
      "`1 <= weight[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2204",
    "slug": "distance-to-a-cycle-in-undirected-graph",
    "title": "Distance to a Cycle in Undirected Graph",
    "difficulty": "Hard",
    "description": "You are given a positive integer `n` representing the number of nodes in a **connected undirected graph** containing **exactly one** cycle. The nodes are numbered from `0` to `n - 1` (**inclusive**). You are also given a 2D integer array `edges`, where `edges[i] = [node1i, node2i]` denotes that there is a **bidirectional** edge connecting `node1i` and `node2i` in the graph. The distance between two nodes `a` and `b` is defined to be the **minimum** number of edges that are needed to go from `a` to `b`. Return _an integer array `answer`_ _of size_ `n`_, where_ `answer[i]` _is the **minimum** distance between the_ `ith` _node and **any** node in the cycle._",
    "examples": [
      {
        "input": "n = 7, edges = \\[\\[1,2\\],\\[2,4\\],\\[4,3\\],\\[3,1\\],\\[0,1\\],\\[5,2\\],\\[6,5\\]\\]",
        "output": "\\[1,0,0,0,0,1,2\\]",
        "explanation": ""
      },
      {
        "input": "n = 9, edges = \\[\\[0,1\\],\\[1,2\\],\\[0,2\\],\\[2,6\\],\\[6,7\\],\\[6,8\\],\\[0,3\\],\\[3,4\\],\\[3,5\\]\\]",
        "output": "\\[0,0,0,1,2,2,1,2,2\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`3 <= n <= 105`",
      "`edges.length == n`",
      "`edges[i].length == 2`",
      "`0 <= node1i, node2i <= n - 1`",
      "`node1i != node2i`",
      "The graph is connected.",
      "The graph has exactly one cycle.",
      "There is at most one edge between any pair of vertices."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2206",
    "slug": "divide-array-into-equal-pairs",
    "title": "Divide Array Into Equal Pairs",
    "difficulty": "Easy",
    "description": "You are given an integer array `nums` consisting of `2 * n` integers. You need to divide `nums` into `n` pairs such that: *  Each element belongs to **exactly one** pair. *  The elements present in a pair are **equal**. Return `true` _if nums can be divided into_ `n` _pairs, otherwise return_ `false`.",
    "examples": [
      {
        "input": "nums = \\[3,2,3,2,2,2\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`nums.length == 2  n`",
      "`1 <= n <= 500`",
      "`1 <= nums[i] <= 500`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2208",
    "slug": "minimum-operations-to-halve-array-sum",
    "title": "Minimum Operations to Halve Array Sum",
    "difficulty": "Medium",
    "description": "You are given an array `nums` of positive integers. In one operation, you can choose **any** number from `nums` and reduce it to **exactly** half the number. (Note that you may choose this reduced number in future operations.) Return _the **minimum** number of operations to reduce the sum of_ `nums` _by **at least** half._",
    "examples": [
      {
        "input": "nums = \\[5,19,8,1\\]",
        "output": "3",
        "explanation": "The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33."
      },
      {
        "input": "nums = \\[3,8,20\\]",
        "output": "3",
        "explanation": "The initial sum of nums is equal to 3 + 8 + 20 = 31."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2209",
    "slug": "minimum-white-tiles-after-covering-with-carpets",
    "title": "Minimum White Tiles After Covering With Carpets",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed binary** string `floor`, which represents the colors of tiles on a floor: *  `floor[i] = '0'` denotes that the `ith` tile of the floor is colored **black**. *  On the other hand, `floor[i] = '1'` denotes that the `ith` tile of the floor is colored **white**. You are also given `numCarpets` and `carpetLen`. You have `numCarpets` **black** carpets, each of length `carpetLen` tiles. Cover the tiles with the given carpets such that the number of **white** tiles still visible is **minimum**. Carpets may overlap one another. Return _the **minimum** number of white tiles still visible._",
    "examples": [
      {
        "input": "floor =  \"10110101 \", numCarpets = 2, carpetLen = 2",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "floor =  \"11111 \", numCarpets = 2, carpetLen = 3",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= carpetLen <= floor.length <= 1000`",
      "`floor[i]` is either `'0'` or `'1'`.",
      "`1 <= numCarpets <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2210",
    "slug": "count-hills-and-valleys-in-an-array",
    "title": "Count Hills and Valleys in an Array",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums`. An index `i` is part of a **hill** in `nums` if the closest non-equal neighbors of `i` are smaller than `nums[i]`. Similarly, an index `i` is part of a **valley** in `nums` if the closest non-equal neighbors of `i` are larger than `nums[i]`. Adjacent indices `i` and `j` are part of the **same** hill or valley if `nums[i] == nums[j]`. Note that for an index to be part of a hill or valley, it must have a non-equal neighbor on **both** the left and right of the index. Return _the number of hills and valleys in_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[2,4,1,1,6,5\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums = \\[6,6,5,5,4,1\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 100`",
      "`1 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2211",
    "slug": "count-collisions-on-a-road",
    "title": "Count Collisions on a Road",
    "difficulty": "Medium",
    "description": "There are `n` cars on an infinitely long road. The cars are numbered from `0` to `n - 1` from left to right and each car is present at a **unique** point. You are given a **0-indexed** string `directions` of length `n`. `directions[i]` can be either `'L'`, `'R'`, or `'S'` denoting whether the `ith` car is moving towards the **left**, towards the **right**, or **staying** at its current point respectively. Each moving car has the **same speed**. The number of collisions can be calculated as follows: *  When two cars moving in **opposite** directions collide with each other, the number of collisions increases by `2`. *  When a moving car collides with a stationary car, the number of collisions increases by `1`. After a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion. Return _the **total number of collisions** that will happen on the road_.",
    "examples": [
      {
        "input": "directions =  \"RLRSLL \"",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "directions =  \"LLRR \"",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= directions.length <= 105`",
      "`directions[i]` is either `'L'`, `'R'`, or `'S'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2212",
    "slug": "maximum-points-in-an-archery-competition",
    "title": "Maximum Points in an Archery Competition",
    "difficulty": "Medium",
    "description": "Alice and Bob are opponents in an archery competition. The competition has set the following rules: 1. Alice first shoots `numArrows` arrows and then Bob shoots `numArrows` arrows. 2. The points are then calculated as follows: 1. The target has integer scoring sections ranging from `0` to `11` **inclusive**. 2. For **each** section of the target with score `k` (in between `0` to `11`), say Alice and Bob have shot `ak` and `bk` arrows on that section respectively. If `ak >= bk`, then Alice takes `k` points. If `ak < bk`, then Bob takes `k` points. 3. However, if `ak == bk == 0`, then **nobody** takes `k` points. *  For example, if Alice and Bob both shot `2` arrows on the section with score `11`, then Alice takes `11` points. On the other hand, if Alice shot `0` arrows on the section with score `11` and Bob shot `2` arrows on that same section, then Bob takes `11` points. You are given the integer `numArrows` and an integer array `aliceArrows` of size `12`, which represents the number of arrows Alice shot on each scoring section from `0` to `11`. Now, Bob wants to **maximize** the total number of points he can obtain. Return _the array_ `bobArrows` _which represents the number of arrows Bob shot on **each** scoring section from_ `0` _to_ `11`. The sum of the values in `bobArrows` should equal `numArrows`. If there are multiple ways for Bob to earn the maximum total points, return **any** one of them.",
    "examples": [
      {
        "input": "numArrows = 9, aliceArrows = \\[1,1,0,1,0,0,2,1,0,1,2,0\\]",
        "output": "\\[0,0,0,0,1,1,0,0,1,2,3,1\\]",
        "explanation": "The table above shows how the competition is scored."
      },
      {
        "input": "numArrows = 3, aliceArrows = \\[0,0,1,0,0,0,0,0,0,0,0,2\\]",
        "output": "\\[0,0,0,0,0,0,0,0,1,1,1,0\\]",
        "explanation": "The table above shows how the competition is scored."
      }
    ],
    "constraints": [
      "`1 <= numArrows <= 105`",
      "`aliceArrows.length == bobArrows.length == 12`",
      "`0 <= aliceArrows[i], bobArrows[i] <= numArrows`",
      "`sum(aliceArrows[i]) == numArrows`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2213",
    "slug": "longest-substring-of-one-repeating-character",
    "title": "Longest Substring of One Repeating Character",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** string `s`. You are also given a **0-indexed** string `queryCharacters` of length `k` and a **0-indexed** array of integer **indices** `queryIndices` of length `k`, both of which are used to describe `k` queries. The `ith` query updates the character in `s` at index `queryIndices[i]` to the character `queryCharacters[i]`. Return _an array_ `lengths` _of length_ `k` _where_ `lengths[i]` _is the **length** of the **longest substring** of_ `s` _consisting of **only one repeating** character **after** the_ `ith` _query_ _is performed._",
    "examples": [
      {
        "input": "s =  \"babacc \", queryCharacters =  \"bcb \", queryIndices = \\[1,3,3\\]",
        "output": "\\[3,3,4\\]",
        "explanation": ""
      },
      {
        "input": "s =  \"abyzz \", queryCharacters =  \"aa \", queryIndices = \\[2,1\\]",
        "output": "\\[2,3\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters.",
      "`k == queryCharacters.length == queryIndices.length`",
      "`1 <= k <= 105`",
      "`queryCharacters` consists of lowercase English letters.",
      "`0 <= queryIndices[i] < s.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2214",
    "slug": "minimum-health-to-beat-game",
    "title": "Minimum Health to Beat Game",
    "difficulty": "Medium",
    "description": "You are playing a game that has `n` levels numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `damage` where `damage[i]` is the amount of health you will lose to complete the `ith` level. You are also given an integer `armor`. You may use your armor ability **at most once** during the game on **any** level which will protect you from **at most** `armor` damage. You must complete the levels in order and your health must be **greater than** `0` at all times to beat the game. Return _the **minimum** health you need to start with to beat the game._",
    "examples": [
      {
        "input": "damage = \\[2,7,4,3\\], armor = 4",
        "output": "13",
        "explanation": "One optimal way to beat the game starting at 13 health is:"
      },
      {
        "input": "damage = \\[2,5,3,4\\], armor = 7",
        "output": "10",
        "explanation": "One optimal way to beat the game starting at 10 health is:"
      },
      {
        "input": "damage = \\[3,3,3\\], armor = 0",
        "output": "10",
        "explanation": "One optimal way to beat the game starting at 10 health is:"
      }
    ],
    "constraints": [
      "`n == damage.length`",
      "`1 <= n <= 105`",
      "`0 <= damage[i] <= 105`",
      "`0 <= armor <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2215",
    "slug": "find-the-difference-of-two-arrays",
    "title": "Find the Difference of Two Arrays",
    "difficulty": "Easy",
    "description": "Given two **0-indexed** integer arrays `nums1` and `nums2`, return _a list_ `answer` _of size_ `2` _where:_ *  `answer[0]` _is a list of all **distinct** integers in_ `nums1` _which are **not** present in_ `nums2`_._ *  `answer[1]` _is a list of all **distinct** integers in_ `nums2` _which are **not** present in_ `nums1`. **Note** that the integers in the lists may be returned in **any** order.",
    "examples": [
      {
        "input": "nums1 = \\[1,2,3\\], nums2 = \\[2,4,6\\]",
        "output": "\\[\\[1,3\\],\\[4,6\\]\\]",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[1,2,3,3\\], nums2 = \\[1,1,2,2\\]",
        "output": "\\[\\[3\\],\\[\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 1000`",
      "`-1000 <= nums1[i], nums2[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2216",
    "slug": "minimum-deletions-to-make-array-beautiful",
    "title": "Minimum Deletions to Make Array Beautiful",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. The array `nums` is **beautiful** if: *  `nums.length` is even. *  `nums[i] != nums[i + 1]` for all `i % 2 == 0`. Note that an empty array is considered beautiful. You can delete any number of elements from `nums`. When you delete an element, all the elements to the right of the deleted element will be **shifted one unit to the left** to fill the gap created and all the elements to the left of the deleted element will remain **unchanged**. Return _the **minimum** number of elements to delete from_ `nums` _to make it_ _beautiful._",
    "examples": [
      {
        "input": "nums = \\[1,1,2,3,5\\]",
        "output": "1",
        "explanation": "You can delete either `nums[0]` or `nums[1]` to make `nums` = \\[1,2,3,5\\] which is beautiful. It can be proven you need at least 1 deletion to make `nums` beautiful."
      },
      {
        "input": "nums = \\[1,1,2,2,3,3\\]",
        "output": "2",
        "explanation": "You can delete `nums[0]` and `nums[5]` to make nums = \\[1,2,2,3\\] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2217",
    "slug": "find-palindrome-with-fixed-length",
    "title": "Find Palindrome With Fixed Length",
    "difficulty": "Medium",
    "description": "Given an integer array `queries` and a **positive** integer `intLength`, return _an array_ `answer` _where_ `answer[i]` _is either the_ `queries[i]th` _smallest **positive palindrome** of length_ `intLength` _or_ `-1` _if no such palindrome exists_. A **palindrome** is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.",
    "examples": [
      {
        "input": "queries = \\[1,2,3,4,5,90\\], intLength = 3",
        "output": "\\[101,111,121,131,141,999\\]",
        "explanation": ""
      },
      {
        "input": "queries = \\[2,4,6\\], intLength = 4",
        "output": "\\[1111,1331,1551\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= queries.length <= 5  104`",
      "`1 <= queries[i] <= 109`",
      "`1 <= intLength <= 15`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2218",
    "slug": "maximum-value-of-k-coins-from-piles",
    "title": "Maximum Value of K Coins From Piles",
    "difficulty": "Hard",
    "description": "There are `n` **piles** of coins on a table. Each pile consists of a **positive number** of coins of assorted denominations. In one move, you can choose any coin on **top** of any pile, remove it, and add it to your wallet. Given a list `piles`, where `piles[i]` is a list of integers denoting the composition of the `ith` pile from **top to bottom**, and a positive integer `k`, return _the **maximum total value** of coins you can have in your wallet if you choose **exactly**_ `k` _coins optimally_.",
    "examples": [
      {
        "input": "piles = \\[\\[1,100,3\\],\\[7,8,9\\]\\], k = 2",
        "output": "101",
        "explanation": ""
      },
      {
        "input": "piles = \\[\\[100\\],\\[100\\],\\[100\\],\\[100\\],\\[100\\],\\[100\\],\\[1,1,1,1,1,1,700\\]\\], k = 7",
        "output": "706",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == piles.length`",
      "`1 <= n <= 1000`",
      "`1 <= piles[i][j] <= 105`",
      "`1 <= k <= sum(piles[i].length) <= 2000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2219",
    "slug": "maximum-sum-score-of-array",
    "title": "Maximum Sum Score of Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` of length `n`. The **sum** **score** of `nums` at an index `i` where `0 <= i < n` is the **maximum** of: *  The sum of the **first** `i + 1` elements of `nums`. *  The sum of the **last** `n - i` elements of `nums`. Return _the **maximum** **sum** **score** of_ `nums` _at any index._",
    "examples": [
      {
        "input": "nums = \\[4,3,-2,5\\]",
        "output": "10",
        "explanation": ""
      },
      {
        "input": "nums = \\[-3,-5\\]",
        "output": "-3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2220",
    "slug": "minimum-bit-flips-to-convert-number",
    "title": "Minimum Bit Flips to Convert Number",
    "difficulty": "Easy",
    "description": "A **bit flip** of a number `x` is choosing a bit in the binary representation of `x` and **flipping** it from either `0` to `1` or `1` to `0`. *  For example, for `x = 7`, the binary representation is `111` and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get `110`, flip the second bit from the right to get `101`, flip the fifth bit from the right (a leading zero) to get `10111`, etc. Given two integers `start` and `goal`, return _the **minimum** number of **bit flips** to convert_ `start` _to_ `goal`.",
    "examples": [
      {
        "input": "start = 10, goal = 7",
        "output": "3",
        "explanation": "The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:"
      },
      {
        "input": "start = 3, goal = 4",
        "output": "3",
        "explanation": "The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:"
      }
    ],
    "constraints": [
      "`0 <= start, goal <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2221",
    "slug": "find-triangular-sum-of-an-array",
    "title": "Find Triangular Sum of an Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`, where `nums[i]` is a digit between `0` and `9` (**inclusive**). The **triangular sum** of `nums` is the value of the only element present in `nums` after the following process terminates: 1. Let `nums` comprise of `n` elements. If `n == 1`, **end** the process. Otherwise, **create** a new **0-indexed** integer array `newNums` of length `n - 1`. 2. For each index `i`, where `0 <= i < n - 1`, **assign** the value of `newNums[i]` as `(nums[i] + nums[i+1]) % 10`, where `%` denotes modulo operator. 3. **Replace** the array `nums` with `newNums`. 4. **Repeat** the entire process starting from step 1. Return _the triangular sum of_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4,5\\]",
        "output": "8",
        "explanation": ""
      },
      {
        "input": "nums = \\[5\\]",
        "output": "5",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2222",
    "slug": "number-of-ways-to-select-buildings",
    "title": "Number of Ways to Select Buildings",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** binary string `s` which represents the types of buildings along a street where: *  `s[i] = '0'` denotes that the `ith` building is an office and *  `s[i] = '1'` denotes that the `ith` building is a restaurant. As a city official, you would like to **select** 3 buildings for random inspection. However, to ensure variety, **no two consecutive** buildings out of the **selected** buildings can be of the same type. *  For example, given `s = \"0**0**1**1**0**1** \"`, we cannot select the `1st`, `3rd`, and `5th` buildings as that would form `\"0**11** \"` which is **not** allowed due to having two consecutive buildings of the same type. Return _the **number of valid ways** to select 3 buildings._",
    "examples": [
      {
        "input": "s =  \"001101 \"",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "s =  \"11100 \"",
        "output": "0",
        "explanation": "It can be shown that there are no valid selections."
      }
    ],
    "constraints": [
      "`3 <= s.length <= 105`",
      "`s[i]` is either `'0'` or `'1'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2223",
    "slug": "sum-of-scores-of-built-strings",
    "title": "Sum of Scores of Built Strings",
    "difficulty": "Hard",
    "description": "You are **building** a string `s` of length `n` **one** character at a time, **prepending** each new character to the **front** of the string. The strings are labeled from `1` to `n`, where the string with length `i` is labeled `si`. *  For example, for `s = \"abaca \"`, `s1 == \"a \"`, `s2 == \"ca \"`, `s3 == \"aca \"`, etc. The **score** of `si` is the length of the **longest common prefix** between `si` and `sn` (Note that `s == sn`). Given the final string `s`, return _the **sum** of the **score** of every_ `si`.",
    "examples": [
      {
        "input": "s =  \"babab \"",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "s =  \"azbazbzaz \"",
        "output": "14",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2224",
    "slug": "minimum-number-of-operations-to-convert-time",
    "title": "Minimum Number of Operations to Convert Time",
    "difficulty": "Easy",
    "description": "You are given two strings `current` and `correct` representing two **24-hour times**. 24-hour times are formatted as `\"HH:MM \"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`. In one operation you can increase the time `current` by `1`, `5`, `15`, or `60` minutes. You can perform this operation **any** number of times. Return _the **minimum number of operations** needed to convert_ `current` _to_ `correct`.",
    "examples": [
      {
        "input": "current =  \"02:30 \", correct =  \"04:35 \"",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "current =  \"11:00 \", correct =  \"11:01 \"",
        "output": "1",
        "explanation": "We only have to add one minute to current, so the minimum number of operations needed is 1."
      }
    ],
    "constraints": [
      "`current` and `correct` are in the format `\"HH:MM \"`",
      "`current <= correct`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2225",
    "slug": "find-players-with-zero-or-one-losses",
    "title": "Find Players With Zero or One Losses",
    "difficulty": "Medium",
    "description": "You are given an integer array `matches` where `matches[i] = [winneri, loseri]` indicates that the player `winneri` defeated player `loseri` in a match. Return _a list_ `answer` _of size_ `2` _where:_ *  `answer[0]` is a list of all players that have **not** lost any matches. *  `answer[1]` is a list of all players that have lost exactly **one** match. The values in the two lists should be returned in **increasing** order.",
    "examples": [
      {
        "input": "matches = \\[\\[1,3\\],\\[2,3\\],\\[3,6\\],\\[5,6\\],\\[5,7\\],\\[4,5\\],\\[4,8\\],\\[4,9\\],\\[10,4\\],\\[10,9\\]\\]",
        "output": "\\[\\[1,2,10\\],\\[4,5,7,8\\]\\]",
        "explanation": ""
      },
      {
        "input": "matches = \\[\\[2,3\\],\\[1,3\\],\\[5,4\\],\\[6,4\\]\\]",
        "output": "\\[\\[1,2,5,6\\],\\[\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= matches.length <= 105`",
      "`matches[i].length == 2`",
      "`1 <= winneri, loseri <= 105`",
      "`winneri != loseri`",
      "All `matches[i]` are unique."
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "2226",
    "slug": "maximum-candies-allocated-to-k-children",
    "title": "Maximum Candies Allocated to K Children",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `candies`. Each element in the array denotes a pile of candies of size `candies[i]`. You can divide each pile into any number of **sub piles**, but you **cannot** merge two piles together. You are also given an integer `k`. You should allocate piles of candies to `k` children such that each child gets the **same** number of candies. Each child can take **at most one** pile of candies and some piles of candies may go unused. Return _the **maximum number of candies** each child can get._",
    "examples": [
      {
        "input": "candies = \\[5,8,6\\], k = 3",
        "output": "5",
        "explanation": "We can divide candies\\[1\\] into 2 piles of size 5 and 3, and candies\\[2\\] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies."
      },
      {
        "input": "candies = \\[2,5\\], k = 11",
        "output": "0",
        "explanation": "There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0."
      }
    ],
    "constraints": [
      "`1 <= candies.length <= 105`",
      "`1 <= candies[i] <= 107`",
      "`1 <= k <= 1012`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2227",
    "slug": "encrypt-and-decrypt-strings",
    "title": "Encrypt and Decrypt Strings",
    "difficulty": "Hard",
    "description": "You are given a character array `keys` containing **unique** characters and a string array `values` containing strings of length 2. You are also given another string array `dictionary` that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a **0-indexed** string. A string is **encrypted** with the following process: 1. For each character `c` in the string, we find the index `i` satisfying `keys[i] == c` in `keys`. 2. Replace `c` with `values[i]` in the string. Note that in case a character of the string is **not present** in `keys`, the encryption process cannot be carried out, and an empty string `\" \"` is returned. A string is **decrypted** with the following process: 1. For each substring `s` of length 2 occurring at an even index in the string, we find an `i` such that `values[i] == s`. If there are multiple valid `i`, we choose **any** one of them. This means a string could have multiple possible strings it can decrypt to. 2. Replace `s` with `keys[i]` in the string. Implement the `Encrypter` class: *  `Encrypter(char[] keys, String[] values, String[] dictionary)` Initializes the `Encrypter` class with `keys, values`, and `dictionary`. *  `String encrypt(String word1)` Encrypts `word1` with the encryption process described above and returns the encrypted string. *  `int decrypt(String word2)` Returns the number of possible strings `word2` could decrypt to that also appear in `dictionary`.",
    "examples": [],
    "constraints": [
      "`1 <= keys.length == values.length <= 26`",
      "`values[i].length == 2`",
      "`1 <= dictionary.length <= 100`",
      "`1 <= dictionary[i].length <= 100`",
      "All `keys[i]` and `dictionary[i]` are unique.",
      "`1 <= word1.length <= 2000`",
      "`1 <= word2.length <= 200`",
      "All `word1[i]` appear in `keys`.",
      "`word2.length` is even.",
      "`keys`, `values[i]`, `dictionary[i]`, `word1`, and `word2` only contain lowercase English letters.",
      "At most `200` calls will be made to `encrypt` and `decrypt` in total."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2229",
    "slug": "check-if-an-array-is-consecutive",
    "title": "Check if an Array Is Consecutive",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, return `true` _if_ `nums` _is **consecutive**, otherwise return_ `false`_._ An array is **consecutive** if it contains every number in the range `[x, x + n - 1]` (**inclusive**), where `x` is the minimum number in the array and `n` is the length of the array.",
    "examples": [
      {
        "input": "nums = \\[1,3,4,2\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,3\\]",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "nums = \\[3,5,4\\]",
        "output": "true",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2231",
    "slug": "largest-number-after-digit-swaps-by-parity",
    "title": "Largest Number After Digit Swaps by Parity",
    "difficulty": "Easy",
    "description": "You are given a positive integer `num`. You may swap any two digits of `num` that have the same **parity** (i.e. both odd digits or both even digits). Return _the **largest** possible value of_ `num` _after **any** number of swaps._",
    "examples": [
      {
        "input": "num = 1234",
        "output": "3412",
        "explanation": "Swap the digit 3 with the digit 1, this results in the number 3214."
      },
      {
        "input": "num = 65875",
        "output": "87655",
        "explanation": "Swap the digit 8 with the digit 6, this results in the number 85675."
      }
    ],
    "constraints": [
      "`1 <= num <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2232",
    "slug": "minimize-result-by-adding-parentheses-to-expression",
    "title": "Minimize Result by Adding Parentheses to Expression",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `expression` of the form `\"+ \"` where and represent positive integers. Add a pair of parentheses to `expression` such that after the addition of parentheses, `expression` is a **valid** mathematical expression and evaluates to the **smallest** possible value. The left parenthesis **must** be added to the left of `'+'` and the right parenthesis **must** be added to the right of `'+'`. Return `expression` _after adding a pair of parentheses such that_ `expression` _evaluates to the **smallest** possible value._ If there are multiple answers that yield the same result, return any of them. The input has been generated such that the original value of `expression`, and the value of `expression` after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.",
    "examples": [
      {
        "input": "expression =  \"247+38 \"",
        "output": "\"2(47+38) \"",
        "explanation": "The `expression` evaluates to 2 \\* (47 + 38) = 2 \\* 85 = 170."
      },
      {
        "input": "expression =  \"12+34 \"",
        "output": "\"1(2+3)4 \"",
        "explanation": "The expression evaluates to 1 \\* (2 + 3) \\* 4 = 1 \\* 5 \\* 4 = 20."
      },
      {
        "input": "expression =  \"999+999 \"",
        "output": "\"(999+999) \"",
        "explanation": "The `expression` evaluates to 999 + 999 = 1998."
      }
    ],
    "constraints": [
      "`3 <= expression.length <= 10`",
      "`expression` consists of digits from `'1'` to `'9'` and `'+'`.",
      "`expression` starts and ends with digits.",
      "`expression` contains exactly one `'+'`.",
      "The original value of `expression`, and the value of `expression` after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2233",
    "slug": "maximum-product-after-k-increments",
    "title": "Maximum Product After K Increments",
    "difficulty": "Medium",
    "description": "You are given an array of non-negative integers `nums` and an integer `k`. In one operation, you may choose **any** element from `nums` and **increment** it by `1`. Return _the **maximum** **product** of_ `nums` _after **at most**_ `k` _operations._ Since the answer may be very large, return it **modulo** `109 + 7`. Note that you should maximize the product before taking the modulo.",
    "examples": [
      {
        "input": "nums = \\[0,4\\], k = 5",
        "output": "20",
        "explanation": "Increment the first number 5 times."
      },
      {
        "input": "nums = \\[6,3,3,2\\], k = 2",
        "output": "216",
        "explanation": "Increment the second number 1 time and increment the fourth number 1 time."
      }
    ],
    "constraints": [
      "`1 <= nums.length, k <= 105`",
      "`0 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2234",
    "slug": "maximum-total-beauty-of-the-gardens",
    "title": "Maximum Total Beauty of the Gardens",
    "difficulty": "Hard",
    "description": "Alice is a caretaker of `n` gardens and she wants to plant flowers to maximize the total beauty of all her gardens. You are given a **0-indexed** integer array `flowers` of size `n`, where `flowers[i]` is the number of flowers already planted in the `ith` garden. Flowers that are already planted **cannot** be removed. You are then given another integer `newFlowers`, which is the **maximum** number of flowers that Alice can additionally plant. You are also given the integers `target`, `full`, and `partial`. A garden is considered **complete** if it has **at least** `target` flowers. The **total beauty** of the gardens is then determined as the **sum** of the following: *  The number of **complete** gardens multiplied by `full`. *  The **minimum** number of flowers in any of the **incomplete** gardens multiplied by `partial`. If there are no incomplete gardens, then this value will be `0`. Return _the **maximum** total beauty that Alice can obtain after planting at most_ `newFlowers` _flowers._",
    "examples": [
      {
        "input": "flowers = \\[1,3,1,1\\], newFlowers = 7, target = 6, full = 12, partial = 1",
        "output": "14",
        "explanation": "Alice can plant"
      },
      {
        "input": "flowers = \\[2,4,5,3\\], newFlowers = 10, target = 5, full = 2, partial = 6",
        "output": "30",
        "explanation": "Alice can plant"
      }
    ],
    "constraints": [
      "`1 <= flowers.length <= 105`",
      "`1 <= flowers[i], target <= 105`",
      "`1 <= newFlowers <= 1010`",
      "`1 <= full, partial <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2235",
    "slug": "add-two-integers",
    "title": "Add Two Integers",
    "difficulty": "Easy",
    "description": "Given two integers `num1` and `num2`, return _the **sum** of the two integers_.",
    "examples": [
      {
        "input": "num1 = 12, num2 = 5",
        "output": "17",
        "explanation": "num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned."
      },
      {
        "input": "num1 = -10, num2 = 4",
        "output": "-6",
        "explanation": "num1 + num2 = -6, so -6 is returned."
      }
    ],
    "constraints": [
      "`-100 <= num1, num2 <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2236",
    "slug": "root-equals-sum-of-children",
    "title": "Root Equals Sum of Children",
    "difficulty": "Easy",
    "description": "You are given the `root` of a **binary tree** that consists of exactly `3` nodes: the root, its left child, and its right child. Return `true` _if the value of the root is equal to the **sum** of the values of its two children, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "root = \\[10,4,6\\]",
        "output": "true",
        "explanation": "The values of the root, its left child, and its right child are 10, 4, and 6, respectively."
      },
      {
        "input": "root = \\[5,3,1\\]",
        "output": "false",
        "explanation": "The values of the root, its left child, and its right child are 5, 3, and 1, respectively."
      }
    ],
    "constraints": [
      "The tree consists only of the root, its left child, and its right child.",
      "`-100 <= Node.val <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2237",
    "slug": "count-positions-on-street-with-required-brightness",
    "title": "Count Positions on Street With Required Brightness",
    "difficulty": "Medium",
    "description": "You are given an integer `n`. A perfectly straight street is represented by a number line ranging from `0` to `n - 1`. You are given a 2D integer array `lights` representing the street lamp(s) on the street. Each `lights[i] = [positioni, rangei]` indicates that there is a street lamp at position `positioni` that lights up the area from `[max(0, positioni - rangei), min(n - 1, positioni + rangei)]` (**inclusive**). The **brightness** of a position `p` is defined as the number of street lamps that light up the position `p`. You are given a **0-indexed** integer array `requirement` of size `n` where `requirement[i]` is the minimum **brightness** of the `ith` position on the street. Return _the number of positions_ `i` _on the street between_ `0` _and_ `n - 1` _that have a **brightness**_ _of **at least**_ `requirement[i]`_._",
    "examples": [
      {
        "input": "n = 5, lights = \\[\\[0,1\\],\\[2,1\\],\\[3,2\\]\\], requirement = \\[0,2,1,4,1\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "n = 1, lights = \\[\\[0,1\\]\\], requirement = \\[2\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`1 <= lights.length <= 105`",
      "`0 <= positioni < n`",
      "`0 <= rangei <= 105`",
      "`requirement.length == n`",
      "`0 <= requirement[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2239",
    "slug": "find-closest-number-to-zero",
    "title": "Find Closest Number to Zero",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` of size `n`, return _the number with the value **closest** to_ `0` _in_ `nums`. If there are multiple answers, return _the number with the **largest** value_.",
    "examples": [
      {
        "input": "nums = \\[-4,-2,1,4,8\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,-1,1\\]",
        "output": "1",
        "explanation": "1 and -1 are both the closest numbers to 0, so 1 being larger is returned."
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2240",
    "slug": "number-of-ways-to-buy-pens-and-pencils",
    "title": "Number of Ways to Buy Pens and Pencils",
    "difficulty": "Medium",
    "description": "You are given an integer `total` indicating the amount of money you have. You are also given two integers `cost1` and `cost2` indicating the price of a pen and pencil respectively. You can spend **part or all** of your money to buy multiple quantities (or none) of each kind of writing utensil. Return _the **number of distinct ways** you can buy some number of pens and pencils._",
    "examples": [
      {
        "input": "total = 20, cost1 = 10, cost2 = 5",
        "output": "9",
        "explanation": "The price of a pen is 10 and the price of a pencil is 5."
      },
      {
        "input": "total = 5, cost1 = 10, cost2 = 10",
        "output": "1",
        "explanation": "The price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. Therefore, there is only 1 way: buy 0 pens and 0 pencils."
      }
    ],
    "constraints": [
      "`1 <= total, cost1, cost2 <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2241",
    "slug": "design-an-atm-machine",
    "title": "Design an ATM Machine",
    "difficulty": "Medium",
    "description": "There is an ATM machine that stores banknotes of `5` denominations: `20`, `50`, `100`, `200`, and `500` dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money. When withdrawing, the machine prioritizes using banknotes of **larger** values. *  For example, if you want to withdraw `$300` and there are `2` `$50` banknotes, `1` `$100` banknote, and `1` `$200` banknote, then the machine will use the `$100` and `$200` banknotes. *  However, if you try to withdraw `$600` and there are `3` `$200` banknotes and `1` `$500` banknote, then the withdraw request will be rejected because the machine will first try to use the `$500` banknote and then be unable to use banknotes to complete the remaining `$100`. Note that the machine is **not** allowed to use the `$200` banknotes instead of the `$500` banknote. Implement the ATM class: *  `ATM()` Initializes the ATM object. *  `void deposit(int[] banknotesCount)` Deposits new banknotes in the order `$20`, `$50`, `$100`, `$200`, and `$500`. *  `int[] withdraw(int amount)` Returns an array of length `5` of the number of banknotes that will be handed to the user in the order `$20`, `$50`, `$100`, `$200`, and `$500`, and update the number of banknotes in the ATM after withdrawing. Returns `[-1]` if it is not possible (do **not** withdraw any banknotes in this case).",
    "examples": [],
    "constraints": [
      "`banknotesCount.length == 5`",
      "`0 <= banknotesCount[i] <= 109`",
      "`1 <= amount <= 109`",
      "At most `5000` calls in total will be made to `withdraw` and `deposit`.",
      "At least one call will be made to each function `withdraw` and `deposit`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2242",
    "slug": "maximum-score-of-a-node-sequence",
    "title": "Maximum Score of a Node Sequence",
    "difficulty": "Hard",
    "description": "There is an **undirected** graph with `n` nodes, numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `scores` of length `n` where `scores[i]` denotes the score of node `i`. You are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`. A node sequence is **valid** if it meets the following conditions: *  There is an edge connecting every pair of **adjacent** nodes in the sequence. *  No node appears more than once in the sequence. The score of a node sequence is defined as the **sum** of the scores of the nodes in the sequence. Return _the **maximum score** of a valid node sequence with a length of_ `4`_._ If no such sequence exists, return `-1`.",
    "examples": [
      {
        "input": "scores = \\[5,2,9,8,4\\], edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[0,2\\],\\[1,3\\],\\[2,4\\]\\]",
        "output": "24",
        "explanation": "The figure above shows the graph and the chosen node sequence \\[0,1,2,3\\]."
      },
      {
        "input": "scores = \\[9,20,6,4,11,12\\], edges = \\[\\[0,3\\],\\[5,3\\],\\[2,4\\],\\[1,3\\]\\]",
        "output": "-1",
        "explanation": "The figure above shows the graph."
      }
    ],
    "constraints": [
      "`n == scores.length`",
      "`4 <= n <= 5  104`",
      "`1 <= scores[i] <= 108`",
      "`0 <= edges.length <= 5  104`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi <= n - 1`",
      "`ai != bi`",
      "There are no duplicate edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2243",
    "slug": "calculate-digit-sum-of-a-string",
    "title": "Calculate Digit Sum of a String",
    "difficulty": "Easy",
    "description": "You are given a string `s` consisting of digits and an integer `k`. A **round** can be completed if the length of `s` is greater than `k`. In one round, do the following: 1. **Divide** `s` into **consecutive groups** of size `k` such that the first `k` characters are in the first group, the next `k` characters are in the second group, and so on. **Note** that the size of the last group can be smaller than `k`. 2. **Replace** each group of `s` with a string representing the sum of all its digits. For example, `\"346 \"` is replaced with `\"13 \"` because `3 + 4 + 6 = 13`. 3. **Merge** consecutive groups together to form a new string. If the length of the string is greater than `k`, repeat from step `1`. Return `s` _after all rounds have been completed_.",
    "examples": [
      {
        "input": "s =  \"11111222223 \", k = 3",
        "output": "\"135 \"",
        "explanation": ""
      },
      {
        "input": "s =  \"00000000 \", k = 3",
        "output": "\"000 \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`2 <= k <= 100`",
      "`s` consists of digits only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2244",
    "slug": "minimum-rounds-to-complete-all-tasks",
    "title": "Minimum Rounds to Complete All Tasks",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `tasks`, where `tasks[i]` represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the **same difficulty level**. Return _the **minimum** rounds required to complete all the tasks, or_ `-1` _if it is not possible to complete all the tasks._",
    "examples": [
      {
        "input": "tasks = \\[2,2,3,3,2,4,4,4,4,4\\]",
        "output": "4",
        "explanation": "To complete all the tasks, a possible plan is:"
      },
      {
        "input": "tasks = \\[2,3,3\\]",
        "output": "-1",
        "explanation": "There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1."
      }
    ],
    "constraints": [
      "`1 <= tasks.length <= 105`",
      "`1 <= tasks[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2245",
    "slug": "maximum-trailing-zeros-in-a-cornered-path",
    "title": "Maximum Trailing Zeros in a Cornered Path",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `grid` of size `m x n`, where each cell contains a positive integer. A **cornered path** is defined as a set of adjacent cells with **at most** one turn. More specifically, the path should exclusively move either **horizontally** or **vertically** up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the **alternate** direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell. The **product** of a path is defined as the product of all the values in the path. Return _the **maximum** number of **trailing zeros** in the product of a cornered path found in_ `grid`. Note: *  **Horizontal** movement means moving in either the left or right direction. *  **Vertical** movement means moving in either the up or down direction.",
    "examples": [
      {
        "input": "grid = \\[\\[23,17,15,3,20\\],\\[8,1,20,27,11\\],\\[9,4,6,2,21\\],\\[40,9,1,10,6\\],\\[22,7,4,5,3\\]\\]",
        "output": "3",
        "explanation": "The grid on the left shows a valid cornered path."
      },
      {
        "input": "grid = \\[\\[4,3,2\\],\\[7,6,1\\],\\[8,8,8\\]\\]",
        "output": "0",
        "explanation": "The grid is shown in the figure above."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 105`",
      "`1 <= m  n <= 105`",
      "`1 <= grid[i][j] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2246",
    "slug": "longest-path-with-different-adjacent-characters",
    "title": "Longest Path With Different Adjacent Characters",
    "difficulty": "Hard",
    "description": "You are given a **tree** (i.e. a connected, undirected graph that has no cycles) **rooted** at node `0` consisting of `n` nodes numbered from `0` to `n - 1`. The tree is represented by a **0-indexed** array `parent` of size `n`, where `parent[i]` is the parent of node `i`. Since node `0` is the root, `parent[0] == -1`. You are also given a string `s` of length `n`, where `s[i]` is the character assigned to node `i`. Return _the length of the **longest path** in the tree such that no pair of **adjacent** nodes on the path have the same character assigned to them._",
    "examples": [
      {
        "input": "parent = \\[-1,0,0,1,1,2\\], s =  \"abacbe \"",
        "output": "3",
        "explanation": "The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned."
      },
      {
        "input": "parent = \\[-1,0,0,0\\], s =  \"aabc \"",
        "output": "3",
        "explanation": "The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned."
      }
    ],
    "constraints": [
      "`n == parent.length == s.length`",
      "`1 <= n <= 105`",
      "`0 <= parent[i] <= n - 1` for all `i >= 1`",
      "`parent[0] == -1`",
      "`parent` represents a valid tree.",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2247",
    "slug": "maximum-cost-of-trip-with-k-highways",
    "title": "Maximum Cost of Trip With K Highways",
    "difficulty": "Hard",
    "description": "A series of highways connect `n` cities numbered from `0` to `n - 1`. You are given a 2D integer array `highways` where `highways[i] = [city1i, city2i, tolli]` indicates that there is a highway that connects `city1i` and `city2i`, allowing a car to go from `city1i` to `city2i` and **vice versa** for a cost of `tolli`. You are also given an integer `k`. You are going on a trip that crosses **exactly** `k` highways. You may start at any city, but you may only visit each city **at most** once during your trip. Return _the **maximum** cost of your trip. If there is no trip that meets the requirements, return_ `-1`_._",
    "examples": [
      {
        "input": "n = 5, highways = \\[\\[0,1,4\\],\\[2,1,3\\],\\[1,4,11\\],\\[3,2,3\\],\\[3,4,2\\]\\], k = 3",
        "output": "17",
        "explanation": ""
      },
      {
        "input": "n = 4, highways = \\[\\[0,1,3\\],\\[2,3,2\\]\\], k = 2",
        "output": "-1",
        "explanation": "There are no valid trips of length 2, so return -1."
      }
    ],
    "constraints": [
      "`2 <= n <= 15`",
      "`1 <= highways.length <= 50`",
      "`highways[i].length == 3`",
      "`0 <= city1i, city2i <= n - 1`",
      "`city1i != city2i`",
      "`0 <= tolli <= 100`",
      "`1 <= k <= 50`",
      "There are no duplicate highways."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2248",
    "slug": "intersection-of-multiple-arrays",
    "title": "Intersection of Multiple Arrays",
    "difficulty": "Easy",
    "description": "Given a 2D integer array `nums` where `nums[i]` is a non-empty array of **distinct** positive integers, return _the list of integers that are present in **each array** of_ `nums` _sorted in **ascending order**_.",
    "examples": [
      {
        "input": "nums = \\[\\[**3**,1,2,**4**,5\\],\\[1,2,**3**,**4**\\],\\[**3**,**4**,5,6\\]\\]",
        "output": "\\[3,4\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[\\[1,2,3\\],\\[4,5,6\\]\\]",
        "output": "\\[\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= sum(nums[i].length) <= 1000`",
      "`1 <= nums[i][j] <= 1000`",
      "All the values of `nums[i]` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2249",
    "slug": "count-lattice-points-inside-a-circle",
    "title": "Count Lattice Points Inside a Circle",
    "difficulty": "Medium",
    "description": "Given a 2D integer array `circles` where `circles[i] = [xi, yi, ri]` represents the center `(xi, yi)` and radius `ri` of the `ith` circle drawn on a grid, return _the **number of lattice points**_ _that are present inside **at least one** circle_.",
    "examples": [
      {
        "input": "circles = \\[\\[2,2,1\\]\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "circles = \\[\\[2,2,2\\],\\[3,4,1\\]\\]",
        "output": "16",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= circles.length <= 200`",
      "`circles[i].length == 3`",
      "`1 <= xi, yi <= 100`",
      "`1 <= ri <= min(xi, yi)`"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "2250",
    "slug": "count-number-of-rectangles-containing-each-point",
    "title": "Count Number of Rectangles Containing Each Point",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `rectangles` where `rectangles[i] = [li, hi]` indicates that `ith` rectangle has a length of `li` and a height of `hi`. You are also given a 2D integer array `points` where `points[j] = [xj, yj]` is a point with coordinates `(xj, yj)`. The `ith` rectangle has its **bottom-left corner** point at the coordinates `(0, 0)` and its **top-right corner** point at `(li, hi)`. Return _an integer array_ `count` _of length_ `points.length` _where_ `count[j]` _is the number of rectangles that **contain** the_ `jth` _point._ The `ith` rectangle **contains** the `jth` point if `0 <= xj <= li` and `0 <= yj <= hi`. Note that points that lie on the **edges** of a rectangle are also considered to be contained by that rectangle.",
    "examples": [
      {
        "input": "rectangles = \\[\\[1,2\\],\\[2,3\\],\\[2,5\\]\\], points = \\[\\[2,1\\],\\[1,4\\]\\]",
        "output": "\\[2,1\\]",
        "explanation": ""
      },
      {
        "input": "rectangles = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\], points = \\[\\[1,3\\],\\[1,1\\]\\]",
        "output": "\\[1,3\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= rectangles.length, points.length <= 5  104`",
      "`rectangles[i].length == points[j].length == 2`",
      "`1 <= li, xj <= 109`",
      "`1 <= hi, yj <= 100`",
      "All the `rectangles` are unique.",
      "All the `points` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2251",
    "slug": "number-of-flowers-in-full-bloom",
    "title": "Number of Flowers in Full Bloom",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** 2D integer array `flowers`, where `flowers[i] = [starti, endi]` means the `ith` flower will be in **full bloom** from `starti` to `endi` (**inclusive**). You are also given a **0-indexed** integer array `people` of size `n`, where `poeple[i]` is the time that the `ith` person will arrive to see the flowers. Return _an integer array_ `answer` _of size_ `n`_, where_ `answer[i]` _is the **number** of flowers that are in full bloom when the_ `ith` _person arrives._",
    "examples": [
      {
        "input": "flowers = \\[\\[1,6\\],\\[3,7\\],\\[9,12\\],\\[4,13\\]\\], poeple = \\[2,3,7,11\\]",
        "output": "\\[1,2,2,2\\]",
        "explanation": "The figure above shows the times when the flowers are in full bloom and when the people arrive."
      },
      {
        "input": "flowers = \\[\\[1,10\\],\\[3,3\\]\\], poeple = \\[3,3,2\\]",
        "output": "\\[2,2,1\\]",
        "explanation": "The figure above shows the times when the flowers are in full bloom and when the people arrive."
      }
    ],
    "constraints": [
      "`1 <= flowers.length <= 5  104`",
      "`flowers[i].length == 2`",
      "`1 <= starti <= endi <= 109`",
      "`1 <= people.length <= 5  104`",
      "`1 <= people[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2254",
    "slug": "design-video-sharing-platform",
    "title": "Design Video Sharing Platform",
    "difficulty": "Hard",
    "description": "You have a video sharing platform where users can upload and delete videos. Each `video` is a **string** of digits, where the `ith` digit of the string represents the content of the video at minute `i`. For example, the first digit represents the content at minute `0` in the video, the second digit represents the content at minute `1` in the video, and so on. Viewers of videos can also like and dislike videos. Internally, the platform keeps track of the **number of views, likes, and dislikes** on each video. When a video is uploaded, it is associated with the smallest available integer `videoId` starting from `0`. Once a video is deleted, the `videoId` associated with that video can be reused for another video. Implement the `VideoSharingPlatform` class: *  `VideoSharingPlatform()` Initializes the object. *  `int upload(String video)` The user uploads a `video`. Return the `videoId` associated with the video. *  `void remove(int videoId)` If there is a video associated with `videoId`, remove the video. *  `String watch(int videoId, int startMinute, int endMinute)` If there is a video associated with `videoId`, increase the number of views on the video by `1` and return the substring of the video string starting at `startMinute` and ending at `min(endMinute, video.length - 1``)` (**inclusive**). Otherwise, return `\"-1 \"`. *  `void like(int videoId)` Increases the number of likes on the video associated with `videoId` by `1` if there is a video associated with `videoId`. *  `void dislike(int videoId)` Increases the number of dislikes on the video associated with `videoId` by `1` if there is a video associated with `videoId`. *  `int[] getLikesAndDislikes(int videoId)` Return a **0-indexed** integer array `values` of length `2` where `values[0]` is the number of likes and `values[1]` is the number of dislikes on the video associated with `videoId`. If there is no video associated with `videoId`, return `[-1]`. *  `int getViews(int videoId)` Return the number of views on the video associated with `videoId`, if there is no video associated with `videoId`, return `-1`.",
    "examples": [],
    "constraints": [
      "`1 <= video.length <= 105`",
      "The sum of `video.length` over all calls to `upload` does not exceed `105`",
      "`video` consists of digits.",
      "`0 <= videoId <= 105`",
      "`0 <= startMinute < endMinute < 105`",
      "`startMinute < video.length`",
      "The sum of `endMinute - startMinute` over all calls to `watch` does not exceed `105`.",
      "At most `105` calls in total will be made to all functions."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2255",
    "slug": "count-prefixes-of-a-given-string",
    "title": "Count Prefixes of a Given String",
    "difficulty": "Easy",
    "description": "You are given a string array `words` and a string `s`, where `words[i]` and `s` comprise only of **lowercase English letters**. Return _the **number of strings** in_ `words` _that are a **prefix** of_ `s`. A **prefix** of a string is a substring that occurs at the beginning of the string. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "words = \\[ \"a \", \"b \", \"c \", \"ab \", \"bc \", \"abc \"\\], s =  \"abc \"",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"a \", \"a \"\\], s =  \"aa \"",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length, s.length <= 10`",
      "`words[i]` and `s` consist of lowercase English letters only."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2256",
    "slug": "minimum-average-difference",
    "title": "Minimum Average Difference",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` of length `n`. The **average difference** of the index `i` is the **absolute** **difference** between the average of the **first** `i + 1` elements of `nums` and the average of the **last** `n - i - 1` elements. Both averages should be **rounded down** to the nearest integer. Return _the index with the **minimum average difference**_. If there are multiple such indices, return the **smallest** one.",
    "examples": [
      {
        "input": "nums = \\[2,5,3,9,5,3\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums = \\[0\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "2257",
    "slug": "count-unguarded-cells-in-the-grid",
    "title": "Count Unguarded Cells in the Grid",
    "difficulty": "Medium",
    "description": "You are given two integers `m` and `n` representing a **0-indexed** `m x n` grid. You are also given two 2D integer arrays `guards` and `walls` where `guards[i] = [rowi, coli]` and `walls[j] = [rowj, colj]` represent the positions of the `ith` guard and `jth` wall respectively. A guard can see **every** cell in the four cardinal directions (north, east, south, or west) starting from their position unless **obstructed** by a wall or another guard. A cell is **guarded** if there is **at least** one guard that can see it. Return _the number of unoccupied cells that are **not** **guarded**._",
    "examples": [
      {
        "input": "m = 4, n = 6, guards = \\[\\[0,0\\],\\[1,1\\],\\[2,3\\]\\], walls = \\[\\[0,1\\],\\[2,2\\],\\[1,4\\]\\]",
        "output": "7",
        "explanation": "The guarded and unguarded cells are shown in red and green respectively in the above diagram."
      },
      {
        "input": "m = 3, n = 3, guards = \\[\\[1,1\\]\\], walls = \\[\\[0,1\\],\\[1,0\\],\\[2,1\\],\\[1,2\\]\\]",
        "output": "4",
        "explanation": "The unguarded cells are shown in green in the above diagram."
      }
    ],
    "constraints": [
      "`1 <= m, n <= 105`",
      "`2 <= m  n <= 105`",
      "`1 <= guards.length, walls.length <= 5  104`",
      "`2 <= guards.length + walls.length <= m  n`",
      "`guards[i].length == walls[j].length == 2`",
      "`0 <= rowi, rowj < m`",
      "`0 <= coli, colj < n`",
      "All the positions in `guards` and `walls` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2258",
    "slug": "escape-the-spreading-fire",
    "title": "Escape the Spreading Fire",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** 2D integer array `grid` of size `m x n` which represents a field. Each cell has one of three values: *  `0` represents grass, *  `1` represents fire, *  `2` represents a wall that you and fire cannot pass through. You are situated in the top-left cell, `(0, 0)`, and you want to travel to the safehouse at the bottom-right cell, `(m - 1, n - 1)`. Every minute, you may move to an **adjacent** grass cell. **After** your move, every fire cell will spread to all **adjacent** cells that are not walls. Return _the **maximum** number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse_. If this is impossible, return `-1`. If you can **always** reach the safehouse regardless of the minutes stayed, return `109`. Note that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse. A cell is **adjacent** to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).",
    "examples": [
      {
        "input": "grid = \\[\\[0,2,0,0,0,0,0\\],\\[0,0,0,2,2,1,0\\],\\[0,2,0,0,1,2,0\\],\\[0,0,2,2,2,0,2\\],\\[0,0,0,0,0,0,0\\]\\]",
        "output": "3",
        "explanation": "The figure above shows the scenario where you stay in the initial position for 3 minutes."
      },
      {
        "input": "grid = \\[\\[0,0,0,0\\],\\[0,1,2,0\\],\\[0,2,0,0\\]\\]",
        "output": "-1",
        "explanation": "The figure above shows the scenario where you immediately move towards the safehouse."
      },
      {
        "input": "grid = \\[\\[0,0,0\\],\\[2,2,0\\],\\[1,2,0\\]\\]",
        "output": "1000000000",
        "explanation": "The figure above shows the initial grid."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`2 <= m, n <= 300`",
      "`4 <= m  n <= 2  104`",
      "`grid[i][j]` is either `0`, `1`, or `2`.",
      "`grid[0][0] == grid[m - 1][n - 1] == 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2259",
    "slug": "remove-digit-from-number-to-maximize-result",
    "title": "Remove Digit From Number to Maximize Result",
    "difficulty": "Easy",
    "description": "You are given a string `number` representing a **positive integer** and a character `digit`. Return _the resulting string after removing **exactly one occurrence** of_ `digit` _from_ `number` _such that the value of the resulting string in **decimal** form is **maximized**_. The test cases are generated such that `digit` occurs at least once in `number`.",
    "examples": [
      {
        "input": "number =  \"123 \", digit =  \"3 \"",
        "output": "\"12 \"",
        "explanation": "There is only one '3' in  \"123 \". After removing '3', the result is  \"12 \"."
      },
      {
        "input": "number =  \"1231 \", digit =  \"1 \"",
        "output": "\"231 \"",
        "explanation": "We can remove the first '1' to get  \"231 \" or remove the second '1' to get  \"123 \"."
      },
      {
        "input": "number =  \"551 \", digit =  \"5 \"",
        "output": "\"51 \"",
        "explanation": "We can remove either the first or second '5' from  \"551 \"."
      }
    ],
    "constraints": [
      "`2 <= number.length <= 100`",
      "`number` consists of digits from `'1'` to `'9'`.",
      "`digit` is a digit from `'1'` to `'9'`.",
      "`digit` occurs at least once in `number`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2260",
    "slug": "minimum-consecutive-cards-to-pick-up",
    "title": "Minimum Consecutive Cards to Pick Up",
    "difficulty": "Medium",
    "description": "You are given an integer array `cards` where `cards[i]` represents the **value** of the `ith` card. A pair of cards are **matching** if the cards have the **same** value. Return _the **minimum** number of **consecutive** cards you have to pick up to have a pair of **matching** cards among the picked cards._ If it is impossible to have matching cards, return `-1`.",
    "examples": [
      {
        "input": "cards = \\[3,4,2,3,4,7\\]",
        "output": "4",
        "explanation": "We can pick up the cards \\[3,4,2,3\\] which contain a matching pair of cards with value 3. Note that picking up the cards \\[4,2,3,4\\] is also optimal."
      },
      {
        "input": "cards = \\[1,0,5,3\\]",
        "output": "-1",
        "explanation": "There is no way to pick up a set of consecutive cards that contain a pair of matching cards."
      }
    ],
    "constraints": [
      "`1 <= cards.length <= 105`",
      "`0 <= cards[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2261",
    "slug": "k-divisible-elements-subarrays",
    "title": "K Divisible Elements Subarrays",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and two integers `k` and `p`, return _the number of **distinct subarrays** which have **at most**_ `k` _elements divisible by_ `p`. Two arrays `nums1` and `nums2` are said to be **distinct** if: *  They are of **different** lengths, or *  There exists **at least** one index `i` where `nums1[i] != nums2[i]`. A **subarray** is defined as a **non-empty** contiguous sequence of elements in an array.",
    "examples": [
      {
        "input": "nums = \\[**2**,3,3,**2**,**2**\\], k = 2, p = 2",
        "output": "11",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4\\], k = 4, p = 1",
        "output": "10",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 200`",
      "`1 <= nums[i], p <= 200`",
      "`1 <= k <= nums.length`",
      "Follow up:"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2262",
    "slug": "total-appeal-of-a-string",
    "title": "Total Appeal of A String",
    "difficulty": "Hard",
    "description": "The **appeal** of a string is the number of **distinct** characters found in the string. *  For example, the appeal of `\"abbca \"` is `3` because it has `3` distinct characters: `'a'`, `'b'`, and `'c'`. Given a string `s`, return _the **total appeal of all of its **substrings**.**_ A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"abbca \"",
        "output": "28",
        "explanation": "The following are the substrings of  \"abbca \":"
      },
      {
        "input": "s =  \"code \"",
        "output": "20",
        "explanation": "The following are the substrings of  \"code \":"
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2263",
    "slug": "make-array-non-decreasing-or-non-increasing",
    "title": "Make Array Non-decreasing or Non-increasing",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** integer array `nums`. In one operation, you can: *  Choose an index `i` in the range `0 <= i < nums.length` *  Set `nums[i]` to `nums[i] + 1` **or** `nums[i] - 1` Return _the **minimum** number of operations to make_ `nums` _**non-decreasing** or **non-increasing**._",
    "examples": [
      {
        "input": "nums = \\[3,2,4,5,0\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,2,3,4\\]",
        "output": "0",
        "explanation": "nums is already in non-decreasing order, so no operations are needed and we return 0."
      },
      {
        "input": "nums = \\[0\\]",
        "output": "0",
        "explanation": "nums is already in non-decreasing order, so no operations are needed and we return 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] <= 1000`",
      "Follow up: Can you solve it in `O(nlog(n))` time complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2264",
    "slug": "largest-3-same-digit-number-in-string",
    "title": "Largest 3-Same-Digit Number in String",
    "difficulty": "Easy",
    "description": "You are given a string `num` representing a large integer. An integer is **good** if it meets the following conditions: *  It is a **substring** of `num` with length `3`. *  It consists of only one unique digit. Return _the **maximum good** integer as a **string** or an empty string_ `\" \"` _if no such integer exists_. Note: *  A **substring** is a contiguous sequence of characters within a string. *  There may be **leading zeroes** in `num` or a good integer.",
    "examples": [
      {
        "input": "num =  \"6**777**133339 \"",
        "output": "\"777 \"",
        "explanation": "There are two distinct good integers:  \"777 \" and  \"333 \"."
      },
      {
        "input": "num =  \"23**000**19 \"",
        "output": "\"000 \"",
        "explanation": "\"000 \" is the only good integer."
      },
      {
        "input": "num =  \"42352338 \"",
        "output": "\" \"",
        "explanation": "No substring of length 3 consists of only one unique digit. Therefore, there are no good integers."
      }
    ],
    "constraints": [
      "`3 <= num.length <= 1000`",
      "`num` only consists of digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2265",
    "slug": "count-nodes-equal-to-average-of-subtree",
    "title": "Count Nodes Equal to Average of Subtree",
    "difficulty": "Medium",
    "description": "Given the `root` of a binary tree, return _the number of nodes where the value of the node is equal to the **average** of the values in its **subtree**_.",
    "examples": [
      {
        "input": "root = \\[4,8,5,0,1,null,6\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "root = \\[1\\]",
        "output": "1",
        "explanation": "For the node with value 1: The average of its subtree is 1 / 1 = 1."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 1000]`.",
      "`0 <= Node.val <= 1000`"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "2266",
    "slug": "count-number-of-texts",
    "title": "Count Number of Texts",
    "difficulty": "Medium",
    "description": "Alice is texting Bob using her phone. The **mapping** of digits to letters is shown in the figure below. In order to **add** a letter, Alice has to **press** the key of the corresponding digit `i` times, where `i` is the position of the letter in the key. *  For example, to add the letter `'s'`, Alice has to press `'7'` four times. Similarly, to add the letter `'k'`, Alice has to press `'5'` twice. *  Note that the digits `'0'` and `'1'` do not map to any letters, so Alice **does not** use them. However, due to an error in transmission, Bob did not receive Alice's text message but received a **string of pressed keys** instead. *  For example, when Alice sent the message `\"bob \"`, Bob received the string `\"2266622 \"`. Given a string `pressedKeys` representing the string received by Bob, return _the **total number of possible text messages** Alice could have sent_. Since the answer may be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "pressedKeys =  \"22233 \"",
        "output": "8",
        "explanation": ""
      },
      {
        "input": "pressedKeys =  \"222222222222222222222222222222222222 \"",
        "output": "82876089",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= pressedKeys.length <= 105`",
      "`pressedKeys` only consists of digits from `'2'` - `'9'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2267",
    "slug": "check-if-there-is-a-valid-parentheses-string-path",
    "title": " Check if There Is a Valid Parentheses String Path",
    "difficulty": "Hard",
    "description": "A parentheses string is a **non-empty** string consisting only of `'('` and `')'`. It is **valid** if **any** of the following conditions is **true**: *  It is `()`. *  It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid parentheses strings. *  It can be written as `(A)`, where `A` is a valid parentheses string. You are given an `m x n` matrix of parentheses `grid`. A **valid parentheses string path** in the grid is a path satisfying **all** of the following conditions: *  The path starts from the upper left cell `(0, 0)`. *  The path ends at the bottom-right cell `(m - 1, n - 1)`. *  The path only ever moves **down** or **right**. *  The resulting parentheses string formed by the path is **valid**. Return `true` _if there exists a **valid parentheses string path** in the grid._ Otherwise, return `false`.",
    "examples": [
      {
        "input": "grid = \\[\\[ \"( \", \"( \", \"( \"\\],\\[ \") \", \"( \", \") \"\\],\\[ \"( \", \"( \", \") \"\\],\\[ \"( \", \"( \", \") \"\\]\\]",
        "output": "true",
        "explanation": "The above diagram shows two possible paths that form valid parentheses strings."
      },
      {
        "input": "grid = \\[\\[ \") \", \") \"\\],\\[ \"( \", \"( \"\\]\\]",
        "output": "false",
        "explanation": "The two possible paths form the parentheses strings  \"))( \" and  \")(( \". Since neither of them are valid parentheses strings, we return false."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 100`",
      "`grid[i][j]` is either `'('` or `')'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2268",
    "slug": "minimum-number-of-keypresses",
    "title": "Minimum Number of Keypresses",
    "difficulty": "Medium",
    "description": "You have a keypad with `9` buttons, numbered from `1` to `9`, each mapped to lowercase English letters. You can choose which characters each button is matched to as long as: *  All 26 lowercase English letters are mapped to. *  Each character is mapped to by **exactly** `1` button. *  Each button maps to **at most** `3` characters. To type the first character matched to a button, you press the button once. To type the second character, you press the button twice, and so on. Given a string `s`, return _the **minimum** number of keypresses needed to type_ `s` _using your keypad._ **Note** that the characters mapped to by each button, and the order they are mapped in cannot be changed.",
    "examples": [
      {
        "input": "s =  \"apple \"",
        "output": "5",
        "explanation": "One optimal way to setup your keypad is shown above."
      },
      {
        "input": "s =  \"abcdefghijkl \"",
        "output": "15",
        "explanation": "One optimal way to setup your keypad is shown above."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2269",
    "slug": "find-the-k-beauty-of-a-number",
    "title": "Find the K-Beauty of a Number",
    "difficulty": "Easy",
    "description": "The **k-beauty** of an integer `num` is defined as the number of **substrings** of `num` when it is read as a string that meet the following conditions: *  It has a length of `k`. *  It is a divisor of `num`. Given integers `num` and `k`, return _the k-beauty of_ `num`. Note: *  **Leading zeros** are allowed. *  `0` is not a divisor of any value. A **substring** is a contiguous sequence of characters in a string.",
    "examples": [
      {
        "input": "num = 240, k = 2",
        "output": "2",
        "explanation": "The following are the substrings of num of length k:"
      },
      {
        "input": "num = 430043, k = 2",
        "output": "2",
        "explanation": "The following are the substrings of num of length k:"
      }
    ],
    "constraints": [
      "`1 <= num <= 109`",
      "`1 <= k <= num.length` (taking `num` as a string)"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2270",
    "slug": "number-of-ways-to-split-array",
    "title": "Number of Ways to Split Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` of length `n`. `nums` contains a **valid split** at index `i` if the following are true: *  The sum of the first `i + 1` elements is **greater than or equal to** the sum of the last `n - i - 1` elements. *  There is **at least one** element to the right of `i`. That is, `0 <= i < n - 1`. Return _the number of **valid splits** in_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[10,4,-8,7\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,3,1,0\\]",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`-105 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2271",
    "slug": "maximum-white-tiles-covered-by-a-carpet",
    "title": "Maximum White Tiles Covered by a Carpet",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `tiles` where `tiles[i] = [li, ri]` represents that every tile `j` in the range `li <= j <= ri` is colored white. You are also given an integer `carpetLen`, the length of a single carpet that can be placed **anywhere**. Return _the **maximum** number of white tiles that can be covered by the carpet_.",
    "examples": [
      {
        "input": "tiles = \\[\\[1,5\\],\\[10,11\\],\\[12,18\\],\\[20,25\\],\\[30,32\\]\\], carpetLen = 10",
        "output": "9",
        "explanation": "Place the carpet starting on tile 10."
      },
      {
        "input": "tiles = \\[\\[10,11\\],\\[1,1\\]\\], carpetLen = 2",
        "output": "2",
        "explanation": "Place the carpet starting on tile 10."
      }
    ],
    "constraints": [
      "`1 <= tiles.length <= 5  104`",
      "`tiles[i].length == 2`",
      "`1 <= li <= ri <= 109`",
      "`1 <= carpetLen <= 109`",
      "The `tiles` are non-overlapping."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2272",
    "slug": "substring-with-largest-variance",
    "title": "Substring With Largest Variance",
    "difficulty": "Hard",
    "description": "The **variance** of a string is defined as the largest difference between the number of occurrences of **any** `2` characters present in the string. Note the two characters may or may not be the same. Given a string `s` consisting of lowercase English letters only, return _the **largest variance** possible among all **substrings** of_ `s`. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"aababbb \"",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "s =  \"abcde \"",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2273",
    "slug": "find-resultant-array-after-removing-anagrams",
    "title": "Find Resultant Array After Removing Anagrams",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** string array `words`, where `words[i]` consists of lowercase English letters. In one operation, select any index `i` such that `0 < i < words.length` and `words[i - 1]` and `words[i]` are **anagrams**, and **delete** `words[i]` from `words`. Keep performing this operation as long as you can select an index that satisfies the conditions. Return `words` _after performing all operations_. It can be shown that selecting the indices for each operation in **any** arbitrary order will lead to the same result. An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, `\"dacb \"` is an anagram of `\"abdc \"`.",
    "examples": [
      {
        "input": "words = \\[ \"abba \", \"baba \", \"bbaa \", \"cd \", \"cd \"\\]",
        "output": "\\[ \"abba \", \"cd \"\\]",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"a \", \"b \", \"c \", \"d \", \"e \"\\]",
        "output": "\\[ \"a \", \"b \", \"c \", \"d \", \"e \"\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 10`",
      "`words[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2274",
    "slug": "maximum-consecutive-floors-without-special-floors",
    "title": "Maximum Consecutive Floors Without Special Floors",
    "difficulty": "Medium",
    "description": "Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be **special floors**, used for relaxation only. You are given two integers `bottom` and `top`, which denote that Alice has rented all the floors from `bottom` to `top` (**inclusive**). You are also given the integer array `special`, where `special[i]` denotes a special floor that Alice has designated for relaxation. Return _the **maximum** number of consecutive floors without a special floor_.",
    "examples": [
      {
        "input": "bottom = 2, top = 9, special = \\[4,6\\]",
        "output": "3",
        "explanation": "The following are the ranges (inclusive) of consecutive floors without a special floor:"
      },
      {
        "input": "bottom = 6, top = 8, special = \\[7,6,8\\]",
        "output": "0",
        "explanation": "Every floor rented is a special floor, so we return 0."
      }
    ],
    "constraints": [
      "`1 <= special.length <= 105`",
      "`1 <= bottom <= special[i] <= top <= 109`",
      "All the values of `special` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2275",
    "slug": "largest-combination-with-bitwise-and-greater-than-zero",
    "title": "Largest Combination With Bitwise AND Greater Than Zero",
    "difficulty": "Medium",
    "description": "The **bitwise AND** of an array `nums` is the bitwise AND of all integers in `nums`. *  For example, for `nums = [1, 5, 3]`, the bitwise AND is equal to `1 & 5 & 3 = 1`. *  Also, for `nums = [7]`, the bitwise AND is `7`. You are given an array of positive integers `candidates`. Evaluate the **bitwise AND** of every **combination** of numbers of `candidates`. Each number in `candidates` may only be used **once** in each combination. Return _the size of the **largest** combination of_ `candidates` _with a bitwise AND **greater** than_ `0`.",
    "examples": [
      {
        "input": "candidates = \\[16,17,71,62,12,24,14\\]",
        "output": "4",
        "explanation": "The combination \\[16,17,62,24\\] has a bitwise AND of 16 & 17 & 62 & 24 = 16 > 0."
      },
      {
        "input": "candidates = \\[8,8\\]",
        "output": "2",
        "explanation": "The largest combination \\[8,8\\] has a bitwise AND of 8 & 8 = 8 > 0."
      }
    ],
    "constraints": [
      "`1 <= candidates.length <= 105`",
      "`1 <= candidates[i] <= 107`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2276",
    "slug": "count-integers-in-intervals",
    "title": "Count Integers in Intervals",
    "difficulty": "Hard",
    "description": "Given an **empty** set of intervals, implement a data structure that can: *  **Add** an interval to the set of intervals. *  **Count** the number of integers that are present in **at least one** interval. Implement the `CountIntervals` class: *  `CountIntervals()` Initializes the object with an empty set of intervals. *  `void add(int left, int right)` Adds the interval `[left, right]` to the set of intervals. *  `int count()` Returns the number of integers that are present in **at least one** interval. **Note** that an interval `[left, right]` denotes all the integers `x` where `left <= x <= right`.",
    "examples": [],
    "constraints": [
      "`1 <= left <= right <= 109`",
      "At most `105` calls in total will be made to `add` and `count`.",
      "At least one call will be made to `count`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2277",
    "slug": "closest-node-to-path-in-tree",
    "title": "Closest Node to Path in Tree",
    "difficulty": "Hard",
    "description": "You are given a positive integer `n` representing the number of nodes in a tree, numbered from `0` to `n - 1` (**inclusive**). You are also given a 2D integer array `edges` of length `n - 1`, where `edges[i] = [node1i, node2i]` denotes that there is a **bidirectional** edge connecting `node1i` and `node2i` in the tree. You are given a **0-indexed** integer array `query` of length `m` where `query[i] = [starti, endi, nodei]` means that for the `ith` query, you are tasked with finding the node on the path from `starti` to `endi` that is **closest** to `nodei`. Return _an integer array_ `answer` _of length_ `m`_, where_ `answer[i]` _is the answer to the_ `ith` _query_.",
    "examples": [
      {
        "input": "n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\],\\[1,4\\],\\[2,5\\],\\[2,6\\]\\], query = \\[\\[5,3,4\\],\\[5,3,6\\]\\]",
        "output": "\\[0,2\\]",
        "explanation": ""
      },
      {
        "input": "n = 3, edges = \\[\\[0,1\\],\\[1,2\\]\\], query = \\[\\[0,1,2\\]\\]",
        "output": "\\[1\\]",
        "explanation": ""
      },
      {
        "input": "n = 3, edges = \\[\\[0,1\\],\\[1,2\\]\\], query = \\[\\[0,0,0\\]\\]",
        "output": "\\[0\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= node1i, node2i <= n - 1`",
      "`node1i != node2i`",
      "`1 <= query.length <= 1000`",
      "`query[i].length == 3`",
      "`0 <= starti, endi, nodei <= n - 1`",
      "The graph is a tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2278",
    "slug": "percentage-of-letter-in-string",
    "title": "Percentage of Letter in String",
    "difficulty": "Easy",
    "description": "Given a string `s` and a character `letter`, return _the **percentage** of characters in_ `s` _that equal_ `letter` _**rounded down** to the nearest whole percent._",
    "examples": [
      {
        "input": "s =  \"foobar \", letter =  \"o \"",
        "output": "33",
        "explanation": ""
      },
      {
        "input": "s =  \"jjjj \", letter =  \"k \"",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`s` consists of lowercase English letters.",
      "`letter` is a lowercase English letter."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2279",
    "slug": "maximum-bags-with-full-capacity-of-rocks",
    "title": "Maximum Bags With Full Capacity of Rocks",
    "difficulty": "Medium",
    "description": "You have `n` bags numbered from `0` to `n - 1`. You are given two **0-indexed** integer arrays `capacity` and `rocks`. The `ith` bag can hold a maximum of `capacity[i]` rocks and currently contains `rocks[i]` rocks. You are also given an integer `additionalRocks`, the number of additional rocks you can place in **any** of the bags. Return _the **maximum** number of bags that could have full capacity after placing the additional rocks in some bags._",
    "examples": [
      {
        "input": "capacity = \\[2,3,4,5\\], rocks = \\[1,2,4,4\\], additionalRocks = 2",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "capacity = \\[10,2,2\\], rocks = \\[2,2,0\\], additionalRocks = 100",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == capacity.length == rocks.length`",
      "`1 <= n <= 5  104`",
      "`1 <= capacity[i] <= 109`",
      "`0 <= rocks[i] <= capacity[i]`",
      "`1 <= additionalRocks <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2280",
    "slug": "minimum-lines-to-represent-a-line-chart",
    "title": "Minimum Lines to Represent a Line Chart",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `stockPrices` where `stockPrices[i] = [dayi, pricei]` indicates the price of the stock on day `dayi` is `pricei`. A **line chart** is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below: Return _the **minimum number of lines** needed to represent the line chart_.",
    "examples": [
      {
        "input": "stockPrices = \\[\\[1,7\\],\\[2,6\\],\\[3,5\\],\\[4,4\\],\\[5,4\\],\\[6,3\\],\\[7,2\\],\\[8,1\\]\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "stockPrices = \\[\\[3,4\\],\\[1,2\\],\\[7,8\\],\\[2,3\\]\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= stockPrices.length <= 105`",
      "`stockPrices[i].length == 2`",
      "`1 <= dayi, pricei <= 109`",
      "All `dayi` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2281",
    "slug": "sum-of-total-strength-of-wizards",
    "title": "Sum of Total Strength of Wizards",
    "difficulty": "Hard",
    "description": "As the ruler of a kingdom, you have an army of wizards at your command. You are given a **0-indexed** integer array `strength`, where `strength[i]` denotes the strength of the `ith` wizard. For a **contiguous** group of wizards (i.e. the wizards' strengths form a **subarray** of `strength`), the **total strength** is defined as the **product** of the following two values: *  The strength of the **weakest** wizard in the group. *  The **total** of all the individual strengths of the wizards in the group. Return _the **sum** of the total strengths of **all** contiguous groups of wizards_. Since the answer may be very large, return it **modulo** `109 + 7`. A **subarray** is a contiguous **non-empty** sequence of elements within an array.",
    "examples": [
      {
        "input": "strength = \\[1,3,1,2\\]",
        "output": "44",
        "explanation": "The following are all the contiguous groups of wizards:"
      },
      {
        "input": "strength = \\[5,4,6\\]",
        "output": "213",
        "explanation": "The following are all the contiguous groups of wizards:"
      }
    ],
    "constraints": [
      "`1 <= strength.length <= 105`",
      "`1 <= strength[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2282",
    "slug": "number-of-people-that-can-be-seen-in-a-grid",
    "title": "Number of People That Can Be Seen in a Grid",
    "difficulty": "Medium",
    "description": "You are given an `m x n` **0-indexed** 2D array of positive integers `heights` where `heights[i][j]` is the height of the person standing at position `(i, j)`. A person standing at position `(row1, col1)` can see a person standing at position `(row2, col2)` if: *  The person at `(row2, col2)` is to the right **or** below the person at `(row1, col1)`. More formally, this means that either `row1 == row2` and `col1 < col2` **or** `row1 < row2` and `col1 == col2`. *  Everyone in between them is shorter than **both** of them. Return _an_ `m x n` _2D array of integers_ `answer` _where_ `answer[i][j]` _is the number of people that the person at position_ `(i, j)` _can see._",
    "examples": [
      {
        "input": "heights = \\[\\[3,1,4,2,5\\]\\]",
        "output": "\\[\\[2,1,2,1,0\\]\\]",
        "explanation": ""
      },
      {
        "input": "heights = \\[\\[5,1\\],\\[3,1\\],\\[4,1\\]\\]",
        "output": "\\[\\[3,1\\],\\[2,1\\],\\[1,0\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= heights.length <= 400`",
      "`1 <= heights[i].length <= 400`",
      "`1 <= heights[i][j] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2283",
    "slug": "check-if-number-has-equal-digit-count-and-digit-value",
    "title": "Check if Number Has Equal Digit Count and Digit Value",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** string `num` of length `n` consisting of digits. Return `true` _if for **every** index_ `i` _in the range_ `0 <= i < n`_, the digit_ `i` _occurs_ `num[i]` _times in_ `num`_, otherwise return_ `false`.",
    "examples": [
      {
        "input": "num =  \"1210 \"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "num =  \"030 \"",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == num.length`",
      "`1 <= n <= 10`",
      "`num` consists of digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2284",
    "slug": "sender-with-largest-word-count",
    "title": "Sender With Largest Word Count",
    "difficulty": "Medium",
    "description": "You have a chat log of `n` messages. You are given two string arrays `messages` and `senders` where `messages[i]` is a **message** sent by `senders[i]`. A **message** is list of **words** that are separated by a single space with no leading or trailing spaces. The **word count** of a sender is the total number of **words** sent by the sender. Note that a sender may send more than one message. Return _the sender with the **largest** word count_. If there is more than one sender with the largest word count, return _the one with the **lexicographically largest** name_.",
    "examples": [
      {
        "input": "messages = \\[ \"Hello userTwooo \", \"Hi userThree \", \"Wonderful day Alice \", \"Nice day userThree \"\\], senders = \\[ \"Alice \", \"userTwo \", \"userThree \", \"Alice \"\\]",
        "output": "\"Alice \"",
        "explanation": "Alice sends a total of 2 + 3 = 5 words."
      },
      {
        "input": "messages = \\[ \"How is leetcode for everyone \", \"Leetcode is useful for practice \"\\], senders = \\[ \"Bob \", \"Charlie \"\\]",
        "output": "\"Charlie \"",
        "explanation": "Bob sends a total of 5 words."
      }
    ],
    "constraints": [
      "`n == messages.length == senders.length`",
      "`1 <= n <= 104`",
      "`1 <= messages[i].length <= 100`",
      "`1 <= senders[i].length <= 10`",
      "`messages[i]` consists of uppercase and lowercase English letters and `' '`.",
      "All the words in `messages[i]` are separated by a single space.",
      "`messages[i]` does not have leading or trailing spaces.",
      "`senders[i]` consists of uppercase and lowercase English letters only."
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "2285",
    "slug": "maximum-total-importance-of-roads",
    "title": "Maximum Total Importance of Roads",
    "difficulty": "Medium",
    "description": "You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with an integer value from `1` to `n`, where each value can only be used **once**. The **importance** of a road is then defined as the **sum** of the values of the two cities it connects. Return _the **maximum total importance** of all roads possible after assigning the values optimally._",
    "examples": [
      {
        "input": "n = 5, roads = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[0,2\\],\\[1,3\\],\\[2,4\\]\\]",
        "output": "43",
        "explanation": "The figure above shows the country and the assigned values of \\[2,4,5,3,1\\]."
      },
      {
        "input": "n = 5, roads = \\[\\[0,3\\],\\[2,4\\],\\[1,3\\]\\]",
        "output": "20",
        "explanation": "The figure above shows the country and the assigned values of \\[4,3,2,5,1\\]."
      }
    ],
    "constraints": [
      "`2 <= n <= 5  104`",
      "`1 <= roads.length <= 5  104`",
      "`roads[i].length == 2`",
      "`0 <= ai, bi <= n - 1`",
      "`ai != bi`",
      "There are no duplicate roads."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2287",
    "slug": "rearrange-characters-to-make-target-string",
    "title": "Rearrange Characters to Make Target String",
    "difficulty": "Easy",
    "description": "You are given two **0-indexed** strings `s` and `target`. You can take some letters from `s` and rearrange them to form new strings. Return _the **maximum** number of copies of_ `target` _that can be formed by taking letters from_ `s` _and rearranging them._",
    "examples": [
      {
        "input": "s =  \"ilovecodingonleetcode \", target =  \"code \"",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "s =  \"abcba \", target =  \"abc \"",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "s =  \"abbaccaddaeea \", target =  \"aaaaa \"",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 100`",
      "`1 <= target.length <= 10`",
      "`s` and `target` consist of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2288",
    "slug": "apply-discount-to-prices",
    "title": "Apply Discount to Prices",
    "difficulty": "Medium",
    "description": "A **sentence** is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign `'$'`. A word represents a **price** if it is a sequence of digits preceded by a dollar sign. *  For example, `\"$100 \"`, `\"$23 \"`, and `\"$6 \"` represent prices while `\"100 \"`, `\"$ \"`, and `\"$1e5 \"` do not. You are given a string `sentence` representing a sentence and an integer `discount`. For each word representing a price, apply a discount of `discount%` on the price and **update** the word in the sentence. All updated prices should be represented with **exactly two** decimal places. Return _a string representing the modified sentence_. Note that all prices will contain **at most** `10` digits.",
    "examples": [
      {
        "input": "sentence =  \"there are $1 $2 and 5$ candies in the shop \", discount = 50",
        "output": "\"there are $0.50 $1.00 and 5$ candies in the shop \"",
        "explanation": ""
      },
      {
        "input": "sentence =  \"1 2 $3 4 $5 $6 7 8$ $9 $10$ \", discount = 100",
        "output": "\"1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$ \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= sentence.length <= 105`",
      "`sentence` consists of lowercase English letters, digits, `' '`, and `'$'`.",
      "`sentence` does not have leading or trailing spaces.",
      "All words in `sentence` are separated by a single space.",
      "All prices will be positive numbers without leading zeros.",
      "All prices will have at most `10` digits.",
      "`0 <= discount <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2289",
    "slug": "steps-to-make-array-non-decreasing",
    "title": "Steps to Make Array Non-decreasing",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. In one step, **remove** all elements `nums[i]` where `nums[i - 1] > nums[i]` for all `0 < i < nums.length`. Return _the number of steps performed until_ `nums` _becomes a **non-decreasing** array_.",
    "examples": [
      {
        "input": "nums = \\[5,3,4,4,7,3,6,11,8,5,11\\]",
        "output": "3",
        "explanation": "The following are the steps performed:"
      },
      {
        "input": "nums = \\[4,5,7,7,13\\]",
        "output": "0",
        "explanation": "nums is already a non-decreasing array. Therefore, we return 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2290",
    "slug": "minimum-obstacle-removal-to-reach-corner",
    "title": "Minimum Obstacle Removal to Reach Corner",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** 2D integer array `grid` of size `m x n`. Each cell has one of two values: *  `0` represents an **empty** cell, *  `1` represents an **obstacle** that may be removed. You can move up, down, left, or right from and to an empty cell. Return _the **minimum** number of **obstacles** to **remove** so you can move from the upper left corner_ `(0, 0)` _to the lower right corner_ `(m - 1, n - 1)`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1,1\\],\\[1,1,0\\],\\[1,1,0\\]\\]",
        "output": "2",
        "explanation": "We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2)."
      },
      {
        "input": "grid = \\[\\[0,1,0,0,0\\],\\[0,1,0,1,0\\],\\[0,0,0,1,0\\]\\]",
        "output": "0",
        "explanation": "We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 105`",
      "`2 <= m  n <= 105`",
      "`grid[i][j]` is either `0` or `1`.",
      "`grid[0][0] == grid[m - 1][n - 1] == 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2291",
    "slug": "maximum-profit-from-trading-stocks",
    "title": "Maximum Profit From Trading Stocks",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed** integer arrays of the same length `present` and `future` where `present[i]` is the current price of the `ith` stock and `future[i]` is the price of the `ith` stock a year in the future. You may buy each stock at most **once**. You are also given an integer `budget` representing the amount of money you currently have. Return _the maximum amount of profit you can make._",
    "examples": [
      {
        "input": "present = \\[5,4,6,2,3\\], future = \\[8,5,4,3,5\\], budget = 10",
        "output": "6",
        "explanation": "One possible way to maximize your profit is to:"
      },
      {
        "input": "present = \\[2,2,5\\], future = \\[3,4,10\\], budget = 6",
        "output": "5",
        "explanation": "The only possible way to maximize your profit is to:"
      },
      {
        "input": "present = \\[3,3,12\\], future = \\[0,3,15\\], budget = 10",
        "output": "0",
        "explanation": "One possible way to maximize your profit is to:"
      }
    ],
    "constraints": [
      "`n == present.length == future.length`",
      "`1 <= n <= 1000`",
      "`0 <= present[i], future[i] <= 100`",
      "`0 <= budget <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2293",
    "slug": "min-max-game",
    "title": "Min Max Game",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums` whose length is a power of `2`. Apply the following algorithm on `nums`: 1. Let `n` be the length of `nums`. If `n == 1`, **end** the process. Otherwise, **create** a new **0-indexed** integer array `newNums` of length `n / 2`. 2. For every **even** index `i` where `0 <= i < n / 2`, **assign** the value of `newNums[i]` as `min(nums[2 * i], nums[2 * i + 1])`. 3. For every **odd** index `i` where `0 <= i < n / 2`, **assign** the value of `newNums[i]` as `max(nums[2 * i], nums[2 * i + 1])`. 4. **Replace** the array `nums` with `newNums`. 5. **Repeat** the entire process starting from step 1. Return _the last number that remains in_ `nums` _after applying the algorithm._",
    "examples": [
      {
        "input": "nums = \\[1,3,5,2,4,8,2,2\\]",
        "output": "1",
        "explanation": "The following arrays are the results of applying the algorithm repeatedly."
      },
      {
        "input": "nums = \\[3\\]",
        "output": "3",
        "explanation": "3 is already the last remaining number, so we return 3."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1024`",
      "`1 <= nums[i] <= 109`",
      "`nums.length` is a power of `2`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2294",
    "slug": "partition-array-such-that-maximum-difference-is-k",
    "title": "Partition Array Such That Maximum Difference Is K",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an integer `k`. You may partition `nums` into one or more **subsequences** such that each element in `nums` appears in **exactly** one of the subsequences. Return _the **minimum** number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is **at most**_ `k`_._ A **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "nums = \\[3,6,1,2,5\\], k = 2",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3\\], k = 1",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,2,4,5\\], k = 0",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 105`",
      "`0 <= k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2295",
    "slug": "replace-elements-in-an-array",
    "title": "Replace Elements in an Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array `nums` that consists of `n` **distinct** positive integers. Apply `m` operations to this array, where in the `ith` operation you replace the number `operations[i][0]` with `operations[i][1]`. It is guaranteed that in the `ith` operation: *  `operations[i][0]` **exists** in `nums`. *  `operations[i][1]` does **not** exist in `nums`. Return _the array obtained after applying all the operations_.",
    "examples": [
      {
        "input": "nums = \\[1,2,4,6\\], operations = \\[\\[1,3\\],\\[4,7\\],\\[6,1\\]\\]",
        "output": "\\[3,2,7,1\\]",
        "explanation": "We perform the following operations on nums:"
      },
      {
        "input": "nums = \\[1,2\\], operations = \\[\\[1,3\\],\\[2,1\\],\\[3,2\\]\\]",
        "output": "\\[2,1\\]",
        "explanation": "We perform the following operations to nums:"
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`m == operations.length`",
      "`1 <= n, m <= 105`",
      "All the values of `nums` are distinct.",
      "`operations[i].length == 2`",
      "`1 <= nums[i], operations[i][0], operations[i][1] <= 106`",
      "`operations[i][0]` will exist in `nums` when applying the `ith` operation.",
      "`operations[i][1]` will not exist in `nums` when applying the `ith` operation."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2296",
    "slug": "design-a-text-editor",
    "title": "Design a Text Editor",
    "difficulty": "Hard",
    "description": "Design a text editor with a cursor that can do the following: *  **Add** text to where the cursor is. *  **Delete** text from where the cursor is (simulating the backspace key). *  **Move** the cursor either left or right. When deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that `0 <= cursor.position <= currentText.length` always holds. Implement the `TextEditor` class: *  `TextEditor()` Initializes the object with empty text. *  `void addText(string text)` Appends `text` to where the cursor is. The cursor ends to the right of `text`. *  `int deleteText(int k)` Deletes `k` characters to the left of the cursor. Returns the number of characters actually deleted. *  `string cursorLeft(int k)` Moves the cursor to the left `k` times. Returns the last `min(10, len)` characters to the left of the cursor, where `len` is the number of characters to the left of the cursor. *  `string cursorRight(int k)` Moves the cursor to the right `k` times. Returns the last `min(10, len)` characters to the left of the cursor, where `len` is the number of characters to the left of the cursor.",
    "examples": [],
    "constraints": [
      "`1 <= text.length, k <= 40`",
      "`text` consists of lowercase English letters.",
      "At most `2  104` calls in total will be made to `addText`, `deleteText`, `cursorLeft` and `cursorRight`."
    ],
    "note": null,
    "follow_up": "Could you find a solution with time complexity of `O(k)` per call?"
  },
  {
    "id": "2297",
    "slug": "jump-game-viii",
    "title": "Jump Game VIII",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` of length `n`. You are initially standing at index `0`. You can jump from index `i` to index `j` where `i < j` if: *  `nums[i] <= nums[j]` and `nums[k] < nums[i]` for all indexes `k` in the range `i < k < j`, or *  `nums[i] > nums[j]` and `nums[k] >= nums[i]` for all indexes `k` in the range `i < k < j`. You are also given an integer array `costs` of length `n` where `costs[i]` denotes the cost of jumping **to** index `i`. Return _the **minimum** cost to jump to the index_ `n - 1`.",
    "examples": [
      {
        "input": "nums = \\[3,2,4,4,1\\], costs = \\[3,7,6,4,2\\]",
        "output": "8",
        "explanation": "You start at index 0."
      },
      {
        "input": "nums = \\[0,1,2\\], costs = \\[1,1,1\\]",
        "output": "2",
        "explanation": "Start at index 0."
      }
    ],
    "constraints": [
      "`n == nums.length == costs.length`",
      "`1 <= n <= 105`",
      "`0 <= nums[i], costs[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2299",
    "slug": "strong-password-checker-ii",
    "title": "Strong Password Checker II",
    "difficulty": "Easy",
    "description": "A password is said to be **strong** if it satisfies all the following criteria: *  It has at least `8` characters. *  It contains at least **one lowercase** letter. *  It contains at least **one uppercase** letter. *  It contains at least **one digit**. *  It contains at least **one special character**. The special characters are the characters in the following string: `\"!@#$%^&*()-+ \"`. *  It does **not** contain `2` of the same character in adjacent positions (i.e., `\"aab \"` violates this condition, but `\"aba \"` does not). Given a string `password`, return `true` _if it is a **strong** password_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "password =  \"IloveLe3tcode! \"",
        "output": "true",
        "explanation": "The password meets all the requirements. Therefore, we return true."
      },
      {
        "input": "password =  \"Me+You--IsMyDream \"",
        "output": "false",
        "explanation": "The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false."
      },
      {
        "input": "password =  \"1aB! \"",
        "output": "false",
        "explanation": "The password does not meet the length requirement. Therefore, we return false."
      }
    ],
    "constraints": [
      "`1 <= password.length <= 100`",
      "`password` consists of letters, digits, and special characters: `\"!@#$%^&()-+ \"`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2300",
    "slug": "successful-pairs-of-spells-and-potions",
    "title": "Successful Pairs of Spells and Potions",
    "difficulty": "Medium",
    "description": "You are given two positive integer arrays `spells` and `potions`, of length `n` and `m` respectively, where `spells[i]` represents the strength of the `ith` spell and `potions[j]` represents the strength of the `jth` potion. You are also given an integer `success`. A spell and potion pair is considered **successful** if the **product** of their strengths is **at least** `success`. Return _an integer array_ `pairs` _of length_ `n` _where_ `pairs[i]` _is the number of **potions** that will form a successful pair with the_ `ith` _spell._",
    "examples": [
      {
        "input": "spells = \\[5,1,3\\], potions = \\[1,2,3,4,5\\], success = 7",
        "output": "\\[4,0,3\\]",
        "explanation": ""
      },
      {
        "input": "spells = \\[3,1,2\\], potions = \\[8,5,8\\], success = 16",
        "output": "\\[2,0,2\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == spells.length`",
      "`m == potions.length`",
      "`1 <= n, m <= 105`",
      "`1 <= spells[i], potions[i] <= 105`",
      "`1 <= success <= 1010`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2301",
    "slug": "match-substring-after-replacement",
    "title": "Match Substring After Replacement",
    "difficulty": "Hard",
    "description": "You are given two strings `s` and `sub`. You are also given a 2D character array `mappings` where `mappings[i] = [oldi, newi]` indicates that you may perform the following operation **any** number of times: *  **Replace** a character `oldi` of `sub` with `newi`. Each character in `sub` **cannot** be replaced more than once. Return `true` _if it is possible to make_ `sub` _a substring of_ `s` _by replacing zero or more characters according to_ `mappings`. Otherwise, return `false`. A **substring** is a contiguous non-empty sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"fool3e7bar \", sub =  \"leet \", mappings = \\[\\[ \"e \", \"3 \"\\],\\[ \"t \", \"7 \"\\],\\[ \"t \", \"8 \"\\]\\]",
        "output": "true",
        "explanation": "Replace the first 'e' in sub with '3' and 't' in sub with '7'."
      },
      {
        "input": "s =  \"fooleetbar \", sub =  \"f00l \", mappings = \\[\\[ \"o \", \"0 \"\\]\\]",
        "output": "false",
        "explanation": "The string  \"f00l \" is not a substring of s and no replacements can be made."
      },
      {
        "input": "s =  \"Fool33tbaR \", sub =  \"leetd \", mappings = \\[\\[ \"e \", \"3 \"\\],\\[ \"t \", \"7 \"\\],\\[ \"t \", \"8 \"\\],\\[ \"d \", \"b \"\\],\\[ \"p \", \"b \"\\]\\]",
        "output": "true",
        "explanation": "Replace the first and second 'e' in sub with '3' and 'd' in sub with 'b'."
      }
    ],
    "constraints": [
      "`1 <= sub.length <= s.length <= 5000`",
      "`0 <= mappings.length <= 1000`",
      "`mappings[i].length == 2`",
      "`oldi != newi`",
      "`s` and `sub` consist of uppercase and lowercase English letters and digits.",
      "`oldi` and `newi` are either uppercase or lowercase English letters or digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2302",
    "slug": "count-subarrays-with-score-less-than-k",
    "title": "Count Subarrays With Score Less Than K",
    "difficulty": "Hard",
    "description": "The **score** of an array is defined as the **product** of its sum and its length. *  For example, the score of `[1, 2, 3, 4, 5]` is `(1 + 2 + 3 + 4 + 5) * 5 = 75`. Given a positive integer array `nums` and an integer `k`, return _the **number of non-empty subarrays** of_ `nums` _whose score is **strictly less** than_ `k`. A **subarray** is a contiguous sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[2,1,4,3,5\\], k = 10",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,1,1\\], k = 5",
        "output": "5",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`",
      "`1 <= k <= 1015`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2303",
    "slug": "calculate-amount-paid-in-taxes",
    "title": "Calculate Amount Paid in Taxes",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** 2D integer array `brackets` where `brackets[i] = [upperi, percenti]` means that the `ith` tax bracket has an upper bound of `upperi` and is taxed at a rate of `percenti`. The brackets are **sorted** by upper bound (i.e. `upperi-1 < upperi` for `0 < i < brackets.length`). Tax is calculated as follows: *  The first `upper0` dollars earned are taxed at a rate of `percent0`. *  The next `upper1 - upper0` dollars earned are taxed at a rate of `percent1`. *  The next `upper2 - upper1` dollars earned are taxed at a rate of `percent2`. *  And so on. You are given an integer `income` representing the amount of money you earned. Return _the amount of money that you have to pay in taxes._ Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      {
        "input": "brackets = \\[\\[3,50\\],\\[7,10\\],\\[12,25\\]\\], income = 10",
        "output": "2.65000",
        "explanation": ""
      },
      {
        "input": "brackets = \\[\\[1,0\\],\\[4,25\\],\\[5,50\\]\\], income = 2",
        "output": "0.25000",
        "explanation": ""
      },
      {
        "input": "brackets = \\[\\[2,50\\]\\], income = 0",
        "output": "0.00000",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= brackets.length <= 100`",
      "`1 <= upperi <= 1000`",
      "`0 <= percenti <= 100`",
      "`0 <= income <= 1000`",
      "`upperi` is sorted in ascending order.",
      "All the values of `upperi` are unique.",
      "The upper bound of the last tax bracket is greater than or equal to `income`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2304",
    "slug": "minimum-path-cost-in-a-grid",
    "title": "Minimum Path Cost in a Grid",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** `m x n` integer matrix `grid` consisting of **distinct** integers from `0` to `m * n - 1`. You can move in this matrix from a cell to any other cell in the **next** row. That is, if you are in cell `(x, y)` such that `x < m - 1`, you can move to any of the cells `(x + 1, 0)`, `(x + 1, 1)`, ..., `(x + 1, n - 1)`. **Note** that it is not possible to move from cells in the last row. Each possible move has a cost given by a **0-indexed** 2D array `moveCost` of size `(m * n) x n`, where `moveCost[i][j]` is the cost of moving from a cell with value `i` to a cell in column `j` of the next row. The cost of moving from cells in the last row of `grid` can be ignored. The cost of a path in `grid` is the **sum** of all values of cells visited plus the **sum** of costs of all the moves made. Return _the **minimum** cost of a path that starts from any cell in the **first** row and ends at any cell in the **last** row._",
    "examples": [
      {
        "input": "grid = \\[\\[5,3\\],\\[4,0\\],\\[2,1\\]\\], moveCost = \\[\\[9,8\\],\\[1,5\\],\\[10,12\\],\\[18,6\\],\\[2,4\\],\\[14,3\\]\\]",
        "output": "17",
        "explanation": "The path with the minimum possible cost is the path 5 -> 0 -> 1."
      },
      {
        "input": "grid = \\[\\[5,1,2\\],\\[4,0,3\\]\\], moveCost = \\[\\[12,10,15\\],\\[20,23,8\\],\\[21,7,1\\],\\[8,1,13\\],\\[9,10,25\\],\\[5,3,2\\]\\]",
        "output": "6",
        "explanation": "The path with the minimum possible cost is the path 2 -> 3."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`2 <= m, n <= 50`",
      "`grid` consists of distinct integers from `0` to `m  n - 1`.",
      "`moveCost.length == m  n`",
      "`moveCost[i].length == n`",
      "`1 <= moveCost[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2305",
    "slug": "fair-distribution-of-cookies",
    "title": "Fair Distribution of Cookies",
    "difficulty": "Medium",
    "description": "You are given an integer array `cookies`, where `cookies[i]` denotes the number of cookies in the `ith` bag. You are also given an integer `k` that denotes the number of children to distribute **all** the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up. The **unfairness** of a distribution is defined as the **maximum** **total** cookies obtained by a single child in the distribution. Return _the **minimum** unfairness of all distributions_.",
    "examples": [
      {
        "input": "cookies = \\[8,15,10,20,8\\], k = 2",
        "output": "31",
        "explanation": "One optimal distribution is \\[8,15,8\\] and \\[10,20\\]"
      },
      {
        "input": "cookies = \\[6,1,3,2,2,4,1,2\\], k = 3",
        "output": "7",
        "explanation": "One optimal distribution is \\[6,1\\], \\[3,2,2\\], and \\[4,1,2\\]"
      }
    ],
    "constraints": [
      "`2 <= cookies.length <= 8`",
      "`1 <= cookies[i] <= 105`",
      "`2 <= k <= cookies.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2306",
    "slug": "naming-a-company",
    "title": "Naming a Company",
    "difficulty": "Hard",
    "description": "You are given an array of strings `ideas` that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows: 1. Choose 2 **distinct** names from `ideas`, call them `ideaA` and `ideaB`. 2. Swap the first letters of `ideaA` and `ideaB` with each other. 3. If **both** of the new names are not found in the original `ideas`, then the name `ideaA ideaB` (the **concatenation** of `ideaA` and `ideaB`, separated by a space) is a valid company name. 4. Otherwise, it is not a valid name. Return _the number of **distinct** valid names for the company_.",
    "examples": [
      {
        "input": "ideas = \\[ \"coffee \", \"donuts \", \"time \", \"toffee \"\\]",
        "output": "6",
        "explanation": "The following selections are valid:"
      },
      {
        "input": "ideas = \\[ \"lack \", \"back \"\\]",
        "output": "0",
        "explanation": "There are no valid selections. Therefore, 0 is returned."
      }
    ],
    "constraints": [
      "`2 <= ideas.length <= 5  104`",
      "`1 <= ideas[i].length <= 10`",
      "`ideas[i]` consists of lowercase English letters.",
      "All the strings in `ideas` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2307",
    "slug": "check-for-contradictions-in-equations",
    "title": "Check for Contradictions in Equations",
    "difficulty": "Hard",
    "description": "You are given a 2D array of strings `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` means that `Ai / Bi = values[i]`. Determine if there exists a contradiction in the equations. Return `true` _if there is a contradiction, or_ `false` _otherwise_. **Note**: *  When checking if two numbers are equal, check that their **absolute difference** is less than `10-5`. *  The testcases are generated such that there are no cases targeting precision, i.e. using `double` is enough to solve the problem.",
    "examples": [
      {
        "input": "equations = \\[\\[ \"a \", \"b \"\\],\\[ \"b \", \"c \"\\],\\[ \"a \", \"c \"\\]\\], values = \\[3,0.5,1.5\\]",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "equations = \\[\\[ \"le \", \"et \"\\],\\[ \"le \", \"code \"\\],\\[ \"code \", \"et \"\\]\\], values = \\[2,5,0.5\\]",
        "output": "true",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= equations.length <= 100`",
      "`equations[i].length == 2`",
      "`1 <= Ai.length, Bi.length <= 5`",
      "`Ai`, `Bi` consist of lowercase English letters.",
      "`equations.length == values.length`",
      "`0.0 < values[i] <= 10.0`",
      "`values[i]` has a maximum of 2 decimal places."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2309",
    "slug": "greatest-english-letter-in-upper-and-lower-case",
    "title": "Greatest English Letter in Upper and Lower Case",
    "difficulty": "Easy",
    "description": "Given a string of English letters `s`, return _the **greatest** English letter which occurs as **both** a lowercase and uppercase letter in_ `s`. The returned letter should be in **uppercase**. If no such letter exists, return _an empty string_. An English letter `b` is **greater** than another letter `a` if `b` appears **after** `a` in the English alphabet.",
    "examples": [
      {
        "input": "s =  \"l**Ee**TcOd**E** \"",
        "output": "\"E \"",
        "explanation": ""
      },
      {
        "input": "s =  \"a**rR**AzFif \"",
        "output": "\"R \"",
        "explanation": ""
      },
      {
        "input": "s =  \"AbCdEfGhIjK \"",
        "output": "\" \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of lowercase and uppercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2310",
    "slug": "sum-of-numbers-with-units-digit-k",
    "title": "Sum of Numbers With Units Digit K",
    "difficulty": "Medium",
    "description": "Given two integers `num` and `k`, consider a set of positive integers with the following properties: *  The units digit of each integer is `k`. *  The sum of the integers is `num`. Return _the **minimum** possible size of such a set, or_ `-1` _if no such set exists._ Note: *  The set can contain multiple instances of the same integer, and the sum of an empty set is considered `0`. *  The **units digit** of a number is the rightmost digit of the number.",
    "examples": [
      {
        "input": "num = 58, k = 9",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "num = 37, k = 2",
        "output": "-1",
        "explanation": "It is not possible to obtain a sum of 37 using only integers that have a units digit of 2."
      },
      {
        "input": "num = 0, k = 7",
        "output": "0",
        "explanation": "The sum of an empty set is considered 0."
      }
    ],
    "constraints": [
      "`0 <= num <= 3000`",
      "`0 <= k <= 9`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2311",
    "slug": "longest-binary-subsequence-less-than-or-equal-to-k",
    "title": "Longest Binary Subsequence Less Than or Equal to K",
    "difficulty": "Medium",
    "description": "You are given a binary string `s` and a positive integer `k`. Return _the length of the **longest** subsequence of_ `s` _that makes up a **binary** number less than or equal to_ `k`. Note: *  The subsequence can contain **leading zeroes**. *  The empty string is considered to be equal to `0`. *  A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.",
    "examples": [
      {
        "input": "s =  \"1001010 \", k = 5",
        "output": "5",
        "explanation": "The longest subsequence of s that makes up a binary number less than or equal to 5 is  \"00010 \", as this number is equal to 2 in decimal."
      },
      {
        "input": "s =  \"00101001 \", k = 1",
        "output": "6",
        "explanation": "\"000001 \" is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s[i]` is either `'0'` or `'1'`.",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2312",
    "slug": "selling-pieces-of-wood",
    "title": "Selling Pieces of Wood",
    "difficulty": "Hard",
    "description": "You are given two integers `m` and `n` that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array `prices`, where `prices[i] = [hi, wi, pricei]` indicates you can sell a rectangular piece of wood of height `hi` and width `wi` for `pricei` dollars. To cut a piece of wood, you must make a vertical or horizontal cut across the **entire** height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to `prices`. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you **cannot** rotate a piece to swap its height and width. Return _the **maximum** money you can earn after cutting an_ `m x n` _piece of wood_. Note that you can cut the piece of wood as many times as you want.",
    "examples": [
      {
        "input": "m = 3, n = 5, prices = \\[\\[1,4,2\\],\\[2,2,7\\],\\[2,1,3\\]\\]",
        "output": "19",
        "explanation": "The diagram above shows a possible scenario. It consists of:"
      },
      {
        "input": "m = 4, n = 6, prices = \\[\\[3,2,10\\],\\[1,4,2\\],\\[4,1,3\\]\\]",
        "output": "32",
        "explanation": "The diagram above shows a possible scenario. It consists of:"
      }
    ],
    "constraints": [
      "`1 <= m, n <= 200`",
      "`1 <= prices.length <= 2  104`",
      "`prices[i].length == 3`",
      "`1 <= hi <= m`",
      "`1 <= wi <= n`",
      "`1 <= pricei <= 106`",
      "All the shapes of wood `(hi, wi)` are pairwise distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2313",
    "slug": "minimum-flips-in-binary-tree-to-get-result",
    "title": "Minimum Flips in Binary Tree to Get Result",
    "difficulty": "Hard",
    "description": "You are given the `root` of a **binary tree** with the following properties: *  **Leaf nodes** have either the value `0` or `1`, representing `false` and `true` respectively. *  **Non-leaf nodes** have either the value `2`, `3`, `4`, or `5`, representing the boolean operations `OR`, `AND`, `XOR`, and `NOT`, respectively. You are also given a boolean `result`, which is the desired result of the **evaluation** of the `root` node. The evaluation of a node is as follows: *  If the node is a leaf node, the evaluation is the **value** of the node, i.e. `true` or `false`. *  Otherwise, **evaluate** the node's children and **apply** the boolean operation of its value with the children's evaluations. In one operation, you can **flip** a leaf node, which causes a `false` node to become `true`, and a `true` node to become `false`. Return _the minimum number of operations that need to be performed such that the evaluation of_ `root` _yields_ `result`. It can be shown that there is always a way to achieve `result`. A **leaf node** is a node that has zero children. Note: `NOT` nodes have either a left child or a right child, but other non-leaf nodes have both a left child and a right child.",
    "examples": [
      {
        "input": "root = \\[3,5,4,2,null,1,1,1,0\\], result = true",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "root = \\[0\\], result = false",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 105]`.",
      "`0 <= Node.val <= 5`",
      "`OR`, `AND`, and `XOR` nodes have `2` children.",
      "`NOT` nodes have `1` child.",
      "Leaf nodes have a value of `0` or `1`.",
      "Non-leaf nodes have a value of `2`, `3`, `4`, or `5`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2315",
    "slug": "count-asterisks",
    "title": "Count Asterisks",
    "difficulty": "Easy",
    "description": "You are given a string `s`, where every **two** consecutive vertical bars `'|'` are grouped into a **pair**. In other words, the 1st and 2nd `'|'` make a pair, the 3rd and 4th `'|'` make a pair, and so forth. Return _the number of_ `'*'` _in_ `s`_, **excluding** the_ `'*'` _between each pair of_ `'|'`. **Note** that each `'|'` will belong to **exactly** one pair.",
    "examples": [
      {
        "input": "s =  \"l|\\*e\\*et|c\\*\\*o|\\*de| \"",
        "output": "2",
        "explanation": "The considered characters are underlined:  \"l|\\*e\\*et|c\\*\\*o|\\*de| \"."
      },
      {
        "input": "s =  \"iamprogrammer \"",
        "output": "0",
        "explanation": "In this example, there are no asterisks in s. Therefore, we return 0."
      },
      {
        "input": "s =  \"yo|uar|e\\*\\*|b|e\\*\\*\\*au|tifu|l \"",
        "output": "5",
        "explanation": "The considered characters are underlined:  \"yo|uar|e\\*\\*|b|e\\*\\*\\*au|tifu|l \". There are 5 asterisks considered. Therefore, we return 5."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s` consists of lowercase English letters, vertical bars `'|'`, and asterisks `''`.",
      "`s` contains an even number of vertical bars `'|'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2316",
    "slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
    "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
    "difficulty": "Medium",
    "description": "You are given an integer `n`. There is an **undirected** graph with `n` nodes, numbered from `0` to `n - 1`. You are given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`. Return _the **number of pairs** of different nodes that are **unreachable** from each other_.",
    "examples": [
      {
        "input": "n = 3, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,2\\]\\]",
        "output": "0",
        "explanation": "There are no pairs of nodes that are unreachable from each other. Therefore, we return 0."
      },
      {
        "input": "n = 7, edges = \\[\\[0,2\\],\\[0,5\\],\\[2,4\\],\\[1,6\\],\\[5,4\\]\\]",
        "output": "14",
        "explanation": "There are 14 pairs of nodes that are unreachable from each other:"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`0 <= edges.length <= 2  105`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "There are no repeated edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2317",
    "slug": "maximum-xor-after-operations",
    "title": "Maximum XOR After Operations ",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. In one operation, select **any** non-negative integer `x` and an index `i`, then **update** `nums[i]` to be equal to `nums[i] AND (nums[i] XOR x)`. Note that `AND` is the bitwise AND operation and `XOR` is the bitwise XOR operation. Return _the **maximum** possible bitwise XOR of all elements of_ `nums` _after applying the operation **any number** of times_.",
    "examples": [
      {
        "input": "nums = \\[3,2,4,6\\]",
        "output": "7",
        "explanation": "Apply the operation with x = 4 and i = 3, num\\[3\\] = 6 AND (6 XOR 4) = 6 AND 2 = 2."
      },
      {
        "input": "nums = \\[1,2,3,9,2\\]",
        "output": "11",
        "explanation": "Apply the operation zero times."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2318",
    "slug": "number-of-distinct-roll-sequences",
    "title": "Number of Distinct Roll Sequences",
    "difficulty": "Hard",
    "description": "You are given an integer `n`. You roll a fair 6-sided dice `n` times. Determine the total number of **distinct** sequences of rolls possible such that the following conditions are satisfied: 1. The **greatest common divisor** of any **adjacent** values in the sequence is equal to `1`. 2. There is **at least** a gap of `2` rolls between **equal** valued rolls. More formally, if the value of the `ith` roll is **equal** to the value of the `jth` roll, then `abs(i - j) > 2`. Return _the **total number** of distinct sequences possible_. Since the answer may be very large, return it **modulo** `109 + 7`. Two sequences are considered distinct if at least one element is different.",
    "examples": [
      {
        "input": "n = 4",
        "output": "184",
        "explanation": "Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc."
      },
      {
        "input": "n = 2",
        "output": "22",
        "explanation": "Some of the possible sequences are (1, 2), (2, 1), (3, 2)."
      }
    ],
    "constraints": [
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2319",
    "slug": "check-if-matrix-is-x-matrix",
    "title": "Check if Matrix Is X-Matrix",
    "difficulty": "Easy",
    "description": "A square matrix is said to be an **X-Matrix** if **both** of the following conditions hold: 1. All the elements in the diagonals of the matrix are **non-zero**. 2. All other elements are 0. Given a 2D integer array `grid` of size `n x n` representing a square matrix, return `true` _if_ `grid` _is an X-Matrix_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "grid = \\[\\[2,0,0,1\\],\\[0,3,1,0\\],\\[0,5,2,0\\],\\[4,0,0,2\\]\\]",
        "output": "true",
        "explanation": "Refer to the diagram above."
      },
      {
        "input": "grid = \\[\\[5,7,0\\],\\[0,3,1\\],\\[0,5,0\\]\\]",
        "output": "false",
        "explanation": "Refer to the diagram above."
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`3 <= n <= 100`",
      "`0 <= grid[i][j] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2320",
    "slug": "count-number-of-ways-to-place-houses",
    "title": "Count Number of Ways to Place Houses",
    "difficulty": "Medium",
    "description": "There is a street with `n * 2` **plots**, where there are `n` plots on each side of the street. The plots on each side are numbered from `1` to `n`. On each plot, a house can be placed. Return _the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street_. Since the answer may be very large, return it **modulo** `109 + 7`. Note that if a house is placed on the `ith` plot on one side of the street, a house can also be placed on the `ith` plot on the other side of the street.",
    "examples": [
      {
        "input": "n = 1",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "n = 2",
        "output": "9",
        "explanation": "The 9 possible arrangements are shown in the diagram above."
      }
    ],
    "constraints": [
      "`1 <= n <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2321",
    "slug": "maximum-score-of-spliced-array",
    "title": "Maximum Score Of Spliced Array",
    "difficulty": "Hard",
    "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, both of length `n`. You can choose two integers `left` and `right` where `0 <= left <= right < n` and **swap** the subarray `nums1[left...right]` with the subarray `nums2[left...right]`. *  For example, if `nums1 = [1,2,3,4,5]` and `nums2 = [11,12,13,14,15]` and you choose `left = 1` and `right = 2`, `nums1` becomes `[1,**12,13**,4,5]` and `nums2` becomes `[11,**2,3**,14,15]`. You may choose to apply the mentioned operation **once** or not do anything. The **score** of the arrays is the **maximum** of `sum(nums1)` and `sum(nums2)`, where `sum(arr)` is the sum of all the elements in the array `arr`. Return _the **maximum possible score**_. A **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).",
    "examples": [
      {
        "input": "nums1 = \\[60,60,60\\], nums2 = \\[10,90,10\\]",
        "output": "210",
        "explanation": "Choosing left = 1 and right = 1, we have nums1 = \\[60,**90**,60\\] and nums2 = \\[10,**60**,10\\]."
      },
      {
        "input": "nums1 = \\[20,40,20,70,30\\], nums2 = \\[50,20,50,40,20\\]",
        "output": "220",
        "explanation": "Choosing left = 3, right = 4, we have nums1 = \\[20,40,20,**40,20**\\] and nums2 = \\[50,20,50,**70,30**\\]."
      },
      {
        "input": "nums1 = \\[7,11,13\\], nums2 = \\[1,1,1\\]",
        "output": "31",
        "explanation": "We choose not to swap any subarray."
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`1 <= n <= 105`",
      "`1 <= nums1[i], nums2[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2322",
    "slug": "minimum-score-after-removals-on-a-tree",
    "title": "Minimum Score After Removals on a Tree",
    "difficulty": "Hard",
    "description": "There is an undirected connected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges. You are given a **0-indexed** integer array `nums` of length `n` where `nums[i]` represents the value of the `ith` node. You are also given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. Remove two **distinct** edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined: 1. Get the XOR of all the values of the nodes for **each** of the three components respectively. 2. The **difference** between the **largest** XOR value and the **smallest** XOR value is the **score** of the pair. *  For example, say the three components have the node values: `[4,5,7]`, `[1,9]`, and `[3,3,3]`. The three XOR values are `4 ^ 5 ^ 7 = **6**`, `1 ^ 9 = **8**`, and `3 ^ 3 ^ 3 = **3**`. The largest XOR value is `8` and the smallest XOR value is `3`. The score is then `8 - 3 = 5`. Return _the **minimum** score of any possible pair of edge removals on the given tree_.",
    "examples": [
      {
        "input": "nums = \\[1,5,5,4,11\\], edges = \\[\\[0,1\\],\\[1,2\\],\\[1,3\\],\\[3,4\\]\\]",
        "output": "9",
        "explanation": "The diagram above shows a way to make a pair of removals."
      },
      {
        "input": "nums = \\[5,5,2,4,4,2\\], edges = \\[\\[0,1\\],\\[1,2\\],\\[5,2\\],\\[4,3\\],\\[1,3\\]\\]",
        "output": "0",
        "explanation": "The diagram above shows a way to make a pair of removals."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`3 <= n <= 1000`",
      "`1 <= nums[i] <= 108`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "`edges` represents a valid tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2323",
    "slug": "find-minimum-time-to-finish-all-jobs-ii",
    "title": "Find Minimum Time to Finish All Jobs II",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed** integer arrays `jobs` and `workers` of **equal** length, where `jobs[i]` is the amount of time needed to complete the `ith` job, and `workers[j]` is the amount of time the `jth` worker can work each day. Each job should be assigned to **exactly** one worker, such that each worker completes **exactly** one job. Return _the **minimum** number of days needed to complete all the jobs after assignment._",
    "examples": [
      {
        "input": "jobs = \\[5,2,4\\], workers = \\[1,7,5\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "jobs = \\[3,18,15,9\\], workers = \\[6,5,1,3\\]",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == jobs.length == workers.length`",
      "`1 <= n <= 105`",
      "`1 <= jobs[i], workers[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2325",
    "slug": "decode-the-message",
    "title": "Decode the Message",
    "difficulty": "Easy",
    "description": "You are given the strings `key` and `message`, which represent a cipher key and a secret message, respectively. The steps to decode `message` are as follows: 1. Use the **first** appearance of all 26 lowercase English letters in `key` as the **order** of the substitution table. 2. Align the substitution table with the regular English alphabet. 3. Each letter in `message` is then **substituted** using the table. 4. Spaces `' '` are transformed to themselves. *  For example, given `key = \"**hap**p**y** **bo**y \"` (actual key would have **at least one** instance of each letter in the alphabet), we have the partial substitution table of (`'h' -> 'a'`, `'a' -> 'b'`, `'p' -> 'c'`, `'y' -> 'd'`, `'b' -> 'e'`, `'o' -> 'f'`). Return _the decoded message_.",
    "examples": [
      {
        "input": "key =  \"the quick brown fox jumps over the lazy dog \", message =  \"vkbs bs t suepuv \"",
        "output": "\"this is a secret \"",
        "explanation": "The diagram above shows the substitution table."
      },
      {
        "input": "key =  \"eljuxhpwnyrdgtqkviszcfmabo \", message =  \"zwx hnfx lqantp mnoeius ycgk vcnjrdb \"",
        "output": "\"the five boxing wizards jump quickly \"",
        "explanation": "The diagram above shows the substitution table."
      }
    ],
    "constraints": [
      "`26 <= key.length <= 2000`",
      "`key` consists of lowercase English letters and `' '`.",
      "`key` contains every letter in the English alphabet (`'a'` to `'z'`) at least once.",
      "`1 <= message.length <= 2000`",
      "`message` consists of lowercase English letters and `' '`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2326",
    "slug": "spiral-matrix-iv",
    "title": "Spiral Matrix IV",
    "difficulty": "Medium",
    "description": "You are given two integers `m` and `n`, which represent the dimensions of a matrix. You are also given the `head` of a linked list of integers. Generate an `m x n` matrix that contains the integers in the linked list presented in **spiral** order **(clockwise)**, starting from the **top-left** of the matrix. If there are remaining empty spaces, fill them with `-1`. Return _the generated matrix_.",
    "examples": [
      {
        "input": "m = 3, n = 5, head = \\[3,0,2,6,8,1,7,9,4,2,5,5,0\\]",
        "output": "\\[\\[3,0,2,6,8\\],\\[5,0,-1,-1,1\\],\\[5,2,4,9,7\\]\\]",
        "explanation": "The diagram above shows how the values are printed in the matrix."
      },
      {
        "input": "m = 1, n = 4, head = \\[0,1,2\\]",
        "output": "\\[\\[0,1,2,-1\\]\\]",
        "explanation": "The diagram above shows how the values are printed from left to right in the matrix."
      }
    ],
    "constraints": [
      "`1 <= m, n <= 105`",
      "`1 <= m  n <= 105`",
      "The number of nodes in the list is in the range `[1, m  n]`.",
      "`0 <= Node.val <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2327",
    "slug": "number-of-people-aware-of-a-secret",
    "title": "Number of People Aware of a Secret",
    "difficulty": "Medium",
    "description": "On day `1`, one person discovers a secret. You are given an integer `delay`, which means that each person will **share** the secret with a new person **every day**, starting from `delay` days after discovering the secret. You are also given an integer `forget`, which means that each person will **forget** the secret `forget` days after discovering it. A person **cannot** share the secret on the same day they forgot it, or on any day afterwards. Given an integer `n`, return _the number of people who know the secret at the end of day_ `n`. Since the answer may be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 6, delay = 2, forget = 4",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "n = 4, delay = 1, forget = 3",
        "output": "6",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= n <= 1000`",
      "`1 <= delay < forget <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2328",
    "slug": "number-of-increasing-paths-in-a-grid",
    "title": "Number of Increasing Paths in a Grid",
    "difficulty": "Hard",
    "description": "You are given an `m x n` integer matrix `grid`, where you can move from a cell to any adjacent cell in all `4` directions. Return _the number of **strictly** **increasing** paths in the grid such that you can start from **any** cell and end at **any** cell._ Since the answer may be very large, return it **modulo** `109 + 7`. Two paths are considered different if they do not have exactly the same sequence of visited cells.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1\\],\\[3,4\\]\\]",
        "output": "8",
        "explanation": "The strictly increasing paths are:"
      },
      {
        "input": "grid = \\[\\[1\\],\\[2\\]\\]",
        "output": "3",
        "explanation": "The strictly increasing paths are:"
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 1000`",
      "`1 <= m  n <= 105`",
      "`1 <= grid[i][j] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2330",
    "slug": "valid-palindrome-iv",
    "title": "Valid Palindrome IV",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `s` consisting of only lowercase English letters. In one operation, you can change **any** character of `s` to any **other** character. Return `true` _if you can make_ `s` _a palindrome after performing **exactly** one or two operations, or return_ `false` _otherwise._",
    "examples": [
      {
        "input": "s =  \"abcdba \"",
        "output": "true",
        "explanation": "One way to make s a palindrome using 1 operation is:"
      },
      {
        "input": "s =  \"aa \"",
        "output": "true",
        "explanation": "One way to make s a palindrome using 2 operations is:"
      },
      {
        "input": "s =  \"abcdef \"",
        "output": "false",
        "explanation": "It is not possible to make s a palindrome using one or two operations so return false."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2331",
    "slug": "evaluate-boolean-binary-tree",
    "title": "Evaluate Boolean Binary Tree",
    "difficulty": "Easy",
    "description": "You are given the `root` of a **full binary tree** with the following properties: *  **Leaf nodes** have either the value `0` or `1`, where `0` represents `False` and `1` represents `True`. *  **Non-leaf nodes** have either the value `2` or `3`, where `2` represents the boolean `OR` and `3` represents the boolean `AND`. The **evaluation** of a node is as follows: *  If the node is a leaf node, the evaluation is the **value** of the node, i.e. `True` or `False`. *  Otherwise, **evaluate** the node's two children and **apply** the boolean operation of its value with the children's evaluations. Return _the boolean result of **evaluating** the_ `root` _node._ A **full binary tree** is a binary tree where each node has either `0` or `2` children. A **leaf node** is a node that has zero children.",
    "examples": [
      {
        "input": "root = \\[2,1,3,null,null,0,1\\]",
        "output": "true",
        "explanation": "The above diagram illustrates the evaluation process."
      },
      {
        "input": "root = \\[0\\]",
        "output": "false",
        "explanation": "The root node is a leaf node and it evaluates to false, so we return false."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 1000]`.",
      "`0 <= Node.val <= 3`",
      "Every node has either `0` or `2` children.",
      "Leaf nodes have a value of `0` or `1`.",
      "Non-leaf nodes have a value of `2` or `3`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2332",
    "slug": "the-latest-time-to-catch-a-bus",
    "title": "The Latest Time to Catch a Bus",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `buses` of length `n`, where `buses[i]` represents the departure time of the `ith` bus. You are also given a **0-indexed** integer array `passengers` of length `m`, where `passengers[j]` represents the arrival time of the `jth` passenger. All bus departure times are unique. All passenger arrival times are unique. You are given an integer `capacity`, which represents the **maximum** number of passengers that can get on each bus. When a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at `x` minutes if you arrive at `y` minutes where `y <= x`, and the bus is not full. Passengers with the **earliest** arrival times get on the bus first. More formally when a bus arrives, either: *  If `capacity` or fewer passengers are waiting for a bus, they will **all** get on the bus, or *  The `capacity` passengers with the **earliest** arrival times will get on the bus. Return _the latest time you may arrive at the bus station to catch a bus_. You **cannot** arrive at the same time as another passenger.",
    "examples": [
      {
        "input": "buses = \\[10,20\\], passengers = \\[2,17,18,19\\], capacity = 2",
        "output": "16",
        "explanation": "Suppose you arrive at time 16."
      },
      {
        "input": "buses = \\[20,30,10\\], passengers = \\[19,13,26,4,25,11,21\\], capacity = 2",
        "output": "20",
        "explanation": "Suppose you arrive at time 20."
      }
    ],
    "constraints": [
      "`n == buses.length`",
      "`m == passengers.length`",
      "`1 <= n, m, capacity <= 105`",
      "`2 <= buses[i], passengers[i] <= 109`",
      "Each element in `buses` is unique.",
      "Each element in `passengers` is unique."
    ],
    "note": "The arrays `buses` and `passengers` are not necessarily sorted.",
    "follow_up": null
  },
  {
    "id": "2333",
    "slug": "minimum-sum-of-squared-difference",
    "title": "Minimum Sum of Squared Difference",
    "difficulty": "Medium",
    "description": "You are given two positive **0-indexed** integer arrays `nums1` and `nums2`, both of length `n`. The **sum of squared difference** of arrays `nums1` and `nums2` is defined as the **sum** of `(nums1[i] - nums2[i])2` for each `0 <= i < n`. You are also given two positive integers `k1` and `k2`. You can modify any of the elements of `nums1` by `+1` or `-1` at most `k1` times. Similarly, you can modify any of the elements of `nums2` by `+1` or `-1` at most `k2` times. Return _the minimum **sum of squared difference** after modifying array_ `nums1` _at most_ `k1` _times and modifying array_ `nums2` _at most_ `k2` _times_. **Note**: You are allowed to modify the array elements to become **negative** integers.",
    "examples": [
      {
        "input": "nums1 = \\[1,2,3,4\\], nums2 = \\[2,10,20,19\\], k1 = 0, k2 = 0",
        "output": "579",
        "explanation": "The elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0."
      },
      {
        "input": "nums1 = \\[1,4,10,12\\], nums2 = \\[5,8,6,9\\], k1 = 1, k2 = 1",
        "output": "43",
        "explanation": "One way to obtain the minimum sum of square difference is:"
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`1 <= n <= 105`",
      "`0 <= nums1[i], nums2[i] <= 105`",
      "`0 <= k1, k2 <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2334",
    "slug": "subarray-with-elements-greater-than-varying-threshold",
    "title": "Subarray With Elements Greater Than Varying Threshold",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` and an integer `threshold`. Find any subarray of `nums` of length `k` such that **every** element in the subarray is **greater** than `threshold / k`. Return _the **size** of **any** such subarray_. If there is no such subarray, return `-1`. A **subarray** is a contiguous non-empty sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[1,3,4,3,1\\], threshold = 6",
        "output": "3",
        "explanation": "The subarray \\[3,4,3\\] has a size of 3, and every element is greater than 6 / 3 = 2."
      },
      {
        "input": "nums = \\[6,5,6,5,8\\], threshold = 7",
        "output": "1",
        "explanation": "The subarray \\[8\\] has a size of 1, and 8 > 7 / 1 = 7. So 1 is returned."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i], threshold <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2335",
    "slug": "minimum-amount-of-time-to-fill-cups",
    "title": "Minimum Amount of Time to Fill Cups",
    "difficulty": "Easy",
    "description": "You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up `2` cups with **different** types of water, or `1` cup of any type of water. You are given a **0-indexed** integer array `amount` of length `3` where `amount[0]`, `amount[1]`, and `amount[2]` denote the number of cold, warm, and hot water cups you need to fill respectively. Return _the **minimum** number of seconds needed to fill up all the cups_.",
    "examples": [
      {
        "input": "amount = \\[1,4,2\\]",
        "output": "4",
        "explanation": "One way to fill up the cups is:"
      },
      {
        "input": "amount = \\[5,4,4\\]",
        "output": "7",
        "explanation": "One way to fill up the cups is:"
      },
      {
        "input": "amount = \\[5,0,0\\]",
        "output": "5",
        "explanation": "Every second, we fill up a cold cup."
      }
    ],
    "constraints": [
      "`amount.length == 3`",
      "`0 <= amount[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2336",
    "slug": "smallest-number-in-infinite-set",
    "title": "Smallest Number in Infinite Set",
    "difficulty": "Medium",
    "description": "You have a set which contains all positive integers `[1, 2, 3, 4, 5, ...]`. Implement the `SmallestInfiniteSet` class: *  `SmallestInfiniteSet()` Initializes the **SmallestInfiniteSet** object to contain **all** positive integers. *  `int popSmallest()` **Removes** and returns the smallest integer contained in the infinite set. *  `void addBack(int num)` **Adds** a positive integer `num` back into the infinite set, if it is **not** already in the infinite set.",
    "examples": [],
    "constraints": [
      "`1 <= num <= 1000`",
      "At most `1000` calls will be made in total to `popSmallest` and `addBack`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2337",
    "slug": "move-pieces-to-obtain-a-string",
    "title": "Move Pieces to Obtain a String",
    "difficulty": "Medium",
    "description": "You are given two strings `start` and `target`, both of length `n`. Each string consists **only** of the characters `'L'`, `'R'`, and `'_'` where: *  The characters `'L'` and `'R'` represent pieces, where a piece `'L'` can move to the **left** only if there is a **blank** space directly to its left, and a piece `'R'` can move to the **right** only if there is a **blank** space directly to its right. *  The character `'_'` represents a blank space that can be occupied by **any** of the `'L'` or `'R'` pieces. Return `true` _if it is possible to obtain the string_ `target` _by moving the pieces of the string_ `start` _**any** number of times_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "start =  \"\\_L\\_\\_R\\_\\_R\\_ \", target =  \"L\\_\\_\\_\\_\\_\\_RR \"",
        "output": "true",
        "explanation": "We can obtain the string target from start by doing the following moves:"
      },
      {
        "input": "start =  \"R\\_L\\_ \", target =  \"\\_\\_LR \"",
        "output": "false",
        "explanation": "The 'R' piece in the string start can move one step to the right to obtain  \"\\_**R**L\\_ \"."
      },
      {
        "input": "start =  \"\\_R \", target =  \"R\\_ \"",
        "output": "false",
        "explanation": "The piece in the string start can move only to the right, so it is impossible to obtain the string target from start."
      }
    ],
    "constraints": [
      "`n == start.length == target.length`",
      "`1 <= n <= 105`",
      "`start` and `target` consist of the characters `'L'`, `'R'`, and `'_'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2338",
    "slug": "count-the-number-of-ideal-arrays",
    "title": "Count the Number of Ideal Arrays",
    "difficulty": "Hard",
    "description": "You are given two integers `n` and `maxValue`, which are used to describe an **ideal** array. A **0-indexed** integer array `arr` of length `n` is considered **ideal** if the following conditions hold: *  Every `arr[i]` is a value from `1` to `maxValue`, for `0 <= i < n`. *  Every `arr[i]` is divisible by `arr[i - 1]`, for `0 < i < n`. Return _the number of **distinct** ideal arrays of length_ `n`. Since the answer may be very large, return it modulo `109 + 7`.",
    "examples": [
      {
        "input": "n = 2, maxValue = 5",
        "output": "10",
        "explanation": "The following are the possible ideal arrays:"
      },
      {
        "input": "n = 5, maxValue = 3",
        "output": "11",
        "explanation": "The following are the possible ideal arrays:"
      }
    ],
    "constraints": [
      "`2 <= n <= 104`",
      "`1 <= maxValue <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2340",
    "slug": "minimum-adjacent-swaps-to-make-a-valid-array",
    "title": "Minimum Adjacent Swaps to Make a Valid Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. **Swaps** of **adjacent** elements are able to be performed on `nums`. A **valid** array meets the following conditions: *  The largest element (any of the largest elements if there are multiple) is at the rightmost position in the array. *  The smallest element (any of the smallest elements if there are multiple) is at the leftmost position in the array. Return _the **minimum** swaps required to make_ `nums` _a valid array_.",
    "examples": [
      {
        "input": "nums = \\[3,4,5,5,3,1\\]",
        "output": "6",
        "explanation": "Perform the following swaps:"
      },
      {
        "input": "nums = \\[9\\]",
        "output": "0",
        "explanation": "The array is already valid, so we return 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2341",
    "slug": "maximum-number-of-pairs-in-array",
    "title": "Maximum Number of Pairs in Array",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums`. In one operation, you may do the following: *  Choose **two** integers in `nums` that are **equal**. *  Remove both integers from `nums`, forming a **pair**. The operation is done on `nums` as many times as possible. Return _a **0-indexed** integer array_ `answer` _of size_ `2` _where_ `answer[0]` _is the number of pairs that are formed and_ `answer[1]` _is the number of leftover integers in_ `nums` _after doing the operation as many times as possible_.",
    "examples": [
      {
        "input": "nums = \\[1,3,2,1,3,2,2\\]",
        "output": "\\[3,1\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,1\\]",
        "output": "\\[1,0\\]",
        "explanation": "Form a pair with nums\\[0\\] and nums\\[1\\] and remove them from nums. Now, nums = \\[\\]."
      },
      {
        "input": "nums = \\[0\\]",
        "output": "\\[0,1\\]",
        "explanation": "No pairs can be formed, and there is 1 number leftover in nums."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`0 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2342",
    "slug": "max-sum-of-a-pair-with-equal-sum-of-digits",
    "title": "Max Sum of a Pair With Equal Sum of Digits",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array `nums` consisting of **positive** integers. You can choose two indices `i` and `j`, such that `i != j`, and the sum of digits of the number `nums[i]` is equal to that of `nums[j]`. Return _the **maximum** value of_ `nums[i] + nums[j]` _that you can obtain over all possible indices_ `i` _and_ `j` _that satisfy the conditions._",
    "examples": [
      {
        "input": "nums = \\[18,43,36,13,7\\]",
        "output": "54",
        "explanation": "The pairs (i, j) that satisfy the conditions are:"
      },
      {
        "input": "nums = \\[10,12,19,14\\]",
        "output": "-1",
        "explanation": "There are no two numbers that satisfy the conditions, so we return -1."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2343",
    "slug": "query-kth-smallest-trimmed-number",
    "title": "Query Kth Smallest Trimmed Number",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of strings `nums`, where each string is of **equal length** and consists of only digits. You are also given a **0-indexed** 2D integer array `queries` where `queries[i] = [ki, trimi]`. For each `queries[i]`, you need to: *  **Trim** each number in `nums` to its **rightmost** `trimi` digits. *  Determine the **index** of the `kith` smallest trimmed number in `nums`. If two trimmed numbers are equal, the number with the **lower** index is considered to be smaller. *  Reset each number in `nums` to its original length. Return _an array_ `answer` _of the same length as_ `queries`, _where_ `answer[i]` _is the answer to the_ `ith` _query._ **Note**: *  To trim to the rightmost `x` digits means to keep removing the leftmost digit, until only `x` digits remain. *  Strings in `nums` may contain leading zeros.",
    "examples": [
      {
        "input": "nums = \\[ \"102 \", \"473 \", \"251 \", \"814 \"\\], queries = \\[\\[1,1\\],\\[2,3\\],\\[4,2\\],\\[1,2\\]\\]",
        "output": "\\[2,2,1,0\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[ \"24 \", \"37 \", \"96 \", \"04 \"\\], queries = \\[\\[2,1\\],\\[2,2\\]\\]",
        "output": "\\[3,0\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`1 <= nums[i].length <= 100`",
      "`nums[i]` consists of only digits.",
      "All `nums[i].length` are equal.",
      "`1 <= queries.length <= 100`",
      "`queries[i].length == 2`",
      "`1 <= ki <= nums.length`",
      "`1 <= trimi <= nums[i].length`",
      "Follow up: Could you use the Radix Sort Algorithm to solve this problem? What will be the complexity of that solution?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2344",
    "slug": "minimum-deletions-to-make-array-divisible",
    "title": "Minimum Deletions to Make Array Divisible",
    "difficulty": "Hard",
    "description": "You are given two positive integer arrays `nums` and `numsDivide`. You can delete any number of elements from `nums`. Return _the **minimum** number of deletions such that the **smallest** element in_ `nums` _**divides** all the elements of_ `numsDivide`. If this is not possible, return `-1`. Note that an integer `x` divides `y` if `y % x == 0`.",
    "examples": [
      {
        "input": "nums = \\[2,3,2,4,3\\], numsDivide = \\[9,6,9,3,15\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[4,3,6\\], numsDivide = \\[8,2,6,10\\]",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length, numsDivide.length <= 105`",
      "`1 <= nums[i], numsDivide[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2345",
    "slug": "finding-the-number-of-visible-mountains",
    "title": "Finding the Number of Visible Mountains",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** 2D integer array `peaks` where `peaks[i] = [xi, yi]` states that mountain `i` has a peak at coordinates `(xi, yi)`. A mountain can be described as a right-angled isosceles triangle, with its base along the `x`\\-axis and a right angle at its peak. More formally, the **gradients** of ascending and descending the mountain are `1` and `-1` respectively. A mountain is considered **visible** if its peak does not lie within another mountain (including the border of other mountains). Return _the number of visible mountains_.",
    "examples": [
      {
        "input": "peaks = \\[\\[2,2\\],\\[6,3\\],\\[5,4\\]\\]",
        "output": "2",
        "explanation": "The diagram above shows the mountains."
      },
      {
        "input": "peaks = \\[\\[1,3\\],\\[1,3\\]\\]",
        "output": "0",
        "explanation": "The diagram above shows the mountains (they completely overlap)."
      }
    ],
    "constraints": [
      "`1 <= peaks.length <= 105`",
      "`peaks[i].length == 2`",
      "`1 <= xi, yi <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2347",
    "slug": "best-poker-hand",
    "title": "Best Poker Hand",
    "difficulty": "Easy",
    "description": "You are given an integer array `ranks` and a character array `suits`. You have `5` cards where the `ith` card has a rank of `ranks[i]` and a suit of `suits[i]`. The following are the types of **poker hands** you can make from best to worst: 1. `\"Flush \"`: Five cards of the same suit. 2. `\"Three of a Kind \"`: Three cards of the same rank. 3. `\"Pair \"`: Two cards of the same rank. 4. `\"High Card \"`: Any single card. Return _a string representing the **best** type of **poker hand** you can make with the given cards._ **Note** that the return values are **case-sensitive**.",
    "examples": [
      {
        "input": "ranks = \\[13,2,3,1,9\\], suits = \\[ \"a \", \"a \", \"a \", \"a \", \"a \"\\]",
        "output": "\"Flush \"",
        "explanation": "The hand with all the cards consists of 5 cards with the same suit, so we have a  \"Flush \"."
      },
      {
        "input": "ranks = \\[4,4,2,4,4\\], suits = \\[ \"d \", \"a \", \"a \", \"b \", \"c \"\\]",
        "output": "\"Three of a Kind \"",
        "explanation": "The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a  \"Three of a Kind \"."
      },
      {
        "input": "ranks = \\[10,10,2,12,9\\], suits = \\[ \"a \", \"b \", \"c \", \"a \", \"d \"\\]",
        "output": "\"Pair \"",
        "explanation": "The hand with the first and second card consists of 2 cards with the same rank, so we have a  \"Pair \"."
      }
    ],
    "constraints": [
      "`ranks.length == suits.length == 5`",
      "`1 <= ranks[i] <= 13`",
      "`'a' <= suits[i] <= 'd'`",
      "No two cards have the same rank and suit."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2348",
    "slug": "number-of-zero-filled-subarrays",
    "title": "Number of Zero-Filled Subarrays",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _the number of **subarrays** filled with_ `0`. A **subarray** is a contiguous non-empty sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[1,3,0,0,2,0,0,4\\]",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "nums = \\[0,0,0,2,0,0\\]",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,10,2019\\]",
        "output": "0",
        "explanation": "There is no subarray filled with 0. Therefore, we return 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2349",
    "slug": "design-a-number-container-system",
    "title": "Design a Number Container System",
    "difficulty": "Medium",
    "description": "Design a number container system that can do the following: *  **Insert** or **Replace** a number at the given index in the system. *  **Return** the smallest index for the given number in the system. Implement the `NumberContainers` class: *  `NumberContainers()` Initializes the number container system. *  `void change(int index, int number)` Fills the container at `index` with the `number`. If there is already a number at that `index`, replace it. *  `int find(int number)` Returns the smallest index for the given `number`, or `-1` if there is no index that is filled by `number` in the system.",
    "examples": [],
    "constraints": [
      "`1 <= index, number <= 109`",
      "At most `105` calls will be made in total to `change` and `find`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2350",
    "slug": "shortest-impossible-sequence-of-rolls",
    "title": "Shortest Impossible Sequence of Rolls",
    "difficulty": "Hard",
    "description": "You are given an integer array `rolls` of length `n` and an integer `k`. You roll a `k` sided dice numbered from `1` to `k`, `n` times, where the result of the `ith` roll is `rolls[i]`. Return _the length of the **shortest** sequence of rolls that **cannot** be taken from_ `rolls`. A **sequence of rolls** of length `len` is the result of rolling a `k` sided dice `len` times. **Note** that the sequence taken does not have to be consecutive as long as it is in order.",
    "examples": [
      {
        "input": "rolls = \\[4,2,1,2,3,3,2,4,1\\], k = 4",
        "output": "3",
        "explanation": "Every sequence of rolls of length 1, \\[1\\], \\[2\\], \\[3\\], \\[4\\], can be taken from rolls."
      },
      {
        "input": "rolls = \\[1,1,2,2\\], k = 2",
        "output": "2",
        "explanation": "Every sequence of rolls of length 1, \\[1\\], \\[2\\], can be taken from rolls."
      },
      {
        "input": "rolls = \\[1,1,3,2,2,2,3,3\\], k = 4",
        "output": "1",
        "explanation": "The sequence \\[4\\] cannot be taken from rolls, so we return 1."
      }
    ],
    "constraints": [
      "`n == rolls.length`",
      "`1 <= n <= 105`",
      "`1 <= rolls[i] <= k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2351",
    "slug": "first-letter-to-appear-twice",
    "title": "First Letter to Appear Twice",
    "difficulty": "Easy",
    "description": "Given a string `s` consisting of lowercase English letters, return _the first letter to appear **twice**_. **Note**: *  A letter `a` appears twice before another letter `b` if the **second** occurrence of `a` is before the **second** occurrence of `b`. *  `s` will contain at least one letter that appears twice.",
    "examples": [
      {
        "input": "s =  \"abccbaacz \"",
        "output": "\"c \"",
        "explanation": ""
      },
      {
        "input": "s =  \"abcdd \"",
        "output": "\"d \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= s.length <= 100`",
      "`s` consists of lowercase English letters.",
      "`s` has at least one repeated letter."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2352",
    "slug": "equal-row-and-column-pairs",
    "title": "Equal Row and Column Pairs",
    "difficulty": "Medium",
    "description": "Given a **0-indexed** `n x n` integer matrix `grid`, _return the number of pairs_ `(ri, cj)` _such that row_ `ri` _and column_ `cj` _are equal_. A row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).",
    "examples": [
      {
        "input": "grid = \\[\\[3,2,1\\],\\[1,7,6\\],\\[2,7,7\\]\\]",
        "output": "1",
        "explanation": "There is 1 equal row and column pair:"
      },
      {
        "input": "grid = \\[\\[3,1,2,2\\],\\[1,4,4,5\\],\\[2,4,2,2\\],\\[2,4,2,2\\]\\]",
        "output": "3",
        "explanation": "There are 3 equal row and column pairs:"
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`1 <= n <= 200`",
      "`1 <= grid[i][j] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2353",
    "slug": "design-a-food-rating-system",
    "title": "Design a Food Rating System",
    "difficulty": "Medium",
    "description": "Design a food rating system that can do the following: *  **Modify** the rating of a food item listed in the system. *  Return the highest-rated food item for a type of cuisine in the system. Implement the `FoodRatings` class: *  `FoodRatings(String[] foods, String[] cuisines, int[] ratings)` Initializes the system. The food items are described by `foods`, `cuisines` and `ratings`, all of which have a length of `n`. *  `foods[i]` is the name of the `ith` food, *  `cuisines[i]` is the type of cuisine of the `ith` food, and *  `ratings[i]` is the initial rating of the `ith` food. *  `void changeRating(String food, int newRating)` Changes the rating of the food item with the name `food`. *  `String highestRated(String cuisine)` Returns the name of the food item that has the highest rating for the given type of `cuisine`. If there is a tie, return the item with the **lexicographically smaller** name. Note that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.",
    "examples": [],
    "constraints": [
      "`1 <= n <= 2  104`",
      "`n == foods.length == cuisines.length == ratings.length`",
      "`1 <= foods[i].length, cuisines[i].length <= 10`",
      "`foods[i]`, `cuisines[i]` consist of lowercase English letters.",
      "`1 <= ratings[i] <= 108`",
      "All the strings in `foods` are distinct.",
      "`food` will be the name of a food item in the system across all calls to `changeRating`.",
      "`cuisine` will be a type of cuisine of at least one food item in the system across all calls to `highestRated`.",
      "At most `2  104` calls in total will be made to `changeRating` and `highestRated`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2354",
    "slug": "number-of-excellent-pairs",
    "title": "Number of Excellent Pairs",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** positive integer array `nums` and a positive integer `k`. A pair of numbers `(num1, num2)` is called **excellent** if the following conditions are satisfied: *  **Both** the numbers `num1` and `num2` exist in the array `nums`. *  The sum of the number of set bits in `num1 OR num2` and `num1 AND num2` is greater than or equal to `k`, where `OR` is the bitwise **OR** operation and `AND` is the bitwise **AND** operation. Return _the number of **distinct** excellent pairs_. Two pairs `(a, b)` and `(c, d)` are considered distinct if either `a != c` or `b != d`. For example, `(1, 2)` and `(2, 1)` are distinct. **Note** that a pair `(num1, num2)` such that `num1 == num2` can also be excellent if you have at least **one** occurrence of `num1` in the array.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,1\\], k = 3",
        "output": "5",
        "explanation": "The excellent pairs are the following:"
      },
      {
        "input": "nums = \\[5,1,1\\], k = 10",
        "output": "0",
        "explanation": "There are no excellent pairs for this array."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`",
      "`1 <= k <= 60`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2355",
    "slug": "maximum-number-of-books-you-can-take",
    "title": "Maximum Number of Books You Can Take",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** integer array `books` of length `n` where `books[i]` denotes the number of books on the `ith` shelf of a bookshelf. You are going to take books from a **contiguous** section of the bookshelf spanning from `l` to `r` where `0 <= l <= r < n`. For each index `i` in the range `l <= i < r`, you must take **strictly fewer** books from shelf `i` than shelf `i + 1`. Return _the **maximum** number of books you can take from the bookshelf._",
    "examples": [
      {
        "input": "books = \\[8,5,2,7,9\\]",
        "output": "19",
        "explanation": ""
      },
      {
        "input": "books = \\[7,0,3,4,5\\]",
        "output": "12",
        "explanation": ""
      },
      {
        "input": "books = \\[8,2,3,7,3,4,0,1,4,3\\]",
        "output": "13",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= books.length <= 105`",
      "`0 <= books[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2357",
    "slug": "make-array-zero-by-subtracting-equal-amounts",
    "title": "Make Array Zero by Subtracting Equal Amounts",
    "difficulty": "Easy",
    "description": "You are given a non-negative integer array `nums`. In one operation, you must: *  Choose a positive integer `x` such that `x` is less than or equal to the **smallest non-zero** element in `nums`. *  Subtract `x` from every **positive** element in `nums`. Return _the **minimum** number of operations to make every element in_ `nums` _equal to_ `0`.",
    "examples": [
      {
        "input": "nums = \\[1,5,0,3,5\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums = \\[0\\]",
        "output": "0",
        "explanation": "Each element in nums is already 0 so no operations are needed."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 100`",
      "`0 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2358",
    "slug": "maximum-number-of-groups-entering-a-competition",
    "title": "Maximum Number of Groups Entering a Competition",
    "difficulty": "Medium",
    "description": "You are given a positive integer array `grades` which represents the grades of students in a university. You would like to enter **all** these students into a competition in **ordered** non-empty groups, such that the ordering meets the following conditions: *  The sum of the grades of students in the `ith` group is **less than** the sum of the grades of students in the `(i + 1)th` group, for all groups (except the last). *  The total number of students in the `ith` group is **less than** the total number of students in the `(i + 1)th` group, for all groups (except the last). Return _the **maximum** number of groups that can be formed_.",
    "examples": [
      {
        "input": "grades = \\[10,6,12,7,3,5\\]",
        "output": "3",
        "explanation": "The following is a possible way to form 3 groups of students:"
      },
      {
        "input": "grades = \\[8,8\\]",
        "output": "1",
        "explanation": "We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups."
      }
    ],
    "constraints": [
      "`1 <= grades.length <= 105`",
      "`1 <= grades[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2359",
    "slug": "find-closest-node-to-given-two-nodes",
    "title": "Find Closest Node to Given Two Nodes",
    "difficulty": "Medium",
    "description": "You are given a **directed** graph of `n` nodes numbered from `0` to `n - 1`, where each node has **at most one** outgoing edge. The graph is represented with a given **0-indexed** array `edges` of size `n`, indicating that there is a directed edge from node `i` to node `edges[i]`. If there is no outgoing edge from `i`, then `edges[i] == -1`. You are also given two integers `node1` and `node2`. Return _the **index** of the node that can be reached from both_ `node1` _and_ `node2`_, such that the **maximum** between the distance from_ `node1` _to that node, and from_ `node2` _to that node is **minimized**_. If there are multiple answers, return the node with the **smallest** index, and if no possible answer exists, return `-1`. Note that `edges` may contain cycles.",
    "examples": [
      {
        "input": "edges = \\[2,2,3,-1\\], node1 = 0, node2 = 1",
        "output": "2",
        "explanation": "The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1."
      },
      {
        "input": "edges = \\[1,2,-1\\], node1 = 0, node2 = 2",
        "output": "2",
        "explanation": "The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0."
      }
    ],
    "constraints": [
      "`n == edges.length`",
      "`2 <= n <= 105`",
      "`-1 <= edges[i] < n`",
      "`edges[i] != i`",
      "`0 <= node1, node2 < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2360",
    "slug": "longest-cycle-in-a-graph",
    "title": "Longest Cycle in a Graph",
    "difficulty": "Hard",
    "description": "You are given a **directed** graph of `n` nodes numbered from `0` to `n - 1`, where each node has **at most one** outgoing edge. The graph is represented with a given **0-indexed** array `edges` of size `n`, indicating that there is a directed edge from node `i` to node `edges[i]`. If there is no outgoing edge from node `i`, then `edges[i] == -1`. Return _the length of the **longest** cycle in the graph_. If no cycle exists, return `-1`. A cycle is a path that starts and ends at the **same** node.",
    "examples": [
      {
        "input": "edges = \\[3,3,4,2,3\\]",
        "output": "3",
        "explanation": "The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2."
      },
      {
        "input": "edges = \\[2,-1,3,1\\]",
        "output": "-1",
        "explanation": "There are no cycles in this graph."
      }
    ],
    "constraints": [
      "`n == edges.length`",
      "`2 <= n <= 105`",
      "`-1 <= edges[i] < n`",
      "`edges[i] != i`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2361",
    "slug": "minimum-costs-using-the-train-line",
    "title": "Minimum Costs Using the Train Line",
    "difficulty": "Hard",
    "description": "A train line going through a city has two routes, the regular route and the express route. Both routes go through the **same** `n + 1` stops labeled from `0` to `n`. Initially, you start on the regular route at stop `0`. You are given two **1-indexed** integer arrays `regular` and `express`, both of length `n`. `regular[i]` describes the cost it takes to go from stop `i - 1` to stop `i` using the regular route, and `express[i]` describes the cost it takes to go from stop `i - 1` to stop `i` using the express route. You are also given an integer `expressCost` which represents the cost to transfer from the regular route to the express route. Note that: *  There is no cost to transfer from the express route back to the regular route. *  You pay `expressCost` **every** time you transfer from the regular route to the express route. *  There is no extra cost to stay on the express route. Return _a **1-indexed** array_ `costs` _of length_ `n`_, where_ `costs[i]` _is the **minimum** cost to reach stop_ `i` _from stop_ `0`. Note that a stop can be counted as **reached** from either route.",
    "examples": [
      {
        "input": "regular = \\[1,6,9,5\\], express = \\[5,2,3,10\\], expressCost = 8",
        "output": "\\[1,7,14,19\\]",
        "explanation": "The diagram above shows how to reach stop 4 from stop 0 with minimum cost."
      },
      {
        "input": "regular = \\[11,5,13\\], express = \\[7,10,6\\], expressCost = 3",
        "output": "\\[10,15,24\\]",
        "explanation": "The diagram above shows how to reach stop 3 from stop 0 with minimum cost."
      }
    ],
    "constraints": [
      "`n == regular.length == express.length`",
      "`1 <= n <= 105`",
      "`1 <= regular[i], express[i], expressCost <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2363",
    "slug": "merge-similar-items",
    "title": "Merge Similar Items",
    "difficulty": "Easy",
    "description": "You are given two 2D integer arrays, `items1` and `items2`, representing two sets of items. Each array `items` has the following properties: *  `items[i] = [valuei, weighti]` where `valuei` represents the **value** and `weighti` represents the **weight** of the `ith` item. *  The value of each item in `items` is **unique**. Return _a 2D integer array_ `ret` _where_ `ret[i] = [valuei, weighti]`_,_ _with_ `weighti` _being the **sum of weights** of all items with value_ `valuei`.",
    "examples": [
      {
        "input": "items1 = \\[\\[1,1\\],\\[4,5\\],\\[3,8\\]\\], items2 = \\[\\[3,1\\],\\[1,5\\]\\]",
        "output": "\\[\\[1,6\\],\\[3,9\\],\\[4,5\\]\\]",
        "explanation": ""
      },
      {
        "input": "items1 = \\[\\[1,1\\],\\[3,2\\],\\[2,3\\]\\], items2 = \\[\\[2,1\\],\\[3,2\\],\\[1,3\\]\\]",
        "output": "\\[\\[1,4\\],\\[2,4\\],\\[3,4\\]\\]",
        "explanation": ""
      },
      {
        "input": "items1 = \\[\\[1,3\\],\\[2,2\\]\\], items2 = \\[\\[7,1\\],\\[2,2\\],\\[1,4\\]\\]",
        "output": "\\[\\[1,7\\],\\[2,4\\],\\[7,1\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= items1.length, items2.length <= 1000`",
      "`items1[i].length == items2[i].length == 2`",
      "`1 <= valuei, weighti <= 1000`",
      "Each `valuei` in `items1` is unique.",
      "Each `valuei` in `items2` is unique."
    ],
    "note": "`ret` should be returned in **ascending** order by value.",
    "follow_up": null
  },
  {
    "id": "2364",
    "slug": "count-number-of-bad-pairs",
    "title": "Count Number of Bad Pairs",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. A pair of indices `(i, j)` is a **bad pair** if `i < j` and `j - i != nums[j] - nums[i]`. Return _the total number of **bad pairs** in_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[4,1,3,3\\]",
        "output": "5",
        "explanation": "The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4."
      },
      {
        "input": "nums = \\[1,2,3,4,5\\]",
        "output": "0",
        "explanation": "There are no bad pairs."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2365",
    "slug": "task-scheduler-ii",
    "title": "Task Scheduler II",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of positive integers `tasks`, representing tasks that need to be completed **in order**, where `tasks[i]` represents the **type** of the `ith` task. You are also given a positive integer `space`, which represents the **minimum** number of days that must pass **after** the completion of a task before another task of the **same** type can be performed. Each day, until all tasks have been completed, you must either: *  Complete the next task from `tasks`, or *  Take a break. Return _the **minimum** number of days needed to complete all tasks_.",
    "examples": [
      {
        "input": "tasks = \\[1,2,1,2,3,1\\], space = 3",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "tasks = \\[5,8,8,5\\], space = 2",
        "output": "6",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= tasks.length <= 105`",
      "`1 <= tasks[i] <= 109`",
      "`1 <= space <= tasks.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2366",
    "slug": "minimum-replacements-to-sort-the-array",
    "title": "Minimum Replacements to Sort the Array",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** integer array `nums`. In one operation you can replace any element of the array with **any two** elements that **sum** to it. *  For example, consider `nums = [5,6,7]`. In one operation, we can replace `nums[1]` with `2` and `4` and convert `nums` to `[5,2,4,7]`. Return _the minimum number of operations to make an array that is sorted in **non-decreasing** order_.",
    "examples": [
      {
        "input": "nums = \\[3,9,3\\]",
        "output": "2",
        "explanation": "Here are the steps to sort the array in non-decreasing order:"
      },
      {
        "input": "nums = \\[1,2,3,4,5\\]",
        "output": "0",
        "explanation": "The array is already in non-decreasing order. Therefore, we return 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2367",
    "slug": "number-of-arithmetic-triplets",
    "title": "Number of Arithmetic Triplets",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed**, **strictly increasing** integer array `nums` and a positive integer `diff`. A triplet `(i, j, k)` is an **arithmetic triplet** if the following conditions are met: *  `i < j < k`, *  `nums[j] - nums[i] == diff`, and *  `nums[k] - nums[j] == diff`. Return _the number of unique **arithmetic triplets**._",
    "examples": [
      {
        "input": "nums = \\[0,1,4,6,7,10\\], diff = 3",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[4,5,6,7,8,9\\], diff = 2",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 200`",
      "`0 <= nums[i] <= 200`",
      "`1 <= diff <= 50`",
      "`nums` is strictly increasing."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2368",
    "slug": "reachable-nodes-with-restrictions",
    "title": "Reachable Nodes With Restrictions",
    "difficulty": "Medium",
    "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges. You are given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. You are also given an integer array `restricted` which represents **restricted** nodes. Return _the **maximum** number of nodes you can reach from node_ `0` _without visiting a restricted node._ Note that node `0` will **not** be a restricted node.",
    "examples": [
      {
        "input": "n = 7, edges = \\[\\[0,1\\],\\[1,2\\],\\[3,1\\],\\[4,0\\],\\[0,5\\],\\[5,6\\]\\], restricted = \\[4,5\\]",
        "output": "4",
        "explanation": "The diagram above shows the tree."
      },
      {
        "input": "n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[0,5\\],\\[0,4\\],\\[3,2\\],\\[6,5\\]\\], restricted = \\[4,2,1\\]",
        "output": "3",
        "explanation": "The diagram above shows the tree."
      }
    ],
    "constraints": [
      "`2 <= n <= 105`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "`edges` represents a valid tree.",
      "`1 <= restricted.length < n`",
      "`1 <= restricted[i] < n`",
      "All the values of `restricted` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2369",
    "slug": "check-if-there-is-a-valid-partition-for-the-array",
    "title": "Check if There is a Valid Partition For The Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. You have to partition the array into one or more **contiguous** subarrays. We call a partition of the array **valid** if each of the obtained subarrays satisfies **one** of the following conditions: 1. The subarray consists of **exactly** `2` equal elements. For example, the subarray `[2,2]` is good. 2. The subarray consists of **exactly** `3` equal elements. For example, the subarray `[4,4,4]` is good. 3. The subarray consists of **exactly** `3` consecutive increasing elements, that is, the difference between adjacent elements is `1`. For example, the subarray `[3,4,5]` is good, but the subarray `[1,3,5]` is not. Return `true` _if the array has **at least** one valid partition_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "nums = \\[4,4,4,5,6\\]",
        "output": "true",
        "explanation": "The array can be partitioned into the subarrays \\[4,4\\] and \\[4,5,6\\]."
      },
      {
        "input": "nums = \\[1,1,1,2\\]",
        "output": "false",
        "explanation": "There is no valid partition for this array."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2370",
    "slug": "longest-ideal-subsequence",
    "title": "Longest Ideal Subsequence",
    "difficulty": "Medium",
    "description": "You are given a string `s` consisting of lowercase letters and an integer `k`. We call a string `t` **ideal** if the following conditions are satisfied: *  `t` is a **subsequence** of the string `s`. *  The absolute difference in the alphabet order of every two **adjacent** letters in `t` is less than or equal to `k`. Return _the length of the **longest** ideal string_. A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. **Note** that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of `'a'` and `'z'` is `25`, not `1`.",
    "examples": [
      {
        "input": "s =  \"acfgbd \", k = 2",
        "output": "4",
        "explanation": "The longest ideal string is  \"acbd \". The length of this string is 4, so 4 is returned."
      },
      {
        "input": "s =  \"abcd \", k = 3",
        "output": "4",
        "explanation": "The longest ideal string is  \"abcd \". The length of this string is 4, so 4 is returned."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`0 <= k <= 25`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2371",
    "slug": "minimize-maximum-value-in-a-grid",
    "title": "Minimize Maximum Value in a Grid",
    "difficulty": "Hard",
    "description": "You are given an `m x n` integer matrix `grid` containing **distinct** positive integers. You have to replace each integer in the matrix with a positive integer satisfying the following conditions: *  The **relative** order of every two elements that are in the same row or column should stay the **same** after the replacements. *  The **maximum** number in the matrix after the replacements should be as **small** as possible. The relative order stays the same if for all pairs of elements in the original matrix such that `grid[r1][c1] > grid[r2][c2]` where either `r1 == r2` or `c1 == c2`, then it must be true that `grid[r1][c1] > grid[r2][c2]` after the replacements. For example, if `grid = [[2, 4, 5], [7, 3, 9]]` then a good replacement could be either `grid = [[1, 2, 3], [2, 1, 4]]` or `grid = [[1, 2, 3], [3, 1, 4]]`. Return _the **resulting** matrix._ If there are multiple answers, return **any** of them.",
    "examples": [
      {
        "input": "grid = \\[\\[3,1\\],\\[2,5\\]\\]",
        "output": "\\[\\[2,1\\],\\[1,2\\]\\]",
        "explanation": "The above diagram shows a valid replacement."
      },
      {
        "input": "grid = \\[\\[10\\]\\]",
        "output": "\\[\\[1\\]\\]",
        "explanation": "We replace the only number in the matrix with 1."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 1000`",
      "`1 <= m  n <= 105`",
      "`1 <= grid[i][j] <= 109`",
      "`grid` consists of distinct integers."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2373",
    "slug": "largest-local-values-in-a-matrix",
    "title": "Largest Local Values in a Matrix",
    "difficulty": "Easy",
    "description": "You are given an `n x n` integer matrix `grid`. Generate an integer matrix `maxLocal` of size `(n - 2) x (n - 2)` such that: *  `maxLocal[i][j]` is equal to the **largest** value of the `3 x 3` matrix in `grid` centered around row `i + 1` and column `j + 1`. In other words, we want to find the largest value in every contiguous `3 x 3` matrix in `grid`. Return _the generated matrix_.",
    "examples": [
      {
        "input": "grid = \\[\\[9,9,8,1\\],\\[5,6,2,6\\],\\[8,2,6,4\\],\\[6,2,2,2\\]\\]",
        "output": "\\[\\[9,9\\],\\[8,6\\]\\]",
        "explanation": "The diagram above shows the original matrix and the generated matrix."
      },
      {
        "input": "grid = \\[\\[1,1,1,1,1\\],\\[1,1,1,1,1\\],\\[1,1,2,1,1\\],\\[1,1,1,1,1\\],\\[1,1,1,1,1\\]\\]",
        "output": "\\[\\[2,2,2\\],\\[2,2,2\\],\\[2,2,2\\]\\]",
        "explanation": "Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid."
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`3 <= n <= 100`",
      "`1 <= grid[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2374",
    "slug": "node-with-highest-edge-score",
    "title": "Node With Highest Edge Score",
    "difficulty": "Medium",
    "description": "You are given a directed graph with `n` nodes labeled from `0` to `n - 1`, where each node has **exactly one** outgoing edge. The graph is represented by a given **0-indexed** integer array `edges` of length `n`, where `edges[i]` indicates that there is a **directed** edge from node `i` to node `edges[i]`. The **edge score** of a node `i` is defined as the sum of the **labels** of all the nodes that have an edge pointing to `i`. Return _the node with the highest **edge score**_. If multiple nodes have the same **edge score**, return the node with the **smallest** index.",
    "examples": [
      {
        "input": "edges = \\[1,0,0,0,0,7,7,5\\]",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "edges = \\[2,0,0,2\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == edges.length`",
      "`2 <= n <= 105`",
      "`0 <= edges[i] < n`",
      "`edges[i] != i`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2375",
    "slug": "construct-smallest-number-from-di-string",
    "title": "Construct Smallest Number From DI String",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `pattern` of length `n` consisting of the characters `'I'` meaning **increasing** and `'D'` meaning **decreasing**. A **0-indexed** string `num` of length `n + 1` is created using the following conditions: *  `num` consists of the digits `'1'` to `'9'`, where each digit is used **at most** once. *  If `pattern[i] == 'I'`, then `num[i] < num[i + 1]`. *  If `pattern[i] == 'D'`, then `num[i] > num[i + 1]`. Return _the lexicographically **smallest** possible string_ `num` _that meets the conditions._",
    "examples": [
      {
        "input": "pattern =  \"IIIDIDDD \"",
        "output": "\"123549876 \"",
        "explanation": ""
      },
      {
        "input": "pattern =  \"DDD \"",
        "output": "\"4321 \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= pattern.length <= 8`",
      "`pattern` consists of only the letters `'I'` and `'D'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2376",
    "slug": "count-special-integers",
    "title": "Count Special Integers",
    "difficulty": "Hard",
    "description": "We call a positive integer **special** if all of its digits are **distinct**. Given a **positive** integer `n`, return _the number of special integers that belong to the interval_ `[1, n]`.",
    "examples": [
      {
        "input": "n = 20",
        "output": "19",
        "explanation": "All the integers from 1 to 20, except 11, are special. Thus, there are 19 special integers."
      },
      {
        "input": "n = 5",
        "output": "5",
        "explanation": "All the integers from 1 to 5 are special."
      },
      {
        "input": "n = 135",
        "output": "110",
        "explanation": "There are 110 integers from 1 to 135 that are special."
      }
    ],
    "constraints": [
      "`1 <= n <= 2  109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2378",
    "slug": "choose-edges-to-maximize-score-in-a-tree",
    "title": "Choose Edges to Maximize Score in a Tree",
    "difficulty": "Medium",
    "description": "You are given a **weighted** tree consisting of `n` nodes numbered from `0` to `n - 1`. The tree is **rooted** at node `0` and represented with a **2D** array `edges` of size `n` where `edges[i] = [pari, weighti]` indicates that node `pari` is the **parent** of node `i`, and the edge between them has a weight equal to `weighti`. Since the root does **not** have a parent, you have `edges[0] = [-1, -1]`. Choose some edges from the tree such that no two chosen edges are **adjacent** and the **sum** of the weights of the chosen edges is maximized. Return _the **maximum** sum of the chosen edges_. **Note**: *  You are allowed to **not** choose any edges in the tree, the sum of weights in this case will be `0`. *  Two edges `Edge1` and `Edge2` in the tree are **adjacent** if they have a **common** node. *  In other words, they are adjacent if `Edge1` connects nodes `a` and `b` and `Edge2` connects nodes `b` and `c`.",
    "examples": [
      {
        "input": "edges = \\[\\[-1,-1\\],\\[0,5\\],\\[0,10\\],\\[2,6\\],\\[2,4\\]\\]",
        "output": "11",
        "explanation": "The above diagram shows the edges that we have to choose colored in red."
      },
      {
        "input": "edges = \\[\\[-1,-1\\],\\[0,5\\],\\[0,-6\\],\\[0,7\\]\\]",
        "output": "7",
        "explanation": "We choose the edge with weight 7."
      }
    ],
    "constraints": [
      "`n == edges.length`",
      "`1 <= n <= 105`",
      "`edges[i].length == 2`",
      "`par0 == weight0 == -1`",
      "`0 <= pari <= n - 1` for all `i >= 1`.",
      "`pari != i`",
      "`-106 <= weighti <= 106` for all `i >= 1`.",
      "`edges` represents a valid tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2379",
    "slug": "minimum-recolors-to-get-k-consecutive-black-blocks",
    "title": "Minimum Recolors to Get K Consecutive Black Blocks",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** string `blocks` of length `n`, where `blocks[i]` is either `'W'` or `'B'`, representing the color of the `ith` block. The characters `'W'` and `'B'` denote the colors white and black, respectively. You are also given an integer `k`, which is the desired number of **consecutive** black blocks. In one operation, you can **recolor** a white block such that it becomes a black block. Return _the **minimum** number of operations needed such that there is at least **one** occurrence of_ `k` _consecutive black blocks._",
    "examples": [
      {
        "input": "blocks =  \"WBBWWBBWBW \", k = 7",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "blocks =  \"WBWBBBW \", k = 2",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == blocks.length`",
      "`1 <= n <= 100`",
      "`blocks[i]` is either `'W'` or `'B'`.",
      "`1 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2380",
    "slug": "time-needed-to-rearrange-a-binary-string",
    "title": "Time Needed to Rearrange a Binary String",
    "difficulty": "Medium",
    "description": "You are given a binary string `s`. In one second, **all** occurrences of `\"01 \"` are **simultaneously** replaced with `\"10 \"`. This process **repeats** until no occurrences of `\"01 \"` exist. Return _the number of seconds needed to complete this process._",
    "examples": [
      {
        "input": "s =  \"0110101 \"",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "s =  \"11100 \"",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 1000`",
      "`s[i]` is either `'0'` or `'1'`.",
      "Follow up:"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2381",
    "slug": "shifting-letters-ii",
    "title": "Shifting Letters II",
    "difficulty": "Medium",
    "description": "You are given a string `s` of lowercase English letters and a 2D integer array `shifts` where `shifts[i] = [starti, endi, directioni]`. For every `i`, **shift** the characters in `s` from the index `starti` to the index `endi` (**inclusive**) forward if `directioni = 1`, or shift the characters backward if `directioni = 0`. Shifting a character **forward** means replacing it with the **next** letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Similarly, shifting a character **backward** means replacing it with the **previous** letter in the alphabet (wrapping around so that `'a'` becomes `'z'`). Return _the final string after all such shifts to_ `s` _are applied_.",
    "examples": [
      {
        "input": "s =  \"abc \", shifts = \\[\\[0,1,0\\],\\[1,2,1\\],\\[0,2,1\\]\\]",
        "output": "\"ace \"",
        "explanation": "Firstly, shift the characters from index 0 to index 1 backward. Now s =  \"zac \"."
      },
      {
        "input": "s =  \"dztz \", shifts = \\[\\[0,0,0\\],\\[1,1,1\\]\\]",
        "output": "\"catz \"",
        "explanation": "Firstly, shift the characters from index 0 to index 0 backward. Now s =  \"cztz \"."
      }
    ],
    "constraints": [
      "`1 <= s.length, shifts.length <= 5  104`",
      "`shifts[i].length == 3`",
      "`0 <= starti <= endi < s.length`",
      "`0 <= directioni <= 1`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2382",
    "slug": "maximum-segment-sum-after-removals",
    "title": "Maximum Segment Sum After Removals",
    "difficulty": "Hard",
    "description": "You are given two **0-indexed** integer arrays `nums` and `removeQueries`, both of length `n`. For the `ith` query, the element in `nums` at the index `removeQueries[i]` is removed, splitting `nums` into different segments. A **segment** is a contiguous sequence of **positive** integers in `nums`. A **segment sum** is the sum of every element in a segment. Return _an integer array_ `answer`_, of length_ `n`_, where_ `answer[i]` _is the **maximum** segment sum after applying the_ `ith` _removal._",
    "examples": [
      {
        "input": "nums = \\[1,2,5,6,1\\], removeQueries = \\[0,3,2,4,1\\]",
        "output": "\\[14,7,2,2,0\\]",
        "explanation": "Using 0 to indicate a removed element, the answer is as follows:"
      },
      {
        "input": "nums = \\[3,2,11,1\\], removeQueries = \\[3,2,1,0\\]",
        "output": "\\[16,5,3,0\\]",
        "explanation": "Using 0 to indicate a removed element, the answer is as follows:"
      }
    ],
    "constraints": [
      "`n == nums.length == removeQueries.length`",
      "`1 <= n <= 105`",
      "`1 <= nums[i] <= 109`",
      "`0 <= removeQueries[i] < n`",
      "All the values of `removeQueries` are unique."
    ],
    "note": "The same index will **not** be removed more than once.",
    "follow_up": null
  },
  {
    "id": "2383",
    "slug": "minimum-hours-of-training-to-win-a-competition",
    "title": "Minimum Hours of Training to Win a Competition",
    "difficulty": "Easy",
    "description": "You are entering a competition, and are given two **positive** integers `initialEnergy` and `initialExperience` denoting your initial energy and initial experience respectively. You are also given two **0-indexed** integer arrays `energy` and `experience`, both of length `n`. You will face `n` opponents **in order**. The energy and experience of the `ith` opponent is denoted by `energy[i]` and `experience[i]` respectively. When you face an opponent, you need to have both **strictly** greater experience and energy to defeat them and move to the next opponent if available. Defeating the `ith` opponent **increases** your experience by `experience[i]`, but **decreases** your energy by `energy[i]`. Before starting the competition, you can train for some number of hours. After each hour of training, you can **either** choose to increase your initial experience by one, or increase your initial energy by one. Return _the **minimum** number of training hours required to defeat all_ `n` _opponents_.",
    "examples": [
      {
        "input": "initialEnergy = 5, initialExperience = 3, energy = \\[1,4,3,2\\], experience = \\[2,6,3,1\\]",
        "output": "8",
        "explanation": "You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training."
      },
      {
        "input": "initialEnergy = 2, initialExperience = 4, energy = \\[1\\], experience = \\[3\\]",
        "output": "0",
        "explanation": "You do not need any additional energy or experience to win the competition, so we return 0."
      }
    ],
    "constraints": [
      "`n == energy.length == experience.length`",
      "`1 <= n <= 100`",
      "`1 <= initialEnergy, initialExperience, energy[i], experience[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2384",
    "slug": "largest-palindromic-number",
    "title": "Largest Palindromic Number",
    "difficulty": "Medium",
    "description": "You are given a string `num` consisting of digits only. Return _the **largest palindromic** integer (in the form of a string) that can be formed using digits taken from_ `num`. It should not contain **leading zeroes**. **Notes:** *  You do **not** need to use all the digits of `num`, but you must use **at least** one digit. *  The digits can be reordered.",
    "examples": [
      {
        "input": "num =  \"444947137 \"",
        "output": "\"7449447 \"",
        "explanation": ""
      },
      {
        "input": "num =  \"00009 \"",
        "output": "\"9 \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= num.length <= 105`",
      "`num` consists of digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2385",
    "slug": "amount-of-time-for-binary-tree-to-be-infected",
    "title": "Amount of Time for Binary Tree to Be Infected",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary tree with **unique** values, and an integer `start`. At minute `0`, an **infection** starts from the node with value `start`. Each minute, a node becomes infected if: *  The node is currently uninfected. *  The node is adjacent to an infected node. Return _the number of minutes needed for the entire tree to be infected._",
    "examples": [
      {
        "input": "root = \\[1,5,3,null,4,10,6,9,2\\], start = 3",
        "output": "4",
        "explanation": "The following nodes are infected during:"
      },
      {
        "input": "root = \\[1\\], start = 1",
        "output": "0",
        "explanation": "At minute 0, the only node in the tree is infected so we return 0."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 105]`.",
      "`1 <= Node.val <= 105`",
      "Each node has a unique value.",
      "A node with a value of `start` exists in the tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2386",
    "slug": "find-the-k-sum-of-an-array",
    "title": "Find the K-Sum of an Array",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` and a **positive** integer `k`. You can choose any **subsequence** of the array and sum all of its elements together. We define the **K-Sum** of the array as the `kth` **largest** subsequence sum that can be obtained (**not** necessarily distinct). Return _the K-Sum of the array_. A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. **Note** that the empty subsequence is considered to have a sum of `0`.",
    "examples": [
      {
        "input": "nums = \\[2,4,-2\\], k = 5",
        "output": "2",
        "explanation": "All the possible subsequence sums that we can obtain are the following sorted in decreasing order:"
      },
      {
        "input": "nums = \\[1,-2,3,4,-10,12\\], k = 16",
        "output": "10",
        "explanation": "The 16-Sum of the array is 10."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`-109 <= nums[i] <= 109`",
      "`1 <= k <= min(2000, 2n)`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2387",
    "slug": "median-of-a-row-wise-sorted-matrix",
    "title": "Median of a Row Wise Sorted Matrix",
    "difficulty": "Medium",
    "description": "Given an `m x n` matrix `grid` containing an **odd** number of integers where each row is sorted in **non-decreasing** order, return _the **median** of the matrix_. You must solve the problem in less than `O(m * n)` time complexity.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,2\\],\\[2,3,3\\],\\[1,3,4\\]\\]",
        "output": "2",
        "explanation": "The elements of the matrix in sorted order are 1,1,1,2,2,3,3,3,4. The median is 2."
      },
      {
        "input": "grid = \\[\\[1,1,3,3,4\\]\\]",
        "output": "3",
        "explanation": "The elements of the matrix in sorted order are 1,1,3,3,4. The median is 3."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 500`",
      "`m` and `n` are both odd.",
      "`1 <= grid[i][j] <= 106`",
      "`grid[i]` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2389",
    "slug": "longest-subsequence-with-limited-sum",
    "title": "Longest Subsequence With Limited Sum",
    "difficulty": "Easy",
    "description": "You are given an integer array `nums` of length `n`, and an integer array `queries` of length `m`. Return _an array_ `answer` _of length_ `m` _where_ `answer[i]` _is the **maximum** size of a **subsequence** that you can take from_ `nums` _such that the **sum** of its elements is less than or equal to_ `queries[i]`. A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "nums = \\[4,5,2,1\\], queries = \\[3,10,21\\]",
        "output": "\\[2,3,4\\]",
        "explanation": "We answer the queries as follows:"
      },
      {
        "input": "nums = \\[2,3,4,5\\], queries = \\[1\\]",
        "output": "\\[0\\]",
        "explanation": "The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer\\[0\\] = 0."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`m == queries.length`",
      "`1 <= n, m <= 1000`",
      "`1 <= nums[i], queries[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2390",
    "slug": "removing-stars-from-a-string",
    "title": "Removing Stars From a String",
    "difficulty": "Medium",
    "description": "You are given a string `s`, which contains stars `*`. In one operation, you can: *  Choose a star in `s`. *  Remove the closest **non-star** character to its **left**, as well as remove the star itself. Return _the string after **all** stars have been removed_.",
    "examples": [
      {
        "input": "s =  \"leet\\*\\*cod\\*e \"",
        "output": "\"lecoe \"",
        "explanation": "Performing the removals from left to right:"
      },
      {
        "input": "s =  \"erase\\*\\*\\*\\*\\* \"",
        "output": "\" \"",
        "explanation": "The entire string is removed, so we return an empty string."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of lowercase English letters and stars ``.",
      "The operation above can be performed on `s`."
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "2391",
    "slug": "minimum-amount-of-time-to-collect-garbage",
    "title": "Minimum Amount of Time to Collect Garbage",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of strings `garbage` where `garbage[i]` represents the assortment of garbage at the `ith` house. `garbage[i]` consists only of the characters `'M'`, `'P'` and `'G'` representing one unit of metal, paper and glass garbage respectively. Picking up **one** unit of any type of garbage takes `1` minute. You are also given a **0-indexed** integer array `travel` where `travel[i]` is the number of minutes needed to go from house `i` to house `i + 1`. There are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house `0` and must visit each house **in order**; however, they do **not** need to visit every house. Only **one** garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks **cannot** do anything. Return _the **minimum** number of minutes needed to pick up all the garbage._",
    "examples": [
      {
        "input": "garbage = \\[ \"G \", \"P \", \"GP \", \"GG \"\\], travel = \\[2,4,3\\]",
        "output": "21",
        "explanation": ""
      },
      {
        "input": "garbage = \\[ \"MMM \", \"PGM \", \"GP \"\\], travel = \\[3,10\\]",
        "output": "37",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= garbage.length <= 105`",
      "`garbage[i]` consists of only the letters `'M'`, `'P'`, and `'G'`.",
      "`1 <= garbage[i].length <= 10`",
      "`travel.length == garbage.length - 1`",
      "`1 <= travel[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2392",
    "slug": "build-a-matrix-with-conditions",
    "title": "Build a Matrix With Conditions",
    "difficulty": "Hard",
    "description": "You are given a **positive** integer `k`. You are also given: *  a 2D integer array `rowConditions` of size `n` where `rowConditions[i] = [abovei, belowi]`, and *  a 2D integer array `colConditions` of size `m` where `colConditions[i] = [lefti, righti]`. The two arrays contain integers from `1` to `k`. You have to build a `k x k` matrix that contains each of the numbers from `1` to `k` **exactly once**. The remaining cells should have the value `0`. The matrix should also satisfy the following conditions: *  The number `abovei` should appear in a **row** that is strictly **above** the row at which the number `belowi` appears for all `i` from `0` to `n - 1`. *  The number `lefti` should appear in a **column** that is strictly **left** of the column at which the number `righti` appears for all `i` from `0` to `m - 1`. Return _**any** matrix that satisfies the conditions_. If no answer exists, return an empty matrix.",
    "examples": [
      {
        "input": "k = 3, rowConditions = \\[\\[1,2\\],\\[3,2\\]\\], colConditions = \\[\\[2,1\\],\\[3,2\\]\\]",
        "output": "\\[\\[3,0,0\\],\\[0,0,1\\],\\[0,2,0\\]\\]",
        "explanation": "The diagram above shows a valid example of a matrix that satisfies all the conditions."
      },
      {
        "input": "k = 3, rowConditions = \\[\\[1,2\\],\\[2,3\\],\\[3,1\\],\\[2,3\\]\\], colConditions = \\[\\[2,1\\]\\]",
        "output": "\\[\\]",
        "explanation": "From the first two conditions, 3 has to be below 1 but the third conditions needs 3 to be above 1 to be satisfied."
      }
    ],
    "constraints": [
      "`2 <= k <= 400`",
      "`1 <= rowConditions.length, colConditions.length <= 104`",
      "`rowConditions[i].length == colConditions[i].length == 2`",
      "`1 <= abovei, belowi, lefti, righti <= k`",
      "`abovei != belowi`",
      "`lefti != righti`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2393",
    "slug": "count-strictly-increasing-subarrays",
    "title": "Count Strictly Increasing Subarrays",
    "difficulty": "Medium",
    "description": "You are given an array `nums` consisting of **positive** integers. Return _the number of **subarrays** of_ `nums` _that are in **strictly increasing** order._ A **subarray** is a **contiguous** part of an array.",
    "examples": [
      {
        "input": "nums = \\[1,3,5,4,4,6\\]",
        "output": "10",
        "explanation": "The strictly increasing subarrays are the following:"
      },
      {
        "input": "nums = \\[1,2,3,4,5\\]",
        "output": "15",
        "explanation": "Every subarray is strictly increasing. There are 15 possible subarrays that we can take."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2395",
    "slug": "find-subarrays-with-equal-sum",
    "title": "Find Subarrays With Equal Sum",
    "difficulty": "Easy",
    "description": "Given a **0-indexed** integer array `nums`, determine whether there exist **two** subarrays of length `2` with **equal** sum. Note that the two subarrays must begin at **different** indices. Return `true` _if these subarrays exist, and_ `false` _otherwise._ A **subarray** is a contiguous non-empty sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[4,2,4\\]",
        "output": "true",
        "explanation": "The subarrays with elements \\[4,2\\] and \\[2,4\\] have the same sum of 6."
      },
      {
        "input": "nums = \\[1,2,3,4,5\\]",
        "output": "false",
        "explanation": "No two subarrays of size 2 have the same sum."
      },
      {
        "input": "nums = \\[0,0,0\\]",
        "output": "true",
        "explanation": "The subarrays \\[nums\\[0\\],nums\\[1\\]\\] and \\[nums\\[1\\],nums\\[2\\]\\] have the same sum of 0."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 1000`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2396",
    "slug": "strictly-palindromic-number",
    "title": "Strictly Palindromic Number",
    "difficulty": "Medium",
    "description": "An integer `n` is **strictly palindromic** if, for **every** base `b` between `2` and `n - 2` (**inclusive**), the string representation of the integer `n` in base `b` is **palindromic**. Given an integer `n`, return `true` _if_ `n` _is **strictly palindromic** and_ `false` _otherwise_. A string is **palindromic** if it reads the same forward and backward.",
    "examples": [
      {
        "input": "n = 9",
        "output": "false",
        "explanation": "In base 2: 9 = 1001 (base 2), which is palindromic."
      },
      {
        "input": "n = 4",
        "output": "false",
        "explanation": "We only consider base 2: 4 = 100 (base 2), which is not palindromic."
      }
    ],
    "constraints": [
      "`4 <= n <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2397",
    "slug": "maximum-rows-covered-by-columns",
    "title": "Maximum Rows Covered by Columns",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** `m x n` binary matrix `matrix` and an integer `numSelect`, which denotes the number of **distinct** columns you must select from `matrix`. Let us consider `s = {c1, c2, ...., cnumSelect}` as the set of columns selected by you. A row `row` is **covered** by `s` if: *  For each cell `matrix[row][col]` (`0 <= col <= n - 1`) where `matrix[row][col] == 1`, `col` is present in `s` or, *  **No cell** in `row` has a value of `1`. You need to choose `numSelect` columns such that the number of rows that are covered is **maximized**. Return _the **maximum** number of rows that can be **covered** by a set of_ `numSelect` _columns._",
    "examples": [
      {
        "input": "matrix = \\[\\[0,0,0\\],\\[1,0,1\\],\\[0,1,1\\],\\[0,0,1\\]\\], numSelect = 2",
        "output": "3",
        "explanation": "One possible way to cover 3 rows is shown in the diagram above."
      },
      {
        "input": "matrix = \\[\\[1\\],\\[0\\]\\], numSelect = 1",
        "output": "2",
        "explanation": "Selecting the only column will result in both rows being covered since the entire matrix is selected."
      }
    ],
    "constraints": [
      "`m == matrix.length`",
      "`n == matrix[i].length`",
      "`1 <= m, n <= 12`",
      "`matrix[i][j]` is either `0` or `1`.",
      "`1 <= numSelect <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2398",
    "slug": "maximum-number-of-robots-within-budget",
    "title": "Maximum Number of Robots Within Budget",
    "difficulty": "Hard",
    "description": "You have `n` robots. You are given two **0-indexed** integer arrays, `chargeTimes` and `runningCosts`, both of length `n`. The `ith` robot costs `chargeTimes[i]` units to charge and costs `runningCosts[i]` units to run. You are also given an integer `budget`. The **total cost** of running `k` chosen robots is equal to `max(chargeTimes) + k * sum(runningCosts)`, where `max(chargeTimes)` is the largest charge cost among the `k` robots and `sum(runningCosts)` is the sum of running costs among the `k` robots. Return _the **maximum** number of **consecutive** robots you can run such that the total cost **does not** exceed_ `budget`.",
    "examples": [
      {
        "input": "chargeTimes = \\[3,6,1,3,4\\], runningCosts = \\[2,1,3,4,5\\], budget = 25",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "chargeTimes = \\[11,12,19\\], runningCosts = \\[10,8,7\\], budget = 19",
        "output": "0",
        "explanation": "No robot can be run that does not exceed the budget, so we return 0."
      }
    ],
    "constraints": [
      "`chargeTimes.length == runningCosts.length == n`",
      "`1 <= n <= 5  104`",
      "`1 <= chargeTimes[i], runningCosts[i] <= 105`",
      "`1 <= budget <= 1015`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2399",
    "slug": "check-distances-between-same-letters",
    "title": "Check Distances Between Same Letters",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** string `s` consisting of only lowercase English letters, where each letter in `s` appears **exactly** **twice**. You are also given a **0-indexed** integer array `distance` of length `26`. Each letter in the alphabet is numbered from `0` to `25` (i.e. `'a' -> 0`, `'b' -> 1`, `'c' -> 2`, ... , `'z' -> 25`). In a **well-spaced** string, the number of letters between the two occurrences of the `ith` letter is `distance[i]`. If the `ith` letter does not appear in `s`, then `distance[i]` can be **ignored**. Return `true` _if_ `s` _is a **well-spaced** string, otherwise return_ `false`.",
    "examples": [
      {
        "input": "s =  \"abaccb \", distance = \\[1,3,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s =  \"aa \", distance = \\[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\]",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= s.length <= 52`",
      "`s` consists only of lowercase English letters.",
      "Each letter appears in `s` exactly twice.",
      "`distance.length == 26`",
      "`0 <= distance[i] <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2400",
    "slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
    "title": "Number of Ways to Reach a Position After Exactly k Steps",
    "difficulty": "Medium",
    "description": "You are given two **positive** integers `startPos` and `endPos`. Initially, you are standing at position `startPos` on an **infinite** number line. With one step, you can move either one position to the left, or one position to the right. Given a positive integer `k`, return _the number of **different** ways to reach the position_ `endPos` _starting from_ `startPos`_, such that you perform **exactly**_ `k` _steps_. Since the answer may be very large, return it **modulo** `109 + 7`. Two ways are considered different if the order of the steps made is not exactly the same. **Note** that the number line includes negative integers.",
    "examples": [
      {
        "input": "startPos = 1, endPos = 2, k = 3",
        "output": "3",
        "explanation": "We can reach position 2 from 1 in exactly 3 steps in three ways:"
      },
      {
        "input": "startPos = 2, endPos = 5, k = 10",
        "output": "0",
        "explanation": "It is impossible to reach position 5 from position 2 in exactly 10 steps."
      }
    ],
    "constraints": [
      "`1 <= startPos, endPos, k <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2401",
    "slug": "longest-nice-subarray",
    "title": "Longest Nice Subarray",
    "difficulty": "Medium",
    "description": "You are given an array `nums` consisting of **positive** integers. We call a subarray of `nums` **nice** if the bitwise **AND** of every pair of elements that are in **different** positions in the subarray is equal to `0`. Return _the length of the **longest** nice subarray_. A **subarray** is a **contiguous** part of an array. **Note** that subarrays of length `1` are always considered nice.",
    "examples": [
      {
        "input": "nums = \\[1,3,8,48,10\\]",
        "output": "3",
        "explanation": "The longest nice subarray is \\[3,8,48\\]. This subarray satisfies the conditions:"
      },
      {
        "input": "nums = \\[3,1,5,11,13\\]",
        "output": "1",
        "explanation": "The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2402",
    "slug": "meeting-rooms-iii",
    "title": "Meeting Rooms III",
    "difficulty": "Hard",
    "description": "You are given an integer `n`. There are `n` rooms numbered from `0` to `n - 1`. You are given a 2D integer array `meetings` where `meetings[i] = [starti, endi]` means that a meeting will be held during the **half-closed** time interval `[starti, endi)`. All the values of `starti` are **unique**. Meetings are allocated to rooms in the following manner: 1. Each meeting will take place in the unused room with the **lowest** number. 2. If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the **same** duration as the original meeting. 3. When a room becomes unused, meetings that have an earlier original **start** time should be given the room. Return _the **number** of the room that held the most meetings._ If there are multiple rooms, return _the room with the **lowest** number._ A **half-closed interval** `[a, b)` is the interval between `a` and `b` **including** `a` and **not including** `b`.",
    "examples": [
      {
        "input": "n = 2, meetings = \\[\\[0,10\\],\\[1,5\\],\\[2,7\\],\\[3,4\\]\\]",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "n = 3, meetings = \\[\\[1,20\\],\\[2,10\\],\\[3,5\\],\\[4,9\\],\\[6,8\\]\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 100`",
      "`1 <= meetings.length <= 105`",
      "`meetings[i].length == 2`",
      "`0 <= starti < endi <= 5  105`",
      "All the values of `starti` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2403",
    "slug": "minimum-time-to-kill-all-monsters",
    "title": "Minimum Time to Kill All Monsters",
    "difficulty": "Hard",
    "description": "You are given an integer array `power` where `power[i]` is the power of the `ith` monster. You start with `0` mana points, and each day you increase your mana points by `gain` where `gain` initially is equal to `1`. Each day, after gaining `gain` mana, you can defeat a monster if your mana points are greater than or equal to the power of that monster. When you defeat a monster: *  your mana points will be reset to `0`, and *  the value of `gain` increases by `1`. Return _the **minimum** number of days needed to defeat all the monsters._",
    "examples": [
      {
        "input": "power = \\[3,1,4\\]",
        "output": "4",
        "explanation": "The optimal way to beat all the monsters is to:"
      },
      {
        "input": "power = \\[1,1,4\\]",
        "output": "4",
        "explanation": "The optimal way to beat all the monsters is to:"
      },
      {
        "input": "power = \\[1,2,4,9\\]",
        "output": "6",
        "explanation": "The optimal way to beat all the monsters is to:"
      }
    ],
    "constraints": [
      "`1 <= power.length <= 17`",
      "`1 <= power[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2404",
    "slug": "most-frequent-even-element",
    "title": "Most Frequent Even Element",
    "difficulty": "Easy",
    "description": "Given an integer array `nums`, return _the most frequent even element_. If there is a tie, return the **smallest** one. If there is no such element, return `-1`.",
    "examples": [
      {
        "input": "nums = \\[0,1,2,2,4,4,1\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[4,4,4,9,2,4\\]",
        "output": "4",
        "explanation": "4 is the even element appears the most."
      },
      {
        "input": "nums = \\[29,47,21,41,13,37,25,7\\]",
        "output": "-1",
        "explanation": "There is no even element."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2000`",
      "`0 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2405",
    "slug": "optimal-partition-of-string",
    "title": "Optimal Partition of String",
    "difficulty": "Medium",
    "description": "Given a string `s`, partition the string into one or more **substrings** such that the characters in each substring are **unique**. That is, no letter appears in a single substring more than **once**. Return _the **minimum** number of substrings in such a partition._ Note that each character should belong to exactly one substring in a partition.",
    "examples": [
      {
        "input": "s =  \"abacaba \"",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "s =  \"ssssss \"",
        "output": "6",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of only English lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2406",
    "slug": "divide-intervals-into-minimum-number-of-groups",
    "title": "Divide Intervals Into Minimum Number of Groups",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `intervals` where `intervals[i] = [lefti, righti]` represents the **inclusive** interval `[lefti, righti]`. You have to divide the intervals into one or more **groups** such that each interval is in **exactly** one group, and no two intervals that are in the same group **intersect** each other. Return _the **minimum** number of groups you need to make_. Two intervals **intersect** if there is at least one common number between them. For example, the intervals `[1, 5]` and `[5, 8]` intersect.",
    "examples": [
      {
        "input": "intervals = \\[\\[5,10\\],\\[6,8\\],\\[1,5\\],\\[2,3\\],\\[1,10\\]\\]",
        "output": "3",
        "explanation": "We can divide the intervals into the following groups:"
      },
      {
        "input": "intervals = \\[\\[1,3\\],\\[5,6\\],\\[8,10\\],\\[11,13\\]\\]",
        "output": "1",
        "explanation": "None of the intervals overlap, so we can put all of them in one group."
      }
    ],
    "constraints": [
      "`1 <= intervals.length <= 105`",
      "`intervals[i].length == 2`",
      "`1 <= lefti <= righti <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2407",
    "slug": "longest-increasing-subsequence-ii",
    "title": "Longest Increasing Subsequence II",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` and an integer `k`. Find the longest subsequence of `nums` that meets the following requirements: *  The subsequence is **strictly increasing** and *  The difference between adjacent elements in the subsequence is **at most** `k`. Return _the length of the **longest** **subsequence** that meets the requirements._ A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "nums = \\[4,2,1,4,3,4,5,8,15\\], k = 3",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "nums = \\[7,4,5,1,8,12,4,7\\], k = 5",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,5\\], k = 1",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i], k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2408",
    "slug": "design-sql",
    "title": "Design SQL",
    "difficulty": "Medium",
    "description": "You are given `n` tables represented with two arrays `names` and `columns`, where `names[i]` is the name of the `ith` table and `columns[i]` is the number of columns of the `ith` table. You should be able to perform the following **operations**: *  **Insert** a row in a specific table. Each row you insert has an id. The id is assigned using an auto-increment method where the id of the first inserted row is 1, and the id of each other row inserted into the same table is the id of the last inserted row (even if it was deleted) plus one. *  **Delete** a row from a specific table. **Note** that deleting a row does not affect the id of the next inserted row. *  **Select** a specific cell from any table and return its value. Implement the `SQL` class: *  `SQL(String[] names, int[] columns)` Creates the `n` tables. *  `void insertRow(String name, String[] row)` Adds a row to the table `name`. It is **guaranteed** that the table will exist, and the size of the array `row` is equal to the number of columns in the table. *  `void deleteRow(String name, int rowId)` Removes the row `rowId` from the table `name`. It is **guaranteed** that the table and row will **exist**. *  `String selectCell(String name, int rowId, int columnId)` Returns the value of the cell in the row `rowId` and the column `columnId` from the table `name`.",
    "examples": [],
    "constraints": [
      "`n == names.length == columns.length`",
      "`1 <= n <= 104`",
      "`1 <= names[i].length, row[i].length, name.length <= 20`",
      "`names[i]`, `row[i]`, and `name` consist of lowercase English letters.",
      "`1 <= columns[i] <= 100`",
      "All the strings of `names` are distinct.",
      "`name` exists in the array `names`.",
      "`row.length` equals the number of columns in the chosen table.",
      "`rowId` and `columnId` will be valid.",
      "At most `250` calls will be made to `insertRow` and `deleteRow`.",
      "At most `104` calls will be made to `selectCell`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2409",
    "slug": "count-days-spent-together",
    "title": "Count Days Spent Together",
    "difficulty": "Easy",
    "description": "Alice and Bob are traveling to Rome for separate business meetings. You are given 4 strings `arriveAlice`, `leaveAlice`, `arriveBob`, and `leaveBob`. Alice will be in the city from the dates `arriveAlice` to `leaveAlice` (**inclusive**), while Bob will be in the city from the dates `arriveBob` to `leaveBob` (**inclusive**). Each will be a 5-character string in the format `\"MM-DD \"`, corresponding to the month and day of the date. Return _the total number of days that Alice and Bob are in Rome together._ You can assume that all dates occur in the **same** calendar year, which is **not** a leap year. Note that the number of days per month can be represented as: `[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]`.",
    "examples": [
      {
        "input": "arriveAlice =  \"08-15 \", leaveAlice =  \"08-18 \", arriveBob =  \"08-16 \", leaveBob =  \"08-19 \"",
        "output": "3",
        "explanation": "Alice will be in Rome from August 15 to August 18. Bob will be in Rome from August 16 to August 19. They are both in Rome together on August 16th, 17th, and 18th, so the answer is 3."
      },
      {
        "input": "arriveAlice =  \"10-01 \", leaveAlice =  \"10-31 \", arriveBob =  \"11-01 \", leaveBob =  \"12-31 \"",
        "output": "0",
        "explanation": "There is no day when Alice and Bob are in Rome together, so we return 0."
      }
    ],
    "constraints": [
      "All dates are provided in the format `\"MM-DD \"`.",
      "Alice and Bob's arrival dates are earlier than or equal to their leaving dates.",
      "The given dates are valid dates of a non-leap year."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2410",
    "slug": "maximum-matching-of-players-with-trainers",
    "title": "Maximum Matching of Players With Trainers",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `players`, where `players[i]` represents the **ability** of the `ith` player. You are also given a **0-indexed** integer array `trainers`, where `trainers[j]` represents the **training capacity** of the `jth` trainer. The `ith` player can **match** with the `jth` trainer if the player's ability is **less than or equal to** the trainer's training capacity. Additionally, the `ith` player can be matched with at most one trainer, and the `jth` trainer can be matched with at most one player. Return _the **maximum** number of matchings between_ `players` _and_ `trainers` _that satisfy these conditions._",
    "examples": [
      {
        "input": "players = \\[4,7,9\\], trainers = \\[8,2,5,8\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "players = \\[1,1,1\\], trainers = \\[10\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= players.length, trainers.length <= 105`",
      "`1 <= players[i], trainers[j] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2411",
    "slug": "smallest-subarrays-with-maximum-bitwise-or",
    "title": "Smallest Subarrays With Maximum Bitwise OR",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array `nums` of length `n`, consisting of non-negative integers. For each index `i` from `0` to `n - 1`, you must determine the size of the **minimum sized** non-empty subarray of `nums` starting at `i` (**inclusive**) that has the **maximum** possible **bitwise OR**. *  In other words, let `Bij` be the bitwise OR of the subarray `nums[i...j]`. You need to find the smallest subarray starting at `i`, such that bitwise OR of this subarray is equal to `max(Bik)` where `i <= k <= n - 1`. The bitwise OR of an array is the bitwise OR of all the numbers in it. Return _an integer array_ `answer` _of size_ `n` _where_ `answer[i]` _is the length of the **minimum** sized subarray starting at_ `i` _with **maximum** bitwise OR._ A **subarray** is a contiguous non-empty sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[1,0,2,1,3\\]",
        "output": "\\[3,3,2,2,1\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2\\]",
        "output": "\\[2,1\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2412",
    "slug": "minimum-money-required-before-transactions",
    "title": "Minimum Money Required Before Transactions",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** 2D integer array `transactions`, where `transactions[i] = [costi, cashbacki]`. The array describes transactions, where each transaction must be completed exactly once in **some order**. At any given moment, you have a certain amount of `money`. In order to complete transaction `i`, `money >= costi` must hold true. After performing a transaction, `money` becomes `money - costi + cashbacki`. Return _the minimum amount of_ `money` _required before any transaction so that all of the transactions can be completed **regardless of the order** of the transactions._",
    "examples": [
      {
        "input": "transactions = \\[\\[2,1\\],\\[5,0\\],\\[4,2\\]\\]",
        "output": "10",
        "explanation": ""
      },
      {
        "input": "transactions = \\[\\[3,0\\],\\[0,3\\]\\]",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= transactions.length <= 105`",
      "`transactions[i].length == 2`",
      "`0 <= costi, cashbacki <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2413",
    "slug": "smallest-even-multiple",
    "title": "Smallest Even Multiple",
    "difficulty": "Easy",
    "description": "Given a **positive** integer `n`, return _the smallest positive integer that is a multiple of **both**_ `2` _and_ `n`.",
    "examples": [
      {
        "input": "n = 5",
        "output": "10",
        "explanation": "The smallest multiple of both 5 and 2 is 10."
      },
      {
        "input": "n = 6",
        "output": "6",
        "explanation": "The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself."
      }
    ],
    "constraints": [
      "`1 <= n <= 150`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2414",
    "slug": "length-of-the-longest-alphabetical-continuous-substring",
    "title": "Length of the Longest Alphabetical Continuous Substring",
    "difficulty": "Medium",
    "description": "An **alphabetical continuous string** is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string `\"abcdefghijklmnopqrstuvwxyz \"`. *  For example, `\"abc \"` is an alphabetical continuous string, while `\"acb \"` and `\"za \"` are not. Given a string `s` consisting of lowercase letters only, return the _length of the **longest** alphabetical continuous substring._",
    "examples": [
      {
        "input": "s =  \"abacaba \"",
        "output": "2",
        "explanation": "There are 4 distinct continuous substrings:  \"a \",  \"b \",  \"c \" and  \"ab \"."
      },
      {
        "input": "s =  \"abcde \"",
        "output": "5",
        "explanation": "\"abcde \" is the longest continuous substring."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of only English lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2415",
    "slug": "reverse-odd-levels-of-binary-tree",
    "title": "Reverse Odd Levels of Binary Tree",
    "difficulty": "Medium",
    "description": "Given the `root` of a **perfect** binary tree, reverse the node values at each **odd** level of the tree. *  For example, suppose the node values at level 3 are `[2,1,3,4,7,11,29,18]`, then it should become `[18,29,11,7,4,3,1,2]`. Return _the root of the reversed tree_. A binary tree is **perfect** if all parent nodes have two children and all leaves are on the same level. The **level** of a node is the number of edges along the path between it and the root node.",
    "examples": [
      {
        "input": "root = \\[2,3,5,8,13,21,34\\]",
        "output": "\\[2,5,3,8,13,21,34\\]",
        "explanation": ""
      },
      {
        "input": "root = \\[7,13,11\\]",
        "output": "\\[7,11,13\\]",
        "explanation": ""
      },
      {
        "input": "root = \\[0,1,2,0,0,0,0,1,1,1,1,2,2,2,2\\]",
        "output": "\\[0,2,1,0,0,0,0,2,2,2,2,1,1,1,1\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 214]`.",
      "`0 <= Node.val <= 105`",
      "`root` is a perfect binary tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2416",
    "slug": "sum-of-prefix-scores-of-strings",
    "title": "Sum of Prefix Scores of Strings",
    "difficulty": "Hard",
    "description": "You are given an array `words` of size `n` consisting of **non-empty** strings. We define the **score** of a string `word` as the **number** of strings `words[i]` such that `word` is a **prefix** of `words[i]`. *  For example, if `words = [ \"a \", \"ab \", \"abc \", \"cab \"]`, then the score of `\"ab \"` is `2`, since `\"ab \"` is a prefix of both `\"ab \"` and `\"abc \"`. Return _an array_ `answer` _of size_ `n` _where_ `answer[i]` _is the **sum** of scores of every **non-empty** prefix of_ `words[i]`. **Note** that a string is considered as a prefix of itself.",
    "examples": [
      {
        "input": "words = \\[ \"abc \", \"ab \", \"bc \", \"b \"\\]",
        "output": "\\[5,4,3,2\\]",
        "explanation": "The answer for each string is the following:"
      },
      {
        "input": "words = \\[ \"abcd \"\\]",
        "output": "\\[4\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length <= 1000`",
      "`words[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2417",
    "slug": "closest-fair-integer",
    "title": "Closest Fair Integer",
    "difficulty": "Medium",
    "description": "You are given a **positive** integer `n`. We call an integer `k` fair if the number of **even** digits in `k` is equal to the number of **odd** digits in it. Return _the **smallest** fair integer that is **greater than or equal** to_ `n`.",
    "examples": [
      {
        "input": "n = 2",
        "output": "10",
        "explanation": "The smallest fair integer that is greater than or equal to 2 is 10."
      },
      {
        "input": "n = 403",
        "output": "1001",
        "explanation": "The smallest fair integer that is greater than or equal to 403 is 1001."
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2418",
    "slug": "sort-the-people",
    "title": "Sort the People",
    "difficulty": "Easy",
    "description": "You are given an array of strings `names`, and an array `heights` that consists of **distinct** positive integers. Both arrays are of length `n`. For each index `i`, `names[i]` and `heights[i]` denote the name and height of the `ith` person. Return `names` _sorted in **descending** order by the people's heights_.",
    "examples": [
      {
        "input": "names = \\[ \"Mary \", \"John \", \"Emma \"\\], heights = \\[180,165,170\\]",
        "output": "\\[ \"Mary \", \"Emma \", \"John \"\\]",
        "explanation": "Mary is the tallest, followed by Emma and John."
      },
      {
        "input": "names = \\[ \"Alice \", \"Bob \", \"Bob \"\\], heights = \\[155,185,150\\]",
        "output": "\\[ \"Bob \", \"Alice \", \"Bob \"\\]",
        "explanation": "The first Bob is the tallest, followed by Alice and the second Bob."
      }
    ],
    "constraints": [
      "`n == names.length == heights.length`",
      "`1 <= n <= 103`",
      "`1 <= names[i].length <= 20`",
      "`1 <= heights[i] <= 105`",
      "`names[i]` consists of lower and upper case English letters.",
      "All the values of `heights` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2419",
    "slug": "longest-subarray-with-maximum-bitwise-and",
    "title": "Longest Subarray With Maximum Bitwise AND",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` of size `n`. Consider a **non-empty** subarray from `nums` that has the **maximum** possible **bitwise AND**. *  In other words, let `k` be the maximum value of the bitwise AND of **any** subarray of `nums`. Then, only subarrays with a bitwise AND equal to `k` should be considered. Return _the length of the **longest** such subarray_. The bitwise AND of an array is the bitwise AND of all the numbers in it. A **subarray** is a contiguous sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,3,2,2\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2420",
    "slug": "find-all-good-indices",
    "title": "Find All Good Indices",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` of size `n` and a positive integer `k`. We call an index `i` in the range `k <= i < n - k` **good** if the following conditions are satisfied: *  The `k` elements that are just **before** the index `i` are in **non-increasing** order. *  The `k` elements that are just **after** the index `i` are in **non-decreasing** order. Return _an array of all good indices sorted in **increasing** order_.",
    "examples": [
      {
        "input": "nums = \\[2,1,1,1,3,4,1\\], k = 2",
        "output": "\\[2,3\\]",
        "explanation": "There are two good indices in the array:"
      },
      {
        "input": "nums = \\[2,1,1,2\\], k = 2",
        "output": "\\[\\]",
        "explanation": "There are no good indices in this array."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`3 <= n <= 105`",
      "`1 <= nums[i] <= 106`",
      "`1 <= k <= n / 2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2421",
    "slug": "number-of-good-paths",
    "title": "Number of Good Paths",
    "difficulty": "Hard",
    "description": "There is a tree (i.e. a connected, undirected graph with no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. You are given a **0-indexed** integer array `vals` of length `n` where `vals[i]` denotes the value of the `ith` node. You are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`. A **good path** is a simple path that satisfies the following conditions: 1. The starting node and the ending node have the **same** value. 2. All nodes between the starting node and the ending node have values **less than or equal to** the starting node (i.e. the starting node's value should be the maximum value along the path). Return _the number of distinct good paths_. Note that a path and its reverse are counted as the **same** path. For example, `0 -> 1` is considered to be the same as `1 -> 0`. A single node is also considered as a valid path.",
    "examples": [
      {
        "input": "vals = \\[1,3,2,1,3\\], edges = \\[\\[0,1\\],\\[0,2\\],\\[2,3\\],\\[2,4\\]\\]",
        "output": "6",
        "explanation": "There are 5 good paths consisting of a single node."
      },
      {
        "input": "vals = \\[1,1,2,2,3\\], edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[2,4\\]\\]",
        "output": "7",
        "explanation": "There are 5 good paths consisting of a single node."
      },
      {
        "input": "vals = \\[1\\], edges = \\[\\]",
        "output": "1",
        "explanation": "The tree consists of only one node, so there is one good path."
      }
    ],
    "constraints": [
      "`n == vals.length`",
      "`1 <= n <= 3  104`",
      "`0 <= vals[i] <= 105`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "`edges` represents a valid tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2422",
    "slug": "merge-operations-to-turn-array-into-a-palindrome",
    "title": "Merge Operations to Turn Array Into a Palindrome",
    "difficulty": "Medium",
    "description": "You are given an array `nums` consisting of **positive** integers. You can perform the following operation on the array **any** number of times: *  Choose any two **adjacent** elements and **replace** them with their **sum**. *  For example, if `nums = [1,2,3,1]`, you can apply one operation to make it `[1,5,1]`. Return _the **minimum** number of operations needed to turn the array into a **palindrome**_.",
    "examples": [
      {
        "input": "nums = \\[4,3,2,1,2,3,1\\]",
        "output": "2",
        "explanation": "We can turn the array into a palindrome in 2 operations as follows:"
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "3",
        "explanation": "We do the operation 3 times in any position, we obtain the array \\[10\\] at the end which is a palindrome."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2423",
    "slug": "remove-letter-to-equalize-frequency",
    "title": "Remove Letter To Equalize Frequency",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** string `word`, consisting of lowercase English letters. You need to select **one** index and **remove** the letter at that index from `word` so that the **frequency** of every letter present in `word` is equal. Return `true` _if it is possible to remove one letter so that the frequency of all letters in_ `word` _are equal, and_ `false` _otherwise_.",
    "examples": [
      {
        "input": "word =  \"abcc \"",
        "output": "true",
        "explanation": "Select index 3 and delete it: word becomes  \"abc \" and each character has a frequency of 1."
      },
      {
        "input": "word =  \"aazz \"",
        "output": "false",
        "explanation": "We must delete a character, so either the frequency of  \"a \" is 1 and the frequency of  \"z \" is 2, or vice versa. It is impossible to make all present letters have equal frequency."
      }
    ],
    "constraints": [
      "`2 <= word.length <= 100`",
      "`word` consists of lowercase English letters only."
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "2424",
    "slug": "longest-uploaded-prefix",
    "title": "Longest Uploaded Prefix",
    "difficulty": "Medium",
    "description": "You are given a stream of `n` videos, each represented by a **distinct** number from `1` to `n` that you need to \"upload \" to a server. You need to implement a data structure that calculates the length of the **longest uploaded prefix** at various points in the upload process. We consider `i` to be an uploaded prefix if all videos in the range `1` to `i` (**inclusive**) have been uploaded to the server. The longest uploaded prefix is the **maximum** value of `i` that satisfies this definition. Implement the `LUPrefix` class: *  `LUPrefix(int n)` Initializes the object for a stream of `n` videos. *  `void upload(int video)` Uploads `video` to the server. *  `int longest()` Returns the length of the **longest uploaded prefix** defined above.",
    "examples": [],
    "constraints": [
      "`1 <= n <= 105`",
      "`1 <= video <= n`",
      "All values of `video` are distinct.",
      "At most `2  105` calls in total will be made to `upload` and `longest`.",
      "At least one call will be made to `longest`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2425",
    "slug": "bitwise-xor-of-all-pairings",
    "title": "Bitwise XOR of All Pairings",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed** arrays, `nums1` and `nums2`, consisting of non-negative integers. There exists another array, `nums3`, which contains the bitwise XOR of **all pairings** of integers between `nums1` and `nums2` (every integer in `nums1` is paired with every integer in `nums2` **exactly once**). Return _the **bitwise XOR** of all integers in_ `nums3`.",
    "examples": [
      {
        "input": "nums1 = \\[2,1,3\\], nums2 = \\[10,2,5,0\\]",
        "output": "13",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[1,2\\], nums2 = \\[3,4\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 105`",
      "`0 <= nums1[i], nums2[j] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2426",
    "slug": "number-of-pairs-satisfying-inequality",
    "title": "Number of Pairs Satisfying Inequality",
    "difficulty": "Hard",
    "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, each of size `n`, and an integer `diff`. Find the number of **pairs** `(i, j)` such that: *  `0 <= i < j <= n - 1` **and** *  `nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff`. Return _the **number of pairs** that satisfy the conditions._",
    "examples": [
      {
        "input": "nums1 = \\[3,2,5\\], nums2 = \\[2,2,1\\], diff = 1",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[3,-1\\], nums2 = \\[-2,2\\], diff = -1",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`2 <= n <= 105`",
      "`-104 <= nums1[i], nums2[i] <= 104`",
      "`-104 <= diff <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2427",
    "slug": "number-of-common-factors",
    "title": "Number of Common Factors",
    "difficulty": "Easy",
    "description": "Given two positive integers `a` and `b`, return _the number of **common** factors of_ `a` _and_ `b`. An integer `x` is a **common factor** of `a` and `b` if `x` divides both `a` and `b`.",
    "examples": [
      {
        "input": "a = 12, b = 6",
        "output": "4",
        "explanation": "The common factors of 12 and 6 are 1, 2, 3, 6."
      },
      {
        "input": "a = 25, b = 30",
        "output": "2",
        "explanation": "The common factors of 25 and 30 are 1, 5."
      }
    ],
    "constraints": [
      "`1 <= a, b <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2428",
    "slug": "maximum-sum-of-an-hourglass",
    "title": "Maximum Sum of an Hourglass",
    "difficulty": "Medium",
    "description": "You are given an `m x n` integer matrix `grid`. We define an **hourglass** as a part of the matrix with the following form: Return _the **maximum** sum of the elements of an hourglass_. **Note** that an hourglass cannot be rotated and must be entirely contained within the matrix.",
    "examples": [
      {
        "input": "grid = \\[\\[6,2,1,3\\],\\[4,2,1,5\\],\\[9,2,8,7\\],\\[4,1,2,9\\]\\]",
        "output": "30",
        "explanation": "The cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30."
      },
      {
        "input": "grid = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]",
        "output": "35",
        "explanation": "There is only one hourglass in the matrix, with the sum: 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`3 <= m, n <= 150`",
      "`0 <= grid[i][j] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2429",
    "slug": "minimize-xor",
    "title": "Minimize XOR",
    "difficulty": "Medium",
    "description": "Given two positive integers `num1` and `num2`, find the positive integer `x` such that: *  `x` has the same number of set bits as `num2`, and *  The value `x XOR num1` is **minimal**. Note that `XOR` is the bitwise XOR operation. Return _the integer_ `x`. The test cases are generated such that `x` is **uniquely determined**. The number of **set bits** of an integer is the number of `1`'s in its binary representation.",
    "examples": [
      {
        "input": "num1 = 3, num2 = 5",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "num1 = 1, num2 = 12",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= num1, num2 <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2430",
    "slug": "maximum-deletions-on-a-string",
    "title": "Maximum Deletions on a String",
    "difficulty": "Hard",
    "description": "You are given a string `s` consisting of only lowercase English letters. In one operation, you can: *  Delete **the entire string** `s`, or *  Delete the **first** `i` letters of `s` if the first `i` letters of `s` are **equal** to the following `i` letters in `s`, for any `i` in the range `1 <= i <= s.length / 2`. For example, if `s = \"ababc \"`, then in one operation, you could delete the first two letters of `s` to get `\"abc \"`, since the first two letters of `s` and the following two letters of `s` are both equal to `\"ab \"`. Return _the **maximum** number of operations needed to delete all of_ `s`.",
    "examples": [
      {
        "input": "s =  \"abcabcdabc \"",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "s =  \"aaabaab \"",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "s =  \"aaaaa \"",
        "output": "5",
        "explanation": "In each operation, we can delete the first letter of s."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 4000`",
      "`s` consists only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2431",
    "slug": "maximize-total-tastiness-of-purchased-fruits",
    "title": "Maximize Total Tastiness of Purchased Fruits",
    "difficulty": "Medium",
    "description": "You are given two non-negative integer arrays `price` and `tastiness`, both arrays have the same length `n`. You are also given two non-negative integers `maxAmount` and `maxCoupons`. For every integer `i` in range `[0, n - 1]`: *  `price[i]` describes the price of `ith` fruit. *  `tastiness[i]` describes the tastiness of `ith` fruit. You want to purchase some fruits such that total tastiness is maximized and the total price does not exceed `maxAmount`. Additionally, you can use a coupon to purchase fruit for **half of its price** (rounded down to the closest integer). You can use at most `maxCoupons` of such coupons. Return _the maximum total tastiness that can be purchased_. **Note that:** *  You can purchase each fruit at most once. *  You can use coupons on some fruit at most once.",
    "examples": [
      {
        "input": "price = \\[10,20,20\\], tastiness = \\[5,8,8\\], maxAmount = 20, maxCoupons = 1",
        "output": "13",
        "explanation": "It is possible to make total tastiness 13 in following way:"
      },
      {
        "input": "price = \\[10,15,7\\], tastiness = \\[5,8,20\\], maxAmount = 10, maxCoupons = 2",
        "output": "28",
        "explanation": "It is possible to make total tastiness 20 in following way:"
      }
    ],
    "constraints": [
      "`n == price.length == tastiness.length`",
      "`1 <= n <= 100`",
      "`0 <= price[i], tastiness[i], maxAmount <= 1000`",
      "`0 <= maxCoupons <= 5`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2432",
    "slug": "the-employee-that-worked-on-the-longest-task",
    "title": "The Employee That Worked on the Longest Task",
    "difficulty": "Easy",
    "description": "There are `n` employees, each with a unique id from `0` to `n - 1`. You are given a 2D integer array `logs` where `logs[i] = [idi, leaveTimei]` where: *  `idi` is the id of the employee that worked on the `ith` task, and *  `leaveTimei` is the time at which the employee finished the `ith` task. All the values `leaveTimei` are **unique**. Note that the `ith` task starts the moment right after the `(i - 1)th` task ends, and the `0th` task starts at time `0`. Return _the id of the employee that worked the task with the longest time._ If there is a tie between two or more employees, return _the **smallest** id among them_.",
    "examples": [
      {
        "input": "n = 10, logs = \\[\\[0,3\\],\\[2,5\\],\\[0,9\\],\\[1,15\\]\\]",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "n = 26, logs = \\[\\[1,1\\],\\[3,7\\],\\[2,12\\],\\[7,17\\]\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "n = 2, logs = \\[\\[0,10\\],\\[1,20\\]\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= n <= 500`",
      "`1 <= logs.length <= 500`",
      "`logs[i].length == 2`",
      "`0 <= idi <= n - 1`",
      "`1 <= leaveTimei <= 500`",
      "`idi != idi+1`",
      "`leaveTimei` are sorted in a strictly increasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2433",
    "slug": "find-the-original-array-of-prefix-xor",
    "title": "Find The Original Array of Prefix Xor",
    "difficulty": "Medium",
    "description": "You are given an **integer** array `pref` of size `n`. Find and return _the array_ `arr` _of size_ `n` _that satisfies_: *  `pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]`. Note that `^` denotes the **bitwise-xor** operation. It can be proven that the answer is **unique**.",
    "examples": [
      {
        "input": "pref = \\[5,2,0,3,1\\]",
        "output": "\\[5,7,2,3,2\\]",
        "explanation": "From the array \\[5,7,2,3,2\\] we have the following:"
      },
      {
        "input": "pref = \\[13\\]",
        "output": "\\[13\\]",
        "explanation": "We have pref\\[0\\] = arr\\[0\\] = 13."
      }
    ],
    "constraints": [
      "`1 <= pref.length <= 105`",
      "`0 <= pref[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2434",
    "slug": "using-a-robot-to-print-the-lexicographically-smallest-string",
    "title": "Using a Robot to Print the Lexicographically Smallest String",
    "difficulty": "Medium",
    "description": "You are given a string `s` and a robot that currently holds an empty string `t`. Apply one of the following operations until `s` and `t` **are both empty**: *  Remove the **first** character of a string `s` and give it to the robot. The robot will append this character to the string `t`. *  Remove the **last** character of a string `t` and give it to the robot. The robot will write this character on paper. Return _the lexicographically smallest string that can be written on the paper._",
    "examples": [
      {
        "input": "s =  \"zza \"",
        "output": "\"azz \"",
        "explanation": "Let p denote the written string."
      },
      {
        "input": "s =  \"bac \"",
        "output": "\"abc \"",
        "explanation": "Let p denote the written string."
      },
      {
        "input": "s =  \"bdda \"",
        "output": "\"addb \"",
        "explanation": "Let p denote the written string."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of only English lowercase letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2435",
    "slug": "paths-in-matrix-whose-sum-is-divisible-by-k",
    "title": "Paths in Matrix Whose Sum Is Divisible by K",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** `m x n` integer matrix `grid` and an integer `k`. You are currently at position `(0, 0)` and you want to reach position `(m - 1, n - 1)` moving only **down** or **right**. Return _the number of paths where the sum of the elements on the path is divisible by_ `k`. Since the answer may be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "grid = \\[\\[5,2,4\\],\\[3,0,5\\],\\[0,7,2\\]\\], k = 3",
        "output": "2",
        "explanation": "There are two paths where the sum of the elements on the path is divisible by k."
      },
      {
        "input": "grid = \\[\\[0,0\\]\\], k = 5",
        "output": "1",
        "explanation": "The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5."
      },
      {
        "input": "grid = \\[\\[7,3,4,9\\],\\[2,3,6,2\\],\\[2,3,7,0\\]\\], k = 1",
        "output": "10",
        "explanation": "Every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 5  104`",
      "`1 <= m  n <= 5  104`",
      "`0 <= grid[i][j] <= 100`",
      "`1 <= k <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2436",
    "slug": "minimum-split-into-subarrays-with-gcd-greater-than-one",
    "title": "Minimum Split Into Subarrays With GCD Greater Than One",
    "difficulty": "Medium",
    "description": "You are given an array `nums` consisting of positive integers. Split the array into **one or more** disjoint subarrays such that: *  Each element of the array belongs to **exactly one** subarray, and *  The **GCD** of the elements of each subarray is strictly greater than `1`. Return _the minimum number of subarrays that can be obtained after the split_. **Note** that: *  The **GCD** of a subarray is the largest positive integer that evenly divides all the elements of the subarray. *  A **subarray** is a contiguous part of the array.",
    "examples": [
      {
        "input": "nums = \\[12,6,3,14,8\\]",
        "output": "2",
        "explanation": "We can split the array into the subarrays: \\[12,6,3\\] and \\[14,8\\]."
      },
      {
        "input": "nums = \\[4,12,6,14\\]",
        "output": "1",
        "explanation": "We can split the array into only one subarray, which is the whole array."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2000`",
      "`2 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2437",
    "slug": "number-of-valid-clock-times",
    "title": "Number of Valid Clock Times",
    "difficulty": "Easy",
    "description": "You are given a string of length `5` called `time`, representing the current time on a digital clock in the format `\"hh:mm \"`. The **earliest** possible time is `\"00:00 \"` and the **latest** possible time is `\"23:59 \"`. In the string `time`, the digits represented by the `?` symbol are **unknown**, and must be **replaced** with a digit from `0` to `9`. Return _an integer_ `answer`_, the number of valid clock times that can be created by replacing every_ `?` _with a digit from_ `0` _to_ `9`.",
    "examples": [
      {
        "input": "time =  \"?5:00 \"",
        "output": "2",
        "explanation": "We can replace the ? with either a 0 or 1, producing  \"05:00 \" or  \"15:00 \". Note that we cannot replace it with a 2, since the time  \"25:00 \" is invalid. In total, we have two choices."
      },
      {
        "input": "time =  \"0?:0? \"",
        "output": "100",
        "explanation": "Each ? can be replaced by any digit from 0 to 9, so we have 100 total choices."
      },
      {
        "input": "time =  \"??:?? \"",
        "output": "1440",
        "explanation": "There are 24 possible choices for the hours, and 60 possible choices for the minutes. In total, we have 24 \\* 60 = 1440 choices."
      }
    ],
    "constraints": [
      "`time` is a valid string of length `5` in the format `\"hh:mm \"`.",
      "`\"00 \" <= hh <= \"23 \"`",
      "`\"00 \" <= mm <= \"59 \"`",
      "Some of the digits might be replaced with `'?'` and need to be replaced with digits from `0` to `9`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2438",
    "slug": "range-product-queries-of-powers",
    "title": "Range Product Queries of Powers",
    "difficulty": "Medium",
    "description": "Given a positive integer `n`, there exists a **0-indexed** array called `powers`, composed of the **minimum** number of powers of `2` that sum to `n`. The array is sorted in **non-decreasing** order, and there is **only one** way to form the array. You are also given a **0-indexed** 2D integer array `queries`, where `queries[i] = [lefti, righti]`. Each `queries[i]` represents a query where you have to find the product of all `powers[j]` with `lefti <= j <= righti`. Return _an array_ `answers`_, equal in length to_ `queries`_, where_ `answers[i]` _is the answer to the_ `ith` _query_. Since the answer to the `ith` query may be too large, each `answers[i]` should be returned **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "n = 15, queries = \\[\\[0,1\\],\\[2,2\\],\\[0,3\\]\\]",
        "output": "\\[2,4,64\\]",
        "explanation": ""
      },
      {
        "input": "n = 2, queries = \\[\\[0,0\\]\\]",
        "output": "\\[2\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 109`",
      "`1 <= queries.length <= 105`",
      "`0 <= starti <= endi < powers.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2439",
    "slug": "minimize-maximum-of-array",
    "title": "Minimize Maximum of Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array `nums` comprising of `n` non-negative integers. In one operation, you must: *  Choose an integer `i` such that `1 <= i < n` and `nums[i] > 0`. *  Decrease `nums[i]` by 1. *  Increase `nums[i - 1]` by 1. Return _the **minimum** possible value of the **maximum** integer of_ `nums` _after performing **any** number of operations_.",
    "examples": [
      {
        "input": "nums = \\[3,7,1,6\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "nums = \\[10,1\\]",
        "output": "10",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`2 <= n <= 105`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2440",
    "slug": "create-components-with-same-value",
    "title": "Create Components With Same Value",
    "difficulty": "Hard",
    "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`. You are given a **0-indexed** integer array `nums` of length `n` where `nums[i]` represents the value of the `ith` node. You are also given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. You are allowed to **delete** some edges, splitting the tree into multiple connected components. Let the **value** of a component be the sum of **all** `nums[i]` for which node `i` is in the component. Return _the **maximum** number of edges you can delete, such that every connected component in the tree has the same value._",
    "examples": [
      {
        "input": "nums = \\[6,2,2,2,6\\], edges = \\[\\[0,1\\],\\[1,2\\],\\[1,3\\],\\[3,4\\]\\]",
        "output": "2",
        "explanation": "The above figure shows how we can delete the edges \\[0,1\\] and \\[3,4\\]. The created components are nodes \\[0\\], \\[1,2,3\\] and \\[4\\]. The sum of the values in each component equals 6. It can be proven that no better deletion exists, so the answer is 2."
      },
      {
        "input": "nums = \\[2\\], edges = \\[\\]",
        "output": "0",
        "explanation": "There are no edges to be deleted."
      }
    ],
    "constraints": [
      "`1 <= n <= 2  104`",
      "`nums.length == n`",
      "`1 <= nums[i] <= 50`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= edges[i][0], edges[i][1] <= n - 1`",
      "`edges` represents a valid tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2441",
    "slug": "largest-positive-integer-that-exists-with-its-negative",
    "title": "Largest Positive Integer That Exists With Its Negative",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` that **does not contain** any zeros, find **the largest positive** integer `k` such that `-k` also exists in the array. Return _the positive integer_ `k`. If there is no such integer, return `-1`.",
    "examples": [
      {
        "input": "nums = \\[-1,2,-3,3\\]",
        "output": "3",
        "explanation": "3 is the only valid k we can find in the array."
      },
      {
        "input": "nums = \\[-1,10,6,7,-7,1\\]",
        "output": "7",
        "explanation": "Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value."
      },
      {
        "input": "nums = \\[-10,8,6,7,-2,-3\\]",
        "output": "-1",
        "explanation": "There is no a single valid k, we return -1."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`-1000 <= nums[i] <= 1000`",
      "`nums[i] != 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2442",
    "slug": "count-number-of-distinct-integers-after-reverse-operations",
    "title": "Count Number of Distinct Integers After Reverse Operations",
    "difficulty": "Medium",
    "description": "You are given an array `nums` consisting of **positive** integers. You have to take each integer in the array, **reverse its digits**, and add it to the end of the array. You should apply this operation to the original integers in `nums`. Return _the number of **distinct** integers in the final array_.",
    "examples": [
      {
        "input": "nums = \\[1,13,10,12,31\\]",
        "output": "6",
        "explanation": "After including the reverse of each number, the resulting array is \\[1,13,10,12,31,1,31,1,21,13\\]."
      },
      {
        "input": "nums = \\[2,2,2\\]",
        "output": "1",
        "explanation": "After including the reverse of each number, the resulting array is \\[2,2,2,2,2,2\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2443",
    "slug": "sum-of-number-and-its-reverse",
    "title": "Sum of Number and Its Reverse",
    "difficulty": "Medium",
    "description": "Given a **non-negative** integer `num`, return `true` _if_ `num` _can be expressed as the sum of any **non-negative** integer and its reverse, or_ `false` _otherwise._",
    "examples": [
      {
        "input": "num = 443",
        "output": "true",
        "explanation": "172 + 271 = 443 so we return true."
      },
      {
        "input": "num = 63",
        "output": "false",
        "explanation": "63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false."
      },
      {
        "input": "num = 181",
        "output": "true",
        "explanation": "140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros."
      }
    ],
    "constraints": [
      "`0 <= num <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2444",
    "slug": "count-subarrays-with-fixed-bounds",
    "title": "Count Subarrays With Fixed Bounds",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` and two integers `minK` and `maxK`. A **fixed-bound subarray** of `nums` is a subarray that satisfies the following conditions: *  The **minimum** value in the subarray is equal to `minK`. *  The **maximum** value in the subarray is equal to `maxK`. Return _the **number** of fixed-bound subarrays_. A **subarray** is a **contiguous** part of an array.",
    "examples": [
      {
        "input": "nums = \\[1,3,5,2,7,5\\], minK = 1, maxK = 5",
        "output": "2",
        "explanation": "The fixed-bound subarrays are \\[1,3,5\\] and \\[1,3,5,2\\]."
      },
      {
        "input": "nums = \\[1,1,1,1\\], minK = 1, maxK = 1",
        "output": "10",
        "explanation": "Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`1 <= nums[i], minK, maxK <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2445",
    "slug": "number-of-nodes-with-value-one",
    "title": "Number of Nodes With Value One",
    "difficulty": "Medium",
    "description": "There is an **undirected** connected tree with `n` nodes labeled from `1` to `n` and `n - 1` edges. You are given the integer `n`. The parent node of a node with a label `v` is the node with the label `floor (v / 2)`. The root of the tree is the node with the label `1`. *  For example, if `n = 7`, then the node with the label `3` has the node with the label `floor(3 / 2) = 1` as its parent, and the node with the label `7` has the node with the label `floor(7 / 2) = 3` as its parent. You are also given an integer array `queries`. Initially, every node has a value `0` on it. For each query `queries[i]`, you should flip all values in the subtree of the node with the label `queries[i]`. Return _the total number of nodes with the value_ `1` _**after processing all the queries**_. **Note** that: *  Flipping the value of a node means that the node with the value `0` becomes `1` and vice versa. *  `floor(x)` is equivalent to rounding `x` down to the nearest integer.",
    "examples": [
      {
        "input": "n = 5 , queries = \\[1,2,5\\]",
        "output": "3",
        "explanation": "The diagram above shows the tree structure and its status after performing the queries. The blue node represents the value 0, and the red node represents the value 1."
      },
      {
        "input": "n = 3, queries = \\[2,3,3\\]",
        "output": "1",
        "explanation": "The diagram above shows the tree structure and its status after performing the queries. The blue node represents the value 0, and the red node represents the value 1."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`1 <= queries.length <= 105`",
      "`1 <= queries[i] <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2446",
    "slug": "determine-if-two-events-have-conflict",
    "title": "Determine if Two Events Have Conflict",
    "difficulty": "Easy",
    "description": "You are given two arrays of strings that represent two inclusive events that happened **on the same day**, `event1` and `event2`, where: *  `event1 = [startTime1, endTime1]` and *  `event2 = [startTime2, endTime2]`. Event times are valid 24 hours format in the form of `HH:MM`. A **conflict** happens when two events have some non-empty intersection (i.e., some moment is common to both events). Return `true` _if there is a conflict between two events. Otherwise, return_ `false`.",
    "examples": [
      {
        "input": "event1 = \\[ \"01:15 \", \"02:00 \"\\], event2 = \\[ \"02:00 \", \"03:00 \"\\]",
        "output": "true",
        "explanation": "The two events intersect at time 2:00."
      },
      {
        "input": "event1 = \\[ \"01:00 \", \"02:00 \"\\], event2 = \\[ \"01:20 \", \"03:00 \"\\]",
        "output": "true",
        "explanation": "The two events intersect starting from 01:20 to 02:00."
      },
      {
        "input": "event1 = \\[ \"10:00 \", \"11:00 \"\\], event2 = \\[ \"14:00 \", \"15:00 \"\\]",
        "output": "false",
        "explanation": "The two events do not intersect."
      }
    ],
    "constraints": [
      "`evnet1.length == event2.length == 2.`",
      "`event1[i].length == event2[i].length == 5`",
      "`startTime1 <= endTime1`",
      "`startTime2 <= endTime2`",
      "All the event times follow the `HH:MM` format."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2447",
    "slug": "number-of-subarrays-with-gcd-equal-to-k",
    "title": "Number of Subarrays With GCD Equal to K",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and an integer `k`, return _the number of **subarrays** of_ `nums` _where the greatest common divisor of the subarray's elements is_ `k`. A **subarray** is a contiguous non-empty sequence of elements within an array. The **greatest common divisor of an array** is the largest integer that evenly divides all the array elements.",
    "examples": [
      {
        "input": "nums = \\[9,3,1,2,6,3\\], k = 3",
        "output": "4",
        "explanation": "The subarrays of nums where 3 is the greatest common divisor of all the subarray's elements are:"
      },
      {
        "input": "nums = \\[4\\], k = 7",
        "output": "0",
        "explanation": "There are no subarrays of nums where 7 is the greatest common divisor of all the subarray's elements."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i], k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2448",
    "slug": "minimum-cost-to-make-array-equal",
    "title": "Minimum Cost to Make Array Equal",
    "difficulty": "Hard",
    "description": "You are given two **0-indexed** arrays `nums` and `cost` consisting each of `n` **positive** integers. You can do the following operation **any** number of times: *  Increase or decrease **any** element of the array `nums` by `1`. The cost of doing one operation on the `ith` element is `cost[i]`. Return _the **minimum** total cost such that all the elements of the array_ `nums` _become **equal**_.",
    "examples": [
      {
        "input": "nums = \\[1,3,5,2\\], cost = \\[2,3,1,14\\]",
        "output": "8",
        "explanation": "We can make all the elements equal to 2 in the following way:"
      },
      {
        "input": "nums = \\[2,2,2,2,2\\], cost = \\[4,2,8,1,3\\]",
        "output": "0",
        "explanation": "All the elements are already equal, so no operations are needed."
      }
    ],
    "constraints": [
      "`n == nums.length == cost.length`",
      "`1 <= n <= 105`",
      "`1 <= nums[i], cost[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2449",
    "slug": "minimum-number-of-operations-to-make-arrays-similar",
    "title": "Minimum Number of Operations to Make Arrays Similar",
    "difficulty": "Hard",
    "description": "You are given two positive integer arrays `nums` and `target`, of the same length. In one operation, you can choose any two **distinct** indices `i` and `j` where `0 <= i, j < nums.length` and: *  set `nums[i] = nums[i] + 2` and *  set `nums[j] = nums[j] - 2`. Two arrays are considered to be **similar** if the frequency of each element is the same. Return _the minimum number of operations required to make_ `nums` _similar to_ `target`. The test cases are generated such that `nums` can always be similar to `target`.",
    "examples": [
      {
        "input": "nums = \\[8,12,6\\], target = \\[2,14,10\\]",
        "output": "2",
        "explanation": "It is possible to make nums similar to target in two operations:"
      },
      {
        "input": "nums = \\[1,2,5\\], target = \\[4,1,3\\]",
        "output": "1",
        "explanation": "We can make nums similar to target in one operation:"
      },
      {
        "input": "nums = \\[1,1,1,1,1\\], target = \\[1,1,1,1,1\\]",
        "output": "0",
        "explanation": "The array nums is already similiar to target."
      }
    ],
    "constraints": [
      "`n == nums.length == target.length`",
      "`1 <= n <= 105`",
      "`1 <= nums[i], target[i] <= 106`",
      "It is possible to make `nums` similar to `target`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2450",
    "slug": "number-of-distinct-binary-strings-after-applying-operations",
    "title": "Number of Distinct Binary Strings After Applying Operations",
    "difficulty": "Medium",
    "description": "You are given a **binary** string `s` and a positive integer `k`. You can apply the following operation on the string **any** number of times: *  Choose any substring of size `k` from `s` and **flip** all its characters, that is, turn all `1`'s into `0`'s, and all `0`'s into `1`'s. Return _the number of **distinct** strings you can obtain_. Since the answer may be too large, return it **modulo** `109 + 7`. **Note** that: *  A binary string is a string that consists **only** of the characters `0` and `1`. *  A substring is a contiguous part of a string.",
    "examples": [
      {
        "input": "s =  \"1001 \", k = 3",
        "output": "4",
        "explanation": "We can obtain the following strings:"
      },
      {
        "input": "s =  \"10110 \", k = 5",
        "output": "2",
        "explanation": "We can obtain the following strings:"
      }
    ],
    "constraints": [
      "`1 <= k <= s.length <= 105`",
      "`s[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2451",
    "slug": "odd-string-difference",
    "title": "Odd String Difference",
    "difficulty": "Easy",
    "description": "You are given an array of equal-length strings `words`. Assume that the length of each string is `n`. Each string `words[i]` can be converted into a **difference integer array** `difference[i]` of length `n - 1` where `difference[i][j] = words[i][j+1] - words[i][j]` where `0 <= j <= n - 2`. Note that the difference between two letters is the difference between their **positions** in the alphabet i.e. the position of `'a'` is `0`, `'b'` is `1`, and `'z'` is `25`. *  For example, for the string `\"acb \"`, the difference integer array is `[2 - 0, 1 - 2] = [2, -1]`. All the strings in words have the same difference integer array, **except one**. You should find that string. Return _the string in_ `words` _that has different **difference integer array**._",
    "examples": [
      {
        "input": "words = \\[ \"adc \", \"wzy \", \"abc \"\\]",
        "output": "\"abc \"",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"aaa \", \"bob \", \"ccc \", \"ddd \"\\]",
        "output": "\"bob \"",
        "explanation": "All the integer arrays are \\[0, 0\\] except for  \"bob \", which corresponds to \\[13, -13\\]."
      }
    ],
    "constraints": [
      "`3 <= words.length <= 100`",
      "`n == words[i].length`",
      "`2 <= n <= 20`",
      "`words[i]` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2452",
    "slug": "words-within-two-edits-of-dictionary",
    "title": "Words Within Two Edits of Dictionary",
    "difficulty": "Medium",
    "description": "You are given two string arrays, `queries` and `dictionary`. All words in each array comprise of lowercase English letters and have the same length. In one **edit** you can take a word from `queries`, and change any letter in it to any other letter. Find all words from `queries` that, after a **maximum** of two edits, equal some word from `dictionary`. Return _a list of all words from_ `queries`_,_ _that match with some word from_ `dictionary` _after a maximum of **two edits**_. Return the words in the **same order** they appear in `queries`.",
    "examples": [
      {
        "input": "queries = \\[ \"word \", \"note \", \"ants \", \"wood \"\\], dictionary = \\[ \"wood \", \"joke \", \"moat \"\\]",
        "output": "\\[ \"word \", \"note \", \"wood \"\\]",
        "explanation": ""
      },
      {
        "input": "queries = \\[ \"yes \"\\], dictionary = \\[ \"not \"\\]",
        "output": "\\[\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= queries.length, dictionary.length <= 100`",
      "`n == queries[i].length == dictionary[j].length`",
      "`1 <= n <= 100`",
      "All `queries[i]` and `dictionary[j]` are composed of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2453",
    "slug": "destroy-sequential-targets",
    "title": "Destroy Sequential Targets",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array `nums` consisting of positive integers, representing targets on a number line. You are also given an integer `space`. You have a machine which can destroy targets. **Seeding** the machine with some `nums[i]` allows it to destroy all targets with values that can be represented as `nums[i] + c * space`, where `c` is any non-negative integer. You want to destroy the **maximum** number of targets in `nums`. Return _the **minimum value** of_ `nums[i]` _you can seed the machine with to destroy the maximum number of targets._",
    "examples": [
      {
        "input": "nums = \\[3,7,8,1,1,5\\], space = 2",
        "output": "1",
        "explanation": "If we seed the machine with nums\\[3\\], then we destroy all targets equal to 1,3,5,7,9,..."
      },
      {
        "input": "nums = \\[1,3,5,2,4,6\\], space = 2",
        "output": "1",
        "explanation": "Seeding the machine with nums\\[0\\], or nums\\[3\\] destroys 3 targets."
      },
      {
        "input": "nums = \\[6,2,5\\], space = 100",
        "output": "2",
        "explanation": "Whatever initial seed we select, we can only destroy 1 target. The minimal seed is nums\\[1\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`",
      "`1 <= space <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2454",
    "slug": "next-greater-element-iv",
    "title": "Next Greater Element IV",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** array of non-negative integers `nums`. For each integer in `nums`, you must find its respective **second greater** integer. The **second greater** integer of `nums[i]` is `nums[j]` such that: *  `j > i` *  `nums[j] > nums[i]` *  There exists **exactly one** index `k` such that `nums[k] > nums[i]` and `i < k < j`. If there is no such `nums[j]`, the second greater integer is considered to be `-1`. *  For example, in the array `[1, 2, 4, 3]`, the second greater integer of `1` is `4`, `2` is `3`, and that of `3` and `4` is `-1`. Return _an integer array_ `answer`_, where_ `answer[i]` _is the second greater integer of_ `nums[i]`_._",
    "examples": [
      {
        "input": "nums = \\[2,4,0,9,6\\]",
        "output": "\\[9,6,6,-1,-1\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[3,3\\]",
        "output": "\\[-1,-1\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2455",
    "slug": "average-value-of-even-numbers-that-are-divisible-by-three",
    "title": "Average Value of Even Numbers That Are Divisible by Three",
    "difficulty": "Easy",
    "description": "Given an integer array `nums` of **positive** integers, return _the average value of all even integers that are divisible by_ `3`_._ Note that the **average** of `n` elements is the **sum** of the `n` elements divided by `n` and **rounded down** to the nearest integer.",
    "examples": [
      {
        "input": "nums = \\[1,3,6,10,12,15\\]",
        "output": "9",
        "explanation": "6 and 12 are even numbers that are divisible by 3. (6 + 12) / 2 = 9."
      },
      {
        "input": "nums = \\[1,2,4,7,10\\]",
        "output": "0",
        "explanation": "There is no single number that satisfies the requirement, so return 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2456",
    "slug": "most-popular-video-creator",
    "title": "Most Popular Video Creator",
    "difficulty": "Medium",
    "description": "You are given two string arrays `creators` and `ids`, and an integer array `views`, all of length `n`. The `ith` video on a platform was created by `creator[i]`, has an id of `ids[i]`, and has `views[i]` views. The **popularity** of a creator is the **sum** of the number of views on **all** of the creator's videos. Find the creator with the **highest** popularity and the id of their **most** viewed video. *  If multiple creators have the highest popularity, find all of them. *  If multiple videos have the highest view count for a creator, find the lexicographically **smallest** id. Return _a 2D array of strings_ `answer` _where_ `answer[i] = [creatori, idi]` _means that_ `creatori` _has the **highest** popularity and_ `idi` _is the id of their most popular video._ The answer can be returned in any order.",
    "examples": [
      {
        "input": "creators = \\[ \"alice \", \"bob \", \"alice \", \"chris \"\\], ids = \\[ \"one \", \"two \", \"three \", \"four \"\\], views = \\[5,10,5,4\\]",
        "output": "\\[\\[ \"alice \", \"one \"\\],\\[ \"bob \", \"two \"\\]\\]",
        "explanation": ""
      },
      {
        "input": "creators = \\[ \"alice \", \"alice \", \"alice \"\\], ids = \\[ \"a \", \"b \", \"c \"\\], views = \\[1,2,2\\]",
        "output": "\\[\\[ \"alice \", \"b \"\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == creators.length == ids.length == views.length`",
      "`1 <= n <= 105`",
      "`1 <= creators[i].length, ids[i].length <= 5`",
      "`creators[i]` and `ids[i]` consist only of lowercase English letters.",
      "`0 <= views[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2457",
    "slug": "minimum-addition-to-make-integer-beautiful",
    "title": "Minimum Addition to Make Integer Beautiful",
    "difficulty": "Medium",
    "description": "You are given two positive integers `n` and `target`. An integer is considered **beautiful** if the sum of its digits is less than or equal to `target`. Return the _minimum **non-negative** integer_ `x` _such that_ `n + x` _is beautiful_. The input will be generated such that it is always possible to make `n` beautiful.",
    "examples": [
      {
        "input": "n = 16, target = 6",
        "output": "4",
        "explanation": "Initially n is 16 and its digit sum is 1 + 6 = 7. After adding 4, n becomes 20 and digit sum becomes 2 + 0 = 2. It can be shown that we can not make n beautiful with adding non-negative integer less than 4."
      },
      {
        "input": "n = 467, target = 6",
        "output": "33",
        "explanation": "Initially n is 467 and its digit sum is 4 + 6 + 7 = 17. After adding 33, n becomes 500 and digit sum becomes 5 + 0 + 0 = 5. It can be shown that we can not make n beautiful with adding non-negative integer less than 33."
      },
      {
        "input": "n = 1, target = 1",
        "output": "0",
        "explanation": "Initially n is 1 and its digit sum is 1, which is already smaller than or equal to target."
      }
    ],
    "constraints": [
      "`1 <= n <= 1012`",
      "`1 <= target <= 150`",
      "The input will be generated such that it is always possible to make `n` beautiful."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2458",
    "slug": "height-of-binary-tree-after-subtree-removal-queries",
    "title": "Height of Binary Tree After Subtree Removal Queries",
    "difficulty": "Hard",
    "description": "You are given the `root` of a **binary tree** with `n` nodes. Each node is assigned a unique value from `1` to `n`. You are also given an array `queries` of size `m`. You have to perform `m` **independent** queries on the tree where in the `ith` query you do the following: *  **Remove** the subtree rooted at the node with the value `queries[i]` from the tree. It is **guaranteed** that `queries[i]` will **not** be equal to the value of the root. Return _an array_ `answer` _of size_ `m` _where_ `answer[i]` _is the height of the tree after performing the_ `ith` _query_. **Note**: *  The queries are independent, so the tree returns to its **initial** state after each query. *  The height of a tree is the **number of edges in the longest simple path** from the root to some node in the tree.",
    "examples": [
      {
        "input": "root = \\[1,3,4,2,null,6,5,null,null,null,null,null,7\\], queries = \\[4\\]",
        "output": "\\[2\\]",
        "explanation": "The diagram above shows the tree after removing the subtree rooted at node with value 4."
      },
      {
        "input": "root = \\[5,8,9,2,1,3,7,4,6\\], queries = \\[3,2,4,8\\]",
        "output": "\\[3,2,3,2\\]",
        "explanation": "We have the following queries:"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is `n`.",
      "`2 <= n <= 105`",
      "`1 <= Node.val <= n`",
      "All the values in the tree are unique.",
      "`m == queries.length`",
      "`1 <= m <= min(n, 104)`",
      "`1 <= queries[i] <= n`",
      "`queries[i] != root.val`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2459",
    "slug": "sort-array-by-moving-items-to-empty-space",
    "title": "Sort Array by Moving Items to Empty Space",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` of size `n` containing **each** element from `0` to `n - 1` (**inclusive**). Each of the elements from `1` to `n - 1` represents an item, and the element `0` represents an empty space. In one operation, you can move **any** item to the empty space. `nums` is considered to be sorted if the numbers of all the items are in **ascending** order and the empty space is either at the beginning or at the end of the array. For example, if `n = 4`, `nums` is sorted if: *  `nums = [0,1,2,3]` or *  `nums = [1,2,3,0]` ...and considered to be unsorted otherwise. Return _the **minimum** number of operations needed to sort_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[4,2,0,3,1\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4,0\\]",
        "output": "0",
        "explanation": "nums is already sorted so return 0."
      },
      {
        "input": "nums = \\[1,0,2,4,3\\]",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`2 <= n <= 105`",
      "`0 <= nums[i] < n`",
      "All the values of `nums` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2460",
    "slug": "apply-operations-to-an-array",
    "title": "Apply Operations to an Array",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** array `nums` of size `n` consisting of **non-negative** integers. You need to apply `n - 1` operations to this array where, in the `ith` operation (**0-indexed**), you will apply the following on the `ith` element of `nums`: *  If `nums[i] == nums[i + 1]`, then multiply `nums[i]` by `2` and set `nums[i + 1]` to `0`. Otherwise, you skip this operation. After performing **all** the operations, **shift** all the `0`'s to the **end** of the array. *  For example, the array `[1,0,2,0,0,1]` after shifting all its `0`'s to the end, is `[1,2,1,0,0,0]`. Return _the resulting array_. **Note** that the operations are applied **sequentially**, not all at once.",
    "examples": [
      {
        "input": "nums = \\[1,2,2,1,1,0\\]",
        "output": "\\[1,4,2,0,0,0\\]",
        "explanation": "We do the following operations:"
      },
      {
        "input": "nums = \\[0,1\\]",
        "output": "\\[1,0\\]",
        "explanation": "No operation can be applied, we just shift the 0 to the end."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 2000`",
      "`0 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2461",
    "slug": "maximum-sum-of-distinct-subarrays-with-length-k",
    "title": "Maximum Sum of Distinct Subarrays With Length K",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums` and an integer `k`. Find the maximum subarray sum of all the subarrays of `nums` that meet the following conditions: *  The length of the subarray is `k`, and *  All the elements of the subarray are **distinct**. Return _the maximum subarray sum of all the subarrays that meet the conditions__._ If no subarray meets the conditions, return `0`. _A **subarray** is a contiguous non-empty sequence of elements within an array._",
    "examples": [
      {
        "input": "nums = \\[1,5,4,2,9,9,9\\], k = 3",
        "output": "15",
        "explanation": "The subarrays of nums with length 3 are:"
      },
      {
        "input": "nums = \\[4,4,4\\], k = 3",
        "output": "0",
        "explanation": "The subarrays of nums with length 3 are:"
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2462",
    "slug": "total-cost-to-hire-k-workers",
    "title": "Total Cost to Hire K Workers",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `costs` where `costs[i]` is the cost of hiring the `ith` worker. You are also given two integers `k` and `candidates`. We want to hire exactly `k` workers according to the following rules: *  You will run `k` sessions and hire exactly one worker in each session. *  In each hiring session, choose the worker with the lowest cost from either the first `candidates` workers or the last `candidates` workers. Break the tie by the smallest index. *  For example, if `costs = [3,2,7,7,1,2]` and `candidates = 2`, then in the first hiring session, we will choose the `4th` worker because they have the lowest cost `[3,2,7,7,**1**,2]`. *  In the second hiring session, we will choose `1st` worker because they have the same lowest cost as `4th` worker but they have the smallest index `[3,**2**,7,7,2]`. Please note that the indexing may be changed in the process. *  If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index. *  A worker can only be chosen once. Return _the total cost to hire exactly_ `k` _workers._",
    "examples": [
      {
        "input": "costs = \\[17,12,10,2,7,2,11,20,8\\], k = 3, candidates = 4",
        "output": "11",
        "explanation": "We hire 3 workers in total. The total cost is initially 0."
      },
      {
        "input": "costs = \\[1,2,4,1\\], k = 3, candidates = 3",
        "output": "4",
        "explanation": "We hire 3 workers in total. The total cost is initially 0."
      }
    ],
    "constraints": [
      "`1 <= costs.length <= 105`",
      "`1 <= costs[i] <= 105`",
      "`1 <= k, candidates <= costs.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2463",
    "slug": "minimum-total-distance-traveled",
    "title": "Minimum Total Distance Traveled",
    "difficulty": "Hard",
    "description": "There are some robots and factories on the X-axis. You are given an integer array `robot` where `robot[i]` is the position of the `ith` robot. You are also given a 2D integer array `factory` where `factory[j] = [positionj, limitj]` indicates that `positionj` is the position of the `jth` factory and that the `jth` factory can repair at most `limitj` robots. The positions of each robot are **unique**. The positions of each factory are also **unique**. Note that a robot can be **in the same position** as a factory initially. All the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving. **At any moment**, you can set the initial direction of moving for **some** robot. Your target is to minimize the total distance traveled by all the robots. Return _the minimum total distance traveled by all the robots_. The test cases are generated such that all the robots can be repaired. **Note that** *  All robots move at the same speed. *  If two robots move in the same direction, they will never collide. *  If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other. *  If a robot passes by a factory that reached its limits, it crosses it as if it does not exist. *  If the robot moved from a position `x` to a position `y`, the distance it moved is `|y - x|`.",
    "examples": [
      {
        "input": "robot = \\[0,4,6\\], factory = \\[\\[2,2\\],\\[6,2\\]\\]",
        "output": "4",
        "explanation": "As shown in the figure:"
      },
      {
        "input": "robot = \\[1,-1\\], factory = \\[\\[-2,1\\],\\[2,1\\]\\]",
        "output": "2",
        "explanation": "As shown in the figure:"
      }
    ],
    "constraints": [
      "`1 <= robot.length, factory.length <= 100`",
      "`factory[j].length == 2`",
      "`-109 <= robot[i], positionj <= 109`",
      "`0 <= limitj <= robot.length`",
      "The input will be generated such that it is always possible to repair every robot."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2464",
    "slug": "minimum-subarrays-in-a-valid-split",
    "title": "Minimum Subarrays in a Valid Split",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. Splitting of an integer array `nums` into **subarrays** is **valid** if: *  the _greatest common divisor_ of the first and last elements of each subarray is **greater** than `1`, and *  each element of `nums` belongs to exactly one subarray. Return _the **minimum** number of subarrays in a **valid** subarray splitting of_ `nums`. If a valid subarray splitting is not possible, return `-1`. **Note** that: *  The **greatest common divisor** of two numbers is the largest positive integer that evenly divides both numbers. *  A **subarray** is a contiguous non-empty part of an array.",
    "examples": [
      {
        "input": "nums = \\[2,6,3,4,3\\]",
        "output": "2",
        "explanation": "We can create a valid split in the following way: \\[2,6\\] | \\[3,4,3\\]."
      },
      {
        "input": "nums = \\[3,5\\]",
        "output": "2",
        "explanation": "We can create a valid split in the following way: \\[3\\] | \\[5\\]."
      },
      {
        "input": "nums = \\[1,2,1\\]",
        "output": "-1",
        "explanation": "It is impossible to create valid split."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2465",
    "slug": "number-of-distinct-averages",
    "title": "Number of Distinct Averages",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums` of **even** length. As long as `nums` is **not** empty, you must repetitively: *  Find the minimum number in `nums` and remove it. *  Find the maximum number in `nums` and remove it. *  Calculate the average of the two removed numbers. The **average** of two numbers `a` and `b` is `(a + b) / 2`. *  For example, the average of `2` and `3` is `(2 + 3) / 2 = 2.5`. Return _the number of **distinct** averages calculated using the above process_. **Note** that when there is a tie for a minimum or maximum number, any can be removed.",
    "examples": [
      {
        "input": "nums = \\[4,1,4,0,3,5\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,100\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 100`",
      "`nums.length` is even.",
      "`0 <= nums[i] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2466",
    "slug": "count-ways-to-build-good-strings",
    "title": "Count Ways To Build Good Strings",
    "difficulty": "Medium",
    "description": "Given the integers `zero`, `one`, `low`, and `high`, we can construct a string by starting with an empty string, and then at each step perform either of the following: *  Append the character `'0'` `zero` times. *  Append the character `'1'` `one` times. This can be performed any number of times. A **good** string is a string constructed by the above process having a **length** between `low` and `high` (**inclusive**). Return _the number of **different** good strings that can be constructed satisfying these properties._ Since the answer can be large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "low = 3, high = 3, zero = 1, one = 1",
        "output": "8",
        "explanation": ""
      },
      {
        "input": "low = 2, high = 3, zero = 1, one = 2",
        "output": "5",
        "explanation": "The good strings are  \"00 \",  \"11 \",  \"000 \",  \"110 \", and  \"011 \"."
      }
    ],
    "constraints": [
      "`1 <= low <= high <= 105`",
      "`1 <= zero, one <= low`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2467",
    "slug": "most-profitable-path-in-a-tree",
    "title": "Most Profitable Path in a Tree",
    "difficulty": "Medium",
    "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`, rooted at node `0`. You are given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. At every node `i`, there is a gate. You are also given an array of even integers `amount`, where `amount[i]` represents: *  the price needed to open the gate at node `i`, if `amount[i]` is negative, or, *  the cash reward obtained on opening the gate at node `i`, otherwise. The game goes on as follows: *  Initially, Alice is at node `0` and Bob is at node `bob`. *  At every second, Alice and Bob **each** move to an adjacent node. Alice moves towards some **leaf node**, while Bob moves towards node `0`. *  For **every** node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that: *  If the gate is **already open**, no price will be required, nor will there be any cash reward. *  If Alice and Bob reach the node **simultaneously**, they share the price/reward for opening the gate there. In other words, if the price to open the gate is `c`, then both Alice and Bob pay `c / 2` each. Similarly, if the reward at the gate is `c`, both of them receive `c / 2` each. *  If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node `0`, he stops moving. Note that these events are **independent** of each other. Return _the **maximum** net income Alice can have if she travels towards the optimal leaf node._",
    "examples": [
      {
        "input": "edges = \\[\\[0,1\\],\\[1,2\\],\\[1,3\\],\\[3,4\\]\\], bob = 3, amount = \\[-2,4,2,-4,6\\]",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "edges = \\[\\[0,1\\]\\], bob = 1, amount = \\[-7280,2350\\]",
        "output": "-7280",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= n <= 105`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "`edges` represents a valid tree.",
      "`1 <= bob < n`",
      "`amount.length == n`",
      "`amount[i]` is an even integer in the range `[-104, 104]`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2468",
    "slug": "split-message-based-on-limit",
    "title": "Split Message Based on Limit",
    "difficulty": "Hard",
    "description": "You are given a string, `message`, and a positive integer, `limit`. You must **split** `message` into one or more **parts** based on `limit`. Each resulting part should have the suffix `\" \"`, where `\"b \"` is to be **replaced** with the total number of parts and `\"a \"` is to be **replaced** with the index of the part, starting from `1` and going up to `b`. Additionally, the length of each resulting part (including its suffix) should be **equal** to `limit`, except for the last part whose length can be **at most** `limit`. The resulting parts should be formed such that when their suffixes are removed and they are all concatenated **in order**, they should be equal to `message`. Also, the result should contain as few parts as possible. Return _the parts_ `message` _would be split into as an array of strings_. If it is impossible to split `message` as required, return _an empty array_.",
    "examples": [
      {
        "input": "message =  \"this is really a very awesome message \", limit = 9",
        "output": "\\[ \"thi<1/14> \", \"s i<2/14> \", \"s r<3/14> \", \"eal<4/14> \", \"ly <5/14> \", \"a v<6/14> \", \"ery<7/14> \", \" aw<8/14> \", \"eso<9/14> \", \"me<10/14> \", \" m<11/14> \", \"es<12/14> \", \"sa<13/14> \", \"ge<14/14> \"\\]",
        "explanation": ""
      },
      {
        "input": "message =  \"short message \", limit = 15",
        "output": "\\[ \"short mess<1/2> \", \"age<2/2> \"\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= message.length <= 104`",
      "`message` consists only of lowercase English letters and `' '`.",
      "`1 <= limit <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2469",
    "slug": "convert-the-temperature",
    "title": "Convert the Temperature",
    "difficulty": "Easy",
    "description": "You are given a non-negative floating point number rounded to two decimal places `celsius`, that denotes the **temperature in Celsius**. You should convert Celsius into **Kelvin** and **Fahrenheit** and return it as an array `ans = [kelvin, fahrenheit]`. Return _the array `ans`._ Answers within `10-5` of the actual answer will be accepted. **Note that:** *  `Kelvin = Celsius + 273.15` *  `Fahrenheit = Celsius * 1.80 + 32.00`",
    "examples": [
      {
        "input": "celsius = 36.50",
        "output": "\\[309.65000,97.70000\\]",
        "explanation": "Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70."
      },
      {
        "input": "celsius = 122.11",
        "output": "\\[395.26000,251.79800\\]",
        "explanation": "Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798."
      }
    ],
    "constraints": [
      "`0 <= celsius <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2470",
    "slug": "number-of-subarrays-with-lcm-equal-to-k",
    "title": "Number of Subarrays With LCM Equal to K",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and an integer `k`, return _the number of **subarrays** of_ `nums` _where the least common multiple of the subarray's elements is_ `k`. A **subarray** is a contiguous non-empty sequence of elements within an array. The **least common multiple of an array** is the smallest positive integer that is divisible by all the array elements.",
    "examples": [
      {
        "input": "nums = \\[3,6,2,7,1\\], k = 6",
        "output": "4",
        "explanation": "The subarrays of nums where 6 is the least common multiple of all the subarray's elements are:"
      },
      {
        "input": "nums = \\[3\\], k = 2",
        "output": "0",
        "explanation": "There are no subarrays of nums where 2 is the least common multiple of all the subarray's elements."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i], k <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2471",
    "slug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
    "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary tree with **unique values**. In one operation, you can choose any two nodes **at the same level** and swap their values. Return _the minimum number of operations needed to make the values at each level sorted in a **strictly increasing order**_. The **level** of a node is the number of edges along the path between it and the root node_._",
    "examples": [
      {
        "input": "root = \\[1,4,3,7,6,8,5,null,null,null,null,9,null,10\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "root = \\[1,3,2,7,6,5,4\\]",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "root = \\[1,2,3,4,5,6\\]",
        "output": "0",
        "explanation": "Each level is already sorted in increasing order so return 0."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[1, 105]`.",
      "`1 <= Node.val <= 105`",
      "All the values of the tree are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2472",
    "slug": "maximum-number-of-non-overlapping-palindrome-substrings",
    "title": "Maximum Number of Non-overlapping Palindrome Substrings",
    "difficulty": "Hard",
    "description": "You are given a string `s` and a **positive** integer `k`. Select a set of **non-overlapping** substrings from the string `s` that satisfy the following conditions: *  The **length** of each substring is **at least** `k`. *  Each substring is a **palindrome**. Return _the **maximum** number of substrings in an optimal selection_. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"abaccdbbd \", k = 3",
        "output": "2",
        "explanation": "We can select the substrings underlined in s =  \"**aba**cc**dbbd** \". Both  \"aba \" and  \"dbbd \" are palindromes and have a length of at least k = 3."
      },
      {
        "input": "s =  \"adbcda \", k = 2",
        "output": "0",
        "explanation": "There is no palindrome substring of length at least 2 in the string."
      }
    ],
    "constraints": [
      "`1 <= k <= s.length <= 2000`",
      "`s` consists of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2473",
    "slug": "minimum-cost-to-buy-apples",
    "title": "Minimum Cost to Buy Apples",
    "difficulty": "Medium",
    "description": "You are given a positive integer `n` representing `n` cities numbered from `1` to `n`. You are also given a **2D** array `roads`, where `roads[i] = [ai, bi, costi]` indicates that there is a **bidirectional** road between cities `ai` and `bi` with a cost of traveling equal to `costi`. You can buy apples in **any** city you want, but some cities have different costs to buy apples. You are given the array `appleCost` where `appleCost[i]` is the cost of buying one apple from city `i`. You start at some city, traverse through various roads, and eventually buy **exactly** one apple from **any** city. After you buy that apple, you have to return back to the city you **started** at, but now the cost of all the roads will be **multiplied** by a given factor `k`. Given the integer `k`, return _an array_ `answer` _of size_ `n` _where_ `answer[i]` _is the **minimum** total cost to buy an apple if you start at city_ `i`.",
    "examples": [
      {
        "input": "n = 4, roads = \\[\\[1,2,4\\],\\[2,3,2\\],\\[2,4,5\\],\\[3,4,1\\],\\[1,3,4\\]\\], appleCost = \\[56,42,102,301\\], k = 2",
        "output": "\\[54,42,48,51\\]",
        "explanation": "The minimum cost for each starting city is the following:"
      },
      {
        "input": "n = 3, roads = \\[\\[1,2,5\\],\\[2,3,1\\],\\[3,1,2\\]\\], appleCost = \\[2,3,1\\], k = 3",
        "output": "\\[2,3,1\\]",
        "explanation": "It is always optimal to buy the apple in the starting city."
      }
    ],
    "constraints": [
      "`2 <= n <= 1000`",
      "`1 <= roads.length <= 1000`",
      "`1 <= ai, bi <= n`",
      "`ai != bi`",
      "`1 <= costi <= 105`",
      "`appleCost.length == n`",
      "`1 <= appleCost[i] <= 105`",
      "`1 <= k <= 100`",
      "There are no repeated edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2475",
    "slug": "number-of-unequal-triplets-in-array",
    "title": "Number of Unequal Triplets in Array",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** array of positive integers `nums`. Find the number of triplets `(i, j, k)` that meet the following conditions: *  `0 <= i < j < k < nums.length` *  `nums[i]`, `nums[j]`, and `nums[k]` are **pairwise distinct**. *  In other words, `nums[i] != nums[j]`, `nums[i] != nums[k]`, and `nums[j] != nums[k]`. Return _the number of triplets that meet the conditions._",
    "examples": [
      {
        "input": "nums = \\[4,4,2,4,3\\]",
        "output": "3",
        "explanation": "The following triplets meet the conditions:"
      },
      {
        "input": "nums = \\[1,1,1,1,1\\]",
        "output": "0",
        "explanation": "No triplets meet the conditions so we return 0."
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 100`",
      "`1 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2476",
    "slug": "closest-nodes-queries-in-a-binary-search-tree",
    "title": "Closest Nodes Queries in a Binary Search Tree",
    "difficulty": "Medium",
    "description": "You are given the `root` of a **binary search tree** and an array `queries` of size `n` consisting of positive integers. Find a **2D** array `answer` of size `n` where `answer[i] = [mini, maxi]`: *  `mini` is the **largest** value in the tree that is smaller than or equal to `queries[i]`. If a such value does not exist, add `-1` instead. *  `maxi` is the **smallest** value in the tree that is greater than or equal to `queries[i]`. If a such value does not exist, add `-1` instead. Return _the array_ `answer`.",
    "examples": [
      {
        "input": "root = \\[6,2,13,1,4,9,15,null,null,null,null,null,null,14\\], queries = \\[2,5,16\\]",
        "output": "\\[\\[2,2\\],\\[4,6\\],\\[15,-1\\]\\]",
        "explanation": "We answer the queries in the following way:"
      },
      {
        "input": "root = \\[4,null,9\\], queries = \\[3\\]",
        "output": "\\[\\[-1,4\\]\\]",
        "explanation": "The largest number that is smaller or equal to 3 in the tree does not exist, and the smallest number that is greater or equal to 3 is 4. So the answer for the query is \\[-1,4\\]."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range `[2, 105]`.",
      "`1 <= Node.val <= 106`",
      "`n == queries.length`",
      "`1 <= n <= 105`",
      "`1 <= queries[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2477",
    "slug": "minimum-fuel-cost-to-report-to-the-capital",
    "title": "Minimum Fuel Cost to Report to the Capital",
    "difficulty": "Medium",
    "description": "There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of `n` cities numbered from `0` to `n - 1` and exactly `n - 1` roads. The capital city is city `0`. You are given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional road** connecting cities `ai` and `bi`. There is a meeting for the representatives of each city. The meeting is in the capital city. There is a car in each city. You are given an integer `seats` that indicates the number of seats in each car. A representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel. Return _the minimum number of liters of fuel to reach the capital city_.",
    "examples": [
      {
        "input": "roads = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\]\\], seats = 5",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "roads = \\[\\[3,1\\],\\[3,2\\],\\[1,0\\],\\[0,4\\],\\[0,5\\],\\[4,6\\]\\], seats = 2",
        "output": "7",
        "explanation": ""
      },
      {
        "input": "roads = \\[\\], seats = 1",
        "output": "0",
        "explanation": "No representatives need to travel to the capital city."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`roads.length == n - 1`",
      "`roads[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "`roads` represents a valid tree.",
      "`1 <= seats <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2478",
    "slug": "number-of-beautiful-partitions",
    "title": "Number of Beautiful Partitions",
    "difficulty": "Hard",
    "description": "You are given a string `s` that consists of the digits `'1'` to `'9'` and two integers `k` and `minLength`. A partition of `s` is called **beautiful** if: *  `s` is partitioned into `k` non-intersecting substrings. *  Each substring has a length of **at least** `minLength`. *  Each substring starts with a **prime** digit and ends with a **non-prime** digit. Prime digits are `'2'`, `'3'`, `'5'`, and `'7'`, and the rest of the digits are non-prime. Return _the number of **beautiful** partitions of_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"23542185131 \", k = 3, minLength = 2",
        "output": "3",
        "explanation": "There exists three ways to create a beautiful partition:"
      },
      {
        "input": "s =  \"23542185131 \", k = 3, minLength = 3",
        "output": "1",
        "explanation": "There exists one way to create a beautiful partition:  \"2354 | 218 | 5131 \"."
      },
      {
        "input": "s =  \"3312958 \", k = 3, minLength = 1",
        "output": "1",
        "explanation": "There exists one way to create a beautiful partition:  \"331 | 29 | 58 \"."
      }
    ],
    "constraints": [
      "`1 <= k, minLength <= s.length <= 1000`",
      "`s` consists of the digits `'1'` to `'9'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2479",
    "slug": "maximum-xor-of-two-non-overlapping-subtrees",
    "title": "Maximum XOR of Two Non-Overlapping Subtrees",
    "difficulty": "Hard",
    "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`. You are given the integer `n` and a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. The root of the tree is the node labeled `0`. Each node has an associated **value**. You are given an array `values` of length `n`, where `values[i]` is the **value** of the `ith` node. Select any two **non-overlapping** subtrees. Your **score** is the bitwise XOR of the sum of the values within those subtrees. Return _the_ _**maximum**_ _possible **score** you can achieve_. _If it is impossible to find two nonoverlapping subtrees_, return `0`. **Note** that: *  The **subtree** of a node is the tree consisting of that node and all of its descendants. *  Two subtrees are **non-overlapping** if they do not share **any common** node.",
    "examples": [
      {
        "input": "n = 6, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,3\\],\\[1,4\\],\\[2,5\\]\\], values = \\[2,8,3,6,2,5\\]",
        "output": "24",
        "explanation": "Node 1's subtree has sum of values 16, while node 2's subtree has sum of values 8, so choosing these nodes will yield a score of 16 XOR 8 = 24. It can be proved that is the maximum possible score we can obtain."
      },
      {
        "input": "n = 3, edges = \\[\\[0,1\\],\\[1,2\\]\\], values = \\[4,6,1\\]",
        "output": "0",
        "explanation": "There is no possible way to select two non-overlapping subtrees, so we just return 0."
      }
    ],
    "constraints": [
      "`2 <= n <= 5  104`",
      "`edges.length == n - 1`",
      "`0 <= ai, bi < n`",
      "`values.length == n`",
      "`1 <= values[i] <= 109`",
      "It is guaranteed that `edges` represents a valid tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2481",
    "slug": "minimum-cuts-to-divide-a-circle",
    "title": "Minimum Cuts to Divide a Circle",
    "difficulty": "Easy",
    "description": "A **valid cut** in a circle can be: *  A cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or *  A cut that is represented by a straight line that touches one point on the edge of the circle and its center. Some valid and invalid cuts are shown in the figures below. Given the integer `n`, return _the **minimum** number of cuts needed to divide a circle into_ `n` _equal slices_.",
    "examples": [
      {
        "input": "n = 4",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2482",
    "slug": "difference-between-ones-and-zeros-in-row-and-column",
    "title": "Difference Between Ones and Zeros in Row and Column",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** `m x n` binary matrix `grid`. A **0-indexed** `m x n` difference matrix `diff` is created with the following procedure: *  Let the number of ones in the `ith` row be `onesRowi`. *  Let the number of ones in the `jth` column be `onesColj`. *  Let the number of zeros in the `ith` row be `zerosRowi`. *  Let the number of zeros in the `jth` column be `zerosColj`. *  `diff[i][j] = onesRowi + onesColj - zerosRowi - zerosColj` Return _the difference matrix_ `diff`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1,1\\],\\[1,0,1\\],\\[0,0,1\\]\\]",
        "output": "\\[\\[0,0,4\\],\\[0,0,4\\],\\[-2,-2,2\\]\\]",
        "explanation": ""
      },
      {
        "input": "grid = \\[\\[1,1,1\\],\\[1,1,1\\]\\]",
        "output": "\\[\\[5,5,5\\],\\[5,5,5\\]\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 105`",
      "`1 <= m  n <= 105`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2483",
    "slug": "minimum-penalty-for-a-shop",
    "title": "Minimum Penalty for a Shop",
    "difficulty": "Medium",
    "description": "You are given the customer visit log of a shop represented by a **0-indexed** string `customers` consisting only of characters `'N'` and `'Y'`: *  if the `ith` character is `'Y'`, it means that customers come at the `ith` hour *  whereas `'N'` indicates that no customers come at the `ith` hour. If the shop closes at the `jth` hour (`0 <= j <= n`), the **penalty** is calculated as follows: *  For every hour when the shop is open and no customers come, the penalty increases by `1`. *  For every hour when the shop is closed and customers come, the penalty increases by `1`. Return _the **earliest** hour at which the shop must be closed to incur a **minimum** penalty._ **Note** that if a shop closes at the `jth` hour, it means the shop is closed at the hour `j`.",
    "examples": [
      {
        "input": "customers =  \"YYNY \"",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "customers =  \"NNNNN \"",
        "output": "0",
        "explanation": "It is best to close the shop at the 0th hour as no customers arrive."
      },
      {
        "input": "customers =  \"YYYY \"",
        "output": "4",
        "explanation": "It is best to close the shop at the 4th hour as customers arrive at each hour."
      }
    ],
    "constraints": [
      "`1 <= customers.length <= 105`",
      "`customers` consists only of characters `'Y'` and `'N'`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2484",
    "slug": "count-palindromic-subsequences",
    "title": "Count Palindromic Subsequences",
    "difficulty": "Hard",
    "description": "Given a string of digits `s`, return _the number of **palindromic subsequences** of_ `s` _having length_ `5`. Since the answer may be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "s =  \"103301 \"",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "s =  \"0000000 \"",
        "output": "21",
        "explanation": "All 21 subsequences are  \"00000 \", which is palindromic."
      },
      {
        "input": "s =  \"9999900000 \"",
        "output": "2",
        "explanation": "The only two palindromic subsequences are  \"99999 \" and  \"00000 \"."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of digits."
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "2485",
    "slug": "find-the-pivot-integer",
    "title": "Find the Pivot Integer",
    "difficulty": "Easy",
    "description": "Given a positive integer `n`, find the **pivot integer** `x` such that: *  The sum of all elements between `1` and `x` inclusively equals the sum of all elements between `x` and `n` inclusively. Return _the pivot integer_ `x`. If no such integer exists, return `-1`. It is guaranteed that there will be at most one pivot index for the given input.",
    "examples": [
      {
        "input": "n = 8",
        "output": "6",
        "explanation": "6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "1 is the pivot integer since: 1 = 1."
      },
      {
        "input": "n = 4",
        "output": "-1",
        "explanation": "It can be proved that no such integer exist."
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2486",
    "slug": "append-characters-to-string-to-make-subsequence",
    "title": "Append Characters to String to Make Subsequence",
    "difficulty": "Medium",
    "description": "You are given two strings `s` and `t` consisting of only lowercase English letters. Return _the minimum number of characters that need to be appended to the end of_ `s` _so that_ `t` _becomes a **subsequence** of_ `s`. A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.",
    "examples": [
      {
        "input": "s =  \"coaching \", t =  \"coding \"",
        "output": "4",
        "explanation": "Append the characters  \"ding \" to the end of s so that s =  \"coachingding \"."
      },
      {
        "input": "s =  \"abcde \", t =  \"a \"",
        "output": "0",
        "explanation": "t is already a subsequence of s ( \"**a**bcde \")."
      },
      {
        "input": "s =  \"z \", t =  \"abcde \"",
        "output": "5",
        "explanation": "Append the characters  \"abcde \" to the end of s so that s =  \"zabcde \"."
      }
    ],
    "constraints": [
      "`1 <= s.length, t.length <= 105`",
      "`s` and `t` consist only of lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2487",
    "slug": "remove-nodes-from-linked-list",
    "title": "Remove Nodes From Linked List",
    "difficulty": "Medium",
    "description": "You are given the `head` of a linked list. Remove every node which has a node with a **strictly greater** value anywhere to the right side of it. Return _the_ `head` _of the modified linked list._",
    "examples": [
      {
        "input": "head = \\[5,2,13,3,8\\]",
        "output": "\\[13,8\\]",
        "explanation": "The nodes that should be removed are 5, 2 and 3."
      },
      {
        "input": "head = \\[1,1,1,1\\]",
        "output": "\\[1,1,1,1\\]",
        "explanation": "Every node has value 1, so no nodes are removed."
      }
    ],
    "constraints": [
      "The number of the nodes in the given list is in the range `[1, 105]`.",
      "`1 <= Node.val <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2488",
    "slug": "count-subarrays-with-median-k",
    "title": "Count Subarrays With Median K",
    "difficulty": "Hard",
    "description": "You are given an array `nums` of size `n` consisting of **distinct** integers from `1` to `n` and a positive integer `k`. Return _the number of non-empty subarrays in_ `nums` _that have a **median** equal to_ `k`. **Note**: *  The median of an array is the **middle** element after sorting the array in **ascending** order. If the array is of even length, the median is the **left** middle element. *  For example, the median of `[2,3,1,4]` is `2`, and the median of `[8,4,3,5,1]` is `4`. *  A subarray is a contiguous part of an array.",
    "examples": [
      {
        "input": "nums = \\[3,2,1,4,5\\], k = 4",
        "output": "3",
        "explanation": "The subarrays that have a median equal to 4 are: \\[4\\], \\[4,5\\] and \\[1,4,5\\]."
      },
      {
        "input": "nums = \\[2,3,1\\], k = 3",
        "output": "1",
        "explanation": "\\[3\\] is the only subarray that has a median equal to 3."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 105`",
      "`1 <= nums[i], k <= n`",
      "The integers in `nums` are distinct."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2489",
    "slug": "number-of-substrings-with-fixed-ratio",
    "title": "Number of Substrings With Fixed Ratio",
    "difficulty": "Medium",
    "description": "You are given a binary string `s`, and two integers `num1` and `num2`. `num1` and `num2` are coprime numbers. A **ratio substring** is a substring of s where the ratio between the number of `0`'s and the number of `1`'s in the substring is exactly `num1 : num2`. *  For example, if `num1 = 2` and `num2 = 3`, then `\"01011 \"` and `\"1110000111 \"` are ratio substrings, while `\"11000 \"` is not. Return _the number of **non-empty** ratio substrings of_ `s`. **Note** that: *  A **substring** is a contiguous sequence of characters within a string. *  Two values `x` and `y` are **coprime** if `gcd(x, y) == 1` where `gcd(x, y)` is the greatest common divisor of `x` and `y`.",
    "examples": [
      {
        "input": "s =  \"0110011 \", num1 = 1, num2 = 2",
        "output": "4",
        "explanation": "There exist 4 non-empty ratio substrings."
      },
      {
        "input": "s =  \"10101 \", num1 = 3, num2 = 1",
        "output": "0",
        "explanation": "There is no ratio substrings of s. We return 0."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`1 <= num1, num2 <= s.length`",
      "`num1` and `num2` are coprime integers."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2490",
    "slug": "circular-sentence",
    "title": "Circular Sentence",
    "difficulty": "Easy",
    "description": "A **sentence** is a list of words that are separated by a **single** space with no leading or trailing spaces. *  For example, `\"Hello World \"`, `\"HELLO \"`, `\"hello world hello world \"` are all sentences. Words consist of **only** uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different. A sentence is **circular** if: *  The last character of a word is equal to the first character of the next word. *  The last character of the last word is equal to the first character of the first word. For example, `\"leetcode exercises sound delightful \"`, `\"eetcode \"`, `\"leetcode eats soul \"` are all circular sentences. However, `\"Leetcode is cool \"`, `\"happy Leetcode \"`, `\"Leetcode \"` and `\"I like Leetcode \"` are **not** circular sentences. Given a string `sentence`, return `true` _if it is circular_. Otherwise, return `false`.",
    "examples": [
      {
        "input": "sentence =  \"leetcode exercises sound delightful \"",
        "output": "true",
        "explanation": "The words in sentence are \\[ \"leetcode \",  \"exercises \",  \"sound \",  \"delightful \"\\]."
      },
      {
        "input": "sentence =  \"eetcode \"",
        "output": "true",
        "explanation": "The words in sentence are \\[ \"eetcode \"\\]."
      },
      {
        "input": "sentence =  \"Leetcode is cool \"",
        "output": "false",
        "explanation": "The words in sentence are \\[ \"Leetcode \",  \"is \",  \"cool \"\\]."
      }
    ],
    "constraints": [
      "`1 <= sentence.length <= 500`",
      "`sentence` consist of only lowercase and uppercase English letters and spaces.",
      "The words in `sentence` are separated by a single space.",
      "There are no leading or trailing spaces."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2491",
    "slug": "divide-players-into-teams-of-equal-skill",
    "title": "Divide Players Into Teams of Equal Skill",
    "difficulty": "Medium",
    "description": "You are given a positive integer array `skill` of **even** length `n` where `skill[i]` denotes the skill of the `ith` player. Divide the players into `n / 2` teams of size `2` such that the total skill of each team is **equal**. The **chemistry** of a team is equal to the **product** of the skills of the players on that team. Return _the sum of the **chemistry** of all the teams, or return_ `-1` _if there is no way to divide the players into teams such that the total skill of each team is equal._",
    "examples": [
      {
        "input": "skill = \\[3,2,5,1,3,4\\]",
        "output": "22",
        "explanation": ""
      },
      {
        "input": "skill = \\[3,4\\]",
        "output": "12",
        "explanation": ""
      },
      {
        "input": "skill = \\[1,1,2,3\\]",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= skill.length <= 105`",
      "`skill.length` is even.",
      "`1 <= skill[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2492",
    "slug": "minimum-score-of-a-path-between-two-cities",
    "title": "Minimum Score of a Path Between Two Cities",
    "difficulty": "Medium",
    "description": "You are given a positive integer `n` representing `n` cities numbered from `1` to `n`. You are also given a **2D** array `roads` where `roads[i] = [ai, bi, distancei]` indicates that there is a **bidirectional** road between cities `ai` and `bi` with a distance equal to `distancei`. The cities graph is not necessarily connected. The **score** of a path between two cities is defined as the **minimum** distance of a road in this path. Return _the **minimum** possible score of a path between cities_ `1` _and_ `n`. **Note**: *  A path is a sequence of roads between two cities. *  It is allowed for a path to contain the same road **multiple** times, and you can visit cities `1` and `n` multiple times along the path. *  The test cases are generated such that there is **at least** one path between `1` and `n`.",
    "examples": [
      {
        "input": "n = 4, roads = \\[\\[1,2,9\\],\\[2,3,6\\],\\[2,4,5\\],\\[1,4,7\\]\\]",
        "output": "5",
        "explanation": "The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 4. The score of this path is min(9,5) = 5."
      },
      {
        "input": "n = 4, roads = \\[\\[1,2,2\\],\\[1,3,4\\],\\[3,4,7\\]\\]",
        "output": "2",
        "explanation": "The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 1 -> 3 -> 4. The score of this path is min(2,2,4,7) = 2."
      }
    ],
    "constraints": [
      "`2 <= n <= 105`",
      "`1 <= roads.length <= 105`",
      "`roads[i].length == 3`",
      "`1 <= ai, bi <= n`",
      "`ai != bi`",
      "`1 <= distancei <= 104`",
      "There are no repeated edges.",
      "There is at least one path between `1` and `n`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2493",
    "slug": "divide-nodes-into-the-maximum-number-of-groups",
    "title": "Divide Nodes Into the Maximum Number of Groups",
    "difficulty": "Hard",
    "description": "You are given a positive integer `n` representing the number of nodes in an **undirected** graph. The nodes are labeled from `1` to `n`. You are also given a 2D integer array `edges`, where `edges[i] = [ai, bi]` indicates that there is a **bidirectional** edge between nodes `ai` and `bi`. **Notice** that the given graph may be disconnected. Divide the nodes of the graph into `m` groups (**1-indexed**) such that: *  Each node in the graph belongs to exactly one group. *  For every pair of nodes in the graph that are connected by an edge `[ai, bi]`, if `ai` belongs to the group with index `x`, and `bi` belongs to the group with index `y`, then `|y - x| = 1`. Return _the maximum number of groups (i.e., maximum_ `m`_) into which you can divide the nodes_. Return `-1` _if it is impossible to group the nodes with the given conditions_.",
    "examples": [
      {
        "input": "n = 6, edges = \\[\\[1,2\\],\\[1,4\\],\\[1,5\\],\\[2,6\\],\\[2,3\\],\\[4,6\\]\\]",
        "output": "4",
        "explanation": "As shown in the image we:"
      },
      {
        "input": "n = 3, edges = \\[\\[1,2\\],\\[2,3\\],\\[3,1\\]\\]",
        "output": "-1",
        "explanation": "If we add node 1 to the first group, node 2 to the second group, and node 3 to the third group to satisfy the first two edges, we can see that the third edge will not be satisfied."
      }
    ],
    "constraints": [
      "`1 <= n <= 500`",
      "`1 <= edges.length <= 104`",
      "`edges[i].length == 2`",
      "`1 <= ai, bi <= n`",
      "`ai != bi`",
      "There is at most one edge between any pair of vertices."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2495",
    "slug": "number-of-subarrays-having-even-product",
    "title": "Number of Subarrays Having Even Product",
    "difficulty": "Medium",
    "description": "Given a **0-indexed** integer array `nums`, return _the number of subarrays of_ `nums` _having an even product_.",
    "examples": [
      {
        "input": "nums = \\[9,6,7,13\\]",
        "output": "6",
        "explanation": "There are 6 subarrays with an even product:"
      },
      {
        "input": "nums = \\[7,3,5\\]",
        "output": "0",
        "explanation": "There are no subarrays with an even product."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2496",
    "slug": "maximum-value-of-a-string-in-an-array",
    "title": "Maximum Value of a String in an Array",
    "difficulty": "Easy",
    "description": "The **value** of an alphanumeric string can be defined as: *  The **numeric** representation of the string in base `10`, if it comprises of digits **only**. *  The **length** of the string, otherwise. Given an array `strs` of alphanumeric strings, return _the **maximum value** of any string in_ `strs`.",
    "examples": [
      {
        "input": "strs = \\[ \"alic3 \", \"bob \", \"3 \", \"4 \", \"00000 \"\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "strs = \\[ \"1 \", \"01 \", \"001 \", \"0001 \"\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= strs.length <= 100`",
      "`1 <= strs[i].length <= 9`",
      "`strs[i]` consists of only lowercase English letters and digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2497",
    "slug": "maximum-star-sum-of-a-graph",
    "title": "Maximum Star Sum of a Graph",
    "difficulty": "Medium",
    "description": "There is an undirected graph consisting of `n` nodes numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `vals` of length `n` where `vals[i]` denotes the value of the `ith` node. You are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi.` A **star graph** is a subgraph of the given graph having a center node containing `0` or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges. The image below shows star graphs with `3` and `4` neighbors respectively, centered at the blue node. The **star sum** is the sum of the values of all the nodes present in the star graph. Given an integer `k`, return _the **maximum star sum** of a star graph containing **at most**_ `k` _edges._",
    "examples": [
      {
        "input": "vals = \\[1,2,3,4,10,-10,-20\\], edges = \\[\\[0,1\\],\\[1,2\\],\\[1,3\\],\\[3,4\\],\\[3,5\\],\\[3,6\\]\\], k = 2",
        "output": "16",
        "explanation": "The above diagram represents the input graph."
      },
      {
        "input": "vals = \\[-5\\], edges = \\[\\], k = 0",
        "output": "-5",
        "explanation": "There is only one possible star graph, which is node 0 itself."
      }
    ],
    "constraints": [
      "`n == vals.length`",
      "`1 <= n <= 105`",
      "`-104 <= vals[i] <= 104`",
      "`0 <= edges.length <= min(n  (n - 1) / 2``, 105)`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi <= n - 1`",
      "`ai != bi`",
      "`0 <= k <= n - 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2498",
    "slug": "frog-jump-ii",
    "title": "Frog Jump II",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `stones` sorted in **strictly increasing order** representing the positions of stones in a river. A frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone **at most once**. The **length** of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps. *  More formally, if the frog is at `stones[i]` and is jumping to `stones[j]`, the length of the jump is `|stones[i] - stones[j]|`. The **cost** of a path is the **maximum length of a jump** among all jumps in the path. Return _the **minimum** cost of a path for the frog_.",
    "examples": [
      {
        "input": "stones = \\[0,2,5,6,7\\]",
        "output": "5",
        "explanation": "The above figure represents one of the optimal paths the frog can take."
      },
      {
        "input": "stones = \\[0,3,9\\]",
        "output": "9",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= stones.length <= 105`",
      "`0 <= stones[i] <= 109`",
      "`stones[0] == 0`",
      "`stones` is sorted in a strictly increasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2499",
    "slug": "minimum-total-cost-to-make-arrays-unequal",
    "title": "Minimum Total Cost to Make Arrays Unequal",
    "difficulty": "Hard",
    "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, of equal length `n`. In one operation, you can swap the values of any two indices of `nums1`. The **cost** of this operation is the **sum** of the indices. Find the **minimum** total cost of performing the given operation **any** number of times such that `nums1[i] != nums2[i]` for all `0 <= i <= n - 1` after performing all the operations. Return _the **minimum total cost** such that_ `nums1` and `nums2` _satisfy the above condition_. In case it is not possible, return `-1`.",
    "examples": [
      {
        "input": "nums1 = \\[1,2,3,4,5\\], nums2 = \\[1,2,3,4,5\\]",
        "output": "10",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[2,2,2,1,3\\], nums2 = \\[1,2,2,3,3\\]",
        "output": "10",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[1,2,2\\], nums2 = \\[1,2,2\\]",
        "output": "-1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`1 <= n <= 105`",
      "`1 <= nums1[i], nums2[i] <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2500",
    "slug": "delete-greatest-value-in-each-row",
    "title": "Delete Greatest Value in Each Row",
    "difficulty": "Easy",
    "description": "You are given an `m x n` matrix `grid` consisting of positive integers. Perform the following operation until `grid` becomes empty: *  Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them. *  Add the maximum of deleted elements to the answer. **Note** that the number of columns decreases by one after each operation. Return _the answer after performing the operations described above_.",
    "examples": [
      {
        "input": "grid = \\[\\[1,2,4\\],\\[3,3,1\\]\\]",
        "output": "8",
        "explanation": "The diagram above shows the removed values in each step."
      },
      {
        "input": "grid = \\[\\[10\\]\\]",
        "output": "10",
        "explanation": "The diagram above shows the removed values in each step."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 50`",
      "`1 <= grid[i][j] <= 100`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2501",
    "slug": "longest-square-streak-in-an-array",
    "title": "Longest Square Streak in an Array",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. A subsequence of `nums` is called a **square streak** if: *  The length of the subsequence is at least `2`, and *  **after** sorting the subsequence, each element (except the first element) is the **square** of the previous number. Return _the length of the **longest square streak** in_ `nums`_, or return_ `-1` _if there is no **square streak**._ A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "nums = \\[4,3,6,16,8,2\\]",
        "output": "3",
        "explanation": "Choose the subsequence \\[4,16,2\\]. After sorting it, it becomes \\[2,4,16\\]."
      },
      {
        "input": "nums = \\[2,3,5,6,7\\]",
        "output": "-1",
        "explanation": "There is no square streak in nums so return -1."
      }
    ],
    "constraints": [
      "`2 <= nums.length <= 105`",
      "`2 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2502",
    "slug": "design-memory-allocator",
    "title": "Design Memory Allocator",
    "difficulty": "Medium",
    "description": "You are given an integer `n` representing the size of a **0-indexed** memory array. All memory units are initially free. You have a memory allocator with the following functionalities: 1. **Allocate** a block of `size` consecutive free memory units and assign it the id `mID`. 2. **Free** all memory units with the given id `mID`. **Note** that: *  Multiple blocks can be allocated to the same `mID`. *  You should free all the memory units with `mID`, even if they were allocated in different blocks. Implement the `Allocator` class: *  `Allocator(int n)` Initializes an `Allocator` object with a memory array of size `n`. *  `int allocate(int size, int mID)` Find the **leftmost** block of `size` **consecutive** free memory units and allocate it with the id `mID`. Return the block's first index. If such a block does not exist, return `-1`. *  `int free(int mID)` Free all memory units with the id `mID`. Return the number of memory units you have freed.",
    "examples": [],
    "constraints": [
      "`1 <= n, size, mID <= 1000`",
      "At most `1000` calls will be made to `allocate` and `free`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2503",
    "slug": "maximum-number-of-points-from-grid-queries",
    "title": "Maximum Number of Points From Grid Queries",
    "difficulty": "Hard",
    "description": "You are given an `m x n` integer matrix `grid` and an array `queries` of size `k`. Find an array `answer` of size `k` such that for each integer `queries[i]` you start in the **top left** cell of the matrix and repeat the following process: *  If `queries[i]` is **strictly** greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any **adjacent** cell in all `4` directions: up, down, left, and right. *  Otherwise, you do not get any points, and you end this process. After the process, `answer[i]` is the **maximum** number of points you can get. **Note** that for each query you are allowed to visit the same cell **multiple** times. Return _the resulting array_ `answer`.",
    "examples": [
      {
        "input": "grid = \\[\\[1,2,3\\],\\[2,5,7\\],\\[3,5,1\\]\\], queries = \\[5,6,2\\]",
        "output": "\\[5,8,1\\]",
        "explanation": "The diagrams above show which cells we visit to get points for each query."
      },
      {
        "input": "grid = \\[\\[5,2,1\\],\\[1,1,2\\]\\], queries = \\[3\\]",
        "output": "\\[0\\]",
        "explanation": "We can not get any points because the value of the top left cell is already greater than or equal to 3."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`2 <= m, n <= 1000`",
      "`4 <= m  n <= 105`",
      "`k == queries.length`",
      "`1 <= k <= 104`",
      "`1 <= grid[i][j], queries[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2505",
    "slug": "bitwise-or-of-all-subsequence-sums",
    "title": "Bitwise OR of All Subsequence Sums",
    "difficulty": "Medium",
    "description": "Given an integer array `nums`, return _the value of the bitwise_ **OR** _of the sum of all possible **subsequences** in the array_. A **subsequence** is a sequence that can be derived from another sequence by removing zero or more elements without changing the order of the remaining elements.",
    "examples": [
      {
        "input": "nums = \\[2,1,0,3\\]",
        "output": "7",
        "explanation": "All possible subsequence sums that we can have are: 0, 1, 2, 3, 4, 5, 6."
      },
      {
        "input": "nums = \\[0,0,0\\]",
        "output": "0",
        "explanation": "0 is the only possible subsequence sum we can have, so we return 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2506",
    "slug": "count-pairs-of-similar-strings",
    "title": "Count Pairs Of Similar Strings",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** string array `words`. Two strings are **similar** if they consist of the same characters. *  For example, `\"abca \"` and `\"cba \"` are similar since both consist of characters `'a'`, `'b'`, and `'c'`. *  However, `\"abacba \"` and `\"bcfd \"` are not similar since they do not consist of the same characters. Return _the number of pairs_ `(i, j)` _such that_ `0 <= i < j <= word.length - 1` _and the two strings_ `words[i]` _and_ `words[j]` _are similar_.",
    "examples": [
      {
        "input": "words = \\[ \"aba \", \"aabb \", \"abcd \", \"bac \", \"aabc \"\\]",
        "output": "2",
        "explanation": "There are 2 pairs that satisfy the conditions:"
      },
      {
        "input": "words = \\[ \"aabb \", \"ab \", \"ba \"\\]",
        "output": "3",
        "explanation": "There are 3 pairs that satisfy the conditions:"
      },
      {
        "input": "words = \\[ \"nba \", \"cba \", \"dba \"\\]",
        "output": "0",
        "explanation": "Since there does not exist any pair that satisfies the conditions, we return 0."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 100`",
      "`words[i]` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2507",
    "slug": "smallest-value-after-replacing-with-sum-of-prime-factors",
    "title": "Smallest Value After Replacing With Sum of Prime Factors",
    "difficulty": "Medium",
    "description": "You are given a positive integer `n`. Continuously replace `n` with the sum of its **prime factors**. *  Note that if a prime factor divides `n` multiple times, it should be included in the sum as many times as it divides `n`. Return _the smallest value_ `n` _will take on._",
    "examples": [
      {
        "input": "n = 15",
        "output": "5",
        "explanation": "Initially, n = 15."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "Initially, n = 3."
      }
    ],
    "constraints": [
      "`2 <= n <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2508",
    "slug": "add-edges-to-make-degrees-of-all-nodes-even",
    "title": "Add Edges to Make Degrees of All Nodes Even",
    "difficulty": "Hard",
    "description": "There is an **undirected** graph consisting of `n` nodes numbered from `1` to `n`. You are given the integer `n` and a **2D** array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi`. The graph can be disconnected. You can add **at most** two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops. Return `true` _if it is possible to make the degree of each node in the graph even, otherwise return_ `false`_._ The degree of a node is the number of edges connected to it.",
    "examples": [
      {
        "input": "n = 5, edges = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,2\\],\\[1,4\\],\\[2,5\\]\\]",
        "output": "true",
        "explanation": "The above diagram shows a valid way of adding an edge."
      },
      {
        "input": "n = 4, edges = \\[\\[1,2\\],\\[3,4\\]\\]",
        "output": "true",
        "explanation": "The above diagram shows a valid way of adding two edges."
      },
      {
        "input": "n = 4, edges = \\[\\[1,2\\],\\[1,3\\],\\[1,4\\]\\]",
        "output": "false",
        "explanation": "It is not possible to obtain a valid graph with adding at most 2 edges."
      }
    ],
    "constraints": [
      "`3 <= n <= 105`",
      "`2 <= edges.length <= 105`",
      "`edges[i].length == 2`",
      "`1 <= ai, bi <= n`",
      "`ai != bi`",
      "There are no repeated edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2509",
    "slug": "cycle-length-queries-in-a-tree",
    "title": "Cycle Length Queries in a Tree",
    "difficulty": "Hard",
    "description": "You are given an integer `n`. There is a **complete binary tree** with `2n - 1` nodes. The root of that tree is the node with the value `1`, and every node with a value `val` in the range `[1, 2n - 1 - 1]` has two children where: *  The left node has the value `2 * val`, and *  The right node has the value `2 * val + 1`. You are also given a 2D integer array `queries` of length `m`, where `queries[i] = [ai, bi]`. For each query, solve the following problem: 1. Add an edge between the nodes with values `ai` and `bi`. 2. Find the length of the cycle in the graph. 3. Remove the added edge between nodes with values `ai` and `bi`. **Note** that: *  A **cycle** is a path that starts and ends at the same node, and each edge in the path is visited only once. *  The length of a cycle is the number of edges visited in the cycle. *  There could be multiple edges between two nodes in the tree after adding the edge of the query. Return _an array_ `answer` _of length_ `m` _where_ `answer[i]` _is the answer to the_ `ith` _query._",
    "examples": [
      {
        "input": "n = 3, queries = \\[\\[5,3\\],\\[4,7\\],\\[2,3\\]\\]",
        "output": "\\[4,5,3\\]",
        "explanation": "The diagrams above show the tree of 23 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge."
      },
      {
        "input": "n = 2, queries = \\[\\[1,2\\]\\]",
        "output": "\\[2\\]",
        "explanation": "The diagram above shows the tree of 22 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge."
      }
    ],
    "constraints": [
      "`2 <= n <= 30`",
      "`m == queries.length`",
      "`1 <= m <= 105`",
      "`queries[i].length == 2`",
      "`1 <= ai, bi <= 2n - 1`",
      "`ai != bi`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2510",
    "slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s",
    "title": "Check if There is a Path With Equal Number of 0's And 1's",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** `m x n` **binary** matrix `grid`. You can move from a cell `(row, col)` to any of the cells `(row + 1, col)` or `(row, col + 1)`. Return `true` _if there is a path from_ `(0, 0)` _to_ `(m - 1, n - 1)` _that visits an **equal** number of_ `0`_'s and_ `1`_'s_. Otherwise return `false`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1,0,0\\],\\[0,1,0,0\\],\\[1,0,1,0\\]\\]",
        "output": "true",
        "explanation": "The path colored in blue in the above diagram is a valid path because we have 3 cells with a value of 1 and 3 with a value of 0. Since there is a valid path, we return true."
      },
      {
        "input": "grid = \\[\\[1,1,0\\],\\[0,0,1\\],\\[1,0,0\\]\\]",
        "output": "false",
        "explanation": "There is no path in this grid with an equal number of 0's and 1's."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`2 <= m, n <= 100`",
      "`grid[i][j]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2511",
    "slug": "maximum-enemy-forts-that-can-be-captured",
    "title": "Maximum Enemy Forts That Can Be Captured",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `forts` of length `n` representing the positions of several forts. `forts[i]` can be `-1`, `0`, or `1` where: *  `-1` represents there is **no fort** at the `ith` position. *  `0` indicates there is an **enemy** fort at the `ith` position. *  `1` indicates the fort at the `ith` the position is under your command. Now you have decided to move your army from one of your forts at position `i` to an empty position `j` such that: *  `0 <= i, j <= n - 1` *  The army travels over enemy forts **only**. Formally, for all `k` where `min(i,j) < k < max(i,j)`, `forts[k] == 0.` While moving the army, all the enemy forts that come in the way are **captured**. Return _the **maximum** number of enemy forts that can be captured_. In case it is **impossible** to move your army, or you do not have any fort under your command, return `0`_._",
    "examples": [
      {
        "input": "forts = \\[1,0,0,-1,0,0,0,0,1\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "forts = \\[0,0,1,-1\\]",
        "output": "0",
        "explanation": "Since no enemy fort can be captured, 0 is returned."
      }
    ],
    "constraints": [
      "`1 <= forts.length <= 1000`",
      "`-1 <= forts[i] <= 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2512",
    "slug": "reward-top-k-students",
    "title": "Reward Top K Students",
    "difficulty": "Medium",
    "description": "You are given two string arrays `positive_feedback` and `negative_feedback`, containing the words denoting positive and negative feedback, respectively. Note that **no** word is both positive and negative. Initially every student has `0` points. Each positive word in a feedback report **increases** the points of a student by `3`, whereas each negative word **decreases** the points by `1`. You are given `n` feedback reports, represented by a **0-indexed** string array `report` and a **0-indexed** integer array `student_id`, where `student_id[i]` represents the ID of the student who has received the feedback report `report[i]`. The ID of each student is **unique**. Given an integer `k`, return _the top_ `k` _students after ranking them in **non-increasing** order by their points_. In case more than one student has the same points, the one with the lower ID ranks higher.",
    "examples": [
      {
        "input": "positive\\_feedback = \\[ \"smart \", \"brilliant \", \"studious \"\\], negative\\_feedback = \\[ \"not \"\\], report = \\[ \"this student is studious \", \"the student is smart \"\\], student\\_id = \\[1,2\\], k = 2",
        "output": "\\[1,2\\]",
        "explanation": ""
      },
      {
        "input": "positive\\_feedback = \\[ \"smart \", \"brilliant \", \"studious \"\\], negative\\_feedback = \\[ \"not \"\\], report = \\[ \"this student is not studious \", \"the student is smart \"\\], student\\_id = \\[1,2\\], k = 2",
        "output": "\\[2,1\\]",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= positive_feedback.length, negative_feedback.length <= 104`",
      "`1 <= positive_feedback[i].length, negative_feedback[j].length <= 100`",
      "Both `positive_feedback[i]` and `negative_feedback[j]` consists of lowercase English letters.",
      "No word is present in both `positive_feedback` and `negative_feedback`.",
      "`n == report.length == student_id.length`",
      "`1 <= n <= 104`",
      "`report[i]` consists of lowercase English letters and spaces `' '`.",
      "There is a single space between consecutive words of `report[i]`.",
      "`1 <= report[i].length <= 100`",
      "`1 <= student_id[i] <= 109`",
      "All the values of `student_id[i]` are unique.",
      "`1 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2513",
    "slug": "minimize-the-maximum-of-two-arrays",
    "title": "Minimize the Maximum of Two Arrays",
    "difficulty": "Medium",
    "description": "We have two arrays `arr1` and `arr2` which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions: *  `arr1` contains `uniqueCnt1` **distinct** positive integers, each of which is **not divisible** by `divisor1`. *  `arr2` contains `uniqueCnt2` **distinct** positive integers, each of which is **not divisible** by `divisor2`. *  **No** integer is present in both `arr1` and `arr2`. Given `divisor1`, `divisor2`, `uniqueCnt1`, and `uniqueCnt2`, return _the **minimum possible maximum** integer that can be present in either array_.",
    "examples": [
      {
        "input": "divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2",
        "output": "15",
        "explanation": ""
      }
    ],
    "constraints": [
      "`2 <= divisor1, divisor2 <= 105`",
      "`1 <= uniqueCnt1, uniqueCnt2 < 109`",
      "`2 <= uniqueCnt1 + uniqueCnt2 <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2515",
    "slug": "shortest-distance-to-target-string-in-a-circular-array",
    "title": "Shortest Distance to Target String in a Circular Array",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** **circular** string array `words` and a string `target`. A **circular array** means that the array's end connects to the array's beginning. *  Formally, the next element of `words[i]` is `words[(i + 1) % n]` and the previous element of `words[i]` is `words[(i - 1 + n) % n]`, where `n` is the length of `words`. Starting from `startIndex`, you can move to either the next word or the previous word with `1` step at a time. Return _the **shortest** distance needed to reach the string_ `target`. If the string `target` does not exist in `words`, return `-1`.",
    "examples": [
      {
        "input": "words = \\[ \"hello \", \"i \", \"am \", \"leetcode \", \"hello \"\\], target =  \"hello \", startIndex = 1",
        "output": "1",
        "explanation": "We start from index 1 and can reach  \"hello \" by"
      },
      {
        "input": "words = \\[ \"a \", \"b \", \"leetcode \"\\], target =  \"leetcode \", startIndex = 0",
        "output": "1",
        "explanation": "We start from index 0 and can reach  \"leetcode \" by"
      },
      {
        "input": "words = \\[ \"i \", \"eat \", \"leetcode \"\\], target =  \"ate \", startIndex = 0",
        "output": "-1",
        "explanation": "Since  \"ate \" does not exist in `words`, we return -1."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 100`",
      "`1 <= words[i].length <= 100`",
      "`words[i]` and `target` consist of only lowercase English letters.",
      "`0 <= startIndex < words.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2516",
    "slug": "take-k-of-each-character-from-left-and-right",
    "title": "Take K of Each Character From Left and Right",
    "difficulty": "Medium",
    "description": "You are given a string `s` consisting of the characters `'a'`, `'b'`, and `'c'` and a non-negative integer `k`. Each minute, you may take either the **leftmost** character of `s`, or the **rightmost** character of `s`. Return _the **minimum** number of minutes needed for you to take **at least**_ `k` _of each character, or return_ `-1` _if it is not possible to take_ `k` _of each character._",
    "examples": [
      {
        "input": "s =  \"aabaaaacaabc \", k = 2",
        "output": "8",
        "explanation": ""
      },
      {
        "input": "s =  \"a \", k = 1",
        "output": "-1",
        "explanation": "It is not possible to take one 'b' or 'c' so return -1."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consists of only the letters `'a'`, `'b'`, and `'c'`.",
      "`0 <= k <= s.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2517",
    "slug": "maximum-tastiness-of-candy-basket",
    "title": "Maximum Tastiness of Candy Basket",
    "difficulty": "Medium",
    "description": "You are given an array of positive integers `price` where `price[i]` denotes the price of the `ith` candy and a positive integer `k`. The store sells baskets of `k` **distinct** candies. The **tastiness** of a candy basket is the smallest absolute difference of the **prices** of any two candies in the basket. Return _the **maximum** tastiness of a candy basket._",
    "examples": [
      {
        "input": "price = \\[13,5,1,8,21,2\\], k = 3",
        "output": "8",
        "explanation": "Choose the candies with the prices \\[13,5,21\\]."
      },
      {
        "input": "price = \\[1,3,1\\], k = 2",
        "output": "2",
        "explanation": "Choose the candies with the prices \\[1,3\\]."
      },
      {
        "input": "price = \\[7,7,7,7\\], k = 2",
        "output": "0",
        "explanation": "Choosing any two distinct candies from the candies we have will result in a tastiness of 0."
      }
    ],
    "constraints": [
      "`2 <= k <= price.length <= 105`",
      "`1 <= price[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2518",
    "slug": "number-of-great-partitions",
    "title": "Number of Great Partitions",
    "difficulty": "Hard",
    "description": "You are given an array `nums` consisting of **positive** integers and an integer `k`. **Partition** the array into two ordered **groups** such that each element is in exactly **one** group. A partition is called great if the **sum** of elements of each group is greater than or equal to `k`. Return _the number of **distinct** great partitions_. Since the answer may be too large, return it **modulo** `109 + 7`. Two partitions are considered distinct if some element `nums[i]` is in different groups in the two partitions.",
    "examples": [
      {
        "input": "nums = \\[1,2,3,4\\], k = 4",
        "output": "6",
        "explanation": "The great partitions are: (\\[1,2,3\\], \\[4\\]), (\\[1,3\\], \\[2,4\\]), (\\[1,4\\], \\[2,3\\]), (\\[2,3\\], \\[1,4\\]), (\\[2,4\\], \\[1,3\\]) and (\\[4\\], \\[1,2,3\\])."
      },
      {
        "input": "nums = \\[3,3,3\\], k = 4",
        "output": "0",
        "explanation": "There are no great partitions for this array."
      },
      {
        "input": "nums = \\[6,6\\], k = 2",
        "output": "2",
        "explanation": "We can either put nums\\[0\\] in the first partition or in the second partition."
      }
    ],
    "constraints": [
      "`1 <= nums.length, k <= 1000`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2519",
    "slug": "count-the-number-of-k-big-indices",
    "title": "Count the Number of K-Big Indices",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** integer array `nums` and a positive integer `k`. We call an index `i` **k-big** if the following conditions are satisfied: *  There exist at least `k` different indices `idx1` such that `idx1 < i` and `nums[idx1] < nums[i]`. *  There exist at least `k` different indices `idx2` such that `idx2 > i` and `nums[idx2] < nums[i]`. Return _the number of k-big indices_.",
    "examples": [
      {
        "input": "nums = \\[2,3,6,5,2,3\\], k = 2",
        "output": "2",
        "explanation": "There are only two 2-big indices in nums:"
      },
      {
        "input": "nums = \\[1,1,1\\], k = 3",
        "output": "0",
        "explanation": "There are no 3-big indices in nums."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i], k <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2520",
    "slug": "count-the-digits-that-divide-a-number",
    "title": "Count the Digits That Divide a Number",
    "difficulty": "Easy",
    "description": "Given an integer `num`, return _the number of digits in `num` that divide_ `num`. An integer `val` divides `nums` if `nums % val == 0`.",
    "examples": [
      {
        "input": "num = 7",
        "output": "1",
        "explanation": "7 divides itself, hence the answer is 1."
      },
      {
        "input": "num = 121",
        "output": "2",
        "explanation": "121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2."
      },
      {
        "input": "num = 1248",
        "output": "4",
        "explanation": "1248 is divisible by all of its digits, hence the answer is 4."
      }
    ],
    "constraints": [
      "`1 <= num <= 109`",
      "`num` does not contain `0` as one of its digits."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2521",
    "slug": "distinct-prime-factors-of-product-of-array",
    "title": "Distinct Prime Factors of Product of Array",
    "difficulty": "Medium",
    "description": "Given an array of positive integers `nums`, return _the number of **distinct prime factors** in the product of the elements of_ `nums`. **Note** that: *  A number greater than `1` is called **prime** if it is divisible by only `1` and itself. *  An integer `val1` is a factor of another integer `val2` if `val2 / val1` is an integer.",
    "examples": [
      {
        "input": "nums = \\[2,4,3,7,10,6\\]",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,4,8,16\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 104`",
      "`2 <= nums[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2522",
    "slug": "partition-string-into-substrings-with-values-at-most-k",
    "title": "Partition String Into Substrings With Values at Most K",
    "difficulty": "Medium",
    "description": "You are given a string `s` consisting of digits from `1` to `9` and an integer `k`. A partition of a string `s` is called **good** if: *  Each digit of `s` is part of **exactly** one substring. *  The value of each substring is less than or equal to `k`. Return _the **minimum** number of substrings in a **good** partition of_ `s`. If no **good** partition of `s` exists, return `-1`. **Note** that: *  The **value** of a string is its result when interpreted as an integer. For example, the value of `\"123 \"` is `123` and the value of `\"1 \"` is `1`. *  A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"165462 \", k = 60",
        "output": "4",
        "explanation": "We can partition the string into substrings  \"16 \",  \"54 \",  \"6 \", and  \"2 \". Each substring has a value less than or equal to k = 60."
      },
      {
        "input": "s =  \"238182 \", k = 5",
        "output": "-1",
        "explanation": "There is no good partition for this string."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s[i]` is a digit from `'1'` to `'9'`.",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2523",
    "slug": "closest-prime-numbers-in-range",
    "title": "Closest Prime Numbers in Range",
    "difficulty": "Medium",
    "description": "Given two positive integers `left` and `right`, find the two integers `num1` and `num2` such that: *  `left <= nums1 < nums2 <= right` . *  `nums1` and `nums2` are both **prime** numbers. *  `nums2 - nums1` is the **minimum** amongst all other pairs satisfying the above conditions. Return _the positive integer array_ `ans = [nums1, nums2]`. _If there are multiple pairs satisfying these conditions, return the one with the minimum_ `nums1` _value or_ `[-1, -1]` _if such numbers do not exist._ A number greater than `1` is called **prime** if it is only divisible by `1` and itself.",
    "examples": [
      {
        "input": "left = 10, right = 19",
        "output": "\\[11,13\\]",
        "explanation": "The prime numbers between 10 and 19 are 11, 13, 17, and 19."
      },
      {
        "input": "left = 4, right = 6",
        "output": "\\[-1,-1\\]",
        "explanation": "There exists only one prime number in the given range, so the conditions cannot be satisfied."
      }
    ],
    "constraints": [
      "`1 <= left <= right <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2524",
    "slug": "maximum-frequency-score-of-a-subarray",
    "title": "Maximum Frequency Score of a Subarray",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` and a **positive** integer `k`. The **frequency score** of an array is the sum of the **distinct** values in the array raised to the power of their **frequencies**, taking the sum **modulo** `109 + 7`. *  For example, the frequency score of the array `[5,4,5,7,4,4]` is `(43 + 52 + 71) modulo (109 + 7) = 96`. Return _the **maximum** frequency score of a **subarray** of size_ `k` _in_ `nums`. You should maximize the value under the modulo and not the actual value. A **subarray** is a contiguous part of an array.",
    "examples": [
      {
        "input": "nums = \\[1,1,1,2,1,2\\], k = 3",
        "output": "5",
        "explanation": "The subarray \\[2,1,2\\] has a frequency score equal to 5. It can be shown that it is the maximum frequency score we can have."
      },
      {
        "input": "nums = \\[1,1,1,1,1,1\\], k = 4",
        "output": "1",
        "explanation": "All the subarrays of length 4 have a frequency score equal to 1."
      }
    ],
    "constraints": [
      "`1 <= k <= nums.length <= 105`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2525",
    "slug": "categorize-box-according-to-criteria",
    "title": "Categorize Box According to Criteria",
    "difficulty": "Easy",
    "description": "Given four integers `length`, `width`, `height`, and `mass`, representing the dimensions and mass of a box, respectively, return _a string representing the **category** of the box_. *  The box is `\"Bulky \"` if: *  **Any** of the dimensions of the box is greater or equal to `104`. *  Or, the **volume** of the box is greater or equal to `109`. *  If the mass of the box is greater or equal to `100`, it is `\"Heavy \".` *  If the box is both `\"Bulky \"` and `\"Heavy \"`, then its category is `\"Both \"`. *  If the box is neither `\"Bulky \"` nor `\"Heavy \"`, then its category is `\"Neither \"`. *  If the box is `\"Bulky \"` but not `\"Heavy \"`, then its category is `\"Bulky \"`. *  If the box is `\"Heavy \"` but not `\"Bulky \"`, then its category is `\"Heavy \"`. **Note** that the volume of the box is the product of its length, width and height.",
    "examples": [
      {
        "input": "length = 1000, width = 35, height = 700, mass = 300",
        "output": "\"Heavy \"",
        "explanation": ""
      },
      {
        "input": "length = 200, width = 50, height = 800, mass = 50",
        "output": "\"Neither \"",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= length, width, height <= 105`",
      "`1 <= mass <= 103`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2526",
    "slug": "find-consecutive-integers-from-a-data-stream",
    "title": "Find Consecutive Integers from a Data Stream",
    "difficulty": "Medium",
    "description": "For a stream of integers, implement a data structure that checks if the last `k` integers parsed in the stream are **equal** to `value`. Implement the **DataStream** class: *  `DataStream(int value, int k)` Initializes the object with an empty integer stream and the two integers `value` and `k`. *  `boolean consec(int num)` Adds `num` to the stream of integers. Returns `true` if the last `k` integers are equal to `value`, and `false` otherwise. If there are less than `k` integers, the condition does not hold true, so returns `false`.",
    "examples": [],
    "constraints": [
      "`1 <= value, num <= 109`",
      "`1 <= k <= 105`",
      "At most `105` calls will be made to `consec`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2527",
    "slug": "find-xor-beauty-of-array",
    "title": "Find Xor-Beauty of Array",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. The **effective value** of three indices `i`, `j`, and `k` is defined as `((nums[i] | nums[j]) & nums[k])`. The **xor-beauty** of the array is the XORing of **the effective values of all the possible triplets** of indices `(i, j, k)` where `0 <= i, j, k < n`. Return _the xor-beauty of_ `nums`. **Note** that: *  `val1 | val2` is bitwise OR of `val1` and `val2`. *  `val1 & val2` is bitwise AND of `val1` and `val2`.",
    "examples": [
      {
        "input": "nums = \\[1,4\\]",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "nums = \\[15,45,20,2,34,35,5,44,32,30\\]",
        "output": "34",
        "explanation": "`The xor-beauty of the given array is 34.`"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2528",
    "slug": "maximize-the-minimum-powered-city",
    "title": "Maximize the Minimum Powered City",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** integer array `stations` of length `n`, where `stations[i]` represents the number of power stations in the `ith` city. Each power station can provide power to every city in a fixed **range**. In other words, if the range is denoted by `r`, then a power station at city `i` can provide power to all cities `j` such that `|i - j| <= r` and `0 <= i, j <= n - 1`. *  Note that `|x|` denotes **absolute** value. For example, `|7 - 5| = 2` and `|3 - 10| = 7`. The **power** of a city is the total number of power stations it is being provided power from. The government has sanctioned building `k` more power stations, each of which can be built in any city, and have the same range as the pre-existing ones. Given the two integers `r` and `k`, return _the **maximum possible minimum power** of a city, if the additional power stations are built optimally._ **Note** that you can build the `k` power stations in multiple cities.",
    "examples": [
      {
        "input": "stations = \\[1,2,4,5,0\\], r = 1, k = 2",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "stations = \\[4,4,4,4\\], r = 0, k = 3",
        "output": "4",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == stations.length`",
      "`1 <= n <= 105`",
      "`0 <= stations[i] <= 105`",
      "`0 <= r <= n - 1`",
      "`0 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2529",
    "slug": "maximum-count-of-positive-integer-and-negative-integer",
    "title": "Maximum Count of Positive Integer and Negative Integer",
    "difficulty": "Easy",
    "description": "Given an array `nums` sorted in **non-decreasing** order, return _the maximum between the number of positive integers and the number of negative integers._ *  In other words, if the number of positive integers in `nums` is `pos` and the number of negative integers is `neg`, then return the maximum of `pos` and `neg`. **Note** that `0` is neither positive nor negative.",
    "examples": [
      {
        "input": "nums = \\[-2,-1,-1,1,2,3\\]",
        "output": "3",
        "explanation": "There are 3 positive integers and 3 negative integers. The maximum count among them is 3."
      },
      {
        "input": "nums = \\[-3,-2,-1,0,0,1,2\\]",
        "output": "3",
        "explanation": "There are 2 positive integers and 3 negative integers. The maximum count among them is 3."
      },
      {
        "input": "nums = \\[5,20,66,1314\\]",
        "output": "4",
        "explanation": "There are 4 positive integers and 0 negative integers. The maximum count among them is 4."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2000`",
      "`-2000 <= nums[i] <= 2000`",
      "`nums` is sorted in a non-decreasing order.",
      "Follow up: Can you solve the problem in `O(log(n))` time complexity?"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2530",
    "slug": "maximal-score-after-applying-k-operations",
    "title": "Maximal Score After Applying K Operations",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` and an integer `k`. You have a **starting score** of `0`. In one **operation**: 1. choose an index `i` such that `0 <= i < nums.length`, 2. increase your **score** by `nums[i]`, and 3. replace `nums[i]` with `ceil(nums[i] / 3)`. Return _the maximum possible **score** you can attain after applying **exactly**_ `k` _operations_. The ceiling function `ceil(val)` is the least integer greater than or equal to `val`.",
    "examples": [
      {
        "input": "nums = \\[10,10,10,10,10\\], k = 5",
        "output": "50",
        "explanation": "Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50."
      },
      {
        "input": "nums = \\[1,10,3,3,3\\], k = 3",
        "output": "17",
        "explanation": "You can do the following operations:"
      }
    ],
    "constraints": [
      "`1 <= nums.length, k <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2531",
    "slug": "make-number-of-distinct-characters-equal",
    "title": "Make Number of Distinct Characters Equal",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed** strings `word1` and `word2`. A **move** consists of choosing two indices `i` and `j` such that `0 <= i < word1.length` and `0 <= j < word2.length` and swapping `word1[i]` with `word2[j]`. Return `true` _if it is possible to get the number of distinct characters in_ `word1` _and_ `word2` _to be equal with **exactly one** move._ Return `false` _otherwise_.",
    "examples": [
      {
        "input": "word1 =  \"ac \", word2 =  \"b \"",
        "output": "false",
        "explanation": "Any pair of swaps would yield two distinct characters in the first string, and one in the second string."
      },
      {
        "input": "word1 =  \"abcc \", word2 =  \"aab \"",
        "output": "true",
        "explanation": "We swap index 2 of the first string with index 0 of the second string. The resulting strings are word1 =  \"abac \" and word2 =  \"cab \", which both have 3 distinct characters."
      },
      {
        "input": "word1 =  \"abcde \", word2 =  \"fghij \"",
        "output": "true",
        "explanation": "Both resulting strings will have 5 distinct characters, regardless of which indices we swap."
      }
    ],
    "constraints": [
      "`1 <= word1.length, word2.length <= 105`",
      "`word1` and `word2` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2532",
    "slug": "time-to-cross-a-bridge",
    "title": "Time to Cross a Bridge",
    "difficulty": "Hard",
    "description": "There are `k` workers who want to move `n` boxes from an old warehouse to a new one. You are given the two integers `n` and `k`, and a 2D integer array `time` of size `k x 4` where `time[i] = [leftToRighti, pickOldi, rightToLefti, putNewi]`. The warehouses are separated by a river and connected by a bridge. The old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. Initially, all `k` workers are waiting on the left side of the bridge. To move the boxes, the `ith` worker (**0-indexed**) can : *  Cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in `leftToRighti` minutes. *  Pick a box from the old warehouse and return to the bridge in `pickOldi` minutes. Different workers can pick up their boxes simultaneously. *  Cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in `rightToLefti` minutes. *  Put the box in the new warehouse and return to the bridge in `putNewi` minutes. Different workers can put their boxes simultaneously. A worker `i` is **less efficient** than a worker `j` if either condition is met: *  `leftToRighti + rightToLefti > leftToRightj + rightToLeftj` *  `leftToRighti + rightToLefti == leftToRightj + rightToLeftj` and `i > j` The following rules regulate the movement of the workers through the bridge : *  If a worker `x` reaches the bridge while another worker `y` is crossing the bridge, `x` waits at their side of the bridge. *  If the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. If more than one worker is waiting on the right side, the one with **the lowest efficiency** crosses first. *  If the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. If more than one worker is waiting on the left side, the one with **the lowest efficiency** crosses first. Return _the instance of time at which the last worker **reaches the left bank** of the river after all n boxes have been put in the new warehouse_.",
    "examples": [
      {
        "input": "n = 1, k = 3, time = \\[\\[1,1,2,1\\],\\[1,1,3,1\\],\\[1,1,4,1\\]\\]",
        "output": "6",
        "explanation": ""
      },
      {
        "input": "n = 3, k = 2, time = \\[\\[1,9,1,8\\],\\[10,10,10,10\\]\\]",
        "output": "50",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n, k <= 104`",
      "`time.length == k`",
      "`time[i].length == 4`",
      "`1 <= leftToRighti, pickOldi, rightToLefti, putNewi <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2533",
    "slug": "number-of-good-binary-strings",
    "title": "Number of Good Binary Strings",
    "difficulty": "Medium",
    "description": "You are given four integers `minLength`, `maxLength`, `oneGroup` and `zeroGroup`. A binary string is **good** if it satisfies the following conditions: *  The length of the string is in the range `[minLength, maxLength]`. *  The size of each block of consecutive `1`'s is a multiple of `oneGroup`. *  For example in a binary string `00110111100` sizes of each block of consecutive ones are `[2,4]`. *  The size of each block of consecutive `0`'s is a multiple of `zeroGroup`. *  For example, in a binary string `00110111100` sizes of each block of consecutive ones are `[2,1,2]`. Return _the number of **good** binary strings_. Since the answer may be too large, return it **modulo** `109 + 7`. **Note** that `0` is considered a multiple of all the numbers.",
    "examples": [
      {
        "input": "minLength = 2, maxLength = 3, oneGroup = 1, zeroGroup = 2",
        "output": "5",
        "explanation": "There are 5 good binary strings in this example:  \"00 \",  \"11 \",  \"001 \",  \"100 \", and  \"111 \"."
      },
      {
        "input": "minLength = 4, maxLength = 4, oneGroup = 4, zeroGroup = 3",
        "output": "1",
        "explanation": "There is only 1 good binary string in this example:  \"1111 \"."
      }
    ],
    "constraints": [
      "`1 <= minLength <= maxLength <= 105`",
      "`1 <= oneGroup, zeroGroup <= maxLength`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2534",
    "slug": "time-taken-to-cross-the-door",
    "title": "Time Taken to Cross the Door",
    "difficulty": "Hard",
    "description": "There are `n` persons numbered from `0` to `n - 1` and a door. Each person can enter or exit through the door once, taking one second. You are given a **non-decreasing** integer array `arrival` of size `n`, where `arrival[i]` is the arrival time of the `ith` person at the door. You are also given an array `state` of size `n`, where `state[i]` is `0` if person `i` wants to enter through the door or `1` if they want to exit through the door. If two or more persons want to use the door at the **same** time, they follow the following rules: *  If the door was **not** used in the previous second, then the person who wants to **exit** goes first. *  If the door was used in the previous second for **entering**, the person who wants to enter goes first. *  If the door was used in the previous second for **exiting**, the person who wants to **exit** goes first. *  If multiple persons want to go in the same direction, the person with the **smallest** index goes first. Return _an array_ `answer` _of size_ `n` _where_ `answer[i]` _is the second at which the_ `ith` _person crosses the door_. **Note** that: *  Only one person can cross the door at each second. *  A person may arrive at the door and wait without entering or exiting to follow the mentioned rules.",
    "examples": [
      {
        "input": "arrival = \\[0,1,1,2,4\\], state = \\[0,1,0,0,1\\]",
        "output": "\\[0,3,1,2,4\\]",
        "explanation": "At each second we have the following:"
      },
      {
        "input": "arrival = \\[0,0,0\\], state = \\[1,0,1\\]",
        "output": "\\[0,2,1\\]",
        "explanation": "At each second we have the following:"
      }
    ],
    "constraints": [
      "`n == arrival.length == state.length`",
      "`1 <= n <= 105`",
      "`0 <= arrival[i] <= n`",
      "`arrival` is sorted in non-decreasing order.",
      "`state[i]` is either `0` or `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2535",
    "slug": "difference-between-element-sum-and-digit-sum-of-an-array",
    "title": "Difference Between Element Sum and Digit Sum of an Array",
    "difficulty": "Easy",
    "description": "You are given a positive integer array `nums`. *  The **element sum** is the sum of all the elements in `nums`. *  The **digit sum** is the sum of all the digits (not necessarily distinct) that appear in `nums`. Return _the **absolute** difference between the **element sum** and **digit sum** of_ `nums`. **Note** that the absolute difference between two integers `x` and `y` is defined as `|x - y|`.",
    "examples": [
      {
        "input": "nums = \\[1,15,6,3\\]",
        "output": "9",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 2000`",
      "`1 <= nums[i] <= 2000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2536",
    "slug": "increment-submatrices-by-one",
    "title": "Increment Submatrices by One",
    "difficulty": "Medium",
    "description": "You are given a positive integer `n`, indicating that we initially have an `n x n` **0-indexed** integer matrix `mat` filled with zeroes. You are also given a 2D integer array `query`. For each `query[i] = [row1i, col1i, row2i, col2i]`, you should do the following operation: *  Add `1` to **every element** in the submatrix with the **top left** corner `(row1i, col1i)` and the **bottom right** corner `(row2i, col2i)`. That is, add `1` to `mat[x][y]` for all `row1i <= x <= row2i` and `col1i <= y <= col2i`. Return _the matrix_ `mat` _after performing every query._",
    "examples": [
      {
        "input": "n = 3, queries = \\[\\[1,1,2,2\\],\\[0,0,1,1\\]\\]",
        "output": "\\[\\[1,1,0\\],\\[1,2,1\\],\\[0,1,1\\]\\]",
        "explanation": "The diagram above shows the initial matrix, the matrix after the first query, and the matrix after the second query."
      },
      {
        "input": "n = 2, queries = \\[\\[0,0,1,1\\]\\]",
        "output": "\\[\\[1,1\\],\\[1,1\\]\\]",
        "explanation": "The diagram above shows the initial matrix and the matrix after the first query."
      }
    ],
    "constraints": [
      "`1 <= n <= 500`",
      "`1 <= queries.length <= 104`",
      "`0 <= row1i <= row2i < n`",
      "`0 <= col1i <= col2i < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2537",
    "slug": "count-the-number-of-good-subarrays",
    "title": "Count the Number of Good Subarrays",
    "difficulty": "Medium",
    "description": "Given an integer array `nums` and an integer `k`, return _the number of **good** subarrays of_ `nums`. A subarray `arr` is **good** if it there are **at least** `k` pairs of indices `(i, j)` such that `i < j` and `arr[i] == arr[j]`. A **subarray** is a contiguous **non-empty** sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[1,1,1,1,1\\], k = 10",
        "output": "1",
        "explanation": "The only good subarray is the array nums itself."
      },
      {
        "input": "nums = \\[3,1,4,3,2,2,4\\], k = 2",
        "output": "4",
        "explanation": "There are 4 different good subarrays:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i], k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2538",
    "slug": "difference-between-maximum-and-minimum-price-sum",
    "title": "Difference Between Maximum and Minimum Price Sum",
    "difficulty": "Hard",
    "description": "There exists an undirected and initially unrooted tree with `n` nodes indexed from `0` to `n - 1`. You are given the integer `n` and a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. Each node has an associated price. You are given an integer array `price`, where `price[i]` is the price of the `ith` node. The **price sum** of a given path is the sum of the prices of all nodes lying on that path. The tree can be rooted at any node `root` of your choice. The incurred **cost** after choosing `root` is the difference between the maximum and minimum **price sum** amongst all paths starting at `root`. Return _the **maximum** possible **cost**_ _amongst all possible root choices_.",
    "examples": [
      {
        "input": "n = 6, edges = \\[\\[0,1\\],\\[1,2\\],\\[1,3\\],\\[3,4\\],\\[3,5\\]\\], price = \\[9,8,7,6,10,5\\]",
        "output": "24",
        "explanation": "The diagram above denotes the tree after rooting it at node 2. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum."
      },
      {
        "input": "n = 3, edges = \\[\\[0,1\\],\\[1,2\\]\\], price = \\[1,1,1\\]",
        "output": "2",
        "explanation": "The diagram above denotes the tree after rooting it at node 0. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`edges.length == n - 1`",
      "`0 <= ai, bi <= n - 1`",
      "`edges` represents a valid tree.",
      "`price.length == n`",
      "`1 <= price[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2539",
    "slug": "count-the-number-of-good-subsequences",
    "title": "Count the Number of Good Subsequences",
    "difficulty": "Medium",
    "description": "A **subsequence** of a string is good if it is not empty and the frequency of each one of its characters is the same. Given a string `s`, return _the number of good subsequences of_ `s`. Since the answer may be too large, return it modulo `109 + 7`. A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.",
    "examples": [
      {
        "input": "s =  \"aabb \"",
        "output": "11",
        "explanation": "The total number of subsequences is `24.` There are five subsequences which are not good:  \"**aab**b \",  \"a**abb** \",  \"**a**a**bb** \",  \"**aa**b**b** \", and the empty subsequence. Hence, the number of good subsequences is `24-5 = 11`."
      },
      {
        "input": "s =  \"leet \"",
        "output": "12",
        "explanation": "There are four subsequences which are not good:  \"**l_ee_**t \",  \"l**eet** \",  \"**leet** \", and the empty subsequence. Hence, the number of good subsequences is `24-4 = 12`."
      },
      {
        "input": "s =  \"abcd \"",
        "output": "15",
        "explanation": "All of the non-empty subsequences are good subsequences. Hence, the number of good subsequences is `24-1 = 15`."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s` consists of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2540",
    "slug": "minimum-common-value",
    "title": "Minimum Common Value",
    "difficulty": "Easy",
    "description": "Given two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, return _the **minimum integer common** to both arrays_. If there is no common integer amongst `nums1` and `nums2`, return `-1`. Note that an integer is said to be **common** to `nums1` and `nums2` if both arrays have **at least one** occurrence of that integer.",
    "examples": [
      {
        "input": "nums1 = \\[1,2,3\\], nums2 = \\[2,4\\]",
        "output": "2",
        "explanation": "The smallest element common to both arrays is 2, so we return 2."
      },
      {
        "input": "nums1 = \\[1,2,3,6\\], nums2 = \\[2,3,4,5\\]",
        "output": "2",
        "explanation": "There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 105`",
      "`1 <= nums1[i], nums2[j] <= 109`",
      "Both `nums1` and `nums2` are sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2541",
    "slug": "minimum-operations-to-make-array-equal-ii",
    "title": "Minimum Operations to Make Array Equal II",
    "difficulty": "Medium",
    "description": "You are given two integer arrays `nums1` and `nums2` of equal length `n` and an integer `k`. You can perform the following operation on `nums1`: *  Choose two indexes `i` and `j` and increment `nums1[i]` by `k` and decrement `nums1[j]` by `k`. In other words, `nums1[i] = nums1[i] + k` and `nums1[j] = nums1[j] - k`. `nums1` is said to be **equal** to `nums2` if for all indices `i` such that `0 <= i < n`, `nums1[i] == nums2[i]`. Return _the **minimum** number of operations required to make_ `nums1` _equal to_ `nums2`. If it is impossible to make them equal, return `-1`.",
    "examples": [
      {
        "input": "nums1 = \\[4,3,1,4\\], nums2 = \\[1,3,7,1\\], k = 3",
        "output": "2",
        "explanation": "In 2 operations, we can transform nums1 to nums2."
      },
      {
        "input": "nums1 = \\[3,8,5,2\\], nums2 = \\[2,4,1,6\\], k = 1",
        "output": "-1",
        "explanation": "It can be proved that it is impossible to make the two arrays equal."
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`2 <= n <= 105`",
      "`0 <= nums1[i], nums2[j] <= 109`",
      "`0 <= k <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2542",
    "slug": "maximum-subsequence-score",
    "title": "Maximum Subsequence Score",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2` of equal length `n` and a positive integer `k`. You must choose a **subsequence** of indices from `nums1` of length `k`. For chosen indices `i0`, `i1`, ..., `ik - 1`, your **score** is defined as: *  The sum of the selected elements from `nums1` multiplied with the **minimum** of the selected elements from `nums2`. *  It can defined simply as: `(nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1])`. Return _the **maximum** possible score._ A **subsequence** of indices of an array is a set that can be derived from the set `{0, 1, ..., n-1}` by deleting some or no elements.",
    "examples": [
      {
        "input": "nums1 = \\[1,3,3,2\\], nums2 = \\[2,1,3,4\\], k = 3",
        "output": "12",
        "explanation": ""
      },
      {
        "input": "nums1 = \\[4,2,3,1,1\\], nums2 = \\[7,5,10,9,6\\], k = 1",
        "output": "30",
        "explanation": ""
      }
    ],
    "constraints": [
      "`n == nums1.length == nums2.length`",
      "`1 <= n <= 105`",
      "`0 <= nums1[i], nums2[j] <= 105`",
      "`1 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2543",
    "slug": "check-if-point-is-reachable",
    "title": "Check if Point Is Reachable",
    "difficulty": "Hard",
    "description": "There exists an infinitely large grid. You are currently at point `(1, 1)`, and you need to reach the point `(targetX, targetY)` using a finite number of steps. In one **step**, you can move from point `(x, y)` to any one of the following points: *  `(x, y - x)` *  `(x - y, y)` *  `(2 * x, y)` *  `(x, 2 * y)` Given two integers `targetX` and `targetY` representing the X-coordinate and Y-coordinate of your final position, return `true` _if you can reach the point from_ `(1, 1)` _using some number of steps, and_ `false` _otherwise_.",
    "examples": [
      {
        "input": "targetX = 6, targetY = 9",
        "output": "false",
        "explanation": "It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned."
      },
      {
        "input": "targetX = 4, targetY = 7",
        "output": "true",
        "explanation": "You can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7)."
      }
    ],
    "constraints": [
      "`1 <= targetX, targetY <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2544",
    "slug": "alternating-digit-sum",
    "title": "Alternating Digit Sum",
    "difficulty": "Easy",
    "description": "You are given a positive integer `n`. Each digit of `n` has a sign according to the following rules: *  The **most significant digit** is assigned a **positive** sign. *  Each other digit has an opposite sign to its adjacent digits. Return _the sum of all digits with their corresponding sign_.",
    "examples": [
      {
        "input": "n = 521",
        "output": "4",
        "explanation": "(+5) + (-2) + (+1) = 4."
      },
      {
        "input": "n = 111",
        "output": "1",
        "explanation": "(+1) + (-1) + (+1) = 1."
      },
      {
        "input": "n = 886996",
        "output": "0",
        "explanation": "(+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0."
      }
    ],
    "constraints": [
      "`1 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2545",
    "slug": "sort-the-students-by-their-kth-score",
    "title": "Sort the Students by Their Kth Score",
    "difficulty": "Medium",
    "description": "There is a class with `m` students and `n` exams. You are given a **0-indexed** `m x n` integer matrix `score`, where each row represents one student and `score[i][j]` denotes the score the `ith` student got in the `jth` exam. The matrix `score` contains **distinct** integers only. You are also given an integer `k`. Sort the students (i.e., the rows of the matrix) by their scores in the `kth` (**0-indexed**) exam from the highest to the lowest. Return _the matrix after sorting it._",
    "examples": [
      {
        "input": "score = \\[\\[10,6,9,1\\],\\[7,5,11,2\\],\\[4,8,3,15\\]\\], k = 2",
        "output": "\\[\\[7,5,11,2\\],\\[10,6,9,1\\],\\[4,8,3,15\\]\\]",
        "explanation": "In the above diagram, S denotes the student, while E denotes the exam."
      },
      {
        "input": "score = \\[\\[3,4\\],\\[5,6\\]\\], k = 0",
        "output": "\\[\\[5,6\\],\\[3,4\\]\\]",
        "explanation": "In the above diagram, S denotes the student, while E denotes the exam."
      }
    ],
    "constraints": [
      "`m == score.length`",
      "`n == score[i].length`",
      "`1 <= m, n <= 250`",
      "`1 <= score[i][j] <= 105`",
      "`score` consists of distinct integers.",
      "`0 <= k < n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2546",
    "slug": "apply-bitwise-operations-to-make-strings-equal",
    "title": "Apply Bitwise Operations to Make Strings Equal",
    "difficulty": "Medium",
    "description": "You are given two **0-indexed binary** strings `s` and `target` of the same length `n`. You can do the following operation on `s` **any** number of times: *  Choose two **different** indices `i` and `j` where `0 <= i, j < n`. *  Simultaneously, replace `s[i]` with (`s[i]` **OR** `s[j]`) and `s[j]` with (`s[i]` **XOR** `s[j]`). For example, if `s = \"0110 \"`, you can choose `i = 0` and `j = 2`, then simultaneously replace `s[0]` with (`s[0]` **OR** `s[2]` = `0` **OR** `1` = `1`), and `s[2]` with (`s[0]` **XOR** `s[2]` = `0` **XOR** `1` = `1`), so we will have `s = \"1110 \"`. Return `true` _if you can make the string_ `s` _equal to_ `target`_, or_ `false` _otherwise_.",
    "examples": [
      {
        "input": "s =  \"1010 \", target =  \"0110 \"",
        "output": "true",
        "explanation": "We can do the following operations:"
      },
      {
        "input": "s =  \"11 \", target =  \"00 \"",
        "output": "false",
        "explanation": "It is not possible to make s equal to target with any number of operations."
      }
    ],
    "constraints": [
      "`n == s.length == target.length`",
      "`2 <= n <= 105`",
      "`s` and `target` consist of only the digits `0` and `1`."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2547",
    "slug": "minimum-cost-to-split-an-array",
    "title": "Minimum Cost to Split an Array",
    "difficulty": "Hard",
    "description": "You are given an integer array `nums` and an integer `k`. Split the array into some number of non-empty subarrays. The **cost** of a split is the sum of the **importance value** of each subarray in the split. Let `trimmed(subarray)` be the version of the subarray where all numbers which appear only once are removed. *  For example, `trimmed([3,1,2,4,3,4]) = [3,4,3,4].` The **importance value** of a subarray is `k + trimmed(subarray).length`. *  For example, if a subarray is `[1,2,3,3,3,4,4]`, then trimmed(`[1,2,3,3,3,4,4]) = [3,3,3,4,4].`The importance value of this subarray will be `k + 5`. Return _the minimum possible cost of a split of_ `nums`. A **subarray** is a contiguous **non-empty** sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[1,2,1,2,1,3,3\\], k = 2",
        "output": "8",
        "explanation": "We split nums to have two subarrays: \\[1,2\\], \\[1,2,1,3,3\\]."
      },
      {
        "input": "nums = \\[1,2,1,2,1\\], k = 2",
        "output": "6",
        "explanation": "We split nums to have two subarrays: \\[1,2\\], \\[1,2,1\\]."
      },
      {
        "input": "nums = \\[1,2,1,2,1\\], k = 5",
        "output": "10",
        "explanation": "We split nums to have one subarray: \\[1,2,1,2,1\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`0 <= nums[i] < nums.length`",
      "`1 <= k <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2548",
    "slug": "maximum-price-to-fill-a-bag",
    "title": "Maximum Price to Fill a Bag",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `items` where `items[i] = [pricei, weighti]` denotes the price and weight of the `ith` item, respectively. You are also given a **positive** integer `capacity`. Each item can be divided into two items with ratios `part1` and `part2`, where `part1 + part2 == 1`. *  The weight of the first item is `weighti * part1` and the price of the first item is `pricei * part1`. *  Similarly, the weight of the second item is `weighti * part2` and the price of the second item is `pricei * part2`. Return _**the maximum total price** to fill a bag of capacity_ `capacity` _with given items_. If it is impossible to fill a bag return `-1`. Answers within `10-5` of the **actual answer** will be considered accepted.",
    "examples": [
      {
        "input": "items = \\[\\[50,1\\],\\[10,8\\]\\], capacity = 5",
        "output": "55.00000",
        "explanation": ""
      },
      {
        "input": "items = \\[\\[100,30\\]\\], capacity = 50",
        "output": "-1.00000",
        "explanation": "It is impossible to fill a bag with the given item."
      }
    ],
    "constraints": [
      "`1 <= items.length <= 105`",
      "`items[i].length == 2`",
      "`1 <= pricei, weighti <= 104`",
      "`1 <= capacity <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2549",
    "slug": "count-distinct-numbers-on-board",
    "title": "Count Distinct Numbers on Board",
    "difficulty": "Easy",
    "description": "You are given a positive integer `n`, that is initially placed on a board. Every day, for `109` days, you perform the following procedure: *  For each number `x` present on the board, find all numbers `1 <= i <= n` such that `x % i == 1`. *  Then, place those numbers on the board. Return _the number of **distinct** integers present on the board after_ `109` _days have elapsed_.",
    "examples": [
      {
        "input": "n = 5",
        "output": "4",
        "explanation": "Initially, 5 is present on the board."
      },
      {
        "input": "n = 3",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= n <= 100`"
    ],
    "note": "",
    "follow_up": null
  },
  {
    "id": "2550",
    "slug": "count-collisions-of-monkeys-on-a-polygon",
    "title": "Count Collisions of Monkeys on a Polygon",
    "difficulty": "Medium",
    "description": "There is a regular convex polygon with `n` vertices. The vertices are labeled from `0` to `n - 1` in a clockwise direction, and each vertex has **exactly one monkey**. The following figure shows a convex polygon of `6` vertices. Each monkey moves simultaneously to a neighboring vertex. A neighboring vertex for a vertex `i` can be: *  the vertex `(i + 1) % n` in the clockwise direction, or *  the vertex `(i - 1 + n) % n` in the counter-clockwise direction. A **collision** happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge. Return _the number of ways the monkeys can move so that at least **one collision**_ _happens_. Since the answer may be very large, return it modulo `109 + 7`. **Note** that each monkey can only move once.",
    "examples": [
      {
        "input": "n = 3",
        "output": "6",
        "explanation": "There are 8 total possible movements."
      },
      {
        "input": "n = 4",
        "output": "14",
        "explanation": "It can be shown that there are 14 ways for the monkeys to collide."
      }
    ],
    "constraints": [
      "`3 <= n <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2551",
    "slug": "put-marbles-in-bags",
    "title": "Put Marbles in Bags",
    "difficulty": "Hard",
    "description": "You have `k` bags. You are given a **0-indexed** integer array `weights` where `weights[i]` is the weight of the `ith` marble. You are also given the integer `k.` Divide the marbles into the `k` bags according to the following rules: *  No bag is empty. *  If the `ith` marble and `jth` marble are in a bag, then all marbles with an index between the `ith` and `jth` indices should also be in that same bag. *  If a bag consists of all the marbles with an index from `i` to `j` inclusively, then the cost of the bag is `weights[i] + weights[j]`. The **score** after distributing the marbles is the sum of the costs of all the `k` bags. Return _the **difference** between the **maximum** and **minimum** scores among marble distributions_.",
    "examples": [
      {
        "input": "weights = \\[1,3,5,1\\], k = 2",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "weights = \\[1, 3\\], k = 2",
        "output": "0",
        "explanation": "The only distribution possible is \\[1\\],\\[3\\]."
      }
    ],
    "constraints": [
      "`1 <= k <= weights.length <= 105`",
      "`1 <= weights[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2552",
    "slug": "count-increasing-quadruplets",
    "title": "Count Increasing Quadruplets",
    "difficulty": "Hard",
    "description": "Given a **0-indexed** integer array `nums` of size `n` containing all numbers from `1` to `n`, return _the number of increasing quadruplets_. A quadruplet `(i, j, k, l)` is increasing if: *  `0 <= i < j < k < l < n`, and *  `nums[i] < nums[k] < nums[j] < nums[l]`.",
    "examples": [
      {
        "input": "nums = \\[1,3,2,4,5\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "0",
        "explanation": "There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums\\[j\\] < nums\\[k\\], we return 0."
      }
    ],
    "constraints": [
      "`4 <= nums.length <= 4000`",
      "`1 <= nums[i] <= nums.length`",
      "All the integers of `nums` are unique. `nums` is a permutation."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2553",
    "slug": "separate-the-digits-in-an-array",
    "title": "Separate the Digits in an Array",
    "difficulty": "Easy",
    "description": "Given an array of positive integers `nums`, return _an array_ `answer` _that consists of the digits of each integer in_ `nums` _after separating them in **the same order** they appear in_ `nums`. To separate the digits of an integer is to get all the digits it has in the same order. *  For example, for the integer `10921`, the separation of its digits is `[1,0,9,2,1]`.",
    "examples": [
      {
        "input": "nums = \\[13,25,83,77\\]",
        "output": "\\[1,3,2,5,8,3,7,7\\]",
        "explanation": ""
      },
      {
        "input": "nums = \\[7,1,3,9\\]",
        "output": "\\[7,1,3,9\\]",
        "explanation": "The separation of each integer in nums is itself."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2554",
    "slug": "maximum-number-of-integers-to-choose-from-a-range-i",
    "title": "Maximum Number of Integers to Choose From a Range I",
    "difficulty": "Medium",
    "description": "You are given an integer array `banned` and two integers `n` and `maxSum`. You are choosing some number of integers following the below rules: *  The chosen integers have to be in the range `[1, n]`. *  Each integer can be chosen **at most once**. *  The chosen integers should not be in the array `banned`. *  The sum of the chosen integers should not exceed `maxSum`. Return _the **maximum** number of integers you can choose following the mentioned rules_.",
    "examples": [
      {
        "input": "banned = \\[1,6,5\\], n = 5, maxSum = 6",
        "output": "2",
        "explanation": "You can choose the integers 2 and 4."
      },
      {
        "input": "banned = \\[1,2,3,4,5,6,7\\], n = 8, maxSum = 1",
        "output": "0",
        "explanation": "You cannot choose any integer while following the mentioned conditions."
      },
      {
        "input": "banned = \\[11\\], n = 7, maxSum = 50",
        "output": "7",
        "explanation": "You can choose the integers 1, 2, 3, 4, 5, 6, and 7."
      }
    ],
    "constraints": [
      "`1 <= banned.length <= 104`",
      "`1 <= banned[i], n <= 104`",
      "`1 <= maxSum <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2555",
    "slug": "maximize-win-from-two-segments",
    "title": "Maximize Win From Two Segments",
    "difficulty": "Medium",
    "description": "There are some prizes on the **X-axis**. You are given an integer array `prizePositions` that is **sorted in non-decreasing order**, where `prizePositions[i]` is the position of the `ith` prize. There could be different prizes at the same position on the line. You are also given an integer `k`. You are allowed to select two segments with integer endpoints. The length of each segment must be `k`. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect. *  For example if `k = 2`, you can choose segments `[1, 3]` and `[2, 4]`, and you will win any prize i that satisfies `1 <= prizePositions[i] <= 3` or `2 <= prizePositions[i] <= 4`. Return _the **maximum** number of prizes you can win if you choose the two segments optimally_.",
    "examples": [
      {
        "input": "prizePositions = \\[1,1,2,2,3,3,5\\], k = 2",
        "output": "7",
        "explanation": "In this example, you can win all 7 prizes by selecting two segments \\[1, 3\\] and \\[3, 5\\]."
      },
      {
        "input": "prizePositions = \\[1,2,3,4\\], k = 0",
        "output": "2",
        "explanation": "For this example, **one choice** for the segments is `[3, 3]` and `[4, 4],` and you will be able to get `2` prizes."
      }
    ],
    "constraints": [
      "`1 <= prizePositions.length <= 105`",
      "`1 <= prizePositions[i] <= 109`",
      "`0 <= k <= 109`",
      "`prizePositions` is sorted in non-decreasing order."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2556",
    "slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
    "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** `m x n` **binary** matrix `grid`. You can move from a cell `(row, col)` to any of the cells `(row + 1, col)` or `(row, col + 1)` that has the value `1`. The matrix is **disconnected** if there is no path from `(0, 0)` to `(m - 1, n - 1)`. You can flip the value of **at most one** (possibly none) cell. You **cannot flip** the cells `(0, 0)` and `(m - 1, n - 1)`. Return `true` _if it is possible to make the matrix disconnect or_ `false` _otherwise_. **Note** that flipping a cell changes its value from `0` to `1` or from `1` to `0`.",
    "examples": [
      {
        "input": "grid = \\[\\[1,1,1\\],\\[1,0,0\\],\\[1,1,1\\]\\]",
        "output": "true",
        "explanation": "We can change the cell shown in the diagram above. There is no path from (0, 0) to (2, 2) in the resulting grid."
      },
      {
        "input": "grid = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]",
        "output": "false",
        "explanation": "It is not possible to change at most one cell such that there is not path from (0, 0) to (2, 2)."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`1 <= m, n <= 1000`",
      "`1 <= m  n <= 105`",
      "`grid[i][j]` is either `0` or `1`.",
      "`grid[0][0] == grid[m - 1][n - 1] == 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2557",
    "slug": "maximum-number-of-integers-to-choose-from-a-range-ii",
    "title": "Maximum Number of Integers to Choose From a Range II",
    "difficulty": "Medium",
    "description": "You are given an integer array `banned` and two integers `n` and `maxSum`. You are choosing some number of integers following the below rules: *  The chosen integers have to be in the range `[1, n]`. *  Each integer can be chosen **at most once**. *  The chosen integers should not be in the array `banned`. *  The sum of the chosen integers should not exceed `maxSum`. Return _the **maximum** number of integers you can choose following the mentioned rules_.",
    "examples": [
      {
        "input": "banned = \\[1,4,6\\], n = 6, maxSum = 4",
        "output": "1",
        "explanation": "You can choose the integer 3."
      },
      {
        "input": "banned = \\[4,3,5,6\\], n = 7, maxSum = 18",
        "output": "3",
        "explanation": "You can choose the integers 1, 2, and 7."
      }
    ],
    "constraints": [
      "`1 <= banned.length <= 105`",
      "`1 <= banned[i] <= n <= 109`",
      "`1 <= maxSum <= 1015`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2558",
    "slug": "take-gifts-from-the-richest-pile",
    "title": "Take Gifts From the Richest Pile",
    "difficulty": "Easy",
    "description": "You are given an integer array `gifts` denoting the number of gifts in various piles. Every second, you do the following: *  Choose the pile with the maximum number of gifts. *  If there is more than one pile with the maximum number of gifts, choose any. *  Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts. Return _the number of gifts remaining after_ `k` _seconds._",
    "examples": [
      {
        "input": "gifts = \\[25,64,9,4,100\\], k = 4",
        "output": "29",
        "explanation": ""
      },
      {
        "input": "gifts = \\[1,1,1,1\\], k = 4",
        "output": "4",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= gifts.length <= 103`",
      "`1 <= gifts[i] <= 109`",
      "`1 <= k <= 103`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2559",
    "slug": "count-vowel-strings-in-ranges",
    "title": "Count Vowel Strings in Ranges",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** array of strings `words` and a 2D array of integers `queries`. Each query `queries[i] = [li, ri]` asks us to find the number of strings present in the range `li` to `ri` (both **inclusive**) of `words` that start and end with a vowel. Return _an array_ `ans` _of size_ `queries.length`_, where_ `ans[i]` _is the answer to the_ `i`th _query_. **Note** that the vowel letters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.",
    "examples": [
      {
        "input": "words = \\[ \"aba \", \"bcb \", \"ece \", \"aa \", \"e \"\\], queries = \\[\\[0,2\\],\\[1,4\\],\\[1,1\\]\\]",
        "output": "\\[2,3,0\\]",
        "explanation": "The strings starting and ending with a vowel are  \"aba \",  \"ece \",  \"aa \" and  \"e \"."
      },
      {
        "input": "words = \\[ \"a \", \"e \", \"i \"\\], queries = \\[\\[0,2\\],\\[0,1\\],\\[2,2\\]\\]",
        "output": "\\[3,2,1\\]",
        "explanation": "Every string satisfies the conditions, so we return \\[3,2,1\\]."
      }
    ],
    "constraints": [
      "`1 <= words.length <= 105`",
      "`1 <= words[i].length <= 40`",
      "`words[i]` consists only of lowercase English letters.",
      "`sum(words[i].length) <= 3  105`",
      "`1 <= queries.length <= 105`",
      "`0 <= li <= ri < words.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2560",
    "slug": "house-robber-iv",
    "title": "House Robber IV",
    "difficulty": "Medium",
    "description": "There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he **refuses to steal from adjacent homes**. The **capability** of the robber is the maximum amount of money he steals from one house of all the houses he robbed. You are given an integer array `nums` representing how much money is stashed in each house. More formally, the `ith` house from the left has `nums[i]` dollars. You are also given an integer `k`, representing the **minimum** number of houses the robber will steal from. It is always possible to steal at least `k` houses. Return _the **minimum** capability of the robber out of all the possible ways to steal at least_ `k` _houses_.",
    "examples": [
      {
        "input": "nums = \\[2,3,5,9\\], k = 2",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "nums = \\[2,7,9,3,1\\], k = 2",
        "output": "2",
        "explanation": "There are 7 ways to rob the houses. The way which leads to minimum capability is to rob the house at index 0 and 4. Return max(nums\\[0\\], nums\\[4\\]) = 2."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`",
      "`1 <= k <= (nums.length + 1)/2`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2561",
    "slug": "rearranging-fruits",
    "title": "Rearranging Fruits",
    "difficulty": "Hard",
    "description": "You have two fruit baskets containing `n` fruits each. You are given two **0-indexed** integer arrays `basket1` and `basket2` representing the cost of fruit in each basket. You want to make both baskets **equal**. To do so, you can use the following operation as many times as you want: *  Chose two indices `i` and `j`, and swap the `ith` fruit of `basket1` with the `jth` fruit of `basket2`. *  The cost of the swap is `min(basket1[i],basket2[j])`. Two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets. Return _the minimum cost to make both the baskets equal or_ `-1` _if impossible._",
    "examples": [
      {
        "input": "basket1 = \\[4,2,2,2\\], basket2 = \\[1,4,1,2\\]",
        "output": "1",
        "explanation": "Swap index 1 of basket1 with index 0 of basket2, which has cost 1. Now basket1 = \\[4,1,2,2\\] and basket2 = \\[2,4,1,2\\]. Rearranging both the arrays makes them equal."
      },
      {
        "input": "basket1 = \\[2,3,4,1\\], basket2 = \\[3,2,5,1\\]",
        "output": "-1",
        "explanation": "It can be shown that it is impossible to make both the baskets equal."
      }
    ],
    "constraints": [
      "`basket1.length == bakste2.length`",
      "`1 <= basket1.length <= 105`",
      "`1 <= basket1[i],basket2[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2562",
    "slug": "find-the-array-concatenation-value",
    "title": "Find the Array Concatenation Value",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** integer array `nums`. The **concatenation** of two numbers is the number formed by concatenating their numerals. *  For example, the concatenation of `15`, `49` is `1549`. The **concatenation value** of `nums` is initially equal to `0`. Perform this operation until `nums` becomes empty: *  If there exists more than one number in `nums`, pick the first element and last element in `nums` respectively and add the value of their concatenation to the **concatenation value** of `nums`, then delete the first and last element from `nums`. *  If one element exists, add its value to the **concatenation value** of `nums`, then delete it. Return _the concatenation value of the `nums`_.",
    "examples": [
      {
        "input": "nums = \\[7,52,2,4\\]",
        "output": "596",
        "explanation": "Before performing any operation, nums is \\[7,52,2,4\\] and concatenation value is 0."
      },
      {
        "input": "nums = \\[5,14,13,8,12\\]",
        "output": "673",
        "explanation": "Before performing any operation, nums is \\[5,14,13,8,12\\] and concatenation value is 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 104`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2563",
    "slug": "count-the-number-of-fair-pairs",
    "title": "Count the Number of Fair Pairs",
    "difficulty": "Medium",
    "description": "Given a **0-indexed** integer array `nums` of size `n` and two integers `lower` and `upper`, return _the number of fair pairs_. A pair `(i, j)` is **fair** if: *  `0 <= i < j < n`, and *  `lower <= nums[i] + nums[j] <= upper`",
    "examples": [
      {
        "input": "nums = \\[0,1,7,4,4,5\\], lower = 3, upper = 6",
        "output": "6",
        "explanation": "There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5)."
      },
      {
        "input": "nums = \\[1,7,9,2,5\\], lower = 11, upper = 11",
        "output": "1",
        "explanation": "There is a single fair pair: (2,3)."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`nums.length == n`",
      "`-109 <= nums[i] <= 109`",
      "`-109 <= lower <= upper <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2564",
    "slug": "substring-xor-queries",
    "title": "Substring XOR Queries",
    "difficulty": "Medium",
    "description": "You are given a **binary string** `s`, and a **2D** integer array `queries` where `queries[i] = [firsti, secondi]`. For the `ith` query, find the **shortest substring** of `s` whose **decimal value**, `val`, yields `secondi` when **bitwise XORed** with `firsti`. In other words, `val ^ firsti == secondi`. The answer to the `ith` query is the endpoints (**0-indexed**) of the substring `[lefti, righti]` or `[-1, -1]` if no such substring exists. If there are multiple answers, choose the one with the **minimum** `lefti`. _Return an array_ `ans` _where_ `ans[i] = [lefti, righti]` _is the answer to the_ `ith` _query._ A **substring** is a contiguous non-empty sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"101101 \", queries = \\[\\[0,5\\],\\[1,2\\]\\]",
        "output": "\\[\\[0,2\\],\\[2,3\\]\\]",
        "explanation": "For the first query the substring in range `[0,2]` is ** \"101 \"** which has a decimal value of **`5`**, and **`5 ^ 0 = 5`**, hence the answer to the first query is `[0,2]`. In the second query, the substring in range `[2,3]` is ** \"11 \",** and has a decimal value of **3**, and **3 `^ 1 = 2`**. So, `[2,3]` is returned for the second query."
      },
      {
        "input": "s =  \"0101 \", queries = \\[\\[12,8\\]\\]",
        "output": "\\[\\[-1,-1\\]\\]",
        "explanation": "In this example there is no substring that answers the query, hence `[-1,-1] is returned`."
      },
      {
        "input": "s =  \"1 \", queries = \\[\\[4,5\\]\\]",
        "output": "\\[\\[0,0\\]\\]",
        "explanation": "For this example, the substring in range `[0,0]` has a decimal value of **`1`**, and **`1 ^ 4 = 5`**. So, the answer is `[0,0]`."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 104`",
      "`s[i]` is either `'0'` or `'1'`.",
      "`1 <= queries.length <= 105`",
      "`0 <= firsti, secondi <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2565",
    "slug": "subsequence-with-the-minimum-score",
    "title": "Subsequence With the Minimum Score",
    "difficulty": "Hard",
    "description": "You are given two strings `s` and `t`. You are allowed to remove any number of characters from the string `t`. The score of the string is `0` if no characters are removed from the string `t`, otherwise: *  Let `left` be the minimum index among all removed characters. *  Let `right` be the maximum index among all removed characters. Then the score of the string is `right - left + 1`. Return _the minimum possible score to make_ `t` _a subsequence of_ `s`_._ A **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not).",
    "examples": [
      {
        "input": "s =  \"abacaba \", t =  \"bzaa \"",
        "output": "1",
        "explanation": "In this example, we remove the character  \"z \" at index 1 (0-indexed)."
      },
      {
        "input": "s =  \"cde \", t =  \"xyz \"",
        "output": "3",
        "explanation": "In this example, we remove characters  \"x \",  \"y \" and  \"z \" at indices 0, 1, and 2 (0-indexed)."
      }
    ],
    "constraints": [
      "`1 <= s.length, t.length <= 105`",
      "`s` and `t` consist of only lowercase English letters."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2566",
    "slug": "maximum-difference-by-remapping-a-digit",
    "title": "Maximum Difference by Remapping a Digit",
    "difficulty": "Easy",
    "description": "You are given an integer `num`. You know that Danny Mittal will sneakily **remap** one of the `10` possible digits (`0` to `9`) to another digit. Return _the difference between the maximum and minimum_ _values Danny can make by remapping **exactly** **one** digit_ _in_ `num`. **Notes:** *  When Danny remaps a digit d1 to another digit d2, Danny replaces all occurrences of `d1` in `num` with `d2`. *  Danny can remap a digit to itself, in which case `num` does not change. *  Danny can remap different digits for obtaining minimum and maximum values respectively. *  The resulting number after remapping can contain leading zeroes. *  We mentioned \"Danny Mittal \" to congratulate him on being in the top 10 in Weekly Contest 326.",
    "examples": [
      {
        "input": "num = 11891",
        "output": "99009",
        "explanation": ""
      },
      {
        "input": "num = 90",
        "output": "99",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= num <= 108`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2567",
    "slug": "minimum-score-by-changing-two-elements",
    "title": "Minimum Score by Changing Two Elements",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. *  The **low** score of `nums` is the minimum value of `|nums[i] - nums[j]|` over all `0 <= i < j < nums.length`. *  The **high** score of `nums` is the maximum value of `|nums[i] - nums[j]|` over all `0 <= i < j < nums.length`. *  The **score** of `nums` is the sum of the **high** and **low** scores of nums. To minimize the score of `nums`, we can change the value of **at most two** elements of `nums`. Return _the **minimum** possible **score** after changing the value of **at most two** elements o_f `nums`. Note that `|x|` denotes the absolute value of `x`.",
    "examples": [
      {
        "input": "nums = \\[1,4,3\\]",
        "output": "0",
        "explanation": "Change value of nums\\[1\\] and nums\\[2\\] to 1 so that nums becomes \\[1,1,1\\]. Now, the value of `|nums[i] - nums[j]|` is always equal to 0, so we return 0 + 0 = 0."
      },
      {
        "input": "nums = \\[1,4,7,8,5\\]",
        "output": "3",
        "explanation": "Change nums\\[0\\] and nums\\[1\\] to be 6. Now nums becomes \\[6,6,7,8,5\\]."
      }
    ],
    "constraints": [
      "`3 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2568",
    "slug": "minimum-impossible-or",
    "title": "Minimum Impossible OR",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. We say that an integer x is **expressible** from `nums` if there exist some integers `0 <= index1 < index2 < ... < indexk < nums.length` for which `nums[index1] | nums[index2] | ... | nums[indexk] = x`. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of `nums`. Return _the minimum **positive non-zero integer** that is not_ _expressible from_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[2,1\\]",
        "output": "4",
        "explanation": "1 and 2 are already present in the array. We know that 3 is expressible, since nums\\[0\\] | nums\\[1\\] = 2 | 1 = 3. Since 4 is not expressible, we return 4."
      },
      {
        "input": "nums = \\[5,3,2\\]",
        "output": "1",
        "explanation": "We can show that 1 is the smallest number that is not expressible."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2569",
    "slug": "handling-sum-queries-after-update",
    "title": "Handling Sum Queries After Update",
    "difficulty": "Hard",
    "description": "You are given two **0-indexed** arrays `nums1` and `nums2` and a 2D array `queries` of queries. There are three types of queries: 1. For a query of type 1, `queries[i] = [1, l, r]`. Flip the values from `0` to `1` and from `1` to `0` in `nums1` from index `l` to index `r`. Both `l` and `r` are **0-indexed**. 2. For a query of type 2, `queries[i] = [2, p, 0]`. For every index `0 <= i < n`, set `nums2[i] = nums2[i] + nums1[i] * p`. 3. For a query of type 3, `queries[i] = [3, 0, 0]`. Find the sum of the elements in `nums2`. Return _an array containing all the answers to the third type queries._",
    "examples": [
      {
        "input": "nums1 = \\[1,0,1\\], nums2 = \\[0,0,0\\], queries = \\[\\[1,1,1\\],\\[2,1,0\\],\\[3,0,0\\]\\]",
        "output": "\\[3\\]",
        "explanation": "After the first query nums1 becomes \\[1,1,1\\]. After the second query, nums2 becomes \\[1,1,1\\], so the answer to the third query is 3. Thus, \\[3\\] is returned."
      },
      {
        "input": "nums1 = \\[1\\], nums2 = \\[5\\], queries = \\[\\[2,0,0\\],\\[3,0,0\\]\\]",
        "output": "\\[5\\]",
        "explanation": "After the first query, nums2 remains \\[5\\], so the answer to the second query is 5. Thus, \\[5\\] is returned."
      }
    ],
    "constraints": [
      "`1 <= nums1.length,nums2.length <= 105`",
      "`nums1.length = nums2.length`",
      "`1 <= queries.length <= 105`",
      "`queries[i].length = 3`",
      "`0 <= l <= r <= nums1.length - 1`",
      "`0 <= p <= 106`",
      "`0 <= nums1[i] <= 1`",
      "`0 <= nums2[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2570",
    "slug": "merge-two-2d-arrays-by-summing-values",
    "title": "Merge Two 2D Arrays by Summing Values",
    "difficulty": "Easy",
    "description": "You are given two **2D** integer arrays `nums1` and `nums2.` *  `nums1[i] = [idi, vali]` indicate that the number with the id `idi` has a value equal to `vali`. *  `nums2[i] = [idi, vali]` indicate that the number with the id `idi` has a value equal to `vali`. Each array contains **unique** ids and is sorted in **ascending** order by id. Merge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions: *  Only ids that appear in at least one of the two arrays should be included in the resulting array. *  Each id should be included **only once** and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be `0`. Return _the resulting array_. The returned array must be sorted in ascending order by id.",
    "examples": [
      {
        "input": "nums1 = \\[\\[1,2\\],\\[2,3\\],\\[4,5\\]\\], nums2 = \\[\\[1,4\\],\\[3,2\\],\\[4,1\\]\\]",
        "output": "\\[\\[1,6\\],\\[2,3\\],\\[3,2\\],\\[4,6\\]\\]",
        "explanation": "The resulting array contains the following:"
      },
      {
        "input": "nums1 = \\[\\[2,4\\],\\[3,6\\],\\[5,5\\]\\], nums2 = \\[\\[1,3\\],\\[4,3\\]\\]",
        "output": "\\[\\[1,3\\],\\[2,4\\],\\[3,6\\],\\[4,3\\],\\[5,5\\]\\]",
        "explanation": "There are no common ids, so we just include each id with its value in the resulting list."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 200`",
      "`nums1[i].length == nums2[j].length == 2`",
      "`1 <= idi, vali <= 1000`",
      "Both arrays contain unique ids.",
      "Both arrays are in strictly ascending order by id."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2571",
    "slug": "minimum-operations-to-reduce-an-integer-to-0",
    "title": "Minimum Operations to Reduce an Integer to 0",
    "difficulty": "Medium",
    "description": "You are given a positive integer `n`, you can do the following operation **any** number of times: *  Add or subtract a **power** of `2` from `n`. Return _the **minimum** number of operations to make_ `n` _equal to_ `0`. A number `x` is power of `2` if `x == 2i` where `i >= 0`_._",
    "examples": [
      {
        "input": "n = 39",
        "output": "3",
        "explanation": "We can do the following operations:"
      },
      {
        "input": "n = 54",
        "output": "3",
        "explanation": "We can do the following operations:"
      }
    ],
    "constraints": [
      "`1 <= n <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2572",
    "slug": "count-the-number-of-square-free-subsets",
    "title": "Count the Number of Square-Free Subsets",
    "difficulty": "Medium",
    "description": "You are given a positive integer **0-indexed** array `nums`. A subset of the array `nums` is **square-free** if the product of its elements is a **square-free integer**. A **square-free integer** is an integer that is divisible by no square number other than `1`. Return _the number of square-free non-empty subsets of the array_ **nums**. Since the answer may be too large, return it **modulo** `109 + 7`. A **non-empty** **subset** of `nums` is an array that can be obtained by deleting some (possibly none but not all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.",
    "examples": [
      {
        "input": "nums = \\[3,4,4,5\\]",
        "output": "3",
        "explanation": "There are 3 square-free subsets in this example:"
      },
      {
        "input": "nums = \\[1\\]",
        "output": "1",
        "explanation": "There is 1 square-free subset in this example:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 30`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2573",
    "slug": "find-the-string-with-lcp",
    "title": "Find the String with LCP",
    "difficulty": "Hard",
    "description": "We define the `lcp` matrix of any **0-indexed** string `word` of `n` lowercase English letters as an `n x n` grid such that: *  `lcp[i][j]` is equal to the length of the **longest common prefix** between the substrings `word[i,n-1]` and `word[j,n-1]`. Given an `n x n` matrix `lcp`, return the alphabetically smallest string `word` that corresponds to `lcp`. If there is no such string, return an empty string. A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"aabd \"` is lexicographically smaller than `\"aaca \"` because the first position they differ is at the third letter, and `'b'` comes before `'c'`.",
    "examples": [
      {
        "input": "lcp = \\[\\[4,0,2,0\\],\\[0,3,0,1\\],\\[2,0,2,0\\],\\[0,1,0,1\\]\\]",
        "output": "\"abab \"",
        "explanation": "lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is  \"abab \"."
      },
      {
        "input": "lcp = \\[\\[4,3,2,1\\],\\[3,3,2,1\\],\\[2,2,2,1\\],\\[1,1,1,1\\]\\]",
        "output": "\"aaaa \"",
        "explanation": "lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is  \"aaaa \"."
      },
      {
        "input": "lcp = \\[\\[4,3,2,1\\],\\[3,3,2,1\\],\\[2,2,2,1\\],\\[1,1,1,3\\]\\]",
        "output": "\" \"",
        "explanation": "lcp\\[3\\]\\[3\\] cannot be equal to 3 since word\\[3,...,3\\] consists of only a single letter; Thus, no answer exists."
      }
    ],
    "constraints": [
      "`1 <= n ==` `lcp.length ==` `lcp[i].length` `<= 1000`",
      "`0 <= lcp[i][j] <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2574",
    "slug": "left-and-right-sum-differences",
    "title": "Left and Right Sum Differences",
    "difficulty": "Easy",
    "description": "Given a **0-indexed** integer array `nums`, find a **0-indexed** integer array `answer` where: *  `answer.length == nums.length`. *  `answer[i] = |leftSum[i] - rightSum[i]|`. Where: *  `leftSum[i]` is the sum of elements to the left of the index `i` in the array `nums`. If there is no such element, `leftSum[i] = 0`. *  `rightSum[i]` is the sum of elements to the right of the index `i` in the array `nums`. If there is no such element, `rightSum[i] = 0`. Return _the array_ `answer`.",
    "examples": [
      {
        "input": "nums = \\[10,4,8,3\\]",
        "output": "\\[15,1,11,22\\]",
        "explanation": "The array leftSum is \\[0,10,14,22\\] and the array rightSum is \\[15,11,3,0\\]."
      },
      {
        "input": "nums = \\[1\\]",
        "output": "\\[0\\]",
        "explanation": "The array leftSum is \\[0\\] and the array rightSum is \\[0\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2575",
    "slug": "find-the-divisibility-array-of-a-string",
    "title": "Find the Divisibility Array of a String",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** string `word` of length `n` consisting of digits, and a positive integer `m`. The **divisibility array** `div` of `word` is an integer array of length `n` such that: *  `div[i] = 1` if the **numeric value** of `word[0,...,i]` is divisible by `m`, or *  `div[i] = 0` otherwise. Return _the divisibility array of_ `word`.",
    "examples": [
      {
        "input": "word =  \"998244353 \", m = 3",
        "output": "\\[1,1,0,0,0,1,1,0,0\\]",
        "explanation": "There are only 4 prefixes that are divisible by 3:  \"9 \",  \"99 \",  \"998244 \", and  \"9982443 \"."
      },
      {
        "input": "word =  \"1010 \", m = 10",
        "output": "\\[0,1,0,1\\]",
        "explanation": "There are only 2 prefixes that are divisible by 10:  \"10 \", and  \"1010 \"."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`word.length == n`",
      "`word` consists of digits from `0` to `9`",
      "`1 <= m <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2577",
    "slug": "minimum-time-to-visit-a-cell-in-a-grid",
    "title": "Minimum Time to Visit a Cell In a Grid",
    "difficulty": "Hard",
    "description": "You are given a `m x n` matrix `grid` consisting of **non-negative** integers where `grid[row][col]` represents the **minimum** time required to be able to visit the cell `(row, col)`, which means you can visit the cell `(row, col)` only when the time you visit it is greater than or equal to `grid[row][col]`. You are standing in the **top-left** cell of the matrix in the `0th` second, and you must move to **any** adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second. Return _the **minimum** time required in which you can visit the bottom-right cell of the matrix_. If you cannot visit the bottom-right cell, then return `-1`.",
    "examples": [
      {
        "input": "grid = \\[\\[0,1,3,2\\],\\[5,1,2,5\\],\\[4,3,8,6\\]\\]",
        "output": "7",
        "explanation": "One of the paths that we can take is the following:"
      },
      {
        "input": "grid = \\[\\[0,2,4\\],\\[3,2,1\\],\\[1,0,4\\]\\]",
        "output": "-1",
        "explanation": "There is no path from the top left to the bottom-right cell."
      }
    ],
    "constraints": [
      "`m == grid.length`",
      "`n == grid[i].length`",
      "`2 <= m, n <= 1000`",
      "`4 <= m  n <= 105`",
      "`0 <= grid[i][j] <= 105`",
      "`grid[0][0] == 0`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2578",
    "slug": "split-with-minimum-sum",
    "title": "Split With Minimum Sum",
    "difficulty": "Easy",
    "description": "Given a positive integer `num`, split it into two non-negative integers `num1` and `num2` such that: *  The concatenation of `num1` and `num2` is a permutation of `num`. *  In other words, the sum of the number of occurrences of each digit in `num1` and `num2` is equal to the number of occurrences of that digit in `num`. *  `num1` and `num2` can contain leading zeros. Return _the **minimum** possible sum of_ `num1` _and_ `num2`. **Notes:** *  It is guaranteed that `num` does not contain any leading zeros. *  The order of occurrence of the digits in `num1` and `num2` may differ from the order of occurrence of `num`.",
    "examples": [
      {
        "input": "num = 4325",
        "output": "59",
        "explanation": "We can split 4325 so that `num1` is 24 and num2 `is` 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum."
      },
      {
        "input": "num = 687",
        "output": "75",
        "explanation": "We can split 687 so that `num1` is 68 and `num2` is 7, which would give an optimal sum of 75."
      }
    ],
    "constraints": [
      "`10 <= num <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2579",
    "slug": "count-total-number-of-colored-cells",
    "title": "Count Total Number of Colored Cells",
    "difficulty": "Medium",
    "description": "There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer `n`, indicating that you must do the following routine for `n` minutes: *  At the first minute, color **any** arbitrary unit cell blue. *  Every minute thereafter, color blue **every** uncolored cell that touches a blue cell. Below is a pictorial representation of the state of the grid after minutes 1, 2, and 3. Return _the number of **colored cells** at the end of_ `n` _minutes_.",
    "examples": [
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "After 1 minute, there is only 1 blue cell, so we return 1."
      },
      {
        "input": "n = 2",
        "output": "5",
        "explanation": "After 2 minutes, there are 4 colored cells on the boundary and 1 in the center, so we return 5."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2580",
    "slug": "count-ways-to-group-overlapping-ranges",
    "title": "Count Ways to Group Overlapping Ranges",
    "difficulty": "Medium",
    "description": "You are given a 2D integer array `ranges` where `ranges[i] = [starti, endi]` denotes that all integers between `starti` and `endi` (both **inclusive**) are contained in the `ith` range. You are to split `ranges` into **two** (possibly empty) groups such that: *  Each range belongs to exactly one group. *  Any two **overlapping** ranges must belong to the **same** group. Two ranges are said to be **overlapping** if there exists at least **one** integer that is present in both ranges. *  For example, `[1, 3]` and `[2, 5]` are overlapping because `2` and `3` occur in both ranges. Return _the **total number** of ways to split_ `ranges` _into two groups_. Since the answer may be very large, return it **modulo** `109 + 7`.",
    "examples": [
      {
        "input": "ranges = \\[\\[6,10\\],\\[5,15\\]\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "ranges = \\[\\[1,3\\],\\[10,20\\],\\[2,5\\],\\[4,8\\]\\]",
        "output": "4",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= ranges.length <= 105`",
      "`ranges[i].length == 2`",
      "`0 <= starti <= endi <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2581",
    "slug": "count-number-of-possible-root-nodes",
    "title": "Count Number of Possible Root Nodes",
    "difficulty": "Hard",
    "description": "Alice has an undirected tree with `n` nodes labeled from `0` to `n - 1`. The tree is represented as a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. Alice wants Bob to find the root of the tree. She allows Bob to make several **guesses** about her tree. In one guess, he does the following: *  Chooses two **distinct** integers `u` and `v` such that there exists an edge `[u, v]` in the tree. *  He tells Alice that `u` is the **parent** of `v` in the tree. Bob's guesses are represented by a 2D integer array `guesses` where `guesses[j] = [uj, vj]` indicates Bob guessed `uj` to be the parent of `vj`. Alice being lazy, does not reply to each of Bob's guesses, but just says that **at least** `k` of his guesses are `true`. Given the 2D integer arrays `edges`, `guesses` and the integer `k`, return _the **number of possible nodes** that can be the root of Alice's tree_. If there is no such tree, return `0`.",
    "examples": [
      {
        "input": "edges = \\[\\[0,1\\],\\[1,2\\],\\[1,3\\],\\[4,2\\]\\], guesses = \\[\\[1,3\\],\\[0,1\\],\\[1,0\\],\\[2,4\\]\\], k = 3",
        "output": "3",
        "explanation": ""
      },
      {
        "input": "edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[3,4\\]\\], guesses = \\[\\[1,0\\],\\[3,4\\],\\[2,1\\],\\[3,2\\]\\], k = 1",
        "output": "5",
        "explanation": ""
      }
    ],
    "constraints": [
      "`edges.length == n - 1`",
      "`2 <= n <= 105`",
      "`1 <= guesses.length <= 105`",
      "`0 <= ai, bi, uj, vj <= n - 1`",
      "`ai != bi`",
      "`uj != vj`",
      "`edges` represents a valid tree.",
      "`guesses[j]` is an edge of the tree.",
      "`guesses` is unique.",
      "`0 <= k <= guesses.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2582",
    "slug": "pass-the-pillow",
    "title": "Pass the Pillow",
    "difficulty": "Easy",
    "description": "There are `n` people standing in a line labeled from `1` to `n`. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction. *  For example, once the pillow reaches the `nth` person they pass it to the `n - 1th` person, then to the `n - 2th` person and so on. Given the two positive integers `n` and `time`, return _the index of the person holding the pillow after_ `time` _seconds_.",
    "examples": [
      {
        "input": "n = 4, time = 5",
        "output": "2",
        "explanation": "People pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2."
      },
      {
        "input": "n = 3, time = 2",
        "output": "3",
        "explanation": "People pass the pillow in the following way: 1 -> 2 -> 3."
      }
    ],
    "constraints": [
      "`2 <= n <= 1000`",
      "`1 <= time <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2583",
    "slug": "kth-largest-sum-in-a-binary-tree",
    "title": "Kth Largest Sum in a Binary Tree",
    "difficulty": "Medium",
    "description": "You are given the `root` of a binary tree and a positive integer `k`. The **level sum** in the tree is the sum of the values of the nodes that are on the **same** level. Return _the_ `kth` _**largest** level sum in the tree (not necessarily distinct)_. If there are fewer than `k` levels in the tree, return `-1`. **Note** that two nodes are on the same level if they have the same distance from the root.",
    "examples": [
      {
        "input": "root = \\[5,8,9,2,1,3,7,4,6\\], k = 2",
        "output": "13",
        "explanation": "The level sums are the following:"
      },
      {
        "input": "root = \\[1,2,null,3\\], k = 1",
        "output": "3",
        "explanation": "The largest level sum is 3."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is `n`.",
      "`2 <= n <= 105`",
      "`1 <= Node.val <= 106`",
      "`1 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2584",
    "slug": "split-the-array-to-make-coprime-products",
    "title": "Split the Array to Make Coprime Products",
    "difficulty": "Hard",
    "description": "You are given a **0-indexed** integer array `nums` of length `n`. A **split** at an index `i` where `0 <= i <= n - 2` is called **valid** if the product of the first `i + 1` elements and the product of the remaining elements are coprime. *  For example, if `nums = [2, 3, 3]`, then a split at the index `i = 0` is valid because `2` and `9` are coprime, while a split at the index `i = 1` is not valid because `6` and `3` are not coprime. A split at the index `i = 2` is not valid because `i == n - 1`. Return _the smallest index_ `i` _at which the array can be split validly or_ `-1` _if there is no such split_. Two values `val1` and `val2` are coprime if `gcd(val1, val2) == 1` where `gcd(val1, val2)` is the greatest common divisor of `val1` and `val2`.",
    "examples": [
      {
        "input": "nums = \\[4,7,8,15,3,5\\]",
        "output": "2",
        "explanation": "The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i."
      },
      {
        "input": "nums = \\[4,7,15,8,3,5\\]",
        "output": "-1",
        "explanation": "The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`1 <= n <= 104`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2585",
    "slug": "number-of-ways-to-earn-points",
    "title": "Number of Ways to Earn Points",
    "difficulty": "Hard",
    "description": "There is a test that has `n` types of questions. You are given an integer `target` and a **0-indexed** 2D integer array `types` where `types[i] = [counti, marksi]` indicates that there are `counti` questions of the `ith` type, and each one of them is worth `marksi` points. Return _the number of ways you can earn **exactly**_ `target` _points in the exam_. Since the answer may be too large, return it **modulo** `109 + 7`. **Note** that questions of the same type are indistinguishable. *  For example, if there are `3` questions of the same type, then solving the `1st` and `2nd` questions is the same as solving the `1st` and `3rd` questions, or the `2nd` and `3rd` questions.",
    "examples": [
      {
        "input": "target = 6, types = \\[\\[6,1\\],\\[3,2\\],\\[2,3\\]\\]",
        "output": "7",
        "explanation": "You can earn 6 points in one of the seven ways:"
      },
      {
        "input": "target = 5, types = \\[\\[50,1\\],\\[50,2\\],\\[50,5\\]\\]",
        "output": "4",
        "explanation": "You can earn 5 points in one of the four ways:"
      },
      {
        "input": "target = 18, types = \\[\\[6,1\\],\\[3,2\\],\\[2,3\\]\\]",
        "output": "1",
        "explanation": "You can only earn 18 points by answering all questions."
      }
    ],
    "constraints": [
      "`1 <= target <= 1000`",
      "`n == types.length`",
      "`1 <= n <= 50`",
      "`types[i].length == 2`",
      "`1 <= counti, marksi <= 50`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2586",
    "slug": "count-the-number-of-vowel-strings-in-range",
    "title": "Count the Number of Vowel Strings in Range",
    "difficulty": "Easy",
    "description": "You are given a **0-indexed** array of string `words` and two integers `left` and `right`. A string is called a **vowel string** if it starts with a vowel character and ends with a vowel character where vowel characters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`. Return _the number of vowel strings_ `words[i]` _where_ `i` _belongs to the inclusive range_ `[left, right]`.",
    "examples": [
      {
        "input": "words = \\[ \"are \", \"amy \", \"u \"\\], left = 0, right = 2",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "words = \\[ \"hey \", \"aeo \", \"mu \", \"ooo \", \"artro \"\\], left = 1, right = 4",
        "output": "3",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= words.length <= 1000`",
      "`1 <= words[i].length <= 10`",
      "`words[i]` consists of only lowercase English letters.",
      "`0 <= left <= right < words.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2587",
    "slug": "rearrange-array-to-maximize-prefix-score",
    "title": "Rearrange Array to Maximize Prefix Score",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. You can rearrange the elements of `nums` to **any order** (including the given order). Let `prefix` be the array containing the prefix sums of `nums` after rearranging it. In other words, `prefix[i]` is the sum of the elements from `0` to `i` in `nums` after rearranging it. The **score** of `nums` is the number of positive integers in the array `prefix`. Return _the maximum score you can achieve_.",
    "examples": [
      {
        "input": "nums = \\[2,-1,0,1,-3,3,-3\\]",
        "output": "6",
        "explanation": "We can rearrange the array into nums = \\[2,3,1,-1,-3,0,-3\\]."
      },
      {
        "input": "nums = \\[-2,-3,0\\]",
        "output": "0",
        "explanation": "Any rearrangement of the array will result in a score of 0."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-106 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2588",
    "slug": "count-the-number-of-beautiful-subarrays",
    "title": "Count the Number of Beautiful Subarrays",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. In one operation, you can: *  Choose two different indices `i` and `j` such that `0 <= i, j < nums.length`. *  Choose a non-negative integer `k` such that the `kth` bit (**0-indexed**) in the binary representation of `nums[i]` and `nums[j]` is `1`. *  Subtract `2k` from `nums[i]` and `nums[j]`. A subarray is **beautiful** if it is possible to make all of its elements equal to `0` after applying the above operation any number of times. Return _the number of **beautiful subarrays** in the array_ `nums`. A subarray is a contiguous **non-empty** sequence of elements within an array.",
    "examples": [
      {
        "input": "nums = \\[4,3,1,2,4\\]",
        "output": "2",
        "explanation": "There are 2 beautiful subarrays in nums: \\[4,3,1,2,4\\] and \\[4,3,1,2,4\\]."
      },
      {
        "input": "nums = \\[1,10,4\\]",
        "output": "0",
        "explanation": "There are no beautiful subarrays in nums."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2589",
    "slug": "minimum-time-to-complete-all-tasks",
    "title": "Minimum Time to Complete All Tasks",
    "difficulty": "Hard",
    "description": "There is a computer that can run an unlimited number of tasks **at the same time**. You are given a 2D integer array `tasks` where `tasks[i] = [starti, endi, durationi]` indicates that the `ith` task should run for a total of `durationi` seconds (not necessarily continuous) within the **inclusive** time range `[starti, endi]`. You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle. Return _the minimum time during which the computer should be turned on to complete all tasks_.",
    "examples": [
      {
        "input": "tasks = \\[\\[2,3,1\\],\\[4,5,1\\],\\[1,5,2\\]\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "tasks = \\[\\[1,3,2\\],\\[2,5,3\\],\\[5,6,2\\]\\]",
        "output": "4",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= tasks.length <= 2000`",
      "`tasks[i].length == 3`",
      "`1 <= starti, endi <= 2000`",
      "`1 <= durationi <= endi - starti + 1`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2590",
    "slug": "design-a-todo-list",
    "title": "Design a Todo List",
    "difficulty": "Medium",
    "description": "Design a Todo List Where users can add **tasks**, mark them as **complete**, or get a list of pending tasks. Users can also add **tags** to tasks and can filter the tasks by certain tags. Implement the `TodoList` class: *  `TodoList()` Initializes the object. *  `int addTask(int userId, String taskDescription, int dueDate, List tags)` Adds a task for the user with the ID `userId` with a due date equal to `dueDate` and a list of tags attached to the task. The return value is the ID of the task. This ID starts at `1` and is **sequentially** increasing. That is, the first task's id should be `1`, the second task's id should be `2`, and so on. *  `List getAllTasks(int userId)` Returns a list of all the tasks not marked as complete for the user with ID `userId`, ordered by the due date. You should return an empty list if the user has no uncompleted tasks. *  `List getTasksForTag(int userId, String tag)` Returns a list of all the tasks that are not marked as complete for the user with the ID `userId` and have `tag` as one of their tags, ordered by their due date. Return an empty list if no such task exists. *  `void completeTask(int userId, int taskId)` Marks the task with the ID `taskId` as completed only if the task exists and the user with the ID `userId` has this task, and it is uncompleted.",
    "examples": [],
    "constraints": [
      "`1 <= userId, taskId, dueDate <= 100`",
      "`0 <= tags.length <= 100`",
      "`1 <= taskDescription.length <= 50`",
      "`1 <= tags[i].length, tag.length <= 20`",
      "All `dueDate` values are unique.",
      "All the strings consist of lowercase and uppercase English letters and digits.",
      "At most `100` calls will be made for each method."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2591",
    "slug": "distribute-money-to-maximum-children",
    "title": "Distribute Money to Maximum Children",
    "difficulty": "Easy",
    "description": "You are given an integer `money` denoting the amount of money (in dollars) that you have and another integer `children` denoting the number of children that you must distribute the money to. You have to distribute the money according to the following rules: *  All money must be distributed. *  Everyone must receive at least `1` dollar. *  Nobody receives `4` dollars. Return _the **maximum** number of children who may receive **exactly**_ `8` _dollars if you distribute the money according to the aforementioned rules_. If there is no way to distribute the money, return `-1`.",
    "examples": [
      {
        "input": "money = 20, children = 3",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "money = 16, children = 2",
        "output": "2",
        "explanation": "Each child can be given 8 dollars."
      }
    ],
    "constraints": [
      "`1 <= money <= 200`",
      "`2 <= children <= 30`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2592",
    "slug": "maximize-greatness-of-an-array",
    "title": "Maximize Greatness of an Array",
    "difficulty": "Medium",
    "description": "You are given a 0-indexed integer array `nums`. You are allowed to permute `nums` into a new array `perm` of your choosing. We define the **greatness** of `nums` be the number of indices `0 <= i < nums.length` for which `perm[i] > nums[i]`. Return _the **maximum** possible greatness you can achieve after permuting_ `nums`.",
    "examples": [
      {
        "input": "nums = \\[1,3,5,2,1,3,1\\]",
        "output": "4",
        "explanation": "One of the optimal rearrangements is perm = \\[2,5,1,3,3,1,1\\]."
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "3",
        "explanation": "We can prove the optimal perm is \\[2,3,4,1\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`0 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2593",
    "slug": "find-score-of-an-array-after-marking-all-elements",
    "title": "Find Score of an Array After Marking All Elements",
    "difficulty": "Medium",
    "description": "You are given an array `nums` consisting of positive integers. Starting with `score = 0`, apply the following algorithm: *  Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index. *  Add the value of the chosen integer to `score`. *  Mark **the chosen element and its two adjacent elements if they exist**. *  Repeat until all the array elements are marked. Return _the score you get after applying the above algorithm_.",
    "examples": [
      {
        "input": "nums = \\[2,1,3,4,5,2\\]",
        "output": "7",
        "explanation": "We mark the elements as follows:"
      },
      {
        "input": "nums = \\[2,3,5,1,3,2\\]",
        "output": "5",
        "explanation": "We mark the elements as follows:"
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`1 <= nums[i] <= 106`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2594",
    "slug": "minimum-time-to-repair-cars",
    "title": "Minimum Time to Repair Cars",
    "difficulty": "Medium",
    "description": "You are given an integer array `ranks` representing the **ranks** of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank `r` can repair n cars in `r * n2` minutes. You are also given an integer `cars` representing the total number of cars waiting in the garage to be repaired. Return _the **minimum** time taken to repair all the cars._",
    "examples": [
      {
        "input": "ranks = \\[4,2,3,1\\], cars = 10",
        "output": "16",
        "explanation": ""
      },
      {
        "input": "ranks = \\[5,1,8\\], cars = 6",
        "output": "16",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= ranks.length <= 105`",
      "`1 <= ranks[i] <= 100`",
      "`1 <= cars <= 106`"
    ],
    "note": "All the mechanics can repair the cars simultaneously.",
    "follow_up": null
  },
  {
    "id": "2595",
    "slug": "number-of-even-and-odd-bits",
    "title": "Number of Even and Odd Bits",
    "difficulty": "Easy",
    "description": "You are given a **positive** integer `n`. Let `even` denote the number of even indices in the binary representation of `n` (**0-indexed**) with value `1`. Let `odd` denote the number of odd indices in the binary representation of `n` (**0-indexed**) with value `1`. Return _an integer array_ `answer` _where_ `answer = [even, odd]`.",
    "examples": [
      {
        "input": "n = 17",
        "output": "\\[2,0\\]",
        "explanation": "The binary representation of 17 is 10001."
      },
      {
        "input": "n = 2",
        "output": "\\[0,1\\]",
        "explanation": "The binary representation of 2 is 10."
      }
    ],
    "constraints": [
      "`1 <= n <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2596",
    "slug": "check-knight-tour-configuration",
    "title": "Check Knight Tour Configuration",
    "difficulty": "Medium",
    "description": "There is a knight on an `n x n` chessboard. In a valid configuration, the knight starts **at the top-left cell** of the board and visits every cell on the board **exactly once**. You are given an `n x n` integer matrix `grid` consisting of distinct integers from the range `[0, n * n - 1]` where `grid[row][col]` indicates that the cell `(row, col)` is the `grid[row][col]th` cell that the knight visited. The moves are **0-indexed**. Return `true` _if_ `grid` _represents a valid configuration of the knight's movements or_ `false` _otherwise_. **Note** that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.",
    "examples": [
      {
        "input": "grid = \\[\\[0,11,16,5,20\\],\\[17,4,19,10,15\\],\\[12,1,8,21,6\\],\\[3,18,23,14,9\\],\\[24,13,2,7,22\\]\\]",
        "output": "true",
        "explanation": "The above diagram represents the grid. It can be shown that it is a valid configuration."
      },
      {
        "input": "grid = \\[\\[0,3,6\\],\\[5,8,1\\],\\[2,7,4\\]\\]",
        "output": "false",
        "explanation": "The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move."
      }
    ],
    "constraints": [
      "`n == grid.length == grid[i].length`",
      "`3 <= n <= 7`",
      "`0 <= grid[row][col] < n  n`",
      "All integers in `grid` are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2597",
    "slug": "the-number-of-beautiful-subsets",
    "title": "The Number of Beautiful Subsets",
    "difficulty": "Medium",
    "description": "You are given an array `nums` of positive integers and a **positive** integer `k`. A subset of `nums` is **beautiful** if it does not contain two integers with an absolute difference equal to `k`. Return _the number of **non-empty beautiful** subsets of the array_ `nums`. A **subset** of `nums` is an array that can be obtained by deleting some (possibly none) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.",
    "examples": [
      {
        "input": "nums = \\[2,4,6\\], k = 2",
        "output": "4",
        "explanation": "The beautiful subsets of the array nums are: \\[2\\], \\[4\\], \\[6\\], \\[2, 6\\]."
      },
      {
        "input": "nums = \\[1\\], k = 1",
        "output": "1",
        "explanation": "The beautiful subset of the array nums is \\[1\\]."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 20`",
      "`1 <= nums[i], k <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2598",
    "slug": "smallest-missing-non-negative-integer-after-operations",
    "title": "Smallest Missing Non-negative Integer After Operations",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` and an integer `value`. In one operation, you can add or subtract `value` from any element of `nums`. *  For example, if `nums = [1,2,3]` and `value = 2`, you can choose to subtract `value` from `nums[0]` to make `nums = [-1,2,3]`. The MEX (minimum excluded) of an array is the smallest missing **non-negative** integer in it. *  For example, the MEX of `[-1,2,3]` is `0` while the MEX of `[1,0,3]` is `2`. Return _the maximum MEX of_ `nums` _after applying the mentioned operation **any number of times**_.",
    "examples": [
      {
        "input": "nums = \\[1,-10,7,13,6,8\\], value = 5",
        "output": "4",
        "explanation": "One can achieve this result by applying the following operations:"
      },
      {
        "input": "nums = \\[1,-10,7,13,6,8\\], value = 7",
        "output": "2",
        "explanation": "One can achieve this result by applying the following operation:"
      }
    ],
    "constraints": [
      "`1 <= nums.length, value <= 105`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2599",
    "slug": "make-the-prefix-sum-non-negative",
    "title": "Make the Prefix Sum Non-negative",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums`. You can apply the following operation any number of times: *  Pick any element from `nums` and put it at the end of `nums`. The prefix sum array of `nums` is an array `prefix` of the same length as `nums` such that `prefix[i]` is the sum of all the integers `nums[j]` where `j` is in the inclusive range `[0, i]`. Return _the minimum number of operations such that the prefix sum array does not contain negative integers_. The test cases are generated such that it is always possible to make the prefix sum array non-negative.",
    "examples": [
      {
        "input": "nums = \\[2,3,-5,4\\]",
        "output": "0",
        "explanation": "we do not need to do any operations."
      },
      {
        "input": "nums = \\[3,-5,-2,6\\]",
        "output": "1",
        "explanation": "we can do one operation on index 1."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 105`",
      "`-109 <= nums[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2600",
    "slug": "k-items-with-the-maximum-sum",
    "title": "K Items With the Maximum Sum",
    "difficulty": "Easy",
    "description": "There is a bag that consists of items, each item has a number `1`, `0`, or `-1` written on it. You are given four **non-negative** integers `numOnes`, `numZeros`, `numNegOnes`, and `k`. The bag initially contains: *  `numOnes` items with `1`s written on them. *  `numZeroes` items with `0`s written on them. *  `numNegOnes` items with `-1`s written on them. We want to pick exactly `k` items among the available items. Return _the **maximum** possible sum of numbers written on the items_.",
    "examples": [
      {
        "input": "numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2",
        "output": "2",
        "explanation": "We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2."
      },
      {
        "input": "numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4",
        "output": "3",
        "explanation": "We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3."
      }
    ],
    "constraints": [
      "`0 <= numOnes, numZeros, numNegOnes <= 50`",
      "`0 <= k <= numOnes + numZeros + numNegOnes`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2601",
    "slug": "prime-subtraction-operation",
    "title": "Prime Subtraction Operation",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `nums` of length `n`. You can perform the following operation as many times as you want: *  Pick an index `i` that you haven't picked before, and pick a prime `p` **strictly less than** `nums[i]`, then subtract `p` from `nums[i]`. Return _true if you can make `nums` a strictly increasing array using the above operation and false otherwise._ A **strictly increasing array** is an array whose each element is strictly greater than its preceding element.",
    "examples": [
      {
        "input": "nums = \\[4,9,6,10\\]",
        "output": "true",
        "explanation": "In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums\\[0\\], so that nums becomes \\[1,9,6,10\\]."
      },
      {
        "input": "nums = \\[6,8,11,12\\]",
        "output": "true",
        "explanation": "Initially nums is sorted in strictly increasing order, so we don't need to make any operations."
      },
      {
        "input": "nums = \\[5,8,3\\]",
        "output": "false",
        "explanation": "It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 1000`",
      "`1 <= nums[i] <= 1000`",
      "`nums.length == n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2602",
    "slug": "minimum-operations-to-make-all-array-elements-equal",
    "title": "Minimum Operations to Make All Array Elements Equal",
    "difficulty": "Medium",
    "description": "You are given an array `nums` consisting of positive integers. You are also given an integer array `queries` of size `m`. For the `ith` query, you want to make all of the elements of `nums` equal to `queries[i]`. You can perform the following operation on the array **any** number of times: *  **Increase** or **decrease** an element of the array by `1`. Return _an array_ `answer` _of size_ `m` _where_ `answer[i]` _is the **minimum** number of operations to make all elements of_ `nums` _equal to_ `queries[i]`. **Note** that after each query the array is reset to its original state.",
    "examples": [
      {
        "input": "nums = \\[3,1,6,8\\], queries = \\[1,5\\]",
        "output": "\\[14,10\\]",
        "explanation": "For the first query we can do the following operations:"
      },
      {
        "input": "nums = \\[2,9,6,3\\], queries = \\[10\\]",
        "output": "\\[20\\]",
        "explanation": "We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20."
      }
    ],
    "constraints": [
      "`n == nums.length`",
      "`m == queries.length`",
      "`1 <= n, m <= 105`",
      "`1 <= nums[i], queries[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2603",
    "slug": "collect-coins-in-a-tree",
    "title": "Collect Coins in a Tree",
    "difficulty": "Hard",
    "description": "There exists an undirected and unrooted tree with `n` nodes indexed from `0` to `n - 1`. You are given an integer `n` and a 2D integer array edges of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. You are also given an array `coins` of size `n` where `coins[i]` can be either `0` or `1`, where `1` indicates the presence of a coin in the vertex `i`. Initially, you choose to start at any vertex in the tree. Then, you can perform the following operations any number of times: *  Collect all the coins that are at a distance of at most `2` from the current vertex, or *  Move to any adjacent vertex in the tree. Find _the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex_. Note that if you pass an edge several times, you need to count it into the answer several times.",
    "examples": [
      {
        "input": "coins = \\[1,0,0,0,0,1\\], edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,5\\]\\]",
        "output": "2",
        "explanation": "Start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5 then move back to vertex 2."
      },
      {
        "input": "coins = \\[0,0,0,1,1,0,0,1\\], edges = \\[\\[0,1\\],\\[0,2\\],\\[1,3\\],\\[1,4\\],\\[2,5\\],\\[5,6\\],\\[5,7\\]\\]",
        "output": "2",
        "explanation": "Start at vertex 0, collect the coins at vertices 4 and 3, move to vertex 2,  collect the coin at vertex 7, then move back to vertex 0."
      }
    ],
    "constraints": [
      "`n == coins.length`",
      "`1 <= n <= 3  104`",
      "`0 <= coins[i] <= 1`",
      "`edges.length == n - 1`",
      "`edges[i].length == 2`",
      "`0 <= ai, bi < n`",
      "`ai != bi`",
      "`edges` represents a valid tree."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2604",
    "slug": "minimum-time-to-eat-all-grains",
    "title": "Minimum Time to Eat All Grains",
    "difficulty": "Hard",
    "description": "There are `n` hens and `m` grains on a line. You are given the initial positions of the hens and the grains in two integer arrays `hens` and `grains` of size `n` and `m` respectively. Any hen can eat a grain if they are on the same position. The time taken for this is negligible. One hen can also eat multiple grains. In `1` second, a hen can move right or left by `1` unit. The hens can move simultaneously and independently of each other. Return _the **minimum** time to eat all grains if the hens act optimally._",
    "examples": [
      {
        "input": "hens = \\[3,6,7\\], grains = \\[2,4,7,9\\]",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "hens = \\[4,6,109,111,213,215\\], grains = \\[5,110,214\\]",
        "output": "1",
        "explanation": ""
      }
    ],
    "constraints": [
      "`1 <= hens.length, grains.length <= 2104`",
      "`0 <= hens[i], grains[j] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2605",
    "slug": "form-smallest-number-from-two-digit-arrays",
    "title": "Form Smallest Number From Two Digit Arrays",
    "difficulty": "Easy",
    "description": "Given two arrays of **unique** digits `nums1` and `nums2`, return _the **smallest** number that contains **at least** one digit from each array_.",
    "examples": [
      {
        "input": "nums1 = \\[4,1,3\\], nums2 = \\[5,7\\]",
        "output": "15",
        "explanation": "The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have."
      },
      {
        "input": "nums1 = \\[3,5,2,6\\], nums2 = \\[3,1,7\\]",
        "output": "3",
        "explanation": "The number 3 contains the digit 3 which exists in both arrays."
      }
    ],
    "constraints": [
      "`1 <= nums1.length, nums2.length <= 9`",
      "`1 <= nums1[i], nums2[i] <= 9`",
      "All digits in each array are unique."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2606",
    "slug": "find-the-substring-with-maximum-cost",
    "title": "Find the Substring With Maximum Cost",
    "difficulty": "Medium",
    "description": "You are given a string `s`, a string `chars` of **distinct** characters and an integer array `vals` of the same length as `chars`. The **cost of the substring** is the sum of the values of each character in the substring. The cost of an empty string is considered `0`. The **value of the character** is defined in the following way: *  If the character is not in the string `chars`, then its value is its corresponding position **(1-indexed)** in the alphabet. *  For example, the value of `'a'` is `1`, the value of `'b'` is `2`, and so on. The value of `'z'` is `26`. *  Otherwise, assuming `i` is the index where the character occurs in the string `chars`, then its value is `vals[i]`. Return _the maximum cost among all substrings of the string_ `s`.",
    "examples": [
      {
        "input": "s =  \"adaa \", chars =  \"d \", vals = \\[-1000\\]",
        "output": "2",
        "explanation": "The value of the characters  \"a \" and  \"d \" is 1 and -1000 respectively."
      },
      {
        "input": "s =  \"abc \", chars =  \"abc \", vals = \\[-1,-1,-1\\]",
        "output": "0",
        "explanation": "The value of the characters  \"a \",  \"b \" and  \"c \" is -1, -1, and -1 respectively."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 105`",
      "`s` consist of lowercase English letters.",
      "`1 <= chars.length <= 26`",
      "`chars` consist of distinct lowercase English letters.",
      "`vals.length == chars.length`",
      "`-1000 <= vals[i] <= 1000`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2607",
    "slug": "make-k-subarray-sums-equal",
    "title": "Make K-Subarray Sums Equal",
    "difficulty": "Medium",
    "description": "You are given a **0-indexed** integer array `arr` and an integer `k`. The array `arr` is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element. You can do the following operation any number of times: *  Pick any element from `arr` and increase or decrease it by `1`. Return _the minimum number of operations such that the sum of each **subarray** of length_ `k` _is equal_. A **subarray** is a contiguous part of the array.",
    "examples": [
      {
        "input": "arr = \\[1,4,1,3\\], k = 2",
        "output": "1",
        "explanation": "we can do one operation on index 1 to make its value equal to 3."
      },
      {
        "input": "arr = \\[2,5,5,7\\], k = 3",
        "output": "5",
        "explanation": "we can do three operations on index 0 to make its value equal to 5 and two operations on index 3 to make its value equal to 5."
      }
    ],
    "constraints": [
      "`1 <= k <= arr.length <= 105`",
      "`1 <= arr[i] <= 109`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2608",
    "slug": "shortest-cycle-in-a-graph",
    "title": "Shortest Cycle in a Graph",
    "difficulty": "Hard",
    "description": "There is a **bi-directional** graph with `n` vertices, where each vertex is labeled from `0` to `n - 1`. The edges in the graph are represented by a given 2D integer array `edges`, where `edges[i] = [ui, vi]` denotes an edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. Return _the length of the **shortest** cycle in the graph_. If no cycle exists, return `-1`. A cycle is a path that starts and ends at the same node, and each edge in the path is used only once.",
    "examples": [
      {
        "input": "n = 7, edges = \\[\\[0,1\\],\\[1,2\\],\\[2,0\\],\\[3,4\\],\\[4,5\\],\\[5,6\\],\\[6,3\\]\\]",
        "output": "3",
        "explanation": "The cycle with the smallest length is : 0 -> 1 -> 2 -> 0"
      },
      {
        "input": "n = 4, edges = \\[\\[0,1\\],\\[0,2\\]\\]",
        "output": "-1",
        "explanation": "There are no cycles in this graph."
      }
    ],
    "constraints": [
      "`2 <= n <= 1000`",
      "`1 <= edges.length <= 1000`",
      "`edges[i].length == 2`",
      "`0 <= ui, vi < n`",
      "`ui != vi`",
      "There are no repeated edges."
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2609",
    "slug": "find-the-longest-balanced-substring-of-a-binary-string",
    "title": "Find the Longest Balanced Substring of a Binary String",
    "difficulty": "Easy",
    "description": "You are given a binary string `s` consisting only of zeroes and ones. A substring of `s` is considered balanced if **all zeroes are before ones** and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring. Return _the length of the longest balanced substring of_ `s`. A **substring** is a contiguous sequence of characters within a string.",
    "examples": [
      {
        "input": "s =  \"01000111 \"",
        "output": "6",
        "explanation": "The longest balanced substring is  \"000111 \", which has length 6."
      },
      {
        "input": "s =  \"00111 \"",
        "output": "4",
        "explanation": "The longest balanced substring is  \"0011 \", which has length 4."
      },
      {
        "input": "s =  \"111 \"",
        "output": "0",
        "explanation": "There is no balanced substring except the empty substring, so the answer is 0."
      }
    ],
    "constraints": [
      "`1 <= s.length <= 50`",
      "`'0' <= s[i] <= '1'`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2610",
    "slug": "convert-an-array-into-a-2d-array-with-conditions",
    "title": "Convert an Array Into a 2D Array With Conditions",
    "difficulty": "Medium",
    "description": "You are given an integer array `nums`. You need to create a 2D array from `nums` satisfying the following conditions: *  The 2D array should contain **only** the elements of the array `nums`. *  Each row in the 2D array contains **distinct** integers. *  The number of rows in the 2D array should be **minimal**. Return _the resulting array_. If there are multiple answers, return any of them. **Note** that the 2D array can have a different number of elements on each row.",
    "examples": [
      {
        "input": "nums = \\[1,3,4,1,2,3,1\\]",
        "output": "\\[\\[1,3,4,2\\],\\[1,3\\],\\[1\\]\\]",
        "explanation": "We can create a 2D array that contains the following rows:"
      },
      {
        "input": "nums = \\[1,2,3,4\\]",
        "output": "\\[\\[4,3,2,1\\]\\]",
        "explanation": "All elements of the array are distinct, so we can keep all of them in the first row of the 2D array."
      }
    ],
    "constraints": [
      "`1 <= nums.length <= 200`",
      "`1 <= nums[i] <= nums.length`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2611",
    "slug": "mice-and-cheese",
    "title": "Mice and Cheese",
    "difficulty": "Medium",
    "description": "There are two mice and `n` different types of cheese, each type of cheese should be eaten by exactly one mouse. A point of the cheese with index `i` (**0-indexed**) is: *  `reward1[i]` if the first mouse eats it. *  `reward2[i]` if the second mouse eats it. You are given a positive integer array `reward1`, a positive integer array `reward2`, and a non-negative integer `k`. Return _**the maximum** points the mice can achieve if the first mouse eats exactly_ `k` _types of cheese._",
    "examples": [
      {
        "input": "reward1 = \\[1,1,3,4\\], reward2 = \\[4,4,1,1\\], k = 2",
        "output": "15",
        "explanation": "In this example, the first mouse eats the 2nd (0-indexed) and the 3rd types of cheese, and the second mouse eats the 0th and the 1st types of cheese."
      },
      {
        "input": "reward1 = \\[1,1\\], reward2 = \\[1,1\\], k = 2",
        "output": "2",
        "explanation": "In this example, the first mouse eats the 0th (0-indexed) and 1st types of cheese, and the second mouse does not eat any cheese."
      }
    ],
    "constraints": [
      "`1 <= n == reward1.length == reward2.length <= 105`",
      "`1 <= reward1[i], reward2[i] <= 1000`",
      "`0 <= k <= n`"
    ],
    "note": null,
    "follow_up": null
  },
  {
    "id": "2612",
    "slug": "minimum-reverse-operations",
    "title": "Minimum Reverse Operations",
    "difficulty": "Hard",
    "description": "You are given an integer `n` and an integer `p` in the range `[0, n - 1]`. Representing a **0-indexed** array `arr` of length `n` where all positions are set to `0`'s, except position `p` which is set to `1`. You are also given an integer array `banned` containing some positions from the array. For the **i****th** position in `banned`, `arr[banned[i]] = 0`, and `banned[i] != p`. You can perform **multiple** operations on `arr`. In an operation, you can choose a **subarray** with size `k` and **reverse** the subarray. However, the `1` in `arr` should never go to any of the positions in `banned`. In other words, after each operation `arr[banned[i]]` **remains** `0`. _Return an array_ `ans` _where_ _for each_ `i` _from_ `[0, n - 1]`, `ans[i]` _is the **minimum** number of reverse operations needed to bring the_ `1` _to position_ `i` _in arr_, _or_ `-1` _if it is impossible_. *  A **subarray** is a contiguous **non-empty** sequence of elements within an array. *  The values of `ans[i]` are independent for all `i`'s. *  The **reverse** of an array is an array containing the values in **reverse order**.",
    "examples": [
      {
        "input": "n = 4, p = 0, banned = \\[1,2\\], k = 4",
        "output": "\\[0,-1,-1,1\\]",
        "explanation": "In this case `k = 4` so there is only one possible reverse operation we can perform, which is reversing the whole array. Initially, 1 is placed at position 0 so the amount of operations we need for position 0 is `0`. We can never place a 1 on the banned positions, so the answer for positions 1 and 2 is `-1`. Finally, with one reverse operation we can bring the 1 to index 3, so the answer for position 3 is `1`."
      },
      {
        "input": "n = 5, p = 0, banned = \\[2,4\\], k = 3",
        "output": "\\[0,-1,-1,-1,-1\\]",
        "explanation": "In this case the 1 is initially at position 0, so the answer for that position is `0`. We can perform reverse operations of size 3. The 1 is currently located at position 0, so we need to reverse the subarray `[0, 2]` for it to leave that position, but reversing that subarray makes position 2 have a 1, which shouldn't happen. So, we can't move the 1 from position 0, making the result for all the other positions `-1`."
      },
      {
        "input": "n = 4, p = 2, banned = \\[0,1,3\\], k = 1",
        "output": "\\[-1,-1,0,-1\\]",
        "explanation": "In this case we can only perform reverse operations of size 1. So the 1 never changes its position."
      }
    ],
    "constraints": [
      "`1 <= n <= 105`",
      "`0 <= p <= n - 1`",
      "`0 <= banned.length <= n - 1`",
      "`0 <= banned[i] <= n - 1`",
      "`1 <= k <= n`",
      "`banned[i] != p`",
      "all values in `banned` are unique"
    ],
    "note": null,
    "follow_up": null
  }
]